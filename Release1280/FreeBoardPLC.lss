
FreeBoardPLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000476  00800200  00008f26  00008fba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008f26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b24  00800676  00800676  00009430  2**0
                  ALLOC
  3 .stab         00013794  00000000  00000000  00009430  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001e99e  00000000  00000000  0001cbc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0003b562  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__dtors_end>
       4:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_1>
       8:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_2>
       c:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_3>
      10:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_4>
      14:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_5>
      18:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_6>
      1c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__vector_7>
      20:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__vector_8>
      24:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      28:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      2c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      30:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      34:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      38:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      3c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__vector_15>
      40:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      44:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      48:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      4c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      50:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      54:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      58:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      5c:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__vector_23>
      60:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      64:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_25>
      68:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_26>
      6c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      70:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      74:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      78:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      7c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      80:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      84:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      88:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      8c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      90:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_36>
      94:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_37>
      98:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      9c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      a0:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      a4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      a8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      ac:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      b0:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      b4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      b8:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <__vector_46>
      bc:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__vector_47>
      c0:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__vector_48>
      c4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      c8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      cc:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_51>
      d0:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_52>
      d4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      d8:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_54>
      dc:	0c 94 18 04 	jmp	0x830	; 0x830 <__vector_55>
      e0:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

0000012f <digital_pin_to_timer_PGM>:
     12f:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     15b:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000175 <digital_pin_to_bit_mask_PGM>:
     175:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     185:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     195:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b5:	04 08 10 20 40 80                                   ... @.

000001bb <digital_pin_to_port_PGM>:
     1bb:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1cb:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1db:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1eb:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1fb:	0b 0b 0b 0b 0b 0b                                   ......

00000201 <port_to_input_PGM>:
     201:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     211:	00 01 00 00 03 01 06 01 09 01                       ..........

0000021b <port_to_output_PGM>:
     21b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     22b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000235 <port_to_mode_PGM>:
     235:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     245:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000024f <pstr_inf>:
     24f:	49 4e 46                                            INF

00000252 <pstr_inity>:
     252:	49 4e 49 54 59                                      INITY

00000257 <pstr_nan>:
     257:	4e 41 4e                                            NAN

0000025a <pwr_p10>:
     25a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     26a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000272 <pwr_m10>:
     272:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     282:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028a <__ctors_start>:
     28a:	ca 32       	cpi	r28, 0x2A	; 42
     28c:	01 37       	cpi	r16, 0x71	; 113
     28e:	6e 3e       	cpi	r22, 0xEE	; 238
     290:	95 3e       	cpi	r25, 0xE5	; 229

00000292 <__ctors_end>:
     292:	30 33       	cpi	r19, 0x30	; 48

00000294 <__dtors_end>:
     294:	11 24       	eor	r1, r1
     296:	1f be       	out	0x3f, r1	; 63
     298:	cf ef       	ldi	r28, 0xFF	; 255
     29a:	d1 e2       	ldi	r29, 0x21	; 33
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	cd bf       	out	0x3d, r28	; 61

000002a0 <__do_copy_data>:
     2a0:	16 e0       	ldi	r17, 0x06	; 6
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b2 e0       	ldi	r27, 0x02	; 2
     2a6:	e6 e2       	ldi	r30, 0x26	; 38
     2a8:	ff e8       	ldi	r31, 0x8F	; 143
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	0b bf       	out	0x3b, r16	; 59
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__do_copy_data+0x14>
     2b0:	07 90       	elpm	r0, Z+
     2b2:	0d 92       	st	X+, r0
     2b4:	a6 37       	cpi	r26, 0x76	; 118
     2b6:	b1 07       	cpc	r27, r17
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <__do_copy_data+0x10>

000002ba <__do_clear_bss>:
     2ba:	11 e1       	ldi	r17, 0x11	; 17
     2bc:	a6 e7       	ldi	r26, 0x76	; 118
     2be:	b6 e0       	ldi	r27, 0x06	; 6
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <.do_clear_bss_start>

000002c2 <.do_clear_bss_loop>:
     2c2:	1d 92       	st	X+, r1

000002c4 <.do_clear_bss_start>:
     2c4:	aa 39       	cpi	r26, 0x9A	; 154
     2c6:	b1 07       	cpc	r27, r17
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <.do_clear_bss_loop>

000002ca <__do_global_ctors>:
     2ca:	12 e0       	ldi	r17, 0x02	; 2
     2cc:	c2 e9       	ldi	r28, 0x92	; 146
     2ce:	d2 e0       	ldi	r29, 0x02	; 2
     2d0:	00 e0       	ldi	r16, 0x00	; 0
     2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <__do_global_ctors+0x16>
     2d4:	22 97       	sbiw	r28, 0x02	; 2
     2d6:	01 09       	sbc	r16, r1
     2d8:	fe 01       	movw	r30, r28
     2da:	0b bf       	out	0x3b, r16	; 59
     2dc:	0e 94 26 44 	call	0x884c	; 0x884c <__tablejump_elpm__>
     2e0:	ca 38       	cpi	r28, 0x8A	; 138
     2e2:	d1 07       	cpc	r29, r17
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	08 07       	cpc	r16, r24
     2e8:	a9 f7       	brne	.-22     	; 0x2d4 <__do_global_ctors+0xa>
     2ea:	0e 94 e1 3f 	call	0x7fc2	; 0x7fc2 <main>
     2ee:	0c 94 81 47 	jmp	0x8f02	; 0x8f02 <__do_global_dtors>

000002f2 <__bad_interrupt>:
     2f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002f6 <_ZN14HardwareSerial9availableEv>:
     2f6:	fc 01       	movw	r30, r24
     2f8:	84 85       	ldd	r24, Z+12	; 0x0c
     2fa:	95 85       	ldd	r25, Z+13	; 0x0d
     2fc:	fc 01       	movw	r30, r24
     2fe:	e0 5c       	subi	r30, 0xC0	; 192
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	20 81       	ld	r18, Z
     304:	31 81       	ldd	r19, Z+1	; 0x01
     306:	fc 01       	movw	r30, r24
     308:	ee 5b       	subi	r30, 0xBE	; 190
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	28 1b       	sub	r18, r24
     312:	39 0b       	sbc	r19, r25
     314:	2f 73       	andi	r18, 0x3F	; 63
     316:	33 27       	eor	r19, r19
     318:	c9 01       	movw	r24, r18
     31a:	08 95       	ret

0000031c <_ZN14HardwareSerial4peekEv>:
     31c:	fc 01       	movw	r30, r24
     31e:	84 85       	ldd	r24, Z+12	; 0x0c
     320:	95 85       	ldd	r25, Z+13	; 0x0d
     322:	fc 01       	movw	r30, r24
     324:	e0 5c       	subi	r30, 0xC0	; 192
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	40 81       	ld	r20, Z
     32a:	51 81       	ldd	r21, Z+1	; 0x01
     32c:	fc 01       	movw	r30, r24
     32e:	ee 5b       	subi	r30, 0xBE	; 190
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	42 17       	cp	r20, r18
     338:	53 07       	cpc	r21, r19
     33a:	41 f0       	breq	.+16     	; 0x34c <_ZN14HardwareSerial4peekEv+0x30>
     33c:	01 90       	ld	r0, Z+
     33e:	f0 81       	ld	r31, Z
     340:	e0 2d       	mov	r30, r0
     342:	e8 0f       	add	r30, r24
     344:	f9 1f       	adc	r31, r25
     346:	20 81       	ld	r18, Z
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	02 c0       	rjmp	.+4      	; 0x350 <_ZN14HardwareSerial4peekEv+0x34>
     34c:	2f ef       	ldi	r18, 0xFF	; 255
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	c9 01       	movw	r24, r18
     352:	08 95       	ret

00000354 <_ZN14HardwareSerial4readEv>:
     354:	fc 01       	movw	r30, r24
     356:	84 85       	ldd	r24, Z+12	; 0x0c
     358:	95 85       	ldd	r25, Z+13	; 0x0d
     35a:	fc 01       	movw	r30, r24
     35c:	e0 5c       	subi	r30, 0xC0	; 192
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	40 81       	ld	r20, Z
     362:	51 81       	ldd	r21, Z+1	; 0x01
     364:	fc 01       	movw	r30, r24
     366:	ee 5b       	subi	r30, 0xBE	; 190
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	20 81       	ld	r18, Z
     36c:	31 81       	ldd	r19, Z+1	; 0x01
     36e:	42 17       	cp	r20, r18
     370:	53 07       	cpc	r21, r19
     372:	71 f0       	breq	.+28     	; 0x390 <_ZN14HardwareSerial4readEv+0x3c>
     374:	a0 81       	ld	r26, Z
     376:	b1 81       	ldd	r27, Z+1	; 0x01
     378:	a8 0f       	add	r26, r24
     37a:	b9 1f       	adc	r27, r25
     37c:	2c 91       	ld	r18, X
     37e:	80 81       	ld	r24, Z
     380:	91 81       	ldd	r25, Z+1	; 0x01
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	8f 73       	andi	r24, 0x3F	; 63
     386:	99 27       	eor	r25, r25
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <_ZN14HardwareSerial4readEv+0x40>
     390:	2f ef       	ldi	r18, 0xFF	; 255
     392:	3f ef       	ldi	r19, 0xFF	; 255
     394:	c9 01       	movw	r24, r18
     396:	08 95       	ret

00000398 <_ZN14HardwareSerial5flushEv>:
     398:	fc 01       	movw	r30, r24
     39a:	81 a1       	ldd	r24, Z+33	; 0x21
     39c:	88 23       	and	r24, r24
     39e:	29 f0       	breq	.+10     	; 0x3aa <_ZN14HardwareSerial5flushEv+0x12>
     3a0:	a4 89       	ldd	r26, Z+20	; 0x14
     3a2:	b5 89       	ldd	r27, Z+21	; 0x15
     3a4:	8c 91       	ld	r24, X
     3a6:	86 ff       	sbrs	r24, 6
     3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <_ZN14HardwareSerial5flushEv+0x8>
     3aa:	11 a2       	std	Z+33, r1	; 0x21
     3ac:	08 95       	ret

000003ae <_ZN14HardwareSerial5writeEh>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	fc 01       	movw	r30, r24
     3b4:	26 85       	ldd	r18, Z+14	; 0x0e
     3b6:	37 85       	ldd	r19, Z+15	; 0x0f
     3b8:	d9 01       	movw	r26, r18
     3ba:	a0 5c       	subi	r26, 0xC0	; 192
     3bc:	bf 4f       	sbci	r27, 0xFF	; 255
     3be:	8d 91       	ld	r24, X+
     3c0:	9c 91       	ld	r25, X
     3c2:	11 97       	sbiw	r26, 0x01	; 1
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	8f 73       	andi	r24, 0x3F	; 63
     3c8:	99 27       	eor	r25, r25
     3ca:	e9 01       	movw	r28, r18
     3cc:	ce 5b       	subi	r28, 0xBE	; 190
     3ce:	df 4f       	sbci	r29, 0xFF	; 255
     3d0:	48 81       	ld	r20, Y
     3d2:	59 81       	ldd	r21, Y+1	; 0x01
     3d4:	84 17       	cp	r24, r20
     3d6:	95 07       	cpc	r25, r21
     3d8:	d9 f3       	breq	.-10     	; 0x3d0 <_ZN14HardwareSerial5writeEh+0x22>
     3da:	0d 90       	ld	r0, X+
     3dc:	bc 91       	ld	r27, X
     3de:	a0 2d       	mov	r26, r0
     3e0:	a2 0f       	add	r26, r18
     3e2:	b3 1f       	adc	r27, r19
     3e4:	6c 93       	st	X, r22
     3e6:	a6 85       	ldd	r26, Z+14	; 0x0e
     3e8:	b7 85       	ldd	r27, Z+15	; 0x0f
     3ea:	a0 5c       	subi	r26, 0xC0	; 192
     3ec:	bf 4f       	sbci	r27, 0xFF	; 255
     3ee:	11 96       	adiw	r26, 0x01	; 1
     3f0:	9c 93       	st	X, r25
     3f2:	8e 93       	st	-X, r24
     3f4:	a6 89       	ldd	r26, Z+22	; 0x16
     3f6:	b7 89       	ldd	r27, Z+23	; 0x17
     3f8:	2c 91       	ld	r18, X
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	07 8c       	ldd	r0, Z+31	; 0x1f
     400:	02 c0       	rjmp	.+4      	; 0x406 <_ZN14HardwareSerial5writeEh+0x58>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <_ZN14HardwareSerial5writeEh+0x54>
     40a:	28 2b       	or	r18, r24
     40c:	2c 93       	st	X, r18
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	81 a3       	std	Z+33, r24	; 0x21
     412:	04 88       	ldd	r0, Z+20	; 0x14
     414:	f5 89       	ldd	r31, Z+21	; 0x15
     416:	e0 2d       	mov	r30, r0
     418:	80 81       	ld	r24, Z
     41a:	80 64       	ori	r24, 0x40	; 64
     41c:	80 83       	st	Z, r24
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <_ZN14HardwareSerial6write9Ehb>:
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	fc 01       	movw	r30, r24
     436:	26 85       	ldd	r18, Z+14	; 0x0e
     438:	37 85       	ldd	r19, Z+15	; 0x0f
     43a:	d9 01       	movw	r26, r18
     43c:	a0 5c       	subi	r26, 0xC0	; 192
     43e:	bf 4f       	sbci	r27, 0xFF	; 255
     440:	8d 91       	ld	r24, X+
     442:	9c 91       	ld	r25, X
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	8f 73       	andi	r24, 0x3F	; 63
     44a:	99 27       	eor	r25, r25
     44c:	89 01       	movw	r16, r18
     44e:	0e 5b       	subi	r16, 0xBE	; 190
     450:	1f 4f       	sbci	r17, 0xFF	; 255
     452:	e8 01       	movw	r28, r16
     454:	e8 80       	ld	r14, Y
     456:	f9 80       	ldd	r15, Y+1	; 0x01
     458:	8e 15       	cp	r24, r14
     45a:	9f 05       	cpc	r25, r15
     45c:	d1 f3       	breq	.-12     	; 0x452 <_ZN14HardwareSerial6write9Ehb+0x2a>
     45e:	0d 90       	ld	r0, X+
     460:	bc 91       	ld	r27, X
     462:	a0 2d       	mov	r26, r0
     464:	a2 0f       	add	r26, r18
     466:	b3 1f       	adc	r27, r19
     468:	6c 93       	st	X, r22
     46a:	a6 85       	ldd	r26, Z+14	; 0x0e
     46c:	b7 85       	ldd	r27, Z+15	; 0x0f
     46e:	a0 5c       	subi	r26, 0xC0	; 192
     470:	bf 4f       	sbci	r27, 0xFF	; 255
     472:	11 96       	adiw	r26, 0x01	; 1
     474:	9c 93       	st	X, r25
     476:	8e 93       	st	-X, r24
     478:	a6 89       	ldd	r26, Z+22	; 0x16
     47a:	b7 89       	ldd	r27, Z+23	; 0x17
     47c:	8c 91       	ld	r24, X
     47e:	44 23       	and	r20, r20
     480:	11 f0       	breq	.+4      	; 0x486 <_ZN14HardwareSerial6write9Ehb+0x5e>
     482:	81 60       	ori	r24, 0x01	; 1
     484:	01 c0       	rjmp	.+2      	; 0x488 <_ZN14HardwareSerial6write9Ehb+0x60>
     486:	8e 7f       	andi	r24, 0xFE	; 254
     488:	8c 93       	st	X, r24
     48a:	a6 89       	ldd	r26, Z+22	; 0x16
     48c:	b7 89       	ldd	r27, Z+23	; 0x17
     48e:	2c 91       	ld	r18, X
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	07 8c       	ldd	r0, Z+31	; 0x1f
     496:	02 c0       	rjmp	.+4      	; 0x49c <_ZN14HardwareSerial6write9Ehb+0x74>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	0a 94       	dec	r0
     49e:	e2 f7       	brpl	.-8      	; 0x498 <_ZN14HardwareSerial6write9Ehb+0x70>
     4a0:	28 2b       	or	r18, r24
     4a2:	2c 93       	st	X, r18
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	81 a3       	std	Z+33, r24	; 0x21
     4a8:	04 88       	ldd	r0, Z+20	; 0x14
     4aa:	f5 89       	ldd	r31, Z+21	; 0x15
     4ac:	e0 2d       	mov	r30, r0
     4ae:	80 81       	ld	r24, Z
     4b0:	80 64       	ori	r24, 0x40	; 64
     4b2:	80 83       	st	Z, r24
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	08 95       	ret
     4c6:	08 95       	ret

000004c8 <__vector_25>:
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	0b b6       	in	r0, 0x3b	; 59
     4d4:	0f 92       	push	r0
     4d6:	1b be       	out	0x3b, r1	; 59
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
     4f0:	80 91 c0 00 	lds	r24, 0x00C0
     4f4:	82 fd       	sbrc	r24, 2
     4f6:	07 c0       	rjmp	.+14     	; 0x506 <__vector_25+0x3e>
     4f8:	80 91 c6 00 	lds	r24, 0x00C6
     4fc:	6a ed       	ldi	r22, 0xDA	; 218
     4fe:	78 e0       	ldi	r23, 0x08	; 8
     500:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_Z10store_charhP11ring_buffer>
     504:	02 c0       	rjmp	.+4      	; 0x50a <__vector_25+0x42>
     506:	80 91 c6 00 	lds	r24, 0x00C6
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0b be       	out	0x3b, r0	; 59
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti
     530:	08 95       	ret

00000532 <__vector_36>:
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	0b b6       	in	r0, 0x3b	; 59
     53e:	0f 92       	push	r0
     540:	1b be       	out	0x3b, r1	; 59
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
     55a:	80 91 c8 00 	lds	r24, 0x00C8
     55e:	82 fd       	sbrc	r24, 2
     560:	07 c0       	rjmp	.+14     	; 0x570 <__vector_36+0x3e>
     562:	80 91 ce 00 	lds	r24, 0x00CE
     566:	62 e5       	ldi	r22, 0x52	; 82
     568:	78 e0       	ldi	r23, 0x08	; 8
     56a:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_Z10store_charhP11ring_buffer>
     56e:	02 c0       	rjmp	.+4      	; 0x574 <__vector_36+0x42>
     570:	80 91 ce 00 	lds	r24, 0x00CE
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti
     59a:	08 95       	ret

0000059c <__vector_51>:
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	0b b6       	in	r0, 0x3b	; 59
     5a8:	0f 92       	push	r0
     5aa:	1b be       	out	0x3b, r1	; 59
     5ac:	2f 93       	push	r18
     5ae:	3f 93       	push	r19
     5b0:	4f 93       	push	r20
     5b2:	5f 93       	push	r21
     5b4:	6f 93       	push	r22
     5b6:	7f 93       	push	r23
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	af 93       	push	r26
     5be:	bf 93       	push	r27
     5c0:	ef 93       	push	r30
     5c2:	ff 93       	push	r31
     5c4:	80 91 d0 00 	lds	r24, 0x00D0
     5c8:	82 fd       	sbrc	r24, 2
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <__vector_51+0x3e>
     5cc:	80 91 d6 00 	lds	r24, 0x00D6
     5d0:	6a ec       	ldi	r22, 0xCA	; 202
     5d2:	77 e0       	ldi	r23, 0x07	; 7
     5d4:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_Z10store_charhP11ring_buffer>
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_51+0x42>
     5da:	80 91 d6 00 	lds	r24, 0x00D6
     5de:	ff 91       	pop	r31
     5e0:	ef 91       	pop	r30
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	0f 90       	pop	r0
     5f8:	0b be       	out	0x3b, r0	; 59
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti
     604:	08 95       	ret

00000606 <__vector_54>:
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	1b be       	out	0x3b, r1	; 59
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
     62e:	80 91 30 01 	lds	r24, 0x0130
     632:	82 fd       	sbrc	r24, 2
     634:	07 c0       	rjmp	.+14     	; 0x644 <__vector_54+0x3e>
     636:	80 91 36 01 	lds	r24, 0x0136
     63a:	62 e4       	ldi	r22, 0x42	; 66
     63c:	77 e0       	ldi	r23, 0x07	; 7
     63e:	0e 94 7c 3e 	call	0x7cf8	; 0x7cf8 <_Z10store_charhP11ring_buffer>
     642:	02 c0       	rjmp	.+4      	; 0x648 <__vector_54+0x42>
     644:	80 91 36 01 	lds	r24, 0x0136
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <_Z14serialEventRunv>:
     66e:	8c ed       	ldi	r24, 0xDC	; 220
     670:	96 e0       	ldi	r25, 0x06	; 6
     672:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     676:	89 2b       	or	r24, r25
     678:	11 f0       	breq	.+4      	; 0x67e <_Z14serialEventRunv+0x10>
     67a:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <_Z11serialEventv>
     67e:	8a eb       	ldi	r24, 0xBA	; 186
     680:	96 e0       	ldi	r25, 0x06	; 6
     682:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     686:	89 2b       	or	r24, r25
     688:	11 f0       	breq	.+4      	; 0x68e <_Z14serialEventRunv+0x20>
     68a:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <_Z12serialEvent1v>
     68e:	88 e9       	ldi	r24, 0x98	; 152
     690:	96 e0       	ldi	r25, 0x06	; 6
     692:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     696:	89 2b       	or	r24, r25
     698:	11 f0       	breq	.+4      	; 0x69e <_Z14serialEventRunv+0x30>
     69a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <_Z12serialEvent2v>
     69e:	86 e7       	ldi	r24, 0x76	; 118
     6a0:	96 e0       	ldi	r25, 0x06	; 6
     6a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     6a6:	89 2b       	or	r24, r25
     6a8:	11 f0       	breq	.+4      	; 0x6ae <_Z14serialEventRunv+0x40>
     6aa:	0c 94 57 2f 	jmp	0x5eae	; 0x5eae <_Z12serialEvent3v>
     6ae:	08 95       	ret

000006b0 <__vector_26>:
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	0b b6       	in	r0, 0x3b	; 59
     6bc:	0f 92       	push	r0
     6be:	1b be       	out	0x3b, r1	; 59
     6c0:	2f 93       	push	r18
     6c2:	3f 93       	push	r19
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
     6cc:	20 91 d6 08 	lds	r18, 0x08D6
     6d0:	30 91 d7 08 	lds	r19, 0x08D7
     6d4:	80 91 d8 08 	lds	r24, 0x08D8
     6d8:	90 91 d9 08 	lds	r25, 0x08D9
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	31 f4       	brne	.+12     	; 0x6ee <__vector_26+0x3e>
     6e2:	80 91 c1 00 	lds	r24, 0x00C1
     6e6:	8f 7d       	andi	r24, 0xDF	; 223
     6e8:	80 93 c1 00 	sts	0x00C1, r24
     6ec:	14 c0       	rjmp	.+40     	; 0x716 <__vector_26+0x66>
     6ee:	e0 91 d8 08 	lds	r30, 0x08D8
     6f2:	f0 91 d9 08 	lds	r31, 0x08D9
     6f6:	ea 56       	subi	r30, 0x6A	; 106
     6f8:	f7 4f       	sbci	r31, 0xF7	; 247
     6fa:	20 81       	ld	r18, Z
     6fc:	80 91 d8 08 	lds	r24, 0x08D8
     700:	90 91 d9 08 	lds	r25, 0x08D9
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	8f 73       	andi	r24, 0x3F	; 63
     708:	99 27       	eor	r25, r25
     70a:	90 93 d9 08 	sts	0x08D9, r25
     70e:	80 93 d8 08 	sts	0x08D8, r24
     712:	20 93 c6 00 	sts	0x00C6, r18
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0b be       	out	0x3b, r0	; 59
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <__vector_37>:
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	0b b6       	in	r0, 0x3b	; 59
     73c:	0f 92       	push	r0
     73e:	1b be       	out	0x3b, r1	; 59
     740:	2f 93       	push	r18
     742:	3f 93       	push	r19
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
     74c:	20 91 4e 08 	lds	r18, 0x084E
     750:	30 91 4f 08 	lds	r19, 0x084F
     754:	80 91 50 08 	lds	r24, 0x0850
     758:	90 91 51 08 	lds	r25, 0x0851
     75c:	28 17       	cp	r18, r24
     75e:	39 07       	cpc	r19, r25
     760:	31 f4       	brne	.+12     	; 0x76e <__vector_37+0x3e>
     762:	80 91 c9 00 	lds	r24, 0x00C9
     766:	8f 7d       	andi	r24, 0xDF	; 223
     768:	80 93 c9 00 	sts	0x00C9, r24
     76c:	14 c0       	rjmp	.+40     	; 0x796 <__vector_37+0x66>
     76e:	e0 91 50 08 	lds	r30, 0x0850
     772:	f0 91 51 08 	lds	r31, 0x0851
     776:	e2 5f       	subi	r30, 0xF2	; 242
     778:	f7 4f       	sbci	r31, 0xF7	; 247
     77a:	20 81       	ld	r18, Z
     77c:	80 91 50 08 	lds	r24, 0x0850
     780:	90 91 51 08 	lds	r25, 0x0851
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	8f 73       	andi	r24, 0x3F	; 63
     788:	99 27       	eor	r25, r25
     78a:	90 93 51 08 	sts	0x0851, r25
     78e:	80 93 50 08 	sts	0x0850, r24
     792:	20 93 ce 00 	sts	0x00CE, r18
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	3f 91       	pop	r19
     7a0:	2f 91       	pop	r18
     7a2:	0f 90       	pop	r0
     7a4:	0b be       	out	0x3b, r0	; 59
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <__vector_52>:
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	1b be       	out	0x3b, r1	; 59
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
     7cc:	20 91 c6 07 	lds	r18, 0x07C6
     7d0:	30 91 c7 07 	lds	r19, 0x07C7
     7d4:	80 91 c8 07 	lds	r24, 0x07C8
     7d8:	90 91 c9 07 	lds	r25, 0x07C9
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	31 f4       	brne	.+12     	; 0x7ee <__vector_52+0x3e>
     7e2:	80 91 d1 00 	lds	r24, 0x00D1
     7e6:	8f 7d       	andi	r24, 0xDF	; 223
     7e8:	80 93 d1 00 	sts	0x00D1, r24
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <__vector_52+0x66>
     7ee:	e0 91 c8 07 	lds	r30, 0x07C8
     7f2:	f0 91 c9 07 	lds	r31, 0x07C9
     7f6:	ea 57       	subi	r30, 0x7A	; 122
     7f8:	f8 4f       	sbci	r31, 0xF8	; 248
     7fa:	20 81       	ld	r18, Z
     7fc:	80 91 c8 07 	lds	r24, 0x07C8
     800:	90 91 c9 07 	lds	r25, 0x07C9
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	8f 73       	andi	r24, 0x3F	; 63
     808:	99 27       	eor	r25, r25
     80a:	90 93 c9 07 	sts	0x07C9, r25
     80e:	80 93 c8 07 	sts	0x07C8, r24
     812:	20 93 d6 00 	sts	0x00D6, r18
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0b be       	out	0x3b, r0	; 59
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <__vector_55>:
     830:	1f 92       	push	r1
     832:	0f 92       	push	r0
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	0f 92       	push	r0
     838:	11 24       	eor	r1, r1
     83a:	0b b6       	in	r0, 0x3b	; 59
     83c:	0f 92       	push	r0
     83e:	1b be       	out	0x3b, r1	; 59
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31
     84c:	20 91 3e 07 	lds	r18, 0x073E
     850:	30 91 3f 07 	lds	r19, 0x073F
     854:	80 91 40 07 	lds	r24, 0x0740
     858:	90 91 41 07 	lds	r25, 0x0741
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	31 f4       	brne	.+12     	; 0x86e <__vector_55+0x3e>
     862:	80 91 31 01 	lds	r24, 0x0131
     866:	8f 7d       	andi	r24, 0xDF	; 223
     868:	80 93 31 01 	sts	0x0131, r24
     86c:	14 c0       	rjmp	.+40     	; 0x896 <__vector_55+0x66>
     86e:	e0 91 40 07 	lds	r30, 0x0740
     872:	f0 91 41 07 	lds	r31, 0x0741
     876:	e2 50       	subi	r30, 0x02	; 2
     878:	f9 4f       	sbci	r31, 0xF9	; 249
     87a:	20 81       	ld	r18, Z
     87c:	80 91 40 07 	lds	r24, 0x0740
     880:	90 91 41 07 	lds	r25, 0x0741
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	8f 73       	andi	r24, 0x3F	; 63
     888:	99 27       	eor	r25, r25
     88a:	90 93 41 07 	sts	0x0741, r25
     88e:	80 93 40 07 	sts	0x0740, r24
     892:	20 93 36 01 	sts	0x0136, r18
     896:	ff 91       	pop	r31
     898:	ef 91       	pop	r30
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0b be       	out	0x3b, r0	; 59
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
     8b0:	4f 92       	push	r4
     8b2:	5f 92       	push	r5
     8b4:	6f 92       	push	r6
     8b6:	7f 92       	push	r7
     8b8:	8f 92       	push	r8
     8ba:	9f 92       	push	r9
     8bc:	af 92       	push	r10
     8be:	bf 92       	push	r11
     8c0:	cf 92       	push	r12
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	fc 01       	movw	r30, r24
     8d6:	13 82       	std	Z+3, r1	; 0x03
     8d8:	12 82       	std	Z+2, r1	; 0x02
     8da:	88 ee       	ldi	r24, 0xE8	; 232
     8dc:	48 2e       	mov	r4, r24
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	58 2e       	mov	r5, r24
     8e2:	61 2c       	mov	r6, r1
     8e4:	71 2c       	mov	r7, r1
     8e6:	44 82       	std	Z+4, r4	; 0x04
     8e8:	55 82       	std	Z+5, r5	; 0x05
     8ea:	66 82       	std	Z+6, r6	; 0x06
     8ec:	77 82       	std	Z+7, r7	; 0x07
     8ee:	8b e5       	ldi	r24, 0x5B	; 91
     8f0:	96 e0       	ldi	r25, 0x06	; 6
     8f2:	91 83       	std	Z+1, r25	; 0x01
     8f4:	80 83       	st	Z, r24
     8f6:	75 87       	std	Z+13, r23	; 0x0d
     8f8:	64 87       	std	Z+12, r22	; 0x0c
     8fa:	57 87       	std	Z+15, r21	; 0x0f
     8fc:	46 87       	std	Z+14, r20	; 0x0e
     8fe:	31 8b       	std	Z+17, r19	; 0x11
     900:	20 8b       	std	Z+16, r18	; 0x10
     902:	13 8b       	std	Z+19, r17	; 0x13
     904:	02 8b       	std	Z+18, r16	; 0x12
     906:	f5 8a       	std	Z+21, r15	; 0x15
     908:	e4 8a       	std	Z+20, r14	; 0x14
     90a:	d7 8a       	std	Z+23, r13	; 0x17
     90c:	c6 8a       	std	Z+22, r12	; 0x16
     90e:	b1 8e       	std	Z+25, r11	; 0x19
     910:	a0 8e       	std	Z+24, r10	; 0x18
     912:	93 8e       	std	Z+27, r9	; 0x1b
     914:	82 8e       	std	Z+26, r8	; 0x1a
     916:	8b 89       	ldd	r24, Y+19	; 0x13
     918:	84 8f       	std	Z+28, r24	; 0x1c
     91a:	8c 89       	ldd	r24, Y+20	; 0x14
     91c:	85 8f       	std	Z+29, r24	; 0x1d
     91e:	8d 89       	ldd	r24, Y+21	; 0x15
     920:	86 8f       	std	Z+30, r24	; 0x1e
     922:	8e 89       	ldd	r24, Y+22	; 0x16
     924:	87 8f       	std	Z+31, r24	; 0x1f
     926:	8f 89       	ldd	r24, Y+23	; 0x17
     928:	80 a3       	std	Z+32, r24	; 0x20
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	bf 90       	pop	r11
     93c:	af 90       	pop	r10
     93e:	9f 90       	pop	r9
     940:	8f 90       	pop	r8
     942:	7f 90       	pop	r7
     944:	6f 90       	pop	r6
     946:	5f 90       	pop	r5
     948:	4f 90       	pop	r4
     94a:	08 95       	ret

0000094c <_ZN14HardwareSerial5beginEm>:
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	6a 01       	movw	r12, r20
     95c:	7b 01       	movw	r14, r22
     95e:	41 15       	cp	r20, r1
     960:	81 ee       	ldi	r24, 0xE1	; 225
     962:	58 07       	cpc	r21, r24
     964:	61 05       	cpc	r22, r1
     966:	71 05       	cpc	r23, r1
     968:	f9 f0       	breq	.+62     	; 0x9a8 <_ZN14HardwareSerial5beginEm+0x5c>
     96a:	ec 89       	ldd	r30, Y+20	; 0x14
     96c:	fd 89       	ldd	r31, Y+21	; 0x15
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	08 a0       	ldd	r0, Y+32	; 0x20
     974:	02 c0       	rjmp	.+4      	; 0x97a <_ZN14HardwareSerial5beginEm+0x2e>
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	0a 94       	dec	r0
     97c:	e2 f7       	brpl	.-8      	; 0x976 <_ZN14HardwareSerial5beginEm+0x2a>
     97e:	80 83       	st	Z, r24
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	79 e0       	ldi	r23, 0x09	; 9
     984:	8d e3       	ldi	r24, 0x3D	; 61
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a7 01       	movw	r20, r14
     98a:	96 01       	movw	r18, r12
     98c:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
     990:	21 50       	subi	r18, 0x01	; 1
     992:	31 09       	sbc	r19, r1
     994:	41 09       	sbc	r20, r1
     996:	51 09       	sbc	r21, r1
     998:	56 95       	lsr	r21
     99a:	47 95       	ror	r20
     99c:	37 95       	ror	r19
     99e:	27 95       	ror	r18
     9a0:	21 15       	cp	r18, r1
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	38 07       	cpc	r19, r24
     9a6:	98 f0       	brcs	.+38     	; 0x9ce <_ZN14HardwareSerial5beginEm+0x82>
     9a8:	ec 89       	ldd	r30, Y+20	; 0x14
     9aa:	fd 89       	ldd	r31, Y+21	; 0x15
     9ac:	10 82       	st	Z, r1
     9ae:	60 e8       	ldi	r22, 0x80	; 128
     9b0:	74 e8       	ldi	r23, 0x84	; 132
     9b2:	8e e1       	ldi	r24, 0x1E	; 30
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a7 01       	movw	r20, r14
     9b8:	96 01       	movw	r18, r12
     9ba:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
     9be:	21 50       	subi	r18, 0x01	; 1
     9c0:	31 09       	sbc	r19, r1
     9c2:	41 09       	sbc	r20, r1
     9c4:	51 09       	sbc	r21, r1
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	e8 89       	ldd	r30, Y+16	; 0x10
     9d0:	f9 89       	ldd	r31, Y+17	; 0x11
     9d2:	30 83       	st	Z, r19
     9d4:	ea 89       	ldd	r30, Y+18	; 0x12
     9d6:	fb 89       	ldd	r31, Y+19	; 0x13
     9d8:	20 83       	st	Z, r18
     9da:	19 a2       	std	Y+33, r1	; 0x21
     9dc:	ee 89       	ldd	r30, Y+22	; 0x16
     9de:	ff 89       	ldd	r31, Y+23	; 0x17
     9e0:	40 81       	ld	r20, Z
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9c 01       	movw	r18, r24
     9e8:	0c 8c       	ldd	r0, Y+28	; 0x1c
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <_ZN14HardwareSerial5beginEm+0xa4>
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	0a 94       	dec	r0
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <_ZN14HardwareSerial5beginEm+0xa0>
     9f4:	42 2b       	or	r20, r18
     9f6:	40 83       	st	Z, r20
     9f8:	ee 89       	ldd	r30, Y+22	; 0x16
     9fa:	ff 89       	ldd	r31, Y+23	; 0x17
     9fc:	40 81       	ld	r20, Z
     9fe:	9c 01       	movw	r18, r24
     a00:	0d 8c       	ldd	r0, Y+29	; 0x1d
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <_ZN14HardwareSerial5beginEm+0xbc>
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	0a 94       	dec	r0
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <_ZN14HardwareSerial5beginEm+0xb8>
     a0c:	42 2b       	or	r20, r18
     a0e:	40 83       	st	Z, r20
     a10:	ee 89       	ldd	r30, Y+22	; 0x16
     a12:	ff 89       	ldd	r31, Y+23	; 0x17
     a14:	40 81       	ld	r20, Z
     a16:	9c 01       	movw	r18, r24
     a18:	0e 8c       	ldd	r0, Y+30	; 0x1e
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <_ZN14HardwareSerial5beginEm+0xd4>
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	0a 94       	dec	r0
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <_ZN14HardwareSerial5beginEm+0xd0>
     a24:	42 2b       	or	r20, r18
     a26:	40 83       	st	Z, r20
     a28:	ee 89       	ldd	r30, Y+22	; 0x16
     a2a:	ff 89       	ldd	r31, Y+23	; 0x17
     a2c:	20 81       	ld	r18, Z
     a2e:	0f 8c       	ldd	r0, Y+31	; 0x1f
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <_ZN14HardwareSerial5beginEm+0xea>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	0a 94       	dec	r0
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <_ZN14HardwareSerial5beginEm+0xe6>
     a3a:	80 95       	com	r24
     a3c:	82 23       	and	r24, r18
     a3e:	80 83       	st	Z, r24
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	08 95       	ret

00000a4e <_ZN14HardwareSerial5beginEmh>:
     a4e:	bf 92       	push	r11
     a50:	cf 92       	push	r12
     a52:	df 92       	push	r13
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
     a5e:	6a 01       	movw	r12, r20
     a60:	7b 01       	movw	r14, r22
     a62:	b2 2e       	mov	r11, r18
     a64:	41 15       	cp	r20, r1
     a66:	81 ee       	ldi	r24, 0xE1	; 225
     a68:	58 07       	cpc	r21, r24
     a6a:	61 05       	cpc	r22, r1
     a6c:	71 05       	cpc	r23, r1
     a6e:	f9 f0       	breq	.+62     	; 0xaae <_ZN14HardwareSerial5beginEmh+0x60>
     a70:	ec 89       	ldd	r30, Y+20	; 0x14
     a72:	fd 89       	ldd	r31, Y+21	; 0x15
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	08 a0       	ldd	r0, Y+32	; 0x20
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <_ZN14HardwareSerial5beginEmh+0x32>
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	0a 94       	dec	r0
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <_ZN14HardwareSerial5beginEmh+0x2e>
     a84:	80 83       	st	Z, r24
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	79 e0       	ldi	r23, 0x09	; 9
     a8a:	8d e3       	ldi	r24, 0x3D	; 61
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a7 01       	movw	r20, r14
     a90:	96 01       	movw	r18, r12
     a92:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	31 09       	sbc	r19, r1
     a9a:	41 09       	sbc	r20, r1
     a9c:	51 09       	sbc	r21, r1
     a9e:	56 95       	lsr	r21
     aa0:	47 95       	ror	r20
     aa2:	37 95       	ror	r19
     aa4:	27 95       	ror	r18
     aa6:	21 15       	cp	r18, r1
     aa8:	80 e1       	ldi	r24, 0x10	; 16
     aaa:	38 07       	cpc	r19, r24
     aac:	98 f0       	brcs	.+38     	; 0xad4 <_ZN14HardwareSerial5beginEmh+0x86>
     aae:	ec 89       	ldd	r30, Y+20	; 0x14
     ab0:	fd 89       	ldd	r31, Y+21	; 0x15
     ab2:	10 82       	st	Z, r1
     ab4:	60 e8       	ldi	r22, 0x80	; 128
     ab6:	74 e8       	ldi	r23, 0x84	; 132
     ab8:	8e e1       	ldi	r24, 0x1E	; 30
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a7 01       	movw	r20, r14
     abe:	96 01       	movw	r18, r12
     ac0:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
     ac4:	21 50       	subi	r18, 0x01	; 1
     ac6:	31 09       	sbc	r19, r1
     ac8:	41 09       	sbc	r20, r1
     aca:	51 09       	sbc	r21, r1
     acc:	56 95       	lsr	r21
     ace:	47 95       	ror	r20
     ad0:	37 95       	ror	r19
     ad2:	27 95       	ror	r18
     ad4:	e8 89       	ldd	r30, Y+16	; 0x10
     ad6:	f9 89       	ldd	r31, Y+17	; 0x11
     ad8:	30 83       	st	Z, r19
     ada:	ea 89       	ldd	r30, Y+18	; 0x12
     adc:	fb 89       	ldd	r31, Y+19	; 0x13
     ade:	20 83       	st	Z, r18
     ae0:	87 e0       	ldi	r24, 0x07	; 7
     ae2:	b8 12       	cpse	r11, r24
     ae4:	0a c0       	rjmp	.+20     	; 0xafa <_ZN14HardwareSerial5beginEmh+0xac>
     ae6:	e8 8d       	ldd	r30, Y+24	; 0x18
     ae8:	f9 8d       	ldd	r31, Y+25	; 0x19
     aea:	86 e0       	ldi	r24, 0x06	; 6
     aec:	80 83       	st	Z, r24
     aee:	ee 89       	ldd	r30, Y+22	; 0x16
     af0:	ff 89       	ldd	r31, Y+23	; 0x17
     af2:	80 81       	ld	r24, Z
     af4:	84 60       	ori	r24, 0x04	; 4
     af6:	80 83       	st	Z, r24
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <_ZN14HardwareSerial5beginEmh+0xbc>
     afa:	ee 89       	ldd	r30, Y+22	; 0x16
     afc:	ff 89       	ldd	r31, Y+23	; 0x17
     afe:	80 81       	ld	r24, Z
     b00:	84 70       	andi	r24, 0x04	; 4
     b02:	80 83       	st	Z, r24
     b04:	e8 8d       	ldd	r30, Y+24	; 0x18
     b06:	f9 8d       	ldd	r31, Y+25	; 0x19
     b08:	b0 82       	st	Z, r11
     b0a:	ee 89       	ldd	r30, Y+22	; 0x16
     b0c:	ff 89       	ldd	r31, Y+23	; 0x17
     b0e:	40 81       	ld	r20, Z
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	9c 01       	movw	r18, r24
     b16:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <_ZN14HardwareSerial5beginEmh+0xd0>
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	0a 94       	dec	r0
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <_ZN14HardwareSerial5beginEmh+0xcc>
     b22:	42 2b       	or	r20, r18
     b24:	40 83       	st	Z, r20
     b26:	ee 89       	ldd	r30, Y+22	; 0x16
     b28:	ff 89       	ldd	r31, Y+23	; 0x17
     b2a:	40 81       	ld	r20, Z
     b2c:	9c 01       	movw	r18, r24
     b2e:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <_ZN14HardwareSerial5beginEmh+0xe8>
     b32:	22 0f       	add	r18, r18
     b34:	33 1f       	adc	r19, r19
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <_ZN14HardwareSerial5beginEmh+0xe4>
     b3a:	42 2b       	or	r20, r18
     b3c:	40 83       	st	Z, r20
     b3e:	ee 89       	ldd	r30, Y+22	; 0x16
     b40:	ff 89       	ldd	r31, Y+23	; 0x17
     b42:	40 81       	ld	r20, Z
     b44:	9c 01       	movw	r18, r24
     b46:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <_ZN14HardwareSerial5beginEmh+0x100>
     b4a:	22 0f       	add	r18, r18
     b4c:	33 1f       	adc	r19, r19
     b4e:	0a 94       	dec	r0
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <_ZN14HardwareSerial5beginEmh+0xfc>
     b52:	42 2b       	or	r20, r18
     b54:	40 83       	st	Z, r20
     b56:	ee 89       	ldd	r30, Y+22	; 0x16
     b58:	ff 89       	ldd	r31, Y+23	; 0x17
     b5a:	20 81       	ld	r18, Z
     b5c:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <_ZN14HardwareSerial5beginEmh+0x116>
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	0a 94       	dec	r0
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <_ZN14HardwareSerial5beginEmh+0x112>
     b68:	80 95       	com	r24
     b6a:	82 23       	and	r24, r18
     b6c:	80 83       	st	Z, r24
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	08 95       	ret

00000b7e <_ZN14HardwareSerial3endEv>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	fc 01       	movw	r30, r24
     b84:	86 85       	ldd	r24, Z+14	; 0x0e
     b86:	97 85       	ldd	r25, Z+15	; 0x0f
     b88:	dc 01       	movw	r26, r24
     b8a:	a0 5c       	subi	r26, 0xC0	; 192
     b8c:	bf 4f       	sbci	r27, 0xFF	; 255
     b8e:	ec 01       	movw	r28, r24
     b90:	ce 5b       	subi	r28, 0xBE	; 190
     b92:	df 4f       	sbci	r29, 0xFF	; 255
     b94:	4d 91       	ld	r20, X+
     b96:	5c 91       	ld	r21, X
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	28 81       	ld	r18, Y
     b9c:	39 81       	ldd	r19, Y+1	; 0x01
     b9e:	42 17       	cp	r20, r18
     ba0:	53 07       	cpc	r21, r19
     ba2:	c1 f7       	brne	.-16     	; 0xb94 <_ZN14HardwareSerial3endEv+0x16>
     ba4:	a6 89       	ldd	r26, Z+22	; 0x16
     ba6:	b7 89       	ldd	r27, Z+23	; 0x17
     ba8:	4c 91       	ld	r20, X
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	9c 01       	movw	r18, r24
     bb0:	04 8c       	ldd	r0, Z+28	; 0x1c
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <_ZN14HardwareSerial3endEv+0x3a>
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	0a 94       	dec	r0
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <_ZN14HardwareSerial3endEv+0x36>
     bbc:	20 95       	com	r18
     bbe:	24 23       	and	r18, r20
     bc0:	2c 93       	st	X, r18
     bc2:	a6 89       	ldd	r26, Z+22	; 0x16
     bc4:	b7 89       	ldd	r27, Z+23	; 0x17
     bc6:	4c 91       	ld	r20, X
     bc8:	9c 01       	movw	r18, r24
     bca:	05 8c       	ldd	r0, Z+29	; 0x1d
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <_ZN14HardwareSerial3endEv+0x54>
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <_ZN14HardwareSerial3endEv+0x50>
     bd6:	20 95       	com	r18
     bd8:	24 23       	and	r18, r20
     bda:	2c 93       	st	X, r18
     bdc:	a6 89       	ldd	r26, Z+22	; 0x16
     bde:	b7 89       	ldd	r27, Z+23	; 0x17
     be0:	4c 91       	ld	r20, X
     be2:	9c 01       	movw	r18, r24
     be4:	06 8c       	ldd	r0, Z+30	; 0x1e
     be6:	02 c0       	rjmp	.+4      	; 0xbec <_ZN14HardwareSerial3endEv+0x6e>
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <_ZN14HardwareSerial3endEv+0x6a>
     bf0:	20 95       	com	r18
     bf2:	24 23       	and	r18, r20
     bf4:	2c 93       	st	X, r18
     bf6:	a6 89       	ldd	r26, Z+22	; 0x16
     bf8:	b7 89       	ldd	r27, Z+23	; 0x17
     bfa:	2c 91       	ld	r18, X
     bfc:	07 8c       	ldd	r0, Z+31	; 0x1f
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <_ZN14HardwareSerial3endEv+0x86>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <_ZN14HardwareSerial3endEv+0x82>
     c08:	80 95       	com	r24
     c0a:	82 23       	and	r24, r18
     c0c:	8c 93       	st	X, r24
     c0e:	84 85       	ldd	r24, Z+12	; 0x0c
     c10:	95 85       	ldd	r25, Z+13	; 0x0d
     c12:	fc 01       	movw	r30, r24
     c14:	ee 5b       	subi	r30, 0xBE	; 190
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	20 81       	ld	r18, Z
     c1a:	31 81       	ldd	r19, Z+1	; 0x01
     c1c:	fc 01       	movw	r30, r24
     c1e:	e0 5c       	subi	r30, 0xC0	; 192
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	31 83       	std	Z+1, r19	; 0x01
     c24:	20 83       	st	Z, r18
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <_ZN14HardwareSerialcvbEv>:
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	08 95       	ret

00000c30 <_ZN5Print5writeEPKhj>:
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	6c 01       	movw	r12, r24
     c42:	eb 01       	movw	r28, r22
     c44:	7a 01       	movw	r14, r20
     c46:	e6 0e       	add	r14, r22
     c48:	f7 1e       	adc	r15, r23
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	0b c0       	rjmp	.+22     	; 0xc66 <_ZN5Print5writeEPKhj+0x36>
     c50:	69 91       	ld	r22, Y+
     c52:	d6 01       	movw	r26, r12
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	01 90       	ld	r0, Z+
     c5a:	f0 81       	ld	r31, Z
     c5c:	e0 2d       	mov	r30, r0
     c5e:	c6 01       	movw	r24, r12
     c60:	09 95       	icall
     c62:	08 0f       	add	r16, r24
     c64:	19 1f       	adc	r17, r25
     c66:	ce 15       	cp	r28, r14
     c68:	df 05       	cpc	r29, r15
     c6a:	91 f7       	brne	.-28     	; 0xc50 <_ZN5Print5writeEPKhj+0x20>
     c6c:	c8 01       	movw	r24, r16
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	08 95       	ret

00000c80 <_ZN5Print5printEPK19__FlashStringHelper>:
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	7c 01       	movw	r14, r24
     c8e:	eb 01       	movw	r28, r22
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	fe 01       	movw	r30, r28
     c96:	21 96       	adiw	r28, 0x01	; 1
     c98:	64 91       	lpm	r22, Z+
     c9a:	66 23       	and	r22, r22
     c9c:	51 f0       	breq	.+20     	; 0xcb2 <_ZN5Print5printEPK19__FlashStringHelper+0x32>
     c9e:	f7 01       	movw	r30, r14
     ca0:	a0 81       	ld	r26, Z
     ca2:	b1 81       	ldd	r27, Z+1	; 0x01
     ca4:	ed 91       	ld	r30, X+
     ca6:	fc 91       	ld	r31, X
     ca8:	c7 01       	movw	r24, r14
     caa:	09 95       	icall
     cac:	08 0f       	add	r16, r24
     cae:	19 1f       	adc	r17, r25
     cb0:	f1 cf       	rjmp	.-30     	; 0xc94 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     cb2:	c8 01       	movw	r24, r16
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret

00000cc2 <_ZN5Print5printERK6String>:
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	7c 01       	movw	r14, r24
     cd8:	6b 01       	movw	r12, r22
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	c0 e0       	ldi	r28, 0x00	; 0
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <_ZN5Print5printERK6String+0x44>
     ce4:	d7 01       	movw	r26, r14
     ce6:	ed 91       	ld	r30, X+
     ce8:	fc 91       	ld	r31, X
     cea:	a0 80       	ld	r10, Z
     cec:	b1 80       	ldd	r11, Z+1	; 0x01
     cee:	b8 01       	movw	r22, r16
     cf0:	c6 01       	movw	r24, r12
     cf2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZNK6StringixEj>
     cf6:	68 2f       	mov	r22, r24
     cf8:	c7 01       	movw	r24, r14
     cfa:	f5 01       	movw	r30, r10
     cfc:	09 95       	icall
     cfe:	c8 0f       	add	r28, r24
     d00:	d9 1f       	adc	r29, r25
     d02:	0f 5f       	subi	r16, 0xFF	; 255
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	d6 01       	movw	r26, r12
     d08:	14 96       	adiw	r26, 0x04	; 4
     d0a:	8d 91       	ld	r24, X+
     d0c:	9c 91       	ld	r25, X
     d0e:	15 97       	sbiw	r26, 0x05	; 5
     d10:	08 17       	cp	r16, r24
     d12:	19 07       	cpc	r17, r25
     d14:	38 f3       	brcs	.-50     	; 0xce4 <_ZN5Print5printERK6String+0x22>
     d16:	ce 01       	movw	r24, r28
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	08 95       	ret

00000d2e <_ZN5Print5printEPKc>:
     d2e:	0c 94 cb 3f 	jmp	0x7f96	; 0x7f96 <_ZN5Print5writeEPKc>

00000d32 <_ZN5Print5printEc>:
     d32:	dc 01       	movw	r26, r24
     d34:	ed 91       	ld	r30, X+
     d36:	fc 91       	ld	r31, X
     d38:	01 90       	ld	r0, Z+
     d3a:	f0 81       	ld	r31, Z
     d3c:	e0 2d       	mov	r30, r0
     d3e:	09 94       	ijmp

00000d40 <_ZN5Print5printERK9Printable>:
     d40:	db 01       	movw	r26, r22
     d42:	ed 91       	ld	r30, X+
     d44:	fc 91       	ld	r31, X
     d46:	11 97       	sbiw	r26, 0x01	; 1
     d48:	01 90       	ld	r0, Z+
     d4a:	f0 81       	ld	r31, Z
     d4c:	e0 2d       	mov	r30, r0
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	09 94       	ijmp

00000d54 <_ZN5Print7printlnEv>:
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
     d5e:	6d e0       	ldi	r22, 0x0D	; 13
     d60:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
     d64:	8c 01       	movw	r16, r24
     d66:	6a e0       	ldi	r22, 0x0A	; 10
     d68:	ce 01       	movw	r24, r28
     d6a:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
     d6e:	9c 01       	movw	r18, r24
     d70:	20 0f       	add	r18, r16
     d72:	31 1f       	adc	r19, r17
     d74:	c9 01       	movw	r24, r18
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <_ZN5Print7printlnEPK19__FlashStringHelper>:
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ec 01       	movw	r28, r24
     d8a:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN5Print5printEPK19__FlashStringHelper>
     d8e:	8c 01       	movw	r16, r24
     d90:	ce 01       	movw	r24, r28
     d92:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     d96:	9c 01       	movw	r18, r24
     d98:	20 0f       	add	r18, r16
     d9a:	31 1f       	adc	r19, r17
     d9c:	c9 01       	movw	r24, r18
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <_ZN5Print7printlnERK6String>:
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	ec 01       	movw	r28, r24
     db2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN5Print5printERK6String>
     db6:	8c 01       	movw	r16, r24
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     dbe:	9c 01       	movw	r18, r24
     dc0:	20 0f       	add	r18, r16
     dc2:	31 1f       	adc	r19, r17
     dc4:	c9 01       	movw	r24, r18
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <_ZN5Print7printlnEPKc>:
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
     dda:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <_ZN5Print5writeEPKc>
     dde:	8c 01       	movw	r16, r24
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     de6:	98 01       	movw	r18, r16
     de8:	28 0f       	add	r18, r24
     dea:	39 1f       	adc	r19, r25
     dec:	c9 01       	movw	r24, r18
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <_ZN5Print7printlnEc>:
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
     e02:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
     e06:	8c 01       	movw	r16, r24
     e08:	ce 01       	movw	r24, r28
     e0a:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     e0e:	9c 01       	movw	r18, r24
     e10:	20 0f       	add	r18, r16
     e12:	31 1f       	adc	r19, r17
     e14:	c9 01       	movw	r24, r18
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <_ZN5Print7printlnERK9Printable>:
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	ec 01       	movw	r28, r24
     e2a:	0e 94 a0 06 	call	0xd40	; 0xd40 <_ZN5Print5printERK9Printable>
     e2e:	8c 01       	movw	r16, r24
     e30:	ce 01       	movw	r24, r28
     e32:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     e36:	9c 01       	movw	r18, r24
     e38:	20 0f       	add	r18, r16
     e3a:	31 1f       	adc	r19, r17
     e3c:	c9 01       	movw	r24, r18
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <_ZN5Print11printNumberEmh>:
     e48:	5f 92       	push	r5
     e4a:	6f 92       	push	r6
     e4c:	7f 92       	push	r7
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	a1 97       	sbiw	r28, 0x21	; 33
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	3c 01       	movw	r6, r24
     e78:	6a 01       	movw	r12, r20
     e7a:	7b 01       	movw	r14, r22
     e7c:	52 2e       	mov	r5, r18
     e7e:	19 a2       	std	Y+33, r1	; 0x21
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	82 17       	cp	r24, r18
     e84:	10 f0       	brcs	.+4      	; 0xe8a <_ZN5Print11printNumberEmh+0x42>
     e86:	8a e0       	ldi	r24, 0x0A	; 10
     e88:	58 2e       	mov	r5, r24
     e8a:	8e 01       	movw	r16, r28
     e8c:	0f 5d       	subi	r16, 0xDF	; 223
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	85 2c       	mov	r8, r5
     e92:	91 2c       	mov	r9, r1
     e94:	a1 2c       	mov	r10, r1
     e96:	b1 2c       	mov	r11, r1
     e98:	c7 01       	movw	r24, r14
     e9a:	b6 01       	movw	r22, r12
     e9c:	a5 01       	movw	r20, r10
     e9e:	94 01       	movw	r18, r8
     ea0:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
     ea4:	8c 2d       	mov	r24, r12
     ea6:	52 9e       	mul	r5, r18
     ea8:	80 19       	sub	r24, r0
     eaa:	11 24       	eor	r1, r1
     eac:	01 50       	subi	r16, 0x01	; 1
     eae:	11 09       	sbc	r17, r1
     eb0:	8a 30       	cpi	r24, 0x0A	; 10
     eb2:	10 f4       	brcc	.+4      	; 0xeb8 <_ZN5Print11printNumberEmh+0x70>
     eb4:	80 5d       	subi	r24, 0xD0	; 208
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <_ZN5Print11printNumberEmh+0x72>
     eb8:	89 5c       	subi	r24, 0xC9	; 201
     eba:	f8 01       	movw	r30, r16
     ebc:	80 83       	st	Z, r24
     ebe:	69 01       	movw	r12, r18
     ec0:	7a 01       	movw	r14, r20
     ec2:	c1 14       	cp	r12, r1
     ec4:	d1 04       	cpc	r13, r1
     ec6:	e1 04       	cpc	r14, r1
     ec8:	f1 04       	cpc	r15, r1
     eca:	31 f7       	brne	.-52     	; 0xe98 <_ZN5Print11printNumberEmh+0x50>
     ecc:	b8 01       	movw	r22, r16
     ece:	c3 01       	movw	r24, r6
     ed0:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <_ZN5Print5writeEPKc>
     ed4:	a1 96       	adiw	r28, 0x21	; 33
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	9f 90       	pop	r9
     ef6:	8f 90       	pop	r8
     ef8:	7f 90       	pop	r7
     efa:	6f 90       	pop	r6
     efc:	5f 90       	pop	r5
     efe:	08 95       	ret

00000f00 <_ZN5Print5printEmi>:
     f00:	21 15       	cp	r18, r1
     f02:	31 05       	cpc	r19, r1
     f04:	41 f4       	brne	.+16     	; 0xf16 <_ZN5Print5printEmi+0x16>
     f06:	dc 01       	movw	r26, r24
     f08:	ed 91       	ld	r30, X+
     f0a:	fc 91       	ld	r31, X
     f0c:	01 90       	ld	r0, Z+
     f0e:	f0 81       	ld	r31, Z
     f10:	e0 2d       	mov	r30, r0
     f12:	64 2f       	mov	r22, r20
     f14:	09 94       	ijmp
     f16:	0c 94 24 07 	jmp	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>

00000f1a <_ZN5Print7printlnEmi>:
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5Print5printEmi>
     f28:	8c 01       	movw	r16, r24
     f2a:	ce 01       	movw	r24, r28
     f2c:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     f30:	9c 01       	movw	r18, r24
     f32:	20 0f       	add	r18, r16
     f34:	31 1f       	adc	r19, r17
     f36:	c9 01       	movw	r24, r18
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <_ZN5Print5printEji>:
     f42:	9a 01       	movw	r18, r20
     f44:	ab 01       	movw	r20, r22
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_ZN5Print5printEmi>

00000f4e <_ZN5Print7printlnEji>:
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
     f58:	9a 01       	movw	r18, r20
     f5a:	ab 01       	movw	r20, r22
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5Print5printEmi>
     f64:	8c 01       	movw	r16, r24
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     f6c:	98 01       	movw	r18, r16
     f6e:	28 0f       	add	r18, r24
     f70:	39 1f       	adc	r19, r25
     f72:	c9 01       	movw	r24, r18
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <_ZN5Print5printEhi>:
     f7e:	9a 01       	movw	r18, r20
     f80:	46 2f       	mov	r20, r22
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_ZN5Print5printEmi>

00000f8c <_ZN5Print7printlnEhi>:
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
     f96:	9a 01       	movw	r18, r20
     f98:	46 2f       	mov	r20, r22
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5Print5printEmi>
     fa4:	8c 01       	movw	r16, r24
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     fac:	98 01       	movw	r18, r16
     fae:	28 0f       	add	r18, r24
     fb0:	39 1f       	adc	r19, r25
     fb2:	c9 01       	movw	r24, r18
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <_ZN5Print5printEli>:
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	6a 01       	movw	r12, r20
     fd2:	7b 01       	movw	r14, r22
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	79 f4       	brne	.+30     	; 0xff8 <_ZN5Print5printEli+0x3a>
     fda:	e8 81       	ld	r30, Y
     fdc:	f9 81       	ldd	r31, Y+1	; 0x01
     fde:	01 90       	ld	r0, Z+
     fe0:	f0 81       	ld	r31, Z
     fe2:	e0 2d       	mov	r30, r0
     fe4:	64 2f       	mov	r22, r20
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	09 94       	ijmp
     ff8:	2a 30       	cpi	r18, 0x0A	; 10
     ffa:	31 05       	cpc	r19, r1
     ffc:	19 f4       	brne	.+6      	; 0x1004 <_ZN5Print5printEli+0x46>
     ffe:	77 fd       	sbrc	r23, 7
    1000:	0e c0       	rjmp	.+28     	; 0x101e <_ZN5Print5printEli+0x60>
    1002:	2a e0       	ldi	r18, 0x0A	; 10
    1004:	b7 01       	movw	r22, r14
    1006:	a6 01       	movw	r20, r12
    1008:	ce 01       	movw	r24, r28
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	0c 94 24 07 	jmp	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>
    101e:	6d e2       	ldi	r22, 0x2D	; 45
    1020:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
    1024:	8c 01       	movw	r16, r24
    1026:	44 27       	eor	r20, r20
    1028:	55 27       	eor	r21, r21
    102a:	ba 01       	movw	r22, r20
    102c:	4c 19       	sub	r20, r12
    102e:	5d 09       	sbc	r21, r13
    1030:	6e 09       	sbc	r22, r14
    1032:	7f 09       	sbc	r23, r15
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>
    103c:	9c 01       	movw	r18, r24
    103e:	20 0f       	add	r18, r16
    1040:	31 1f       	adc	r19, r17
    1042:	c9 01       	movw	r24, r18
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	08 95       	ret

00001056 <_ZN5Print7printlnEli>:
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ec 01       	movw	r28, r24
    1060:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
    1064:	8c 01       	movw	r16, r24
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
    106c:	9c 01       	movw	r18, r24
    106e:	20 0f       	add	r18, r16
    1070:	31 1f       	adc	r19, r17
    1072:	c9 01       	movw	r24, r18
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <_ZN5Print5printEii>:
    107e:	9a 01       	movw	r18, r20
    1080:	ab 01       	movw	r20, r22
    1082:	66 27       	eor	r22, r22
    1084:	57 fd       	sbrc	r21, 7
    1086:	60 95       	com	r22
    1088:	76 2f       	mov	r23, r22
    108a:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_ZN5Print5printEli>

0000108e <_ZN5Print7printlnEii>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	ec 01       	movw	r28, r24
    1098:	9a 01       	movw	r18, r20
    109a:	ab 01       	movw	r20, r22
    109c:	66 27       	eor	r22, r22
    109e:	57 fd       	sbrc	r21, 7
    10a0:	60 95       	com	r22
    10a2:	76 2f       	mov	r23, r22
    10a4:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
    10a8:	8c 01       	movw	r16, r24
    10aa:	ce 01       	movw	r24, r28
    10ac:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
    10b0:	98 01       	movw	r18, r16
    10b2:	28 0f       	add	r18, r24
    10b4:	39 1f       	adc	r19, r25
    10b6:	c9 01       	movw	r24, r18
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <_ZN5Print10printFloatEdh>:
    10c2:	6f 92       	push	r6
    10c4:	7f 92       	push	r7
    10c6:	8f 92       	push	r8
    10c8:	9f 92       	push	r9
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	8c 01       	movw	r16, r24
    10de:	6a 01       	movw	r12, r20
    10e0:	7b 01       	movw	r14, r22
    10e2:	c2 2f       	mov	r28, r18
    10e4:	9a 01       	movw	r18, r20
    10e6:	ab 01       	movw	r20, r22
    10e8:	c7 01       	movw	r24, r14
    10ea:	b6 01       	movw	r22, r12
    10ec:	0e 94 71 43 	call	0x86e2	; 0x86e2 <__unordsf2>
    10f0:	88 23       	and	r24, r24
    10f2:	19 f0       	breq	.+6      	; 0x10fa <_ZN5Print10printFloatEdh+0x38>
    10f4:	69 e6       	ldi	r22, 0x69	; 105
    10f6:	76 e0       	ldi	r23, 0x06	; 6
    10f8:	32 c0       	rjmp	.+100    	; 0x115e <_ZN5Print10printFloatEdh+0x9c>
    10fa:	46 01       	movw	r8, r12
    10fc:	57 01       	movw	r10, r14
    10fe:	e8 94       	clt
    1100:	b7 f8       	bld	r11, 7
    1102:	2f ef       	ldi	r18, 0xFF	; 255
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	5f e7       	ldi	r21, 0x7F	; 127
    110a:	c5 01       	movw	r24, r10
    110c:	b4 01       	movw	r22, r8
    110e:	0e 94 71 43 	call	0x86e2	; 0x86e2 <__unordsf2>
    1112:	81 11       	cpse	r24, r1
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <_ZN5Print10printFloatEdh+0x6e>
    1116:	2f ef       	ldi	r18, 0xFF	; 255
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	5f e7       	ldi	r21, 0x7F	; 127
    111e:	c5 01       	movw	r24, r10
    1120:	b4 01       	movw	r22, r8
    1122:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    1126:	18 16       	cp	r1, r24
    1128:	1c f4       	brge	.+6      	; 0x1130 <_ZN5Print10printFloatEdh+0x6e>
    112a:	6d e6       	ldi	r22, 0x6D	; 109
    112c:	76 e0       	ldi	r23, 0x06	; 6
    112e:	17 c0       	rjmp	.+46     	; 0x115e <_ZN5Print10printFloatEdh+0x9c>
    1130:	2f ef       	ldi	r18, 0xFF	; 255
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	5f e4       	ldi	r21, 0x4F	; 79
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    1140:	18 16       	cp	r1, r24
    1142:	0c f4       	brge	.+2      	; 0x1146 <_ZN5Print10printFloatEdh+0x84>
    1144:	0a c0       	rjmp	.+20     	; 0x115a <_ZN5Print10printFloatEdh+0x98>
    1146:	2f ef       	ldi	r18, 0xFF	; 255
    1148:	3f ef       	ldi	r19, 0xFF	; 255
    114a:	4f e7       	ldi	r20, 0x7F	; 127
    114c:	5f ec       	ldi	r21, 0xCF	; 207
    114e:	c7 01       	movw	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    1156:	87 ff       	sbrs	r24, 7
    1158:	12 c0       	rjmp	.+36     	; 0x117e <_ZN5Print10printFloatEdh+0xbc>
    115a:	61 e7       	ldi	r22, 0x71	; 113
    115c:	76 e0       	ldi	r23, 0x06	; 6
    115e:	c8 01       	movw	r24, r16
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	0c 94 cb 3f 	jmp	0x7f96	; 0x7f96 <_ZN5Print5writeEPKc>
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    118c:	87 ff       	sbrs	r24, 7
    118e:	0a c0       	rjmp	.+20     	; 0x11a4 <_ZN5Print10printFloatEdh+0xe2>
    1190:	6d e2       	ldi	r22, 0x2D	; 45
    1192:	c8 01       	movw	r24, r16
    1194:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
    1198:	3c 01       	movw	r6, r24
    119a:	f7 fa       	bst	r15, 7
    119c:	f0 94       	com	r15
    119e:	f7 f8       	bld	r15, 7
    11a0:	f0 94       	com	r15
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <_ZN5Print10printFloatEdh+0xe6>
    11a4:	61 2c       	mov	r6, r1
    11a6:	71 2c       	mov	r7, r1
    11a8:	b1 2c       	mov	r11, r1
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	9f e3       	ldi	r25, 0x3F	; 63
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <_ZN5Print10printFloatEdh+0x100>
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    11c0:	b3 94       	inc	r11
    11c2:	bc 12       	cpse	r11, r28
    11c4:	f7 cf       	rjmp	.-18     	; 0x11b4 <_ZN5Print10printFloatEdh+0xf2>
    11c6:	26 2f       	mov	r18, r22
    11c8:	37 2f       	mov	r19, r23
    11ca:	48 2f       	mov	r20, r24
    11cc:	59 2f       	mov	r21, r25
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    11d6:	4b 01       	movw	r8, r22
    11d8:	5c 01       	movw	r10, r24
    11da:	79 2d       	mov	r23, r9
    11dc:	9b 2d       	mov	r25, r11
    11de:	0e 94 29 41 	call	0x8252	; 0x8252 <__fixunssfsi>
    11e2:	6b 01       	movw	r12, r22
    11e4:	7c 01       	movw	r14, r24
    11e6:	0e 94 55 41 	call	0x82aa	; 0x82aa <__floatunsisf>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	68 2d       	mov	r22, r8
    11f0:	79 2d       	mov	r23, r9
    11f2:	8a 2d       	mov	r24, r10
    11f4:	9b 2d       	mov	r25, r11
    11f6:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    11fa:	b6 2e       	mov	r11, r22
    11fc:	a7 2e       	mov	r10, r23
    11fe:	98 2e       	mov	r9, r24
    1200:	89 2e       	mov	r8, r25
    1202:	2a e0       	ldi	r18, 0x0A	; 10
    1204:	a6 01       	movw	r20, r12
    1206:	b7 01       	movw	r22, r14
    1208:	c8 01       	movw	r24, r16
    120a:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>
    120e:	68 0e       	add	r6, r24
    1210:	79 1e       	adc	r7, r25
    1212:	cc 23       	and	r28, r28
    1214:	c9 f1       	breq	.+114    	; 0x1288 <_ZN5Print10printFloatEdh+0x1c6>
    1216:	62 ee       	ldi	r22, 0xE2	; 226
    1218:	73 e0       	ldi	r23, 0x03	; 3
    121a:	c8 01       	movw	r24, r16
    121c:	0e 94 cb 3f 	call	0x7f96	; 0x7f96 <_ZN5Print5writeEPKc>
    1220:	68 0e       	add	r6, r24
    1222:	79 1e       	adc	r7, r25
    1224:	31 c0       	rjmp	.+98     	; 0x1288 <_ZN5Print10printFloatEdh+0x1c6>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e2       	ldi	r20, 0x20	; 32
    122c:	51 e4       	ldi	r21, 0x41	; 65
    122e:	d5 01       	movw	r26, r10
    1230:	f4 01       	movw	r30, r8
    1232:	6b 2f       	mov	r22, r27
    1234:	7a 2d       	mov	r23, r10
    1236:	8f 2f       	mov	r24, r31
    1238:	98 2d       	mov	r25, r8
    123a:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    123e:	4b 01       	movw	r8, r22
    1240:	5c 01       	movw	r10, r24
    1242:	79 2d       	mov	r23, r9
    1244:	9b 2d       	mov	r25, r11
    1246:	0e 94 24 41 	call	0x8248	; 0x8248 <__fixsfsi>
    124a:	6b 01       	movw	r12, r22
    124c:	ee 24       	eor	r14, r14
    124e:	d7 fc       	sbrc	r13, 7
    1250:	e0 94       	com	r14
    1252:	fe 2c       	mov	r15, r14
    1254:	2a e0       	ldi	r18, 0x0A	; 10
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	b7 01       	movw	r22, r14
    125a:	a6 01       	movw	r20, r12
    125c:	c8 01       	movw	r24, r16
    125e:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
    1262:	68 0e       	add	r6, r24
    1264:	79 1e       	adc	r7, r25
    1266:	c7 01       	movw	r24, r14
    1268:	b6 01       	movw	r22, r12
    126a:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    126e:	9b 01       	movw	r18, r22
    1270:	ac 01       	movw	r20, r24
    1272:	68 2d       	mov	r22, r8
    1274:	79 2d       	mov	r23, r9
    1276:	8a 2d       	mov	r24, r10
    1278:	9b 2d       	mov	r25, r11
    127a:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    127e:	b6 2e       	mov	r11, r22
    1280:	a7 2e       	mov	r10, r23
    1282:	98 2e       	mov	r9, r24
    1284:	89 2e       	mov	r8, r25
    1286:	c1 50       	subi	r28, 0x01	; 1
    1288:	c1 11       	cpse	r28, r1
    128a:	cd cf       	rjmp	.-102    	; 0x1226 <_ZN5Print10printFloatEdh+0x164>
    128c:	c3 01       	movw	r24, r6
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	bf 90       	pop	r11
    129e:	af 90       	pop	r10
    12a0:	9f 90       	pop	r9
    12a2:	8f 90       	pop	r8
    12a4:	7f 90       	pop	r7
    12a6:	6f 90       	pop	r6
    12a8:	08 95       	ret

000012aa <_ZN5Print5printEdi>:
    12aa:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <_ZN5Print10printFloatEdh>

000012ae <_ZN5Print7printlnEdi>:
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ec 01       	movw	r28, r24
    12b8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5Print10printFloatEdh>
    12bc:	8c 01       	movw	r16, r24
    12be:	ce 01       	movw	r24, r28
    12c0:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
    12c4:	98 01       	movw	r18, r16
    12c6:	28 0f       	add	r18, r24
    12c8:	39 1f       	adc	r19, r25
    12ca:	c9 01       	movw	r24, r18
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <attachInterrupt>:
    12d6:	88 30       	cpi	r24, 0x08	; 8
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <attachInterrupt+0x6>
    12da:	73 c0       	rjmp	.+230    	; 0x13c2 <attachInterrupt+0xec>
    12dc:	e8 2f       	mov	r30, r24
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	e2 5e       	subi	r30, 0xE2	; 226
    12e6:	f6 4f       	sbci	r31, 0xF6	; 246
    12e8:	71 83       	std	Z+1, r23	; 0x01
    12ea:	60 83       	st	Z, r22
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	11 f1       	breq	.+68     	; 0x1334 <attachInterrupt+0x5e>
    12f0:	30 f4       	brcc	.+12     	; 0x12fe <attachInterrupt+0x28>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	59 f0       	breq	.+22     	; 0x130c <attachInterrupt+0x36>
    12f6:	90 f4       	brcc	.+36     	; 0x131c <attachInterrupt+0x46>
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	b1 f5       	brne	.+108    	; 0x1368 <attachInterrupt+0x92>
    12fc:	3d c0       	rjmp	.+122    	; 0x1378 <attachInterrupt+0xa2>
    12fe:	86 30       	cpi	r24, 0x06	; 6
    1300:	09 f4       	brne	.+2      	; 0x1304 <attachInterrupt+0x2e>
    1302:	46 c0       	rjmp	.+140    	; 0x1390 <attachInterrupt+0xba>
    1304:	20 f1       	brcs	.+72     	; 0x134e <attachInterrupt+0x78>
    1306:	87 30       	cpi	r24, 0x07	; 7
    1308:	79 f5       	brne	.+94     	; 0x1368 <attachInterrupt+0x92>
    130a:	4f c0       	rjmp	.+158    	; 0x13aa <attachInterrupt+0xd4>
    130c:	80 91 69 00 	lds	r24, 0x0069
    1310:	8c 7f       	andi	r24, 0xFC	; 252
    1312:	84 2b       	or	r24, r20
    1314:	80 93 69 00 	sts	0x0069, r24
    1318:	e8 9a       	sbi	0x1d, 0	; 29
    131a:	08 95       	ret
    131c:	80 91 69 00 	lds	r24, 0x0069
    1320:	44 0f       	add	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	83 7f       	andi	r24, 0xF3	; 243
    132a:	84 2b       	or	r24, r20
    132c:	80 93 69 00 	sts	0x0069, r24
    1330:	e9 9a       	sbi	0x1d, 1	; 29
    1332:	08 95       	ret
    1334:	80 91 69 00 	lds	r24, 0x0069
    1338:	74 e0       	ldi	r23, 0x04	; 4
    133a:	44 0f       	add	r20, r20
    133c:	55 1f       	adc	r21, r21
    133e:	7a 95       	dec	r23
    1340:	e1 f7       	brne	.-8      	; 0x133a <attachInterrupt+0x64>
    1342:	8f 7c       	andi	r24, 0xCF	; 207
    1344:	84 2b       	or	r24, r20
    1346:	80 93 69 00 	sts	0x0069, r24
    134a:	ea 9a       	sbi	0x1d, 2	; 29
    134c:	08 95       	ret
    134e:	80 91 69 00 	lds	r24, 0x0069
    1352:	66 e0       	ldi	r22, 0x06	; 6
    1354:	44 0f       	add	r20, r20
    1356:	55 1f       	adc	r21, r21
    1358:	6a 95       	dec	r22
    135a:	e1 f7       	brne	.-8      	; 0x1354 <attachInterrupt+0x7e>
    135c:	8f 73       	andi	r24, 0x3F	; 63
    135e:	84 2b       	or	r24, r20
    1360:	80 93 69 00 	sts	0x0069, r24
    1364:	eb 9a       	sbi	0x1d, 3	; 29
    1366:	08 95       	ret
    1368:	80 91 6a 00 	lds	r24, 0x006A
    136c:	8c 7f       	andi	r24, 0xFC	; 252
    136e:	84 2b       	or	r24, r20
    1370:	80 93 6a 00 	sts	0x006A, r24
    1374:	ec 9a       	sbi	0x1d, 4	; 29
    1376:	08 95       	ret
    1378:	80 91 6a 00 	lds	r24, 0x006A
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	83 7f       	andi	r24, 0xF3	; 243
    1386:	84 2b       	or	r24, r20
    1388:	80 93 6a 00 	sts	0x006A, r24
    138c:	ed 9a       	sbi	0x1d, 5	; 29
    138e:	08 95       	ret
    1390:	80 91 6a 00 	lds	r24, 0x006A
    1394:	24 e0       	ldi	r18, 0x04	; 4
    1396:	44 0f       	add	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	2a 95       	dec	r18
    139c:	e1 f7       	brne	.-8      	; 0x1396 <attachInterrupt+0xc0>
    139e:	8f 7c       	andi	r24, 0xCF	; 207
    13a0:	84 2b       	or	r24, r20
    13a2:	80 93 6a 00 	sts	0x006A, r24
    13a6:	ee 9a       	sbi	0x1d, 6	; 29
    13a8:	08 95       	ret
    13aa:	80 91 6a 00 	lds	r24, 0x006A
    13ae:	96 e0       	ldi	r25, 0x06	; 6
    13b0:	44 0f       	add	r20, r20
    13b2:	55 1f       	adc	r21, r21
    13b4:	9a 95       	dec	r25
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <attachInterrupt+0xda>
    13b8:	8f 73       	andi	r24, 0x3F	; 63
    13ba:	84 2b       	or	r24, r20
    13bc:	80 93 6a 00 	sts	0x006A, r24
    13c0:	ef 9a       	sbi	0x1d, 7	; 29
    13c2:	08 95       	ret

000013c4 <detachInterrupt>:
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	30 f5       	brcc	.+76     	; 0x1414 <detachInterrupt+0x50>
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	89 f0       	breq	.+34     	; 0x13ee <detachInterrupt+0x2a>
    13cc:	30 f4       	brcc	.+12     	; 0x13da <detachInterrupt+0x16>
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	51 f0       	breq	.+20     	; 0x13e6 <detachInterrupt+0x22>
    13d2:	58 f4       	brcc	.+22     	; 0x13ea <detachInterrupt+0x26>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <detachInterrupt+0x32>
    13d8:	10 c0       	rjmp	.+32     	; 0x13fa <detachInterrupt+0x36>
    13da:	86 30       	cpi	r24, 0x06	; 6
    13dc:	81 f0       	breq	.+32     	; 0x13fe <detachInterrupt+0x3a>
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <detachInterrupt+0x2e>
    13e0:	87 30       	cpi	r24, 0x07	; 7
    13e2:	49 f4       	brne	.+18     	; 0x13f6 <detachInterrupt+0x32>
    13e4:	0e c0       	rjmp	.+28     	; 0x1402 <detachInterrupt+0x3e>
    13e6:	e8 98       	cbi	0x1d, 0	; 29
    13e8:	0d c0       	rjmp	.+26     	; 0x1404 <detachInterrupt+0x40>
    13ea:	e9 98       	cbi	0x1d, 1	; 29
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <detachInterrupt+0x40>
    13ee:	ea 98       	cbi	0x1d, 2	; 29
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <detachInterrupt+0x40>
    13f2:	eb 98       	cbi	0x1d, 3	; 29
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <detachInterrupt+0x40>
    13f6:	ec 98       	cbi	0x1d, 4	; 29
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <detachInterrupt+0x40>
    13fa:	ed 98       	cbi	0x1d, 5	; 29
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <detachInterrupt+0x40>
    13fe:	ee 98       	cbi	0x1d, 6	; 29
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <detachInterrupt+0x40>
    1402:	ef 98       	cbi	0x1d, 7	; 29
    1404:	e8 2f       	mov	r30, r24
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	e2 5e       	subi	r30, 0xE2	; 226
    140e:	f6 4f       	sbci	r31, 0xF6	; 246
    1410:	11 82       	std	Z+1, r1	; 0x01
    1412:	10 82       	st	Z, r1
    1414:	08 95       	ret

00001416 <__vector_1>:
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	1b be       	out	0x3b, r1	; 59
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
    143e:	80 91 22 09 	lds	r24, 0x0922
    1442:	90 91 23 09 	lds	r25, 0x0923
    1446:	89 2b       	or	r24, r25
    1448:	29 f0       	breq	.+10     	; 0x1454 <__vector_1+0x3e>
    144a:	e0 91 22 09 	lds	r30, 0x0922
    144e:	f0 91 23 09 	lds	r31, 0x0923
    1452:	09 95       	icall
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	bf 91       	pop	r27
    145a:	af 91       	pop	r26
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	7f 91       	pop	r23
    1462:	6f 91       	pop	r22
    1464:	5f 91       	pop	r21
    1466:	4f 91       	pop	r20
    1468:	3f 91       	pop	r19
    146a:	2f 91       	pop	r18
    146c:	0f 90       	pop	r0
    146e:	0b be       	out	0x3b, r0	; 59
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_2>:
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	0b b6       	in	r0, 0x3b	; 59
    1486:	0f 92       	push	r0
    1488:	1b be       	out	0x3b, r1	; 59
    148a:	2f 93       	push	r18
    148c:	3f 93       	push	r19
    148e:	4f 93       	push	r20
    1490:	5f 93       	push	r21
    1492:	6f 93       	push	r22
    1494:	7f 93       	push	r23
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	af 93       	push	r26
    149c:	bf 93       	push	r27
    149e:	ef 93       	push	r30
    14a0:	ff 93       	push	r31
    14a2:	80 91 24 09 	lds	r24, 0x0924
    14a6:	90 91 25 09 	lds	r25, 0x0925
    14aa:	89 2b       	or	r24, r25
    14ac:	29 f0       	breq	.+10     	; 0x14b8 <__vector_2+0x3e>
    14ae:	e0 91 24 09 	lds	r30, 0x0924
    14b2:	f0 91 25 09 	lds	r31, 0x0925
    14b6:	09 95       	icall
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	0f 90       	pop	r0
    14d2:	0b be       	out	0x3b, r0	; 59
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <__vector_3>:
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	0b b6       	in	r0, 0x3b	; 59
    14ea:	0f 92       	push	r0
    14ec:	1b be       	out	0x3b, r1	; 59
    14ee:	2f 93       	push	r18
    14f0:	3f 93       	push	r19
    14f2:	4f 93       	push	r20
    14f4:	5f 93       	push	r21
    14f6:	6f 93       	push	r22
    14f8:	7f 93       	push	r23
    14fa:	8f 93       	push	r24
    14fc:	9f 93       	push	r25
    14fe:	af 93       	push	r26
    1500:	bf 93       	push	r27
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    1506:	80 91 26 09 	lds	r24, 0x0926
    150a:	90 91 27 09 	lds	r25, 0x0927
    150e:	89 2b       	or	r24, r25
    1510:	29 f0       	breq	.+10     	; 0x151c <__vector_3+0x3e>
    1512:	e0 91 26 09 	lds	r30, 0x0926
    1516:	f0 91 27 09 	lds	r31, 0x0927
    151a:	09 95       	icall
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0b be       	out	0x3b, r0	; 59
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <__vector_4>:
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	0b b6       	in	r0, 0x3b	; 59
    154e:	0f 92       	push	r0
    1550:	1b be       	out	0x3b, r1	; 59
    1552:	2f 93       	push	r18
    1554:	3f 93       	push	r19
    1556:	4f 93       	push	r20
    1558:	5f 93       	push	r21
    155a:	6f 93       	push	r22
    155c:	7f 93       	push	r23
    155e:	8f 93       	push	r24
    1560:	9f 93       	push	r25
    1562:	af 93       	push	r26
    1564:	bf 93       	push	r27
    1566:	ef 93       	push	r30
    1568:	ff 93       	push	r31
    156a:	80 91 28 09 	lds	r24, 0x0928
    156e:	90 91 29 09 	lds	r25, 0x0929
    1572:	89 2b       	or	r24, r25
    1574:	29 f0       	breq	.+10     	; 0x1580 <__vector_4+0x3e>
    1576:	e0 91 28 09 	lds	r30, 0x0928
    157a:	f0 91 29 09 	lds	r31, 0x0929
    157e:	09 95       	icall
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__vector_5>:
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	0b b6       	in	r0, 0x3b	; 59
    15b2:	0f 92       	push	r0
    15b4:	1b be       	out	0x3b, r1	; 59
    15b6:	2f 93       	push	r18
    15b8:	3f 93       	push	r19
    15ba:	4f 93       	push	r20
    15bc:	5f 93       	push	r21
    15be:	6f 93       	push	r22
    15c0:	7f 93       	push	r23
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	af 93       	push	r26
    15c8:	bf 93       	push	r27
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	80 91 1e 09 	lds	r24, 0x091E
    15d2:	90 91 1f 09 	lds	r25, 0x091F
    15d6:	89 2b       	or	r24, r25
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <__vector_5+0x3e>
    15da:	e0 91 1e 09 	lds	r30, 0x091E
    15de:	f0 91 1f 09 	lds	r31, 0x091F
    15e2:	09 95       	icall
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_6>:
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	0b b6       	in	r0, 0x3b	; 59
    1616:	0f 92       	push	r0
    1618:	1b be       	out	0x3b, r1	; 59
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
    1632:	80 91 20 09 	lds	r24, 0x0920
    1636:	90 91 21 09 	lds	r25, 0x0921
    163a:	89 2b       	or	r24, r25
    163c:	29 f0       	breq	.+10     	; 0x1648 <__vector_6+0x3e>
    163e:	e0 91 20 09 	lds	r30, 0x0920
    1642:	f0 91 21 09 	lds	r31, 0x0921
    1646:	09 95       	icall
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0b be       	out	0x3b, r0	; 59
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <__vector_7>:
    166e:	1f 92       	push	r1
    1670:	0f 92       	push	r0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	0b b6       	in	r0, 0x3b	; 59
    167a:	0f 92       	push	r0
    167c:	1b be       	out	0x3b, r1	; 59
    167e:	2f 93       	push	r18
    1680:	3f 93       	push	r19
    1682:	4f 93       	push	r20
    1684:	5f 93       	push	r21
    1686:	6f 93       	push	r22
    1688:	7f 93       	push	r23
    168a:	8f 93       	push	r24
    168c:	9f 93       	push	r25
    168e:	af 93       	push	r26
    1690:	bf 93       	push	r27
    1692:	ef 93       	push	r30
    1694:	ff 93       	push	r31
    1696:	80 91 2a 09 	lds	r24, 0x092A
    169a:	90 91 2b 09 	lds	r25, 0x092B
    169e:	89 2b       	or	r24, r25
    16a0:	29 f0       	breq	.+10     	; 0x16ac <__vector_7+0x3e>
    16a2:	e0 91 2a 09 	lds	r30, 0x092A
    16a6:	f0 91 2b 09 	lds	r31, 0x092B
    16aa:	09 95       	icall
    16ac:	ff 91       	pop	r31
    16ae:	ef 91       	pop	r30
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0b be       	out	0x3b, r0	; 59
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <__vector_8>:
    16d2:	1f 92       	push	r1
    16d4:	0f 92       	push	r0
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	0b b6       	in	r0, 0x3b	; 59
    16de:	0f 92       	push	r0
    16e0:	1b be       	out	0x3b, r1	; 59
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	80 91 2c 09 	lds	r24, 0x092C
    16fe:	90 91 2d 09 	lds	r25, 0x092D
    1702:	89 2b       	or	r24, r25
    1704:	29 f0       	breq	.+10     	; 0x1710 <__vector_8+0x3e>
    1706:	e0 91 2c 09 	lds	r30, 0x092C
    170a:	f0 91 2d 09 	lds	r31, 0x092D
    170e:	09 95       	icall
    1710:	ff 91       	pop	r31
    1712:	ef 91       	pop	r30
    1714:	bf 91       	pop	r27
    1716:	af 91       	pop	r26
    1718:	9f 91       	pop	r25
    171a:	8f 91       	pop	r24
    171c:	7f 91       	pop	r23
    171e:	6f 91       	pop	r22
    1720:	5f 91       	pop	r21
    1722:	4f 91       	pop	r20
    1724:	3f 91       	pop	r19
    1726:	2f 91       	pop	r18
    1728:	0f 90       	pop	r0
    172a:	0b be       	out	0x3b, r0	; 59
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <_ZN6StringD1Ev>:
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <free>

00001740 <_ZN6String10invalidateEv>:
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	ec 01       	movw	r28, r24
    1746:	88 81       	ld	r24, Y
    1748:	99 81       	ldd	r25, Y+1	; 0x01
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	11 f0       	breq	.+4      	; 0x1752 <_ZN6String10invalidateEv+0x12>
    174e:	0e 94 0a 14 	call	0x2814	; 0x2814 <free>
    1752:	19 82       	std	Y+1, r1	; 0x01
    1754:	18 82       	st	Y, r1
    1756:	1d 82       	std	Y+5, r1	; 0x05
    1758:	1c 82       	std	Y+4, r1	; 0x04
    175a:	1b 82       	std	Y+3, r1	; 0x03
    175c:	1a 82       	std	Y+2, r1	; 0x02
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <_ZN6String12changeBufferEj>:
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	ec 01       	movw	r28, r24
    176e:	8b 01       	movw	r16, r22
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	88 81       	ld	r24, Y
    1776:	99 81       	ldd	r25, Y+1	; 0x01
    1778:	0e 94 a8 14 	call	0x2950	; 0x2950 <realloc>
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	31 f0       	breq	.+12     	; 0x178c <_ZN6String12changeBufferEj+0x28>
    1780:	99 83       	std	Y+1, r25	; 0x01
    1782:	88 83       	st	Y, r24
    1784:	1b 83       	std	Y+3, r17	; 0x03
    1786:	0a 83       	std	Y+2, r16	; 0x02
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	01 c0       	rjmp	.+2      	; 0x178e <_ZN6String12changeBufferEj+0x2a>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <_ZN6String7reserveEj>:
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	ec 01       	movw	r28, r24
    179e:	88 81       	ld	r24, Y
    17a0:	99 81       	ldd	r25, Y+1	; 0x01
    17a2:	89 2b       	or	r24, r25
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <_ZN6String7reserveEj+0x1a>
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	86 17       	cp	r24, r22
    17ac:	97 07       	cpc	r25, r23
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <_ZN6String7reserveEj+0x1a>
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <_ZN6String7reserveEj+0x32>
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN6String12changeBufferEj>
    17b8:	88 23       	and	r24, r24
    17ba:	49 f0       	breq	.+18     	; 0x17ce <_ZN6String7reserveEj+0x36>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	89 2b       	or	r24, r25
    17c2:	19 f4       	brne	.+6      	; 0x17ca <_ZN6String7reserveEj+0x32>
    17c4:	e8 81       	ld	r30, Y
    17c6:	f9 81       	ldd	r31, Y+1	; 0x01
    17c8:	10 82       	st	Z, r1
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <_ZN6String7reserveEj+0x38>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <_ZN6String4copyEPKcj>:
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	7b 01       	movw	r14, r22
    17e6:	8a 01       	movw	r16, r20
    17e8:	ba 01       	movw	r22, r20
    17ea:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN6String7reserveEj>
    17ee:	81 11       	cpse	r24, r1
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <_ZN6String4copyEPKcj+0x24>
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <_ZN6String4copyEPKcj+0x32>
    17fa:	1d 83       	std	Y+5, r17	; 0x05
    17fc:	0c 83       	std	Y+4, r16	; 0x04
    17fe:	b7 01       	movw	r22, r14
    1800:	88 81       	ld	r24, Y
    1802:	99 81       	ldd	r25, Y+1	; 0x01
    1804:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    1808:	ce 01       	movw	r24, r28
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	08 95       	ret

00001818 <_ZN6StringC1EPKc>:
    1818:	dc 01       	movw	r26, r24
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	1c 92       	st	X, r1
    181e:	1e 92       	st	-X, r1
    1820:	13 96       	adiw	r26, 0x03	; 3
    1822:	1c 92       	st	X, r1
    1824:	1e 92       	st	-X, r1
    1826:	12 97       	sbiw	r26, 0x02	; 2
    1828:	15 96       	adiw	r26, 0x05	; 5
    182a:	1c 92       	st	X, r1
    182c:	1e 92       	st	-X, r1
    182e:	14 97       	sbiw	r26, 0x04	; 4
    1830:	16 96       	adiw	r26, 0x06	; 6
    1832:	1c 92       	st	X, r1
    1834:	61 15       	cp	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	59 f0       	breq	.+22     	; 0x1850 <_ZN6StringC1EPKc+0x38>
    183a:	db 01       	movw	r26, r22
    183c:	0d 90       	ld	r0, X+
    183e:	00 20       	and	r0, r0
    1840:	e9 f7       	brne	.-6      	; 0x183c <_ZN6StringC1EPKc+0x24>
    1842:	ad 01       	movw	r20, r26
    1844:	41 50       	subi	r20, 0x01	; 1
    1846:	51 09       	sbc	r21, r1
    1848:	46 1b       	sub	r20, r22
    184a:	57 0b       	sbc	r21, r23
    184c:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <_ZN6String4copyEPKcj>
    1850:	08 95       	ret

00001852 <_ZN6StringaSERKS_>:
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
    1858:	fb 01       	movw	r30, r22
    185a:	86 17       	cp	r24, r22
    185c:	97 07       	cpc	r25, r23
    185e:	61 f0       	breq	.+24     	; 0x1878 <_ZN6StringaSERKS_+0x26>
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	61 15       	cp	r22, r1
    1866:	71 05       	cpc	r23, r1
    1868:	29 f0       	breq	.+10     	; 0x1874 <_ZN6StringaSERKS_+0x22>
    186a:	44 81       	ldd	r20, Z+4	; 0x04
    186c:	55 81       	ldd	r21, Z+5	; 0x05
    186e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN6String4copyEPKcj>
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <_ZN6StringaSERKS_+0x26>
    1874:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1878:	ce 01       	movw	r24, r28
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <_ZN6StringC1ERKS_>:
    1880:	fc 01       	movw	r30, r24
    1882:	11 82       	std	Z+1, r1	; 0x01
    1884:	10 82       	st	Z, r1
    1886:	13 82       	std	Z+3, r1	; 0x03
    1888:	12 82       	std	Z+2, r1	; 0x02
    188a:	15 82       	std	Z+5, r1	; 0x05
    188c:	14 82       	std	Z+4, r1	; 0x04
    188e:	16 82       	std	Z+6, r1	; 0x06
    1890:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <_ZN6StringaSERKS_>

00001894 <_ZN6StringaSEPKc>:
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	d8 2f       	mov	r29, r24
    189a:	c9 2f       	mov	r28, r25
    189c:	61 15       	cp	r22, r1
    189e:	71 05       	cpc	r23, r1
    18a0:	61 f0       	breq	.+24     	; 0x18ba <_ZN6StringaSEPKc+0x26>
    18a2:	db 01       	movw	r26, r22
    18a4:	0d 90       	ld	r0, X+
    18a6:	00 20       	and	r0, r0
    18a8:	e9 f7       	brne	.-6      	; 0x18a4 <_ZN6StringaSEPKc+0x10>
    18aa:	ad 01       	movw	r20, r26
    18ac:	41 50       	subi	r20, 0x01	; 1
    18ae:	51 09       	sbc	r21, r1
    18b0:	46 1b       	sub	r20, r22
    18b2:	57 0b       	sbc	r21, r23
    18b4:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN6String4copyEPKcj>
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <_ZN6StringaSEPKc+0x2a>
    18ba:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    18be:	8d 2f       	mov	r24, r29
    18c0:	9c 2f       	mov	r25, r28
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <_ZN6StringC1Emh>:
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	a1 97       	sbiw	r28, 0x21	; 33
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	8c 01       	movw	r16, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	ba 01       	movw	r22, r20
    18e6:	f8 01       	movw	r30, r16
    18e8:	11 82       	std	Z+1, r1	; 0x01
    18ea:	10 82       	st	Z, r1
    18ec:	13 82       	std	Z+3, r1	; 0x03
    18ee:	12 82       	std	Z+2, r1	; 0x02
    18f0:	15 82       	std	Z+5, r1	; 0x05
    18f2:	14 82       	std	Z+4, r1	; 0x04
    18f4:	16 82       	std	Z+6, r1	; 0x06
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	ae 01       	movw	r20, r28
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <ultoa>
    1902:	be 01       	movw	r22, r28
    1904:	6f 5f       	subi	r22, 0xFF	; 255
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	c8 01       	movw	r24, r16
    190a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    190e:	a1 96       	adiw	r28, 0x21	; 33
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <_ZN6StringC1Elh>:
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	a2 97       	sbiw	r28, 0x22	; 34
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	8c 01       	movw	r16, r24
    193e:	cb 01       	movw	r24, r22
    1940:	ba 01       	movw	r22, r20
    1942:	f8 01       	movw	r30, r16
    1944:	11 82       	std	Z+1, r1	; 0x01
    1946:	10 82       	st	Z, r1
    1948:	13 82       	std	Z+3, r1	; 0x03
    194a:	12 82       	std	Z+2, r1	; 0x02
    194c:	15 82       	std	Z+5, r1	; 0x05
    194e:	14 82       	std	Z+4, r1	; 0x04
    1950:	16 82       	std	Z+6, r1	; 0x06
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	ae 01       	movw	r20, r28
    1956:	4f 5f       	subi	r20, 0xFF	; 255
    1958:	5f 4f       	sbci	r21, 0xFF	; 255
    195a:	0e 94 4f 45 	call	0x8a9e	; 0x8a9e <ltoa>
    195e:	be 01       	movw	r22, r28
    1960:	6f 5f       	subi	r22, 0xFF	; 255
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	c8 01       	movw	r24, r16
    1966:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    196a:	a2 96       	adiw	r28, 0x22	; 34
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <_ZN6StringC1Ejh>:
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	61 97       	sbiw	r28, 0x11	; 17
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	8c 01       	movw	r16, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	11 82       	std	Z+1, r1	; 0x01
    19a0:	10 82       	st	Z, r1
    19a2:	13 82       	std	Z+3, r1	; 0x03
    19a4:	12 82       	std	Z+2, r1	; 0x02
    19a6:	15 82       	std	Z+5, r1	; 0x05
    19a8:	14 82       	std	Z+4, r1	; 0x04
    19aa:	16 82       	std	Z+6, r1	; 0x06
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	be 01       	movw	r22, r28
    19b0:	6f 5f       	subi	r22, 0xFF	; 255
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <utoa>
    19b8:	be 01       	movw	r22, r28
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	c8 01       	movw	r24, r16
    19c0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    19c4:	61 96       	adiw	r28, 0x11	; 17
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

000019da <_ZN6StringC1Eih>:
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	62 97       	sbiw	r28, 0x12	; 18
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	8c 01       	movw	r16, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	f8 01       	movw	r30, r16
    19f8:	11 82       	std	Z+1, r1	; 0x01
    19fa:	10 82       	st	Z, r1
    19fc:	13 82       	std	Z+3, r1	; 0x03
    19fe:	12 82       	std	Z+2, r1	; 0x02
    1a00:	15 82       	std	Z+5, r1	; 0x05
    1a02:	14 82       	std	Z+4, r1	; 0x04
    1a04:	16 82       	std	Z+6, r1	; 0x06
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	be 01       	movw	r22, r28
    1a0a:	6f 5f       	subi	r22, 0xFF	; 255
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <itoa>
    1a12:	be 01       	movw	r22, r28
    1a14:	6f 5f       	subi	r22, 0xFF	; 255
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	c8 01       	movw	r24, r16
    1a1a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    1a1e:	62 96       	adiw	r28, 0x12	; 18
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <_ZN6StringC1Ehh>:
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	29 97       	sbiw	r28, 0x09	; 9
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	8c 01       	movw	r16, r24
    1a4e:	86 2f       	mov	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	11 82       	std	Z+1, r1	; 0x01
    1a54:	10 82       	st	Z, r1
    1a56:	13 82       	std	Z+3, r1	; 0x03
    1a58:	12 82       	std	Z+2, r1	; 0x02
    1a5a:	15 82       	std	Z+5, r1	; 0x05
    1a5c:	14 82       	std	Z+4, r1	; 0x04
    1a5e:	16 82       	std	Z+6, r1	; 0x06
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	be 01       	movw	r22, r28
    1a64:	6f 5f       	subi	r22, 0xFF	; 255
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <utoa>
    1a6e:	be 01       	movw	r22, r28
    1a70:	6f 5f       	subi	r22, 0xFF	; 255
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	c8 01       	movw	r24, r16
    1a76:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    1a7a:	29 96       	adiw	r28, 0x09	; 9
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <_ZN6StringC1Ec>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <_ZN6StringC1Ec+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	11 82       	std	Z+1, r1	; 0x01
    1a9e:	10 82       	st	Z, r1
    1aa0:	13 82       	std	Z+3, r1	; 0x03
    1aa2:	12 82       	std	Z+2, r1	; 0x02
    1aa4:	15 82       	std	Z+5, r1	; 0x05
    1aa6:	14 82       	std	Z+4, r1	; 0x04
    1aa8:	16 82       	std	Z+6, r1	; 0x06
    1aaa:	69 83       	std	Y+1, r22	; 0x01
    1aac:	1a 82       	std	Y+2, r1	; 0x02
    1aae:	be 01       	movw	r22, r28
    1ab0:	6f 5f       	subi	r22, 0xFF	; 255
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <_ZN6String6concatEPKcj>:
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
    1ad0:	7b 01       	movw	r14, r22
    1ad2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad4:	1d 81       	ldd	r17, Y+5	; 0x05
    1ad6:	61 15       	cp	r22, r1
    1ad8:	71 05       	cpc	r23, r1
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <_ZN6String6concatEPKcj+0x1e>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	16 c0       	rjmp	.+44     	; 0x1b0c <_ZN6String6concatEPKcj+0x4a>
    1ae0:	41 15       	cp	r20, r1
    1ae2:	51 05       	cpc	r21, r1
    1ae4:	91 f0       	breq	.+36     	; 0x1b0a <_ZN6String6concatEPKcj+0x48>
    1ae6:	04 0f       	add	r16, r20
    1ae8:	15 1f       	adc	r17, r21
    1aea:	b8 01       	movw	r22, r16
    1aec:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN6String7reserveEj>
    1af0:	88 23       	and	r24, r24
    1af2:	a1 f3       	breq	.-24     	; 0x1adc <_ZN6String6concatEPKcj+0x1a>
    1af4:	28 81       	ld	r18, Y
    1af6:	39 81       	ldd	r19, Y+1	; 0x01
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	b7 01       	movw	r22, r14
    1afe:	82 0f       	add	r24, r18
    1b00:	93 1f       	adc	r25, r19
    1b02:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    1b06:	1d 83       	std	Y+5, r17	; 0x05
    1b08:	0c 83       	std	Y+4, r16	; 0x04
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	08 95       	ret

00001b1a <_ZN6String6concatERKS_>:
    1b1a:	fb 01       	movw	r30, r22
    1b1c:	44 81       	ldd	r20, Z+4	; 0x04
    1b1e:	55 81       	ldd	r21, Z+5	; 0x05
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>

00001b28 <_ZN6String6concatEPKc>:
    1b28:	61 15       	cp	r22, r1
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <_ZN6String6concatEPKc+0x1c>
    1b2e:	db 01       	movw	r26, r22
    1b30:	0d 90       	ld	r0, X+
    1b32:	00 20       	and	r0, r0
    1b34:	e9 f7       	brne	.-6      	; 0x1b30 <_ZN6String6concatEPKc+0x8>
    1b36:	ad 01       	movw	r20, r26
    1b38:	41 50       	subi	r20, 0x01	; 1
    1b3a:	51 09       	sbc	r21, r1
    1b3c:	46 1b       	sub	r20, r22
    1b3e:	57 0b       	sbc	r21, r23
    1b40:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	08 95       	ret

00001b48 <_ZN6String6concatEc>:
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <_ZN6String6concatEc+0x6>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	69 83       	std	Y+1, r22	; 0x01
    1b54:	1a 82       	std	Y+2, r1	; 0x02
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	be 01       	movw	r22, r28
    1b5c:	6f 5f       	subi	r22, 0xFF	; 255
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <_ZN6String6concatEh>:
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <_ZN6String6concatEh+0xe>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <_ZN6String6concatEh+0x10>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	7c 01       	movw	r14, r24
    1b84:	86 2f       	mov	r24, r22
    1b86:	4a e0       	ldi	r20, 0x0A	; 10
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	8e 01       	movw	r16, r28
    1b8c:	0f 5f       	subi	r16, 0xFF	; 255
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	b8 01       	movw	r22, r16
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <itoa>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	01 90       	ld	r0, Z+
    1b9c:	00 20       	and	r0, r0
    1b9e:	e9 f7       	brne	.-6      	; 0x1b9a <_ZN6String6concatEh+0x2c>
    1ba0:	af 01       	movw	r20, r30
    1ba2:	41 50       	subi	r20, 0x01	; 1
    1ba4:	51 09       	sbc	r21, r1
    1ba6:	40 1b       	sub	r20, r16
    1ba8:	51 0b       	sbc	r21, r17
    1baa:	b8 01       	movw	r22, r16
    1bac:	c7 01       	movw	r24, r14
    1bae:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	08 95       	ret

00001bc8 <_ZN6String6concatEi>:
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	27 97       	sbiw	r28, 0x07	; 7
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	7c 01       	movw	r14, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	4a e0       	ldi	r20, 0x0A	; 10
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	8e 01       	movw	r16, r28
    1bee:	0f 5f       	subi	r16, 0xFF	; 255
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	b8 01       	movw	r22, r16
    1bf4:	0e 94 2e 45 	call	0x8a5c	; 0x8a5c <itoa>
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	00 20       	and	r0, r0
    1bfe:	e9 f7       	brne	.-6      	; 0x1bfa <_ZN6String6concatEi+0x32>
    1c00:	af 01       	movw	r20, r30
    1c02:	41 50       	subi	r20, 0x01	; 1
    1c04:	51 09       	sbc	r21, r1
    1c06:	40 1b       	sub	r20, r16
    1c08:	51 0b       	sbc	r21, r17
    1c0a:	b8 01       	movw	r22, r16
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1c12:	27 96       	adiw	r28, 0x07	; 7
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	08 95       	ret

00001c2c <_ZN6String6concatEj>:
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <_ZN6String6concatEj+0xe>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <_ZN6String6concatEj+0x10>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <_ZN6String6concatEj+0x12>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	7c 01       	movw	r14, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	4a e0       	ldi	r20, 0x0A	; 10
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	0f 5f       	subi	r16, 0xFF	; 255
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	b8 01       	movw	r22, r16
    1c52:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <utoa>
    1c56:	f8 01       	movw	r30, r16
    1c58:	01 90       	ld	r0, Z+
    1c5a:	00 20       	and	r0, r0
    1c5c:	e9 f7       	brne	.-6      	; 0x1c58 <_ZN6String6concatEj+0x2c>
    1c5e:	af 01       	movw	r20, r30
    1c60:	41 50       	subi	r20, 0x01	; 1
    1c62:	51 09       	sbc	r21, r1
    1c64:	40 1b       	sub	r20, r16
    1c66:	51 0b       	sbc	r21, r17
    1c68:	b8 01       	movw	r22, r16
    1c6a:	c7 01       	movw	r24, r14
    1c6c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1c70:	26 96       	adiw	r28, 0x06	; 6
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	08 95       	ret

00001c8a <_ZN6String6concatEl>:
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	7c 01       	movw	r14, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	ba 01       	movw	r22, r20
    1cac:	2a e0       	ldi	r18, 0x0A	; 10
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	8e 01       	movw	r16, r28
    1cb2:	0f 5f       	subi	r16, 0xFF	; 255
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	a8 01       	movw	r20, r16
    1cb8:	0e 94 4f 45 	call	0x8a9e	; 0x8a9e <ltoa>
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	01 90       	ld	r0, Z+
    1cc0:	00 20       	and	r0, r0
    1cc2:	e9 f7       	brne	.-6      	; 0x1cbe <_ZN6String6concatEl+0x34>
    1cc4:	af 01       	movw	r20, r30
    1cc6:	41 50       	subi	r20, 0x01	; 1
    1cc8:	51 09       	sbc	r21, r1
    1cca:	40 1b       	sub	r20, r16
    1ccc:	51 0b       	sbc	r21, r17
    1cce:	b8 01       	movw	r22, r16
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1cd6:	2c 96       	adiw	r28, 0x0c	; 12
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	08 95       	ret

00001cf0 <_ZN6String6concatEm>:
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	2b 97       	sbiw	r28, 0x0b	; 11
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	7c 01       	movw	r14, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	ba 01       	movw	r22, r20
    1d12:	2a e0       	ldi	r18, 0x0A	; 10
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	8e 01       	movw	r16, r28
    1d18:	0f 5f       	subi	r16, 0xFF	; 255
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	a8 01       	movw	r20, r16
    1d1e:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <ultoa>
    1d22:	f8 01       	movw	r30, r16
    1d24:	01 90       	ld	r0, Z+
    1d26:	00 20       	and	r0, r0
    1d28:	e9 f7       	brne	.-6      	; 0x1d24 <_ZN6String6concatEm+0x34>
    1d2a:	af 01       	movw	r20, r30
    1d2c:	41 50       	subi	r20, 0x01	; 1
    1d2e:	51 09       	sbc	r21, r1
    1d30:	40 1b       	sub	r20, r16
    1d32:	51 0b       	sbc	r21, r17
    1d34:	b8 01       	movw	r22, r16
    1d36:	c7 01       	movw	r24, r14
    1d38:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1d3c:	2b 96       	adiw	r28, 0x0b	; 11
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	08 95       	ret

00001d56 <_ZplRK15StringSumHelperRK6String>:
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	d8 2f       	mov	r29, r24
    1d5c:	c9 2f       	mov	r28, r25
    1d5e:	fb 01       	movw	r30, r22
    1d60:	44 81       	ldd	r20, Z+4	; 0x04
    1d62:	55 81       	ldd	r21, Z+5	; 0x05
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <_ZplRK15StringSumHelperRK6String+0x22>
    1d70:	8d 2f       	mov	r24, r29
    1d72:	9c 2f       	mov	r25, r28
    1d74:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1d78:	8d 2f       	mov	r24, r29
    1d7a:	9c 2f       	mov	r25, r28
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <_ZplRK15StringSumHelperPKc>:
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	d8 2f       	mov	r29, r24
    1d88:	c9 2f       	mov	r28, r25
    1d8a:	61 15       	cp	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	69 f0       	breq	.+26     	; 0x1daa <_ZplRK15StringSumHelperPKc+0x28>
    1d90:	db 01       	movw	r26, r22
    1d92:	0d 90       	ld	r0, X+
    1d94:	00 20       	and	r0, r0
    1d96:	e9 f7       	brne	.-6      	; 0x1d92 <_ZplRK15StringSumHelperPKc+0x10>
    1d98:	ad 01       	movw	r20, r26
    1d9a:	41 50       	subi	r20, 0x01	; 1
    1d9c:	51 09       	sbc	r21, r1
    1d9e:	46 1b       	sub	r20, r22
    1da0:	57 0b       	sbc	r21, r23
    1da2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1da6:	81 11       	cpse	r24, r1
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <_ZplRK15StringSumHelperPKc+0x30>
    1daa:	8d 2f       	mov	r24, r29
    1dac:	9c 2f       	mov	r25, r28
    1dae:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1db2:	8d 2f       	mov	r24, r29
    1db4:	9c 2f       	mov	r25, r28
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <_ZplRK15StringSumHelperc>:
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	d8 2f       	mov	r29, r24
    1dc2:	c9 2f       	mov	r28, r25
    1dc4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN6String6concatEc>
    1dc8:	81 11       	cpse	r24, r1
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <_ZplRK15StringSumHelperc+0x18>
    1dcc:	8d 2f       	mov	r24, r29
    1dce:	9c 2f       	mov	r25, r28
    1dd0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1dd4:	8d 2f       	mov	r24, r29
    1dd6:	9c 2f       	mov	r25, r28
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	08 95       	ret

00001dde <_ZplRK15StringSumHelperh>:
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	d8 2f       	mov	r29, r24
    1de4:	c9 2f       	mov	r28, r25
    1de6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN6String6concatEh>
    1dea:	81 11       	cpse	r24, r1
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <_ZplRK15StringSumHelperh+0x18>
    1dee:	8d 2f       	mov	r24, r29
    1df0:	9c 2f       	mov	r25, r28
    1df2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1df6:	8d 2f       	mov	r24, r29
    1df8:	9c 2f       	mov	r25, r28
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <_ZplRK15StringSumHelperi>:
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	d8 2f       	mov	r29, r24
    1e06:	c9 2f       	mov	r28, r25
    1e08:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_ZN6String6concatEi>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <_ZplRK15StringSumHelperi+0x18>
    1e10:	8d 2f       	mov	r24, r29
    1e12:	9c 2f       	mov	r25, r28
    1e14:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e18:	8d 2f       	mov	r24, r29
    1e1a:	9c 2f       	mov	r25, r28
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	08 95       	ret

00001e22 <_ZplRK15StringSumHelperj>:
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	d8 2f       	mov	r29, r24
    1e28:	c9 2f       	mov	r28, r25
    1e2a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_ZN6String6concatEj>
    1e2e:	81 11       	cpse	r24, r1
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <_ZplRK15StringSumHelperj+0x18>
    1e32:	8d 2f       	mov	r24, r29
    1e34:	9c 2f       	mov	r25, r28
    1e36:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e3a:	8d 2f       	mov	r24, r29
    1e3c:	9c 2f       	mov	r25, r28
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <_ZplRK15StringSumHelperl>:
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	d8 2f       	mov	r29, r24
    1e4a:	c9 2f       	mov	r28, r25
    1e4c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN6String6concatEl>
    1e50:	81 11       	cpse	r24, r1
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <_ZplRK15StringSumHelperl+0x18>
    1e54:	8d 2f       	mov	r24, r29
    1e56:	9c 2f       	mov	r25, r28
    1e58:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e5c:	8d 2f       	mov	r24, r29
    1e5e:	9c 2f       	mov	r25, r28
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <_ZplRK15StringSumHelperm>:
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	d8 2f       	mov	r29, r24
    1e6c:	c9 2f       	mov	r28, r25
    1e6e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_ZN6String6concatEm>
    1e72:	81 11       	cpse	r24, r1
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <_ZplRK15StringSumHelperm+0x18>
    1e76:	8d 2f       	mov	r24, r29
    1e78:	9c 2f       	mov	r25, r28
    1e7a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e7e:	8d 2f       	mov	r24, r29
    1e80:	9c 2f       	mov	r25, r28
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <_ZNK6String9compareToERKS_>:
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	ed 91       	ld	r30, X+
    1e90:	fc 91       	ld	r31, X
    1e92:	eb 01       	movw	r28, r22
    1e94:	a8 81       	ld	r26, Y
    1e96:	b9 81       	ldd	r27, Y+1	; 0x01
    1e98:	30 97       	sbiw	r30, 0x00	; 0
    1e9a:	11 f0       	breq	.+4      	; 0x1ea0 <_ZNK6String9compareToERKS_+0x18>
    1e9c:	10 97       	sbiw	r26, 0x00	; 0
    1e9e:	c9 f4       	brne	.+50     	; 0x1ed2 <_ZNK6String9compareToERKS_+0x4a>
    1ea0:	10 97       	sbiw	r26, 0x00	; 0
    1ea2:	59 f0       	breq	.+22     	; 0x1eba <_ZNK6String9compareToERKS_+0x32>
    1ea4:	eb 01       	movw	r28, r22
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	23 2b       	or	r18, r19
    1eac:	31 f0       	breq	.+12     	; 0x1eba <_ZNK6String9compareToERKS_+0x32>
    1eae:	2c 91       	ld	r18, X
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	31 95       	neg	r19
    1eb4:	21 95       	neg	r18
    1eb6:	31 09       	sbc	r19, r1
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <_ZNK6String9compareToERKS_+0x5a>
    1eba:	30 97       	sbiw	r30, 0x00	; 0
    1ebc:	81 f0       	breq	.+32     	; 0x1ede <_ZNK6String9compareToERKS_+0x56>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	14 96       	adiw	r26, 0x04	; 4
    1ec2:	8d 91       	ld	r24, X+
    1ec4:	9c 91       	ld	r25, X
    1ec6:	15 97       	sbiw	r26, 0x05	; 5
    1ec8:	89 2b       	or	r24, r25
    1eca:	49 f0       	breq	.+18     	; 0x1ede <_ZNK6String9compareToERKS_+0x56>
    1ecc:	20 81       	ld	r18, Z
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	08 c0       	rjmp	.+16     	; 0x1ee2 <_ZNK6String9compareToERKS_+0x5a>
    1ed2:	bd 01       	movw	r22, r26
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	0c 94 b5 44 	jmp	0x896a	; 0x896a <strcmp>
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	c9 01       	movw	r24, r18
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	08 95       	ret

00001eea <_ZNK6String6equalsERKS_>:
    1eea:	fc 01       	movw	r30, r24
    1eec:	44 81       	ldd	r20, Z+4	; 0x04
    1eee:	55 81       	ldd	r21, Z+5	; 0x05
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	24 81       	ldd	r18, Z+4	; 0x04
    1ef4:	35 81       	ldd	r19, Z+5	; 0x05
    1ef6:	42 17       	cp	r20, r18
    1ef8:	53 07       	cpc	r21, r19
    1efa:	29 f4       	brne	.+10     	; 0x1f06 <_ZNK6String6equalsERKS_+0x1c>
    1efc:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f00:	21 e0       	ldi	r18, 0x01	; 1
    1f02:	89 2b       	or	r24, r25
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <_ZNK6String6equalsERKS_+0x1e>
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	82 2f       	mov	r24, r18
    1f0a:	08 95       	ret

00001f0c <_ZNK6String6equalsEPKc>:
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	14 96       	adiw	r26, 0x04	; 4
    1f10:	2d 91       	ld	r18, X+
    1f12:	3c 91       	ld	r19, X
    1f14:	15 97       	sbiw	r26, 0x05	; 5
    1f16:	23 2b       	or	r18, r19
    1f18:	39 f4       	brne	.+14     	; 0x1f28 <_ZNK6String6equalsEPKc+0x1c>
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	61 15       	cp	r22, r1
    1f1e:	71 05       	cpc	r23, r1
    1f20:	11 f0       	breq	.+4      	; 0x1f26 <_ZNK6String6equalsEPKc+0x1a>
    1f22:	fb 01       	movw	r30, r22
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <_ZNK6String6equalsEPKc+0x2a>
    1f26:	08 95       	ret
    1f28:	dc 01       	movw	r26, r24
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	61 15       	cp	r22, r1
    1f30:	71 05       	cpc	r23, r1
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <_ZNK6String6equalsEPKc+0x32>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 81       	ld	r25, Z
    1f38:	99 23       	and	r25, r25
    1f3a:	49 f0       	breq	.+18     	; 0x1f4e <_ZNK6String6equalsEPKc+0x42>
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <_ZNK6String6equalsEPKc+0x40>
    1f3e:	cf 01       	movw	r24, r30
    1f40:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    1f44:	9c 01       	movw	r18, r24
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	23 2b       	or	r18, r19
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <_ZNK6String6equalsEPKc+0x42>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	08 95       	ret

00001f50 <_ZNK6StringltERKS_>:
    1f50:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f54:	89 2f       	mov	r24, r25
    1f56:	88 1f       	adc	r24, r24
    1f58:	88 27       	eor	r24, r24
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	08 95       	ret

00001f5e <_ZNK6StringgtERKS_>:
    1f5e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	18 16       	cp	r1, r24
    1f66:	19 06       	cpc	r1, r25
    1f68:	0c f0       	brlt	.+2      	; 0x1f6c <_ZNK6StringgtERKS_+0xe>
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	82 2f       	mov	r24, r18
    1f6e:	08 95       	ret

00001f70 <_ZNK6StringleERKS_>:
    1f70:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f74:	21 e0       	ldi	r18, 0x01	; 1
    1f76:	18 16       	cp	r1, r24
    1f78:	19 06       	cpc	r1, r25
    1f7a:	0c f4       	brge	.+2      	; 0x1f7e <_ZNK6StringleERKS_+0xe>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	82 2f       	mov	r24, r18
    1f80:	08 95       	ret

00001f82 <_ZNK6StringgeERKS_>:
    1f82:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f86:	89 2f       	mov	r24, r25
    1f88:	80 95       	com	r24
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	88 27       	eor	r24, r24
    1f8e:	88 1f       	adc	r24, r24
    1f90:	08 95       	ret

00001f92 <_ZNK6String16equalsIgnoreCaseERKS_>:
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	86 17       	cp	r24, r22
    1fa0:	97 07       	cpc	r25, r23
    1fa2:	09 f1       	breq	.+66     	; 0x1fe6 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	24 81       	ldd	r18, Z+4	; 0x04
    1fa8:	35 81       	ldd	r19, Z+5	; 0x05
    1faa:	fb 01       	movw	r30, r22
    1fac:	44 81       	ldd	r20, Z+4	; 0x04
    1fae:	55 81       	ldd	r21, Z+5	; 0x05
    1fb0:	24 17       	cp	r18, r20
    1fb2:	35 07       	cpc	r19, r21
    1fb4:	d1 f4       	brne	.+52     	; 0x1fea <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fb6:	23 2b       	or	r18, r19
    1fb8:	b1 f0       	breq	.+44     	; 0x1fe6 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fba:	c0 81       	ld	r28, Z
    1fbc:	d1 81       	ldd	r29, Z+1	; 0x01
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	00 81       	ld	r16, Z
    1fc2:	11 81       	ldd	r17, Z+1	; 0x01
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <tolower>
    1fcc:	7c 01       	movw	r14, r24
    1fce:	89 91       	ld	r24, Y+
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <tolower>
    1fd6:	e8 16       	cp	r14, r24
    1fd8:	f9 06       	cpc	r15, r25
    1fda:	39 f4       	brne	.+14     	; 0x1fea <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fdc:	f8 01       	movw	r30, r16
    1fde:	81 91       	ld	r24, Z+
    1fe0:	8f 01       	movw	r16, r30
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	f0 cf       	rjmp	.-32     	; 0x1fc6 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	08 95       	ret

00001ffa <_ZNK6String10startsWithERKS_j>:
    1ffa:	fa 01       	movw	r30, r20
    1ffc:	db 01       	movw	r26, r22
    1ffe:	14 96       	adiw	r26, 0x04	; 4
    2000:	4d 91       	ld	r20, X+
    2002:	5c 91       	ld	r21, X
    2004:	15 97       	sbiw	r26, 0x05	; 5
    2006:	dc 01       	movw	r26, r24
    2008:	14 96       	adiw	r26, 0x04	; 4
    200a:	2d 91       	ld	r18, X+
    200c:	3c 91       	ld	r19, X
    200e:	15 97       	sbiw	r26, 0x05	; 5
    2010:	24 1b       	sub	r18, r20
    2012:	35 0b       	sbc	r19, r21
    2014:	2e 17       	cp	r18, r30
    2016:	3f 07       	cpc	r19, r31
    2018:	90 f0       	brcs	.+36     	; 0x203e <_ZNK6String10startsWithERKS_j+0x44>
    201a:	8d 91       	ld	r24, X+
    201c:	9c 91       	ld	r25, X
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	71 f0       	breq	.+28     	; 0x203e <_ZNK6String10startsWithERKS_j+0x44>
    2022:	db 01       	movw	r26, r22
    2024:	6d 91       	ld	r22, X+
    2026:	7c 91       	ld	r23, X
    2028:	61 15       	cp	r22, r1
    202a:	71 05       	cpc	r23, r1
    202c:	41 f0       	breq	.+16     	; 0x203e <_ZNK6String10startsWithERKS_j+0x44>
    202e:	8e 0f       	add	r24, r30
    2030:	9f 1f       	adc	r25, r31
    2032:	0e 94 c5 44 	call	0x898a	; 0x898a <strncmp>
    2036:	9c 01       	movw	r18, r24
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	23 2b       	or	r18, r19
    203c:	09 f0       	breq	.+2      	; 0x2040 <_ZNK6String10startsWithERKS_j+0x46>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	08 95       	ret

00002042 <_ZNK6String10startsWithERKS_>:
    2042:	fc 01       	movw	r30, r24
    2044:	44 81       	ldd	r20, Z+4	; 0x04
    2046:	55 81       	ldd	r21, Z+5	; 0x05
    2048:	fb 01       	movw	r30, r22
    204a:	24 81       	ldd	r18, Z+4	; 0x04
    204c:	35 81       	ldd	r19, Z+5	; 0x05
    204e:	42 17       	cp	r20, r18
    2050:	53 07       	cpc	r21, r19
    2052:	20 f0       	brcs	.+8      	; 0x205c <_ZNK6String10startsWithERKS_+0x1a>
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <_ZNK6String10startsWithERKS_j>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	08 95       	ret

00002060 <_ZNK6String8endsWithERKS_>:
    2060:	fc 01       	movw	r30, r24
    2062:	84 81       	ldd	r24, Z+4	; 0x04
    2064:	95 81       	ldd	r25, Z+5	; 0x05
    2066:	db 01       	movw	r26, r22
    2068:	14 96       	adiw	r26, 0x04	; 4
    206a:	4d 91       	ld	r20, X+
    206c:	5c 91       	ld	r21, X
    206e:	15 97       	sbiw	r26, 0x05	; 5
    2070:	84 17       	cp	r24, r20
    2072:	95 07       	cpc	r25, r21
    2074:	a0 f0       	brcs	.+40     	; 0x209e <_ZNK6String8endsWithERKS_+0x3e>
    2076:	20 81       	ld	r18, Z
    2078:	31 81       	ldd	r19, Z+1	; 0x01
    207a:	21 15       	cp	r18, r1
    207c:	31 05       	cpc	r19, r1
    207e:	79 f0       	breq	.+30     	; 0x209e <_ZNK6String8endsWithERKS_+0x3e>
    2080:	6d 91       	ld	r22, X+
    2082:	7c 91       	ld	r23, X
    2084:	61 15       	cp	r22, r1
    2086:	71 05       	cpc	r23, r1
    2088:	51 f0       	breq	.+20     	; 0x209e <_ZNK6String8endsWithERKS_+0x3e>
    208a:	84 1b       	sub	r24, r20
    208c:	95 0b       	sbc	r25, r21
    208e:	82 0f       	add	r24, r18
    2090:	93 1f       	adc	r25, r19
    2092:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    2096:	9c 01       	movw	r18, r24
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	23 2b       	or	r18, r19
    209c:	09 f0       	breq	.+2      	; 0x20a0 <_ZNK6String8endsWithERKS_+0x40>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	08 95       	ret

000020a2 <_ZN6String9setCharAtEjc>:
    20a2:	dc 01       	movw	r26, r24
    20a4:	14 96       	adiw	r26, 0x04	; 4
    20a6:	2d 91       	ld	r18, X+
    20a8:	3c 91       	ld	r19, X
    20aa:	15 97       	sbiw	r26, 0x05	; 5
    20ac:	62 17       	cp	r22, r18
    20ae:	73 07       	cpc	r23, r19
    20b0:	28 f4       	brcc	.+10     	; 0x20bc <_ZN6String9setCharAtEjc+0x1a>
    20b2:	ed 91       	ld	r30, X+
    20b4:	fc 91       	ld	r31, X
    20b6:	e6 0f       	add	r30, r22
    20b8:	f7 1f       	adc	r31, r23
    20ba:	40 83       	st	Z, r20
    20bc:	08 95       	ret

000020be <_ZN6StringixEj>:
    20be:	fc 01       	movw	r30, r24
    20c0:	24 81       	ldd	r18, Z+4	; 0x04
    20c2:	35 81       	ldd	r19, Z+5	; 0x05
    20c4:	62 17       	cp	r22, r18
    20c6:	73 07       	cpc	r23, r19
    20c8:	20 f4       	brcc	.+8      	; 0x20d2 <_ZN6StringixEj+0x14>
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	29 f4       	brne	.+10     	; 0x20dc <_ZN6StringixEj+0x1e>
    20d2:	10 92 2e 09 	sts	0x092E, r1
    20d6:	6e e2       	ldi	r22, 0x2E	; 46
    20d8:	79 e0       	ldi	r23, 0x09	; 9
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <_ZN6StringixEj+0x22>
    20dc:	68 0f       	add	r22, r24
    20de:	79 1f       	adc	r23, r25
    20e0:	cb 01       	movw	r24, r22
    20e2:	08 95       	ret

000020e4 <_ZNK6StringixEj>:
    20e4:	fc 01       	movw	r30, r24
    20e6:	24 81       	ldd	r18, Z+4	; 0x04
    20e8:	35 81       	ldd	r19, Z+5	; 0x05
    20ea:	62 17       	cp	r22, r18
    20ec:	73 07       	cpc	r23, r19
    20ee:	48 f4       	brcc	.+18     	; 0x2102 <_ZNK6StringixEj+0x1e>
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	29 f0       	breq	.+10     	; 0x2102 <_ZNK6StringixEj+0x1e>
    20f8:	fc 01       	movw	r30, r24
    20fa:	e6 0f       	add	r30, r22
    20fc:	f7 1f       	adc	r31, r23
    20fe:	80 81       	ld	r24, Z
    2100:	08 95       	ret
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	08 95       	ret

00002106 <_ZNK6String6charAtEj>:
    2106:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <_ZNK6StringixEj>

0000210a <_ZNK6String8getBytesEPhjj>:
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	eb 01       	movw	r28, r22
    2114:	41 15       	cp	r20, r1
    2116:	51 05       	cpc	r21, r1
    2118:	e9 f0       	breq	.+58     	; 0x2154 <_ZNK6String8getBytesEPhjj+0x4a>
    211a:	20 97       	sbiw	r28, 0x00	; 0
    211c:	d9 f0       	breq	.+54     	; 0x2154 <_ZNK6String8getBytesEPhjj+0x4a>
    211e:	fc 01       	movw	r30, r24
    2120:	04 81       	ldd	r16, Z+4	; 0x04
    2122:	15 81       	ldd	r17, Z+5	; 0x05
    2124:	20 17       	cp	r18, r16
    2126:	31 07       	cpc	r19, r17
    2128:	08 f0       	brcs	.+2      	; 0x212c <_ZNK6String8getBytesEPhjj+0x22>
    212a:	13 c0       	rjmp	.+38     	; 0x2152 <_ZNK6String8getBytesEPhjj+0x48>
    212c:	41 50       	subi	r20, 0x01	; 1
    212e:	51 09       	sbc	r21, r1
    2130:	02 1b       	sub	r16, r18
    2132:	13 0b       	sbc	r17, r19
    2134:	40 17       	cp	r20, r16
    2136:	51 07       	cpc	r21, r17
    2138:	08 f4       	brcc	.+2      	; 0x213c <_ZNK6String8getBytesEPhjj+0x32>
    213a:	8a 01       	movw	r16, r20
    213c:	fc 01       	movw	r30, r24
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	62 0f       	add	r22, r18
    2144:	73 1f       	adc	r23, r19
    2146:	a8 01       	movw	r20, r16
    2148:	ce 01       	movw	r24, r28
    214a:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <strncpy>
    214e:	c0 0f       	add	r28, r16
    2150:	d1 1f       	adc	r29, r17
    2152:	18 82       	st	Y, r1
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	08 95       	ret

0000215e <_ZNK6String7indexOfEcj>:
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	fc 01       	movw	r30, r24
    2164:	84 81       	ldd	r24, Z+4	; 0x04
    2166:	95 81       	ldd	r25, Z+5	; 0x05
    2168:	48 17       	cp	r20, r24
    216a:	59 07       	cpc	r21, r25
    216c:	70 f4       	brcc	.+28     	; 0x218a <_ZNK6String7indexOfEcj+0x2c>
    216e:	c0 81       	ld	r28, Z
    2170:	d1 81       	ldd	r29, Z+1	; 0x01
    2172:	70 e0       	ldi	r23, 0x00	; 0
    2174:	ce 01       	movw	r24, r28
    2176:	84 0f       	add	r24, r20
    2178:	95 1f       	adc	r25, r21
    217a:	0e 94 aa 44 	call	0x8954	; 0x8954 <strchr>
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	21 f0       	breq	.+8      	; 0x218a <_ZNK6String7indexOfEcj+0x2c>
    2182:	9c 01       	movw	r18, r24
    2184:	2c 1b       	sub	r18, r28
    2186:	3d 0b       	sbc	r19, r29
    2188:	02 c0       	rjmp	.+4      	; 0x218e <_ZNK6String7indexOfEcj+0x30>
    218a:	2f ef       	ldi	r18, 0xFF	; 255
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	c9 01       	movw	r24, r18
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	08 95       	ret

00002196 <_ZNK6String7indexOfEc>:
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	0c 94 af 10 	jmp	0x215e	; 0x215e <_ZNK6String7indexOfEcj>

0000219e <_ZNK6String7indexOfERKS_j>:
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	fc 01       	movw	r30, r24
    21a4:	84 81       	ldd	r24, Z+4	; 0x04
    21a6:	95 81       	ldd	r25, Z+5	; 0x05
    21a8:	48 17       	cp	r20, r24
    21aa:	59 07       	cpc	r21, r25
    21ac:	80 f4       	brcc	.+32     	; 0x21ce <_ZNK6String7indexOfERKS_j+0x30>
    21ae:	c0 81       	ld	r28, Z
    21b0:	d1 81       	ldd	r29, Z+1	; 0x01
    21b2:	fb 01       	movw	r30, r22
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	ce 01       	movw	r24, r28
    21ba:	84 0f       	add	r24, r20
    21bc:	95 1f       	adc	r25, r21
    21be:	0e 94 ed 44 	call	0x89da	; 0x89da <strstr>
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	21 f0       	breq	.+8      	; 0x21ce <_ZNK6String7indexOfERKS_j+0x30>
    21c6:	9c 01       	movw	r18, r24
    21c8:	2c 1b       	sub	r18, r28
    21ca:	3d 0b       	sbc	r19, r29
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <_ZNK6String7indexOfERKS_j+0x34>
    21ce:	2f ef       	ldi	r18, 0xFF	; 255
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	c9 01       	movw	r24, r18
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <_ZNK6String7indexOfERKS_>:
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	0c 94 cf 10 	jmp	0x219e	; 0x219e <_ZNK6String7indexOfERKS_j>

000021e2 <_ZNK6String11lastIndexOfEcj>:
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	ec 01       	movw	r28, r24
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	48 17       	cp	r20, r24
    21f8:	59 07       	cpc	r21, r25
    21fa:	18 f0       	brcs	.+6      	; 0x2202 <__stack+0x3>
    21fc:	2f ef       	ldi	r18, 0xFF	; 255
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	1b c0       	rjmp	.+54     	; 0x2238 <__stack+0x39>
    2202:	8a 01       	movw	r16, r20
    2204:	0f 5f       	subi	r16, 0xFF	; 255
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	e8 81       	ld	r30, Y
    220a:	f9 81       	ldd	r31, Y+1	; 0x01
    220c:	e0 0f       	add	r30, r16
    220e:	f1 1f       	adc	r31, r17
    2210:	d0 80       	ld	r13, Z
    2212:	10 82       	st	Z, r1
    2214:	e8 80       	ld	r14, Y
    2216:	f9 80       	ldd	r15, Y+1	; 0x01
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	c7 01       	movw	r24, r14
    221c:	0e 94 e2 44 	call	0x89c4	; 0x89c4 <strrchr>
    2220:	f7 01       	movw	r30, r14
    2222:	e0 0f       	add	r30, r16
    2224:	f1 1f       	adc	r31, r17
    2226:	d0 82       	st	Z, r13
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	41 f3       	breq	.-48     	; 0x21fc <_ZNK6String11lastIndexOfEcj+0x1a>
    222c:	28 81       	ld	r18, Y
    222e:	39 81       	ldd	r19, Y+1	; 0x01
    2230:	ac 01       	movw	r20, r24
    2232:	42 1b       	sub	r20, r18
    2234:	53 0b       	sbc	r21, r19
    2236:	9a 01       	movw	r18, r20
    2238:	c9 01       	movw	r24, r18
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	08 95       	ret

0000224a <_ZNK6String11lastIndexOfEc>:
    224a:	fc 01       	movw	r30, r24
    224c:	44 81       	ldd	r20, Z+4	; 0x04
    224e:	55 81       	ldd	r21, Z+5	; 0x05
    2250:	41 50       	subi	r20, 0x01	; 1
    2252:	51 09       	sbc	r21, r1
    2254:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <_ZNK6String11lastIndexOfEcj>

00002258 <_ZNK6String11lastIndexOfERKS_j>:
    2258:	af 92       	push	r10
    225a:	bf 92       	push	r11
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	6b 01       	movw	r12, r22
    226e:	8a 01       	movw	r16, r20
    2270:	fb 01       	movw	r30, r22
    2272:	44 81       	ldd	r20, Z+4	; 0x04
    2274:	55 81       	ldd	r21, Z+5	; 0x05
    2276:	41 15       	cp	r20, r1
    2278:	51 05       	cpc	r21, r1
    227a:	69 f1       	breq	.+90     	; 0x22d6 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    227c:	fc 01       	movw	r30, r24
    227e:	24 81       	ldd	r18, Z+4	; 0x04
    2280:	35 81       	ldd	r19, Z+5	; 0x05
    2282:	21 15       	cp	r18, r1
    2284:	31 05       	cpc	r19, r1
    2286:	39 f1       	breq	.+78     	; 0x22d6 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2288:	24 17       	cp	r18, r20
    228a:	35 07       	cpc	r19, r21
    228c:	20 f1       	brcs	.+72     	; 0x22d6 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    228e:	02 17       	cp	r16, r18
    2290:	13 07       	cpc	r17, r19
    2292:	18 f0       	brcs	.+6      	; 0x229a <_ZNK6String11lastIndexOfERKS_j+0x42>
    2294:	89 01       	movw	r16, r18
    2296:	01 50       	subi	r16, 0x01	; 1
    2298:	11 09       	sbc	r17, r1
    229a:	fc 01       	movw	r30, r24
    229c:	e0 80       	ld	r14, Z
    229e:	f1 80       	ldd	r15, Z+1	; 0x01
    22a0:	c7 01       	movw	r24, r14
    22a2:	cf ef       	ldi	r28, 0xFF	; 255
    22a4:	df ef       	ldi	r29, 0xFF	; 255
    22a6:	57 01       	movw	r10, r14
    22a8:	a0 0e       	add	r10, r16
    22aa:	b1 1e       	adc	r11, r17
    22ac:	10 c0       	rjmp	.+32     	; 0x22ce <_ZNK6String11lastIndexOfERKS_j+0x76>
    22ae:	f6 01       	movw	r30, r12
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	0e 94 ed 44 	call	0x89da	; 0x89da <strstr>
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	79 f0       	breq	.+30     	; 0x22da <_ZNK6String11lastIndexOfERKS_j+0x82>
    22bc:	9c 01       	movw	r18, r24
    22be:	2e 19       	sub	r18, r14
    22c0:	3f 09       	sbc	r19, r15
    22c2:	02 17       	cp	r16, r18
    22c4:	13 07       	cpc	r17, r19
    22c6:	08 f4       	brcc	.+2      	; 0x22ca <_ZNK6String11lastIndexOfERKS_j+0x72>
    22c8:	9e 01       	movw	r18, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	e9 01       	movw	r28, r18
    22ce:	a8 16       	cp	r10, r24
    22d0:	b9 06       	cpc	r11, r25
    22d2:	68 f7       	brcc	.-38     	; 0x22ae <_ZNK6String11lastIndexOfERKS_j+0x56>
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <_ZNK6String11lastIndexOfERKS_j+0x82>
    22d6:	cf ef       	ldi	r28, 0xFF	; 255
    22d8:	df ef       	ldi	r29, 0xFF	; 255
    22da:	ce 01       	movw	r24, r28
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	df 90       	pop	r13
    22ea:	cf 90       	pop	r12
    22ec:	bf 90       	pop	r11
    22ee:	af 90       	pop	r10
    22f0:	08 95       	ret

000022f2 <_ZNK6String11lastIndexOfERKS_>:
    22f2:	fc 01       	movw	r30, r24
    22f4:	44 81       	ldd	r20, Z+4	; 0x04
    22f6:	55 81       	ldd	r21, Z+5	; 0x05
    22f8:	fb 01       	movw	r30, r22
    22fa:	24 81       	ldd	r18, Z+4	; 0x04
    22fc:	35 81       	ldd	r19, Z+5	; 0x05
    22fe:	42 1b       	sub	r20, r18
    2300:	53 0b       	sbc	r21, r19
    2302:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <_ZNK6String11lastIndexOfERKS_j>

00002306 <_ZNK6String9substringEjj>:
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	6c 01       	movw	r12, r24
    231a:	7b 01       	movw	r14, r22
    231c:	ea 01       	movw	r28, r20
    231e:	89 01       	movw	r16, r18
    2320:	24 17       	cp	r18, r20
    2322:	35 07       	cpc	r19, r21
    2324:	20 f4       	brcc	.+8      	; 0x232e <_ZNK6String9substringEjj+0x28>
    2326:	8d 2f       	mov	r24, r29
    2328:	e9 01       	movw	r28, r18
    232a:	04 2f       	mov	r16, r20
    232c:	18 2f       	mov	r17, r24
    232e:	63 ef       	ldi	r22, 0xF3	; 243
    2330:	74 e0       	ldi	r23, 0x04	; 4
    2332:	c6 01       	movw	r24, r12
    2334:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN6StringC1EPKc>
    2338:	d7 01       	movw	r26, r14
    233a:	14 96       	adiw	r26, 0x04	; 4
    233c:	8d 91       	ld	r24, X+
    233e:	9c 91       	ld	r25, X
    2340:	15 97       	sbiw	r26, 0x05	; 5
    2342:	8c 17       	cp	r24, r28
    2344:	9d 07       	cpc	r25, r29
    2346:	c8 f0       	brcs	.+50     	; 0x237a <_ZNK6String9substringEjj+0x74>
    2348:	80 17       	cp	r24, r16
    234a:	91 07       	cpc	r25, r17
    234c:	08 f4       	brcc	.+2      	; 0x2350 <_ZNK6String9substringEjj+0x4a>
    234e:	8c 01       	movw	r16, r24
    2350:	d7 01       	movw	r26, r14
    2352:	ed 91       	ld	r30, X+
    2354:	fc 91       	ld	r31, X
    2356:	11 97       	sbiw	r26, 0x01	; 1
    2358:	e0 0f       	add	r30, r16
    235a:	f1 1f       	adc	r31, r17
    235c:	b0 80       	ld	r11, Z
    235e:	10 82       	st	Z, r1
    2360:	6d 91       	ld	r22, X+
    2362:	7c 91       	ld	r23, X
    2364:	6c 0f       	add	r22, r28
    2366:	7d 1f       	adc	r23, r29
    2368:	c6 01       	movw	r24, r12
    236a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    236e:	d7 01       	movw	r26, r14
    2370:	ed 91       	ld	r30, X+
    2372:	fc 91       	ld	r31, X
    2374:	e0 0f       	add	r30, r16
    2376:	f1 1f       	adc	r31, r17
    2378:	b0 82       	st	Z, r11
    237a:	c6 01       	movw	r24, r12
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	cf 90       	pop	r12
    238c:	bf 90       	pop	r11
    238e:	08 95       	ret

00002390 <_ZNK6String9substringEj>:
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	ec 01       	movw	r28, r24
    2396:	fb 01       	movw	r30, r22
    2398:	24 81       	ldd	r18, Z+4	; 0x04
    239a:	35 81       	ldd	r19, Z+5	; 0x05
    239c:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZNK6String9substringEjj>
    23a0:	ce 01       	movw	r24, r28
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <_ZN6String7replaceEcc>:
    23a8:	dc 01       	movw	r26, r24
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	30 97       	sbiw	r30, 0x00	; 0
    23b0:	29 f4       	brne	.+10     	; 0x23bc <_ZN6String7replaceEcc+0x14>
    23b2:	08 95       	ret
    23b4:	86 13       	cpse	r24, r22
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <_ZN6String7replaceEcc+0x12>
    23b8:	40 83       	st	Z, r20
    23ba:	31 96       	adiw	r30, 0x01	; 1
    23bc:	80 81       	ld	r24, Z
    23be:	81 11       	cpse	r24, r1
    23c0:	f9 cf       	rjmp	.-14     	; 0x23b4 <_ZN6String7replaceEcc+0xc>
    23c2:	08 95       	ret

000023c4 <_ZN6String7replaceERKS_S1_>:
    23c4:	2f 92       	push	r2
    23c6:	3f 92       	push	r3
    23c8:	4f 92       	push	r4
    23ca:	5f 92       	push	r5
    23cc:	6f 92       	push	r6
    23ce:	7f 92       	push	r7
    23d0:	8f 92       	push	r8
    23d2:	9f 92       	push	r9
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	cf 92       	push	r12
    23da:	df 92       	push	r13
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	8c 01       	movw	r16, r24
    23ea:	5b 01       	movw	r10, r22
    23ec:	7a 01       	movw	r14, r20
    23ee:	dc 01       	movw	r26, r24
    23f0:	14 96       	adiw	r26, 0x04	; 4
    23f2:	6d 90       	ld	r6, X+
    23f4:	7c 90       	ld	r7, X
    23f6:	15 97       	sbiw	r26, 0x05	; 5
    23f8:	61 14       	cp	r6, r1
    23fa:	71 04       	cpc	r7, r1
    23fc:	09 f4       	brne	.+2      	; 0x2400 <_ZN6String7replaceERKS_S1_+0x3c>
    23fe:	e1 c0       	rjmp	.+450    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2400:	fb 01       	movw	r30, r22
    2402:	44 80       	ldd	r4, Z+4	; 0x04
    2404:	55 80       	ldd	r5, Z+5	; 0x05
    2406:	41 14       	cp	r4, r1
    2408:	51 04       	cpc	r5, r1
    240a:	09 f4       	brne	.+2      	; 0x240e <_ZN6String7replaceERKS_S1_+0x4a>
    240c:	da c0       	rjmp	.+436    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    240e:	da 01       	movw	r26, r20
    2410:	14 96       	adiw	r26, 0x04	; 4
    2412:	cd 90       	ld	r12, X+
    2414:	dc 90       	ld	r13, X
    2416:	15 97       	sbiw	r26, 0x05	; 5
    2418:	c4 18       	sub	r12, r4
    241a:	d5 08       	sbc	r13, r5
    241c:	fc 01       	movw	r30, r24
    241e:	c0 81       	ld	r28, Z
    2420:	d1 81       	ldd	r29, Z+1	; 0x01
    2422:	c1 14       	cp	r12, r1
    2424:	d1 04       	cpc	r13, r1
    2426:	e1 f4       	brne	.+56     	; 0x2460 <_ZN6String7replaceERKS_S1_+0x9c>
    2428:	11 c0       	rjmp	.+34     	; 0x244c <_ZN6String7replaceERKS_S1_+0x88>
    242a:	d7 01       	movw	r26, r14
    242c:	6c 91       	ld	r22, X
    242e:	11 96       	adiw	r26, 0x01	; 1
    2430:	7c 91       	ld	r23, X
    2432:	11 97       	sbiw	r26, 0x01	; 1
    2434:	14 96       	adiw	r26, 0x04	; 4
    2436:	4d 91       	ld	r20, X+
    2438:	5c 91       	ld	r21, X
    243a:	15 97       	sbiw	r26, 0x05	; 5
    243c:	c8 01       	movw	r24, r16
    243e:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
    2442:	f7 01       	movw	r30, r14
    2444:	c4 81       	ldd	r28, Z+4	; 0x04
    2446:	d5 81       	ldd	r29, Z+5	; 0x05
    2448:	c0 0f       	add	r28, r16
    244a:	d1 1f       	adc	r29, r17
    244c:	d5 01       	movw	r26, r10
    244e:	6d 91       	ld	r22, X+
    2450:	7c 91       	ld	r23, X
    2452:	ce 01       	movw	r24, r28
    2454:	0e 94 ed 44 	call	0x89da	; 0x89da <strstr>
    2458:	8c 01       	movw	r16, r24
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	31 f7       	brne	.-52     	; 0x242a <_ZN6String7replaceERKS_S1_+0x66>
    245e:	b1 c0       	rjmp	.+354    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2460:	d7 fe       	sbrs	r13, 7
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <_ZN6String7replaceERKS_S1_+0xa4>
    2464:	4e 01       	movw	r8, r28
    2466:	2f c0       	rjmp	.+94     	; 0x24c6 <_ZN6String7replaceERKS_S1_+0x102>
    2468:	fb 01       	movw	r30, r22
    246a:	20 80       	ld	r2, Z
    246c:	31 80       	ldd	r3, Z+1	; 0x01
    246e:	43 01       	movw	r8, r6
    2470:	4e c0       	rjmp	.+156    	; 0x250e <_ZN6String7replaceERKS_S1_+0x14a>
    2472:	23 01       	movw	r4, r6
    2474:	4c 1a       	sub	r4, r28
    2476:	5d 0a       	sbc	r5, r29
    2478:	a2 01       	movw	r20, r4
    247a:	be 01       	movw	r22, r28
    247c:	c4 01       	movw	r24, r8
    247e:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
    2482:	e4 01       	movw	r28, r8
    2484:	c4 0d       	add	r28, r4
    2486:	d5 1d       	adc	r29, r5
    2488:	d7 01       	movw	r26, r14
    248a:	6c 91       	ld	r22, X
    248c:	11 96       	adiw	r26, 0x01	; 1
    248e:	7c 91       	ld	r23, X
    2490:	11 97       	sbiw	r26, 0x01	; 1
    2492:	14 96       	adiw	r26, 0x04	; 4
    2494:	4d 91       	ld	r20, X+
    2496:	5c 91       	ld	r21, X
    2498:	15 97       	sbiw	r26, 0x05	; 5
    249a:	ce 01       	movw	r24, r28
    249c:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
    24a0:	f7 01       	movw	r30, r14
    24a2:	84 80       	ldd	r8, Z+4	; 0x04
    24a4:	95 80       	ldd	r9, Z+5	; 0x05
    24a6:	8c 0e       	add	r8, r28
    24a8:	9d 1e       	adc	r9, r29
    24aa:	d5 01       	movw	r26, r10
    24ac:	14 96       	adiw	r26, 0x04	; 4
    24ae:	cd 91       	ld	r28, X+
    24b0:	dc 91       	ld	r29, X
    24b2:	15 97       	sbiw	r26, 0x05	; 5
    24b4:	c6 0d       	add	r28, r6
    24b6:	d7 1d       	adc	r29, r7
    24b8:	f8 01       	movw	r30, r16
    24ba:	84 81       	ldd	r24, Z+4	; 0x04
    24bc:	95 81       	ldd	r25, Z+5	; 0x05
    24be:	8c 0d       	add	r24, r12
    24c0:	9d 1d       	adc	r25, r13
    24c2:	95 83       	std	Z+5, r25	; 0x05
    24c4:	84 83       	std	Z+4, r24	; 0x04
    24c6:	d5 01       	movw	r26, r10
    24c8:	6d 91       	ld	r22, X+
    24ca:	7c 91       	ld	r23, X
    24cc:	ce 01       	movw	r24, r28
    24ce:	0e 94 ed 44 	call	0x89da	; 0x89da <strstr>
    24d2:	3c 01       	movw	r6, r24
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f6       	brne	.-102    	; 0x2472 <_ZN6String7replaceERKS_S1_+0xae>
    24d8:	be 01       	movw	r22, r28
    24da:	c4 01       	movw	r24, r8
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	bf 90       	pop	r11
    24ee:	af 90       	pop	r10
    24f0:	9f 90       	pop	r9
    24f2:	8f 90       	pop	r8
    24f4:	7f 90       	pop	r7
    24f6:	6f 90       	pop	r6
    24f8:	5f 90       	pop	r5
    24fa:	4f 90       	pop	r4
    24fc:	3f 90       	pop	r3
    24fe:	2f 90       	pop	r2
    2500:	0c 94 be 44 	jmp	0x897c	; 0x897c <strcpy>
    2504:	ec 01       	movw	r28, r24
    2506:	c4 0d       	add	r28, r4
    2508:	d5 1d       	adc	r29, r5
    250a:	8c 0c       	add	r8, r12
    250c:	9d 1c       	adc	r9, r13
    250e:	b1 01       	movw	r22, r2
    2510:	ce 01       	movw	r24, r28
    2512:	0e 94 ed 44 	call	0x89da	; 0x89da <strstr>
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	a9 f7       	brne	.-22     	; 0x2504 <_ZN6String7replaceERKS_S1_+0x140>
    251a:	86 14       	cp	r8, r6
    251c:	97 04       	cpc	r9, r7
    251e:	09 f4       	brne	.+2      	; 0x2522 <_ZN6String7replaceERKS_S1_+0x15e>
    2520:	50 c0       	rjmp	.+160    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2522:	f8 01       	movw	r30, r16
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	88 15       	cp	r24, r8
    252a:	99 05       	cpc	r25, r9
    252c:	98 f4       	brcc	.+38     	; 0x2554 <_ZN6String7replaceERKS_S1_+0x190>
    252e:	b4 01       	movw	r22, r8
    2530:	c8 01       	movw	r24, r16
    2532:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN6String12changeBufferEj>
    2536:	88 23       	and	r24, r24
    2538:	09 f4       	brne	.+2      	; 0x253c <_ZN6String7replaceERKS_S1_+0x178>
    253a:	43 c0       	rjmp	.+134    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    253c:	0b c0       	rjmp	.+22     	; 0x2554 <_ZN6String7replaceERKS_S1_+0x190>
    253e:	d7 fd       	sbrc	r29, 7
    2540:	40 c0       	rjmp	.+128    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2542:	ae 01       	movw	r20, r28
    2544:	b5 01       	movw	r22, r10
    2546:	c8 01       	movw	r24, r16
    2548:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZNK6String11lastIndexOfERKS_j>
    254c:	ec 01       	movw	r28, r24
    254e:	97 ff       	sbrs	r25, 7
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <_ZN6String7replaceERKS_S1_+0x19c>
    2552:	37 c0       	rjmp	.+110    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2554:	d8 01       	movw	r26, r16
    2556:	14 96       	adiw	r26, 0x04	; 4
    2558:	cd 91       	ld	r28, X+
    255a:	dc 91       	ld	r29, X
    255c:	15 97       	sbiw	r26, 0x05	; 5
    255e:	2f c0       	rjmp	.+94     	; 0x25be <_ZN6String7replaceERKS_S1_+0x1fa>
    2560:	f8 01       	movw	r30, r16
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	d5 01       	movw	r26, r10
    2568:	14 96       	adiw	r26, 0x04	; 4
    256a:	2d 91       	ld	r18, X+
    256c:	3c 91       	ld	r19, X
    256e:	15 97       	sbiw	r26, 0x05	; 5
    2570:	2c 0f       	add	r18, r28
    2572:	3d 1f       	adc	r19, r29
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
    2578:	44 81       	ldd	r20, Z+4	; 0x04
    257a:	55 81       	ldd	r21, Z+5	; 0x05
    257c:	42 1b       	sub	r20, r18
    257e:	53 0b       	sbc	r21, r19
    2580:	bc 01       	movw	r22, r24
    2582:	8c 0d       	add	r24, r12
    2584:	9d 1d       	adc	r25, r13
    2586:	0e 94 98 44 	call	0x8930	; 0x8930 <memmove>
    258a:	f8 01       	movw	r30, r16
    258c:	84 81       	ldd	r24, Z+4	; 0x04
    258e:	95 81       	ldd	r25, Z+5	; 0x05
    2590:	8c 0d       	add	r24, r12
    2592:	9d 1d       	adc	r25, r13
    2594:	95 83       	std	Z+5, r25	; 0x05
    2596:	84 83       	std	Z+4, r24	; 0x04
    2598:	01 90       	ld	r0, Z+
    259a:	f0 81       	ld	r31, Z
    259c:	e0 2d       	mov	r30, r0
    259e:	e8 0f       	add	r30, r24
    25a0:	f9 1f       	adc	r31, r25
    25a2:	10 82       	st	Z, r1
    25a4:	d8 01       	movw	r26, r16
    25a6:	2d 91       	ld	r18, X+
    25a8:	3c 91       	ld	r19, X
    25aa:	2c 0f       	add	r18, r28
    25ac:	3d 1f       	adc	r19, r29
    25ae:	f7 01       	movw	r30, r14
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	44 81       	ldd	r20, Z+4	; 0x04
    25b6:	55 81       	ldd	r21, Z+5	; 0x05
    25b8:	c9 01       	movw	r24, r18
    25ba:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
    25be:	21 97       	sbiw	r28, 0x01	; 1
    25c0:	be cf       	rjmp	.-132    	; 0x253e <_ZN6String7replaceERKS_S1_+0x17a>
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	df 90       	pop	r13
    25d0:	cf 90       	pop	r12
    25d2:	bf 90       	pop	r11
    25d4:	af 90       	pop	r10
    25d6:	9f 90       	pop	r9
    25d8:	8f 90       	pop	r8
    25da:	7f 90       	pop	r7
    25dc:	6f 90       	pop	r6
    25de:	5f 90       	pop	r5
    25e0:	4f 90       	pop	r4
    25e2:	3f 90       	pop	r3
    25e4:	2f 90       	pop	r2
    25e6:	08 95       	ret

000025e8 <_ZN6String11toLowerCaseEv>:
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	fc 01       	movw	r30, r24
    25ee:	c0 81       	ld	r28, Z
    25f0:	d1 81       	ldd	r29, Z+1	; 0x01
    25f2:	20 97       	sbiw	r28, 0x00	; 0
    25f4:	29 f4       	brne	.+10     	; 0x2600 <_ZN6String11toLowerCaseEv+0x18>
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <_ZN6String11toLowerCaseEv+0x1e>
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 7b 44 	call	0x88f6	; 0x88f6 <tolower>
    25fe:	89 93       	st	Y+, r24
    2600:	88 81       	ld	r24, Y
    2602:	81 11       	cpse	r24, r1
    2604:	f9 cf       	rjmp	.-14     	; 0x25f8 <_ZN6String11toLowerCaseEv+0x10>
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <_ZN6String11toUpperCaseEv>:
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	fc 01       	movw	r30, r24
    2612:	c0 81       	ld	r28, Z
    2614:	d1 81       	ldd	r29, Z+1	; 0x01
    2616:	20 97       	sbiw	r28, 0x00	; 0
    2618:	29 f4       	brne	.+10     	; 0x2624 <_ZN6String11toUpperCaseEv+0x18>
    261a:	07 c0       	rjmp	.+14     	; 0x262a <_ZN6String11toUpperCaseEv+0x1e>
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 83 44 	call	0x8906	; 0x8906 <toupper>
    2622:	89 93       	st	Y+, r24
    2624:	88 81       	ld	r24, Y
    2626:	81 11       	cpse	r24, r1
    2628:	f9 cf       	rjmp	.-14     	; 0x261c <_ZN6String11toUpperCaseEv+0x10>
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <_ZN6String4trimEv>:
    2630:	af 92       	push	r10
    2632:	bf 92       	push	r11
    2634:	cf 92       	push	r12
    2636:	df 92       	push	r13
    2638:	ef 92       	push	r14
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	6c 01       	movw	r12, r24
    2646:	dc 01       	movw	r26, r24
    2648:	ed 90       	ld	r14, X+
    264a:	fc 90       	ld	r15, X
    264c:	11 97       	sbiw	r26, 0x01	; 1
    264e:	e1 14       	cp	r14, r1
    2650:	f1 04       	cpc	r15, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <_ZN6String4trimEv+0x26>
    2654:	42 c0       	rjmp	.+132    	; 0x26da <_ZN6String4trimEv+0xaa>
    2656:	14 96       	adiw	r26, 0x04	; 4
    2658:	0d 91       	ld	r16, X+
    265a:	1c 91       	ld	r17, X
    265c:	15 97       	sbiw	r26, 0x05	; 5
    265e:	01 15       	cp	r16, r1
    2660:	11 05       	cpc	r17, r1
    2662:	d9 f1       	breq	.+118    	; 0x26da <_ZN6String4trimEv+0xaa>
    2664:	57 01       	movw	r10, r14
    2666:	e5 01       	movw	r28, r10
    2668:	bf ef       	ldi	r27, 0xFF	; 255
    266a:	ab 1a       	sub	r10, r27
    266c:	bb 0a       	sbc	r11, r27
    266e:	88 81       	ld	r24, Y
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 73 44 	call	0x88e6	; 0x88e6 <isspace>
    2676:	89 2b       	or	r24, r25
    2678:	b1 f7       	brne	.-20     	; 0x2666 <_ZN6String4trimEv+0x36>
    267a:	01 50       	subi	r16, 0x01	; 1
    267c:	11 09       	sbc	r17, r1
    267e:	0e 0d       	add	r16, r14
    2680:	1f 1d       	adc	r17, r15
    2682:	f8 01       	movw	r30, r16
    2684:	80 81       	ld	r24, Z
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 73 44 	call	0x88e6	; 0x88e6 <isspace>
    268c:	89 2b       	or	r24, r25
    268e:	69 f4       	brne	.+26     	; 0x26aa <_ZN6String4trimEv+0x7a>
    2690:	0f 5f       	subi	r16, 0xFF	; 255
    2692:	1f 4f       	sbci	r17, 0xFF	; 255
    2694:	0c 1b       	sub	r16, r28
    2696:	1d 0b       	sbc	r17, r29
    2698:	d6 01       	movw	r26, r12
    269a:	15 96       	adiw	r26, 0x05	; 5
    269c:	1c 93       	st	X, r17
    269e:	0e 93       	st	-X, r16
    26a0:	14 97       	sbiw	r26, 0x04	; 4
    26a2:	ec 16       	cp	r14, r28
    26a4:	fd 06       	cpc	r15, r29
    26a6:	50 f4       	brcc	.+20     	; 0x26bc <_ZN6String4trimEv+0x8c>
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <_ZN6String4trimEv+0x82>
    26aa:	0c 17       	cp	r16, r28
    26ac:	1d 07       	cpc	r17, r29
    26ae:	90 f4       	brcc	.+36     	; 0x26d4 <_ZN6String4trimEv+0xa4>
    26b0:	ef cf       	rjmp	.-34     	; 0x2690 <_ZN6String4trimEv+0x60>
    26b2:	a8 01       	movw	r20, r16
    26b4:	be 01       	movw	r22, r28
    26b6:	c7 01       	movw	r24, r14
    26b8:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
    26bc:	d6 01       	movw	r26, r12
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	11 97       	sbiw	r26, 0x01	; 1
    26c4:	14 96       	adiw	r26, 0x04	; 4
    26c6:	8d 91       	ld	r24, X+
    26c8:	9c 91       	ld	r25, X
    26ca:	15 97       	sbiw	r26, 0x05	; 5
    26cc:	e8 0f       	add	r30, r24
    26ce:	f9 1f       	adc	r31, r25
    26d0:	10 82       	st	Z, r1
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <_ZN6String4trimEv+0xaa>
    26d4:	01 50       	subi	r16, 0x01	; 1
    26d6:	11 09       	sbc	r17, r1
    26d8:	d4 cf       	rjmp	.-88     	; 0x2682 <_ZN6String4trimEv+0x52>
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	ef 90       	pop	r14
    26e6:	df 90       	pop	r13
    26e8:	cf 90       	pop	r12
    26ea:	bf 90       	pop	r11
    26ec:	af 90       	pop	r10
    26ee:	08 95       	ret

000026f0 <_ZNK6String5toIntEv>:
    26f0:	fc 01       	movw	r30, r24
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	11 f0       	breq	.+4      	; 0x26fe <_ZNK6String5toIntEv+0xe>
    26fa:	0c 94 4c 44 	jmp	0x8898	; 0x8898 <atol>
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	08 95       	ret

00002708 <malloc>:
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	82 30       	cpi	r24, 0x02	; 2
    2712:	91 05       	cpc	r25, r1
    2714:	10 f4       	brcc	.+4      	; 0x271a <malloc+0x12>
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	e0 91 96 11 	lds	r30, 0x1196
    271e:	f0 91 97 11 	lds	r31, 0x1197
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	c0 e0       	ldi	r28, 0x00	; 0
    2728:	d0 e0       	ldi	r29, 0x00	; 0
    272a:	23 c0       	rjmp	.+70     	; 0x2772 <malloc+0x6a>
    272c:	40 81       	ld	r20, Z
    272e:	51 81       	ldd	r21, Z+1	; 0x01
    2730:	48 17       	cp	r20, r24
    2732:	59 07       	cpc	r21, r25
    2734:	a8 f0       	brcs	.+42     	; 0x2760 <malloc+0x58>
    2736:	48 17       	cp	r20, r24
    2738:	59 07       	cpc	r21, r25
    273a:	61 f4       	brne	.+24     	; 0x2754 <malloc+0x4c>
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 97       	sbiw	r28, 0x00	; 0
    2742:	19 f0       	breq	.+6      	; 0x274a <malloc+0x42>
    2744:	9b 83       	std	Y+3, r25	; 0x03
    2746:	8a 83       	std	Y+2, r24	; 0x02
    2748:	2e c0       	rjmp	.+92     	; 0x27a6 <malloc+0x9e>
    274a:	90 93 97 11 	sts	0x1197, r25
    274e:	80 93 96 11 	sts	0x1196, r24
    2752:	29 c0       	rjmp	.+82     	; 0x27a6 <malloc+0x9e>
    2754:	21 15       	cp	r18, r1
    2756:	31 05       	cpc	r19, r1
    2758:	29 f0       	breq	.+10     	; 0x2764 <malloc+0x5c>
    275a:	42 17       	cp	r20, r18
    275c:	53 07       	cpc	r21, r19
    275e:	10 f0       	brcs	.+4      	; 0x2764 <malloc+0x5c>
    2760:	a9 01       	movw	r20, r18
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <malloc+0x60>
    2764:	be 01       	movw	r22, r28
    2766:	df 01       	movw	r26, r30
    2768:	02 81       	ldd	r16, Z+2	; 0x02
    276a:	13 81       	ldd	r17, Z+3	; 0x03
    276c:	ef 01       	movw	r28, r30
    276e:	9a 01       	movw	r18, r20
    2770:	f8 01       	movw	r30, r16
    2772:	30 97       	sbiw	r30, 0x00	; 0
    2774:	d9 f6       	brne	.-74     	; 0x272c <malloc+0x24>
    2776:	21 15       	cp	r18, r1
    2778:	31 05       	cpc	r19, r1
    277a:	09 f1       	breq	.+66     	; 0x27be <malloc+0xb6>
    277c:	28 1b       	sub	r18, r24
    277e:	39 0b       	sbc	r19, r25
    2780:	24 30       	cpi	r18, 0x04	; 4
    2782:	31 05       	cpc	r19, r1
    2784:	90 f4       	brcc	.+36     	; 0x27aa <malloc+0xa2>
    2786:	12 96       	adiw	r26, 0x02	; 2
    2788:	8d 91       	ld	r24, X+
    278a:	9c 91       	ld	r25, X
    278c:	13 97       	sbiw	r26, 0x03	; 3
    278e:	61 15       	cp	r22, r1
    2790:	71 05       	cpc	r23, r1
    2792:	21 f0       	breq	.+8      	; 0x279c <malloc+0x94>
    2794:	fb 01       	movw	r30, r22
    2796:	93 83       	std	Z+3, r25	; 0x03
    2798:	82 83       	std	Z+2, r24	; 0x02
    279a:	04 c0       	rjmp	.+8      	; 0x27a4 <malloc+0x9c>
    279c:	90 93 97 11 	sts	0x1197, r25
    27a0:	80 93 96 11 	sts	0x1196, r24
    27a4:	fd 01       	movw	r30, r26
    27a6:	32 96       	adiw	r30, 0x02	; 2
    27a8:	2f c0       	rjmp	.+94     	; 0x2808 <malloc+0x100>
    27aa:	fd 01       	movw	r30, r26
    27ac:	e2 0f       	add	r30, r18
    27ae:	f3 1f       	adc	r31, r19
    27b0:	81 93       	st	Z+, r24
    27b2:	91 93       	st	Z+, r25
    27b4:	22 50       	subi	r18, 0x02	; 2
    27b6:	31 09       	sbc	r19, r1
    27b8:	2d 93       	st	X+, r18
    27ba:	3c 93       	st	X, r19
    27bc:	25 c0       	rjmp	.+74     	; 0x2808 <malloc+0x100>
    27be:	4d b7       	in	r20, 0x3d	; 61
    27c0:	5e b7       	in	r21, 0x3e	; 62
    27c2:	48 57       	subi	r20, 0x78	; 120
    27c4:	51 09       	sbc	r21, r1
    27c6:	e0 91 02 02 	lds	r30, 0x0202
    27ca:	f0 91 03 02 	lds	r31, 0x0203
    27ce:	e4 17       	cp	r30, r20
    27d0:	f5 07       	cpc	r31, r21
    27d2:	c0 f4       	brcc	.+48     	; 0x2804 <malloc+0xfc>
    27d4:	4e 1b       	sub	r20, r30
    27d6:	5f 0b       	sbc	r21, r31
    27d8:	48 17       	cp	r20, r24
    27da:	59 07       	cpc	r21, r25
    27dc:	98 f0       	brcs	.+38     	; 0x2804 <malloc+0xfc>
    27de:	9c 01       	movw	r18, r24
    27e0:	2e 5f       	subi	r18, 0xFE	; 254
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	42 17       	cp	r20, r18
    27e6:	53 07       	cpc	r21, r19
    27e8:	68 f0       	brcs	.+26     	; 0x2804 <malloc+0xfc>
    27ea:	2e 0f       	add	r18, r30
    27ec:	3f 1f       	adc	r19, r31
    27ee:	30 93 03 02 	sts	0x0203, r19
    27f2:	20 93 02 02 	sts	0x0202, r18
    27f6:	30 93 01 02 	sts	0x0201, r19
    27fa:	20 93 00 02 	sts	0x0200, r18
    27fe:	81 93       	st	Z+, r24
    2800:	91 93       	st	Z+, r25
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <malloc+0x100>
    2804:	e0 e0       	ldi	r30, 0x00	; 0
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	cf 01       	movw	r24, r30
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	08 95       	ret

00002814 <free>:
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	09 f4       	brne	.+2      	; 0x2826 <free+0x12>
    2824:	8e c0       	rjmp	.+284    	; 0x2942 <free+0x12e>
    2826:	dc 01       	movw	r26, r24
    2828:	12 97       	sbiw	r26, 0x02	; 2
    282a:	13 96       	adiw	r26, 0x03	; 3
    282c:	1c 92       	st	X, r1
    282e:	1e 92       	st	-X, r1
    2830:	12 97       	sbiw	r26, 0x02	; 2
    2832:	e0 90 96 11 	lds	r14, 0x1196
    2836:	f0 90 97 11 	lds	r15, 0x1197
    283a:	e1 14       	cp	r14, r1
    283c:	f1 04       	cpc	r15, r1
    283e:	89 f4       	brne	.+34     	; 0x2862 <free+0x4e>
    2840:	2d 91       	ld	r18, X+
    2842:	3c 91       	ld	r19, X
    2844:	11 97       	sbiw	r26, 0x01	; 1
    2846:	28 0f       	add	r18, r24
    2848:	39 1f       	adc	r19, r25
    284a:	80 91 02 02 	lds	r24, 0x0202
    284e:	90 91 03 02 	lds	r25, 0x0203
    2852:	82 17       	cp	r24, r18
    2854:	93 07       	cpc	r25, r19
    2856:	89 f5       	brne	.+98     	; 0x28ba <free+0xa6>
    2858:	b0 93 03 02 	sts	0x0203, r27
    285c:	a0 93 02 02 	sts	0x0202, r26
    2860:	70 c0       	rjmp	.+224    	; 0x2942 <free+0x12e>
    2862:	e7 01       	movw	r28, r14
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	01 c0       	rjmp	.+2      	; 0x286c <free+0x58>
    286a:	ea 01       	movw	r28, r20
    286c:	ca 17       	cp	r28, r26
    286e:	db 07       	cpc	r29, r27
    2870:	38 f4       	brcc	.+14     	; 0x2880 <free+0x6c>
    2872:	4a 81       	ldd	r20, Y+2	; 0x02
    2874:	5b 81       	ldd	r21, Y+3	; 0x03
    2876:	9e 01       	movw	r18, r28
    2878:	41 15       	cp	r20, r1
    287a:	51 05       	cpc	r21, r1
    287c:	b1 f7       	brne	.-20     	; 0x286a <free+0x56>
    287e:	22 c0       	rjmp	.+68     	; 0x28c4 <free+0xb0>
    2880:	ac 01       	movw	r20, r24
    2882:	42 50       	subi	r20, 0x02	; 2
    2884:	51 09       	sbc	r21, r1
    2886:	fa 01       	movw	r30, r20
    2888:	d3 83       	std	Z+3, r29	; 0x03
    288a:	c2 83       	std	Z+2, r28	; 0x02
    288c:	00 81       	ld	r16, Z
    288e:	11 81       	ldd	r17, Z+1	; 0x01
    2890:	bc 01       	movw	r22, r24
    2892:	60 0f       	add	r22, r16
    2894:	71 1f       	adc	r23, r17
    2896:	6c 17       	cp	r22, r28
    2898:	7d 07       	cpc	r23, r29
    289a:	61 f4       	brne	.+24     	; 0x28b4 <free+0xa0>
    289c:	68 81       	ld	r22, Y
    289e:	79 81       	ldd	r23, Y+1	; 0x01
    28a0:	60 0f       	add	r22, r16
    28a2:	71 1f       	adc	r23, r17
    28a4:	6e 5f       	subi	r22, 0xFE	; 254
    28a6:	7f 4f       	sbci	r23, 0xFF	; 255
    28a8:	71 83       	std	Z+1, r23	; 0x01
    28aa:	60 83       	st	Z, r22
    28ac:	6a 81       	ldd	r22, Y+2	; 0x02
    28ae:	7b 81       	ldd	r23, Y+3	; 0x03
    28b0:	73 83       	std	Z+3, r23	; 0x03
    28b2:	62 83       	std	Z+2, r22	; 0x02
    28b4:	21 15       	cp	r18, r1
    28b6:	31 05       	cpc	r19, r1
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <free+0xb0>
    28ba:	b0 93 97 11 	sts	0x1197, r27
    28be:	a0 93 96 11 	sts	0x1196, r26
    28c2:	3f c0       	rjmp	.+126    	; 0x2942 <free+0x12e>
    28c4:	f9 01       	movw	r30, r18
    28c6:	b3 83       	std	Z+3, r27	; 0x03
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	e9 01       	movw	r28, r18
    28cc:	49 91       	ld	r20, Y+
    28ce:	59 91       	ld	r21, Y+
    28d0:	c4 0f       	add	r28, r20
    28d2:	d5 1f       	adc	r29, r21
    28d4:	ac 17       	cp	r26, r28
    28d6:	bd 07       	cpc	r27, r29
    28d8:	71 f4       	brne	.+28     	; 0x28f6 <free+0xe2>
    28da:	dc 01       	movw	r26, r24
    28dc:	9e 91       	ld	r25, -X
    28de:	8e 91       	ld	r24, -X
    28e0:	84 0f       	add	r24, r20
    28e2:	95 1f       	adc	r25, r21
    28e4:	02 96       	adiw	r24, 0x02	; 2
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	8d 91       	ld	r24, X+
    28ee:	9c 91       	ld	r25, X
    28f0:	13 97       	sbiw	r26, 0x03	; 3
    28f2:	93 83       	std	Z+3, r25	; 0x03
    28f4:	82 83       	std	Z+2, r24	; 0x02
    28f6:	a0 e0       	ldi	r26, 0x00	; 0
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <free+0xec>
    28fc:	d7 01       	movw	r26, r14
    28fe:	7c 01       	movw	r14, r24
    2900:	f7 01       	movw	r30, r14
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	c9 f7       	brne	.-14     	; 0x28fc <free+0xe8>
    290a:	c7 01       	movw	r24, r14
    290c:	02 96       	adiw	r24, 0x02	; 2
    290e:	20 81       	ld	r18, Z
    2910:	31 81       	ldd	r19, Z+1	; 0x01
    2912:	82 0f       	add	r24, r18
    2914:	93 1f       	adc	r25, r19
    2916:	20 91 02 02 	lds	r18, 0x0202
    291a:	30 91 03 02 	lds	r19, 0x0203
    291e:	28 17       	cp	r18, r24
    2920:	39 07       	cpc	r19, r25
    2922:	79 f4       	brne	.+30     	; 0x2942 <free+0x12e>
    2924:	10 97       	sbiw	r26, 0x00	; 0
    2926:	29 f4       	brne	.+10     	; 0x2932 <free+0x11e>
    2928:	10 92 97 11 	sts	0x1197, r1
    292c:	10 92 96 11 	sts	0x1196, r1
    2930:	04 c0       	rjmp	.+8      	; 0x293a <free+0x126>
    2932:	13 96       	adiw	r26, 0x03	; 3
    2934:	1c 92       	st	X, r1
    2936:	1e 92       	st	-X, r1
    2938:	12 97       	sbiw	r26, 0x02	; 2
    293a:	f0 92 03 02 	sts	0x0203, r15
    293e:	e0 92 02 02 	sts	0x0202, r14
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	08 95       	ret

00002950 <realloc>:
    2950:	8f 92       	push	r8
    2952:	9f 92       	push	r9
    2954:	af 92       	push	r10
    2956:	bf 92       	push	r11
    2958:	cf 92       	push	r12
    295a:	df 92       	push	r13
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	ec 01       	movw	r28, r24
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	79 f4       	brne	.+30     	; 0x298c <realloc+0x3c>
    296e:	cb 01       	movw	r24, r22
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	df 90       	pop	r13
    297e:	cf 90       	pop	r12
    2980:	bf 90       	pop	r11
    2982:	af 90       	pop	r10
    2984:	9f 90       	pop	r9
    2986:	8f 90       	pop	r8
    2988:	0c 94 84 13 	jmp	0x2708	; 0x2708 <malloc>
    298c:	dc 01       	movw	r26, r24
    298e:	a6 0f       	add	r26, r22
    2990:	b7 1f       	adc	r27, r23
    2992:	fc 01       	movw	r30, r24
    2994:	32 97       	sbiw	r30, 0x02	; 2
    2996:	ae 17       	cp	r26, r30
    2998:	bf 07       	cpc	r27, r31
    299a:	18 f4       	brcc	.+6      	; 0x29a2 <realloc+0x52>
    299c:	c0 e0       	ldi	r28, 0x00	; 0
    299e:	d0 e0       	ldi	r29, 0x00	; 0
    29a0:	a3 c0       	rjmp	.+326    	; 0x2ae8 <realloc+0x198>
    29a2:	00 81       	ld	r16, Z
    29a4:	11 81       	ldd	r17, Z+1	; 0x01
    29a6:	06 17       	cp	r16, r22
    29a8:	17 07       	cpc	r17, r23
    29aa:	b0 f0       	brcs	.+44     	; 0x29d8 <realloc+0x88>
    29ac:	05 30       	cpi	r16, 0x05	; 5
    29ae:	11 05       	cpc	r17, r1
    29b0:	08 f4       	brcc	.+2      	; 0x29b4 <realloc+0x64>
    29b2:	9a c0       	rjmp	.+308    	; 0x2ae8 <realloc+0x198>
    29b4:	c8 01       	movw	r24, r16
    29b6:	04 97       	sbiw	r24, 0x04	; 4
    29b8:	86 17       	cp	r24, r22
    29ba:	97 07       	cpc	r25, r23
    29bc:	08 f4       	brcc	.+2      	; 0x29c0 <realloc+0x70>
    29be:	94 c0       	rjmp	.+296    	; 0x2ae8 <realloc+0x198>
    29c0:	02 50       	subi	r16, 0x02	; 2
    29c2:	11 09       	sbc	r17, r1
    29c4:	06 1b       	sub	r16, r22
    29c6:	17 0b       	sbc	r17, r23
    29c8:	0d 93       	st	X+, r16
    29ca:	1d 93       	st	X+, r17
    29cc:	71 83       	std	Z+1, r23	; 0x01
    29ce:	60 83       	st	Z, r22
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 0a 14 	call	0x2814	; 0x2814 <free>
    29d6:	88 c0       	rjmp	.+272    	; 0x2ae8 <realloc+0x198>
    29d8:	6b 01       	movw	r12, r22
    29da:	c0 1a       	sub	r12, r16
    29dc:	d1 0a       	sbc	r13, r17
    29de:	7c 01       	movw	r14, r24
    29e0:	e0 0e       	add	r14, r16
    29e2:	f1 1e       	adc	r15, r17
    29e4:	e0 91 96 11 	lds	r30, 0x1196
    29e8:	f0 91 97 11 	lds	r31, 0x1197
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	48 c0       	rjmp	.+144    	; 0x2a86 <realloc+0x136>
    29f6:	ee 15       	cp	r30, r14
    29f8:	ff 05       	cpc	r31, r15
    29fa:	d1 f5       	brne	.+116    	; 0x2a70 <realloc+0x120>
    29fc:	80 80       	ld	r8, Z
    29fe:	91 80       	ldd	r9, Z+1	; 0x01
    2a00:	54 01       	movw	r10, r8
    2a02:	42 e0       	ldi	r20, 0x02	; 2
    2a04:	a4 0e       	add	r10, r20
    2a06:	b1 1c       	adc	r11, r1
    2a08:	ac 14       	cp	r10, r12
    2a0a:	bd 04       	cpc	r11, r13
    2a0c:	88 f1       	brcs	.+98     	; 0x2a70 <realloc+0x120>
    2a0e:	74 01       	movw	r14, r8
    2a10:	ec 18       	sub	r14, r12
    2a12:	fd 08       	sbc	r15, r13
    2a14:	67 01       	movw	r12, r14
    2a16:	22 e0       	ldi	r18, 0x02	; 2
    2a18:	c2 0e       	add	r12, r18
    2a1a:	d1 1c       	adc	r13, r1
    2a1c:	9e 01       	movw	r18, r28
    2a1e:	22 50       	subi	r18, 0x02	; 2
    2a20:	31 09       	sbc	r19, r1
    2a22:	45 e0       	ldi	r20, 0x05	; 5
    2a24:	c4 16       	cp	r12, r20
    2a26:	d1 04       	cpc	r13, r1
    2a28:	78 f0       	brcs	.+30     	; 0x2a48 <realloc+0xf8>
    2a2a:	42 81       	ldd	r20, Z+2	; 0x02
    2a2c:	53 81       	ldd	r21, Z+3	; 0x03
    2a2e:	13 96       	adiw	r26, 0x03	; 3
    2a30:	5c 93       	st	X, r21
    2a32:	4e 93       	st	-X, r20
    2a34:	12 97       	sbiw	r26, 0x02	; 2
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	fc 92       	st	X, r15
    2a3a:	ee 92       	st	-X, r14
    2a3c:	f9 01       	movw	r30, r18
    2a3e:	71 83       	std	Z+1, r23	; 0x01
    2a40:	60 83       	st	Z, r22
    2a42:	3a 2f       	mov	r19, r26
    2a44:	2b 2f       	mov	r18, r27
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <realloc+0x10a>
    2a48:	0e 5f       	subi	r16, 0xFE	; 254
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	08 0d       	add	r16, r8
    2a4e:	19 1d       	adc	r17, r9
    2a50:	d9 01       	movw	r26, r18
    2a52:	0d 93       	st	X+, r16
    2a54:	1c 93       	st	X, r17
    2a56:	32 81       	ldd	r19, Z+2	; 0x02
    2a58:	23 81       	ldd	r18, Z+3	; 0x03
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	21 f0       	breq	.+8      	; 0x2a66 <realloc+0x116>
    2a5e:	fc 01       	movw	r30, r24
    2a60:	32 83       	std	Z+2, r19	; 0x02
    2a62:	23 83       	std	Z+3, r18	; 0x03
    2a64:	41 c0       	rjmp	.+130    	; 0x2ae8 <realloc+0x198>
    2a66:	30 93 96 11 	sts	0x1196, r19
    2a6a:	20 93 97 11 	sts	0x1197, r18
    2a6e:	3c c0       	rjmp	.+120    	; 0x2ae8 <realloc+0x198>
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	28 17       	cp	r18, r24
    2a76:	39 07       	cpc	r19, r25
    2a78:	08 f4       	brcc	.+2      	; 0x2a7c <realloc+0x12c>
    2a7a:	9c 01       	movw	r18, r24
    2a7c:	52 81       	ldd	r21, Z+2	; 0x02
    2a7e:	43 81       	ldd	r20, Z+3	; 0x03
    2a80:	cf 01       	movw	r24, r30
    2a82:	e5 2f       	mov	r30, r21
    2a84:	f4 2f       	mov	r31, r20
    2a86:	30 97       	sbiw	r30, 0x00	; 0
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <realloc+0x13c>
    2a8a:	b5 cf       	rjmp	.-150    	; 0x29f6 <realloc+0xa6>
    2a8c:	80 91 02 02 	lds	r24, 0x0202
    2a90:	90 91 03 02 	lds	r25, 0x0203
    2a94:	8e 15       	cp	r24, r14
    2a96:	9f 05       	cpc	r25, r15
    2a98:	c1 f4       	brne	.+48     	; 0x2aca <realloc+0x17a>
    2a9a:	26 17       	cp	r18, r22
    2a9c:	37 07       	cpc	r19, r23
    2a9e:	a8 f4       	brcc	.+42     	; 0x2aca <realloc+0x17a>
    2aa0:	8d b7       	in	r24, 0x3d	; 61
    2aa2:	9e b7       	in	r25, 0x3e	; 62
    2aa4:	88 57       	subi	r24, 0x78	; 120
    2aa6:	91 09       	sbc	r25, r1
    2aa8:	a8 17       	cp	r26, r24
    2aaa:	b9 07       	cpc	r27, r25
    2aac:	08 f0       	brcs	.+2      	; 0x2ab0 <realloc+0x160>
    2aae:	76 cf       	rjmp	.-276    	; 0x299c <realloc+0x4c>
    2ab0:	b0 93 03 02 	sts	0x0203, r27
    2ab4:	a0 93 02 02 	sts	0x0202, r26
    2ab8:	b0 93 01 02 	sts	0x0201, r27
    2abc:	a0 93 00 02 	sts	0x0200, r26
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	32 97       	sbiw	r30, 0x02	; 2
    2ac4:	71 83       	std	Z+1, r23	; 0x01
    2ac6:	60 83       	st	Z, r22
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <realloc+0x198>
    2aca:	cb 01       	movw	r24, r22
    2acc:	0e 94 84 13 	call	0x2708	; 0x2708 <malloc>
    2ad0:	7c 01       	movw	r14, r24
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <realloc+0x188>
    2ad6:	62 cf       	rjmp	.-316    	; 0x299c <realloc+0x4c>
    2ad8:	a8 01       	movw	r20, r16
    2ada:	be 01       	movw	r22, r28
    2adc:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	0e 94 0a 14 	call	0x2814	; 0x2814 <free>
    2ae6:	e7 01       	movw	r28, r14
    2ae8:	ce 01       	movw	r24, r28
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	df 90       	pop	r13
    2af8:	cf 90       	pop	r12
    2afa:	bf 90       	pop	r11
    2afc:	af 90       	pop	r10
    2afe:	9f 90       	pop	r9
    2b00:	8f 90       	pop	r8
    2b02:	08 95       	ret

00002b04 <_Znwj>:
    2b04:	0c 94 84 13 	jmp	0x2708	; 0x2708 <malloc>

00002b08 <_Znaj>:
    2b08:	0c 94 84 13 	jmp	0x2708	; 0x2708 <malloc>

00002b0c <_ZdlPv>:
    2b0c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <free>

00002b10 <_ZdaPv>:
    2b10:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <free>

00002b14 <__cxa_guard_acquire>:
    2b14:	21 e0       	ldi	r18, 0x01	; 1
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	fc 01       	movw	r30, r24
    2b1a:	80 81       	ld	r24, Z
    2b1c:	88 23       	and	r24, r24
    2b1e:	11 f0       	breq	.+4      	; 0x2b24 <__cxa_guard_acquire+0x10>
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	c9 01       	movw	r24, r18
    2b26:	08 95       	ret

00002b28 <__cxa_guard_release>:
    2b28:	21 e0       	ldi	r18, 0x01	; 1
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	20 83       	st	Z, r18
    2b2e:	08 95       	ret

00002b30 <__cxa_guard_abort>:
    2b30:	08 95       	ret

00002b32 <__cxa_pure_virtual>:
    2b32:	08 95       	ret

00002b34 <__vector_23>:
    2b34:	1f 92       	push	r1
    2b36:	0f 92       	push	r0
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	0f 92       	push	r0
    2b3c:	11 24       	eor	r1, r1
    2b3e:	2f 93       	push	r18
    2b40:	3f 93       	push	r19
    2b42:	8f 93       	push	r24
    2b44:	9f 93       	push	r25
    2b46:	af 93       	push	r26
    2b48:	bf 93       	push	r27
    2b4a:	80 91 2f 09 	lds	r24, 0x092F
    2b4e:	90 91 30 09 	lds	r25, 0x0930
    2b52:	a0 91 31 09 	lds	r26, 0x0931
    2b56:	b0 91 32 09 	lds	r27, 0x0932
    2b5a:	30 91 37 09 	lds	r19, 0x0937
    2b5e:	23 2f       	mov	r18, r19
    2b60:	2d 5f       	subi	r18, 0xFD	; 253
    2b62:	2d 37       	cpi	r18, 0x7D	; 125
    2b64:	20 f4       	brcc	.+8      	; 0x2b6e <__vector_23+0x3a>
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	a1 1d       	adc	r26, r1
    2b6a:	b1 1d       	adc	r27, r1
    2b6c:	05 c0       	rjmp	.+10     	; 0x2b78 <__vector_23+0x44>
    2b6e:	23 2f       	mov	r18, r19
    2b70:	2a 57       	subi	r18, 0x7A	; 122
    2b72:	02 96       	adiw	r24, 0x02	; 2
    2b74:	a1 1d       	adc	r26, r1
    2b76:	b1 1d       	adc	r27, r1
    2b78:	20 93 37 09 	sts	0x0937, r18
    2b7c:	80 93 2f 09 	sts	0x092F, r24
    2b80:	90 93 30 09 	sts	0x0930, r25
    2b84:	a0 93 31 09 	sts	0x0931, r26
    2b88:	b0 93 32 09 	sts	0x0932, r27
    2b8c:	80 91 33 09 	lds	r24, 0x0933
    2b90:	90 91 34 09 	lds	r25, 0x0934
    2b94:	a0 91 35 09 	lds	r26, 0x0935
    2b98:	b0 91 36 09 	lds	r27, 0x0936
    2b9c:	01 96       	adiw	r24, 0x01	; 1
    2b9e:	a1 1d       	adc	r26, r1
    2ba0:	b1 1d       	adc	r27, r1
    2ba2:	80 93 33 09 	sts	0x0933, r24
    2ba6:	90 93 34 09 	sts	0x0934, r25
    2baa:	a0 93 35 09 	sts	0x0935, r26
    2bae:	b0 93 36 09 	sts	0x0936, r27
    2bb2:	bf 91       	pop	r27
    2bb4:	af 91       	pop	r26
    2bb6:	9f 91       	pop	r25
    2bb8:	8f 91       	pop	r24
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	0f 90       	pop	r0
    2bc4:	1f 90       	pop	r1
    2bc6:	18 95       	reti

00002bc8 <millis>:
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	8f b7       	in	r24, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	00 91 2f 09 	lds	r16, 0x092F
    2bd4:	10 91 30 09 	lds	r17, 0x0930
    2bd8:	20 91 31 09 	lds	r18, 0x0931
    2bdc:	30 91 32 09 	lds	r19, 0x0932
    2be0:	8f bf       	out	0x3f, r24	; 63
    2be2:	b8 01       	movw	r22, r16
    2be4:	c9 01       	movw	r24, r18
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	08 95       	ret

00002bec <micros>:
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	9f b7       	in	r25, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	00 91 33 09 	lds	r16, 0x0933
    2bf8:	10 91 34 09 	lds	r17, 0x0934
    2bfc:	20 91 35 09 	lds	r18, 0x0935
    2c00:	30 91 36 09 	lds	r19, 0x0936
    2c04:	86 b5       	in	r24, 0x26	; 38
    2c06:	a8 9b       	sbis	0x15, 0	; 21
    2c08:	06 c0       	rjmp	.+12     	; 0x2c16 <micros+0x2a>
    2c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0c:	21 f0       	breq	.+8      	; 0x2c16 <micros+0x2a>
    2c0e:	0f 5f       	subi	r16, 0xFF	; 255
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	2f 4f       	sbci	r18, 0xFF	; 255
    2c14:	3f 4f       	sbci	r19, 0xFF	; 255
    2c16:	9f bf       	out	0x3f, r25	; 63
    2c18:	32 2f       	mov	r19, r18
    2c1a:	21 2f       	mov	r18, r17
    2c1c:	10 2f       	mov	r17, r16
    2c1e:	00 27       	eor	r16, r16
    2c20:	08 0f       	add	r16, r24
    2c22:	11 1d       	adc	r17, r1
    2c24:	21 1d       	adc	r18, r1
    2c26:	31 1d       	adc	r19, r1
    2c28:	42 e0       	ldi	r20, 0x02	; 2
    2c2a:	00 0f       	add	r16, r16
    2c2c:	11 1f       	adc	r17, r17
    2c2e:	22 1f       	adc	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	4a 95       	dec	r20
    2c34:	d1 f7       	brne	.-12     	; 0x2c2a <micros+0x3e>
    2c36:	b8 01       	movw	r22, r16
    2c38:	c9 01       	movw	r24, r18
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <delay>:
    2c40:	cf 92       	push	r12
    2c42:	df 92       	push	r13
    2c44:	ef 92       	push	r14
    2c46:	ff 92       	push	r15
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	6b 01       	movw	r12, r22
    2c4e:	7c 01       	movw	r14, r24
    2c50:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    2c54:	eb 01       	movw	r28, r22
    2c56:	10 c0       	rjmp	.+32     	; 0x2c78 <delay+0x38>
    2c58:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <yield>
    2c5c:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    2c60:	6c 1b       	sub	r22, r28
    2c62:	7d 0b       	sbc	r23, r29
    2c64:	68 3e       	cpi	r22, 0xE8	; 232
    2c66:	73 40       	sbci	r23, 0x03	; 3
    2c68:	38 f0       	brcs	.+14     	; 0x2c78 <delay+0x38>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	c8 1a       	sub	r12, r24
    2c6e:	d1 08       	sbc	r13, r1
    2c70:	e1 08       	sbc	r14, r1
    2c72:	f1 08       	sbc	r15, r1
    2c74:	c8 51       	subi	r28, 0x18	; 24
    2c76:	dc 4f       	sbci	r29, 0xFC	; 252
    2c78:	c1 14       	cp	r12, r1
    2c7a:	d1 04       	cpc	r13, r1
    2c7c:	e1 04       	cpc	r14, r1
    2c7e:	f1 04       	cpc	r15, r1
    2c80:	59 f7       	brne	.-42     	; 0x2c58 <delay+0x18>
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
    2c8e:	08 95       	ret

00002c90 <delayMicroseconds>:
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	39 f0       	breq	.+14     	; 0x2ca2 <delayMicroseconds+0x12>
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	02 97       	sbiw	r24, 0x02	; 2
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <delayMicroseconds+0xe>
    2ca2:	08 95       	ret

00002ca4 <init>:
    2ca4:	78 94       	sei
    2ca6:	84 b5       	in	r24, 0x24	; 36
    2ca8:	82 60       	ori	r24, 0x02	; 2
    2caa:	84 bd       	out	0x24, r24	; 36
    2cac:	84 b5       	in	r24, 0x24	; 36
    2cae:	81 60       	ori	r24, 0x01	; 1
    2cb0:	84 bd       	out	0x24, r24	; 36
    2cb2:	85 b5       	in	r24, 0x25	; 37
    2cb4:	82 60       	ori	r24, 0x02	; 2
    2cb6:	85 bd       	out	0x25, r24	; 37
    2cb8:	85 b5       	in	r24, 0x25	; 37
    2cba:	81 60       	ori	r24, 0x01	; 1
    2cbc:	85 bd       	out	0x25, r24	; 37
    2cbe:	ee e6       	ldi	r30, 0x6E	; 110
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	81 60       	ori	r24, 0x01	; 1
    2cc6:	80 83       	st	Z, r24
    2cc8:	e1 e8       	ldi	r30, 0x81	; 129
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	10 82       	st	Z, r1
    2cce:	80 81       	ld	r24, Z
    2cd0:	82 60       	ori	r24, 0x02	; 2
    2cd2:	80 83       	st	Z, r24
    2cd4:	80 81       	ld	r24, Z
    2cd6:	81 60       	ori	r24, 0x01	; 1
    2cd8:	80 83       	st	Z, r24
    2cda:	e0 e8       	ldi	r30, 0x80	; 128
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	81 60       	ori	r24, 0x01	; 1
    2ce2:	80 83       	st	Z, r24
    2ce4:	e1 eb       	ldi	r30, 0xB1	; 177
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	84 60       	ori	r24, 0x04	; 4
    2cec:	80 83       	st	Z, r24
    2cee:	e0 eb       	ldi	r30, 0xB0	; 176
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	81 60       	ori	r24, 0x01	; 1
    2cf6:	80 83       	st	Z, r24
    2cf8:	e1 e9       	ldi	r30, 0x91	; 145
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	82 60       	ori	r24, 0x02	; 2
    2d00:	80 83       	st	Z, r24
    2d02:	80 81       	ld	r24, Z
    2d04:	81 60       	ori	r24, 0x01	; 1
    2d06:	80 83       	st	Z, r24
    2d08:	e0 e9       	ldi	r30, 0x90	; 144
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	81 60       	ori	r24, 0x01	; 1
    2d10:	80 83       	st	Z, r24
    2d12:	e1 ea       	ldi	r30, 0xA1	; 161
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	82 60       	ori	r24, 0x02	; 2
    2d1a:	80 83       	st	Z, r24
    2d1c:	80 81       	ld	r24, Z
    2d1e:	81 60       	ori	r24, 0x01	; 1
    2d20:	80 83       	st	Z, r24
    2d22:	e0 ea       	ldi	r30, 0xA0	; 160
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	81 60       	ori	r24, 0x01	; 1
    2d2a:	80 83       	st	Z, r24
    2d2c:	e1 e2       	ldi	r30, 0x21	; 33
    2d2e:	f1 e0       	ldi	r31, 0x01	; 1
    2d30:	80 81       	ld	r24, Z
    2d32:	82 60       	ori	r24, 0x02	; 2
    2d34:	80 83       	st	Z, r24
    2d36:	80 81       	ld	r24, Z
    2d38:	81 60       	ori	r24, 0x01	; 1
    2d3a:	80 83       	st	Z, r24
    2d3c:	e0 e2       	ldi	r30, 0x20	; 32
    2d3e:	f1 e0       	ldi	r31, 0x01	; 1
    2d40:	80 81       	ld	r24, Z
    2d42:	81 60       	ori	r24, 0x01	; 1
    2d44:	80 83       	st	Z, r24
    2d46:	ea e7       	ldi	r30, 0x7A	; 122
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	84 60       	ori	r24, 0x04	; 4
    2d4e:	80 83       	st	Z, r24
    2d50:	80 81       	ld	r24, Z
    2d52:	82 60       	ori	r24, 0x02	; 2
    2d54:	80 83       	st	Z, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	81 60       	ori	r24, 0x01	; 1
    2d5a:	80 83       	st	Z, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	80 68       	ori	r24, 0x80	; 128
    2d60:	80 83       	st	Z, r24
    2d62:	10 92 c1 00 	sts	0x00C1, r1
    2d66:	08 95       	ret

00002d68 <turnOffPWM>:
    2d68:	89 30       	cpi	r24, 0x09	; 9
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <turnOffPWM+0x6>
    2d6c:	43 c0       	rjmp	.+134    	; 0x2df4 <turnOffPWM+0x8c>
    2d6e:	88 f4       	brcc	.+34     	; 0x2d92 <turnOffPWM+0x2a>
    2d70:	84 30       	cpi	r24, 0x04	; 4
    2d72:	29 f1       	breq	.+74     	; 0x2dbe <turnOffPWM+0x56>
    2d74:	38 f4       	brcc	.+14     	; 0x2d84 <turnOffPWM+0x1c>
    2d76:	82 30       	cpi	r24, 0x02	; 2
    2d78:	59 f1       	breq	.+86     	; 0x2dd0 <turnOffPWM+0x68>
    2d7a:	e8 f4       	brcc	.+58     	; 0x2db6 <turnOffPWM+0x4e>
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <turnOffPWM+0x1a>
    2d80:	5e c0       	rjmp	.+188    	; 0x2e3e <turnOffPWM+0xd6>
    2d82:	23 c0       	rjmp	.+70     	; 0x2dca <turnOffPWM+0x62>
    2d84:	87 30       	cpi	r24, 0x07	; 7
    2d86:	61 f1       	breq	.+88     	; 0x2de0 <turnOffPWM+0x78>
    2d88:	88 f5       	brcc	.+98     	; 0x2dec <turnOffPWM+0x84>
    2d8a:	86 30       	cpi	r24, 0x06	; 6
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <turnOffPWM+0x28>
    2d8e:	57 c0       	rjmp	.+174    	; 0x2e3e <turnOffPWM+0xd6>
    2d90:	23 c0       	rjmp	.+70     	; 0x2dd8 <turnOffPWM+0x70>
    2d92:	8d 30       	cpi	r24, 0x0D	; 13
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <turnOffPWM+0x30>
    2d96:	40 c0       	rjmp	.+128    	; 0x2e18 <turnOffPWM+0xb0>
    2d98:	20 f4       	brcc	.+8      	; 0x2da2 <turnOffPWM+0x3a>
    2d9a:	8b 30       	cpi	r24, 0x0B	; 11
    2d9c:	a9 f1       	breq	.+106    	; 0x2e08 <turnOffPWM+0xa0>
    2d9e:	c0 f5       	brcc	.+112    	; 0x2e10 <turnOffPWM+0xa8>
    2da0:	2d c0       	rjmp	.+90     	; 0x2dfc <turnOffPWM+0x94>
    2da2:	80 31       	cpi	r24, 0x10	; 16
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <turnOffPWM+0x40>
    2da6:	42 c0       	rjmp	.+132    	; 0x2e2c <turnOffPWM+0xc4>
    2da8:	81 31       	cpi	r24, 0x11	; 17
    2daa:	09 f4       	brne	.+2      	; 0x2dae <turnOffPWM+0x46>
    2dac:	43 c0       	rjmp	.+134    	; 0x2e34 <turnOffPWM+0xcc>
    2dae:	8f 30       	cpi	r24, 0x0F	; 15
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <turnOffPWM+0x4c>
    2db2:	45 c0       	rjmp	.+138    	; 0x2e3e <turnOffPWM+0xd6>
    2db4:	37 c0       	rjmp	.+110    	; 0x2e24 <turnOffPWM+0xbc>
    2db6:	80 91 80 00 	lds	r24, 0x0080
    2dba:	8f 77       	andi	r24, 0x7F	; 127
    2dbc:	03 c0       	rjmp	.+6      	; 0x2dc4 <turnOffPWM+0x5c>
    2dbe:	80 91 80 00 	lds	r24, 0x0080
    2dc2:	8f 7d       	andi	r24, 0xDF	; 223
    2dc4:	80 93 80 00 	sts	0x0080, r24
    2dc8:	08 95       	ret
    2dca:	84 b5       	in	r24, 0x24	; 36
    2dcc:	8f 77       	andi	r24, 0x7F	; 127
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <turnOffPWM+0x6c>
    2dd0:	84 b5       	in	r24, 0x24	; 36
    2dd2:	8f 7d       	andi	r24, 0xDF	; 223
    2dd4:	84 bd       	out	0x24, r24	; 36
    2dd6:	08 95       	ret
    2dd8:	80 91 b0 00 	lds	r24, 0x00B0
    2ddc:	8f 77       	andi	r24, 0x7F	; 127
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <turnOffPWM+0x7e>
    2de0:	80 91 b0 00 	lds	r24, 0x00B0
    2de4:	8f 7d       	andi	r24, 0xDF	; 223
    2de6:	80 93 b0 00 	sts	0x00B0, r24
    2dea:	08 95       	ret
    2dec:	80 91 90 00 	lds	r24, 0x0090
    2df0:	8f 77       	andi	r24, 0x7F	; 127
    2df2:	07 c0       	rjmp	.+14     	; 0x2e02 <turnOffPWM+0x9a>
    2df4:	80 91 90 00 	lds	r24, 0x0090
    2df8:	8f 7d       	andi	r24, 0xDF	; 223
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <turnOffPWM+0x9a>
    2dfc:	80 91 90 00 	lds	r24, 0x0090
    2e00:	87 7f       	andi	r24, 0xF7	; 247
    2e02:	80 93 90 00 	sts	0x0090, r24
    2e06:	08 95       	ret
    2e08:	80 91 a0 00 	lds	r24, 0x00A0
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	07 c0       	rjmp	.+14     	; 0x2e1e <turnOffPWM+0xb6>
    2e10:	80 91 a0 00 	lds	r24, 0x00A0
    2e14:	8f 7d       	andi	r24, 0xDF	; 223
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <turnOffPWM+0xb6>
    2e18:	80 91 a0 00 	lds	r24, 0x00A0
    2e1c:	87 7f       	andi	r24, 0xF7	; 247
    2e1e:	80 93 a0 00 	sts	0x00A0, r24
    2e22:	08 95       	ret
    2e24:	80 91 20 01 	lds	r24, 0x0120
    2e28:	8f 77       	andi	r24, 0x7F	; 127
    2e2a:	07 c0       	rjmp	.+14     	; 0x2e3a <turnOffPWM+0xd2>
    2e2c:	80 91 20 01 	lds	r24, 0x0120
    2e30:	8f 7d       	andi	r24, 0xDF	; 223
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <turnOffPWM+0xd2>
    2e34:	80 91 20 01 	lds	r24, 0x0120
    2e38:	87 7f       	andi	r24, 0xF7	; 247
    2e3a:	80 93 20 01 	sts	0x0120, r24
    2e3e:	08 95       	ret

00002e40 <pinMode>:
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	fc 01       	movw	r30, r24
    2e48:	eb 58       	subi	r30, 0x8B	; 139
    2e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4c:	44 91       	lpm	r20, Z+
    2e4e:	fc 01       	movw	r30, r24
    2e50:	e5 54       	subi	r30, 0x45	; 69
    2e52:	fe 4f       	sbci	r31, 0xFE	; 254
    2e54:	84 91       	lpm	r24, Z+
    2e56:	88 23       	and	r24, r24
    2e58:	41 f1       	breq	.+80     	; 0x2eaa <pinMode+0x6a>
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	fc 01       	movw	r30, r24
    2e62:	eb 5c       	subi	r30, 0xCB	; 203
    2e64:	fd 4f       	sbci	r31, 0xFD	; 253
    2e66:	25 91       	lpm	r18, Z+
    2e68:	34 91       	lpm	r19, Z+
    2e6a:	d9 01       	movw	r26, r18
    2e6c:	85 5e       	subi	r24, 0xE5	; 229
    2e6e:	9d 4f       	sbci	r25, 0xFD	; 253
    2e70:	fc 01       	movw	r30, r24
    2e72:	85 91       	lpm	r24, Z+
    2e74:	94 91       	lpm	r25, Z+
    2e76:	c8 2f       	mov	r28, r24
    2e78:	d9 2f       	mov	r29, r25
    2e7a:	9f b7       	in	r25, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	8c 91       	ld	r24, X
    2e80:	61 11       	cpse	r22, r1
    2e82:	06 c0       	rjmp	.+12     	; 0x2e90 <pinMode+0x50>
    2e84:	40 95       	com	r20
    2e86:	84 23       	and	r24, r20
    2e88:	8c 93       	st	X, r24
    2e8a:	88 81       	ld	r24, Y
    2e8c:	84 23       	and	r24, r20
    2e8e:	08 c0       	rjmp	.+16     	; 0x2ea0 <pinMode+0x60>
    2e90:	62 30       	cpi	r22, 0x02	; 2
    2e92:	41 f4       	brne	.+16     	; 0x2ea4 <pinMode+0x64>
    2e94:	24 2f       	mov	r18, r20
    2e96:	20 95       	com	r18
    2e98:	82 23       	and	r24, r18
    2e9a:	8c 93       	st	X, r24
    2e9c:	88 81       	ld	r24, Y
    2e9e:	84 2b       	or	r24, r20
    2ea0:	88 83       	st	Y, r24
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <pinMode+0x68>
    2ea4:	84 2b       	or	r24, r20
    2ea6:	8c 93       	st	X, r24
    2ea8:	9f bf       	out	0x3f, r25	; 63
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <digitalWrite>:
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	1f 92       	push	r1
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	f9 01       	movw	r30, r18
    2ec4:	e1 5d       	subi	r30, 0xD1	; 209
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	84 91       	lpm	r24, Z+
    2eca:	f9 01       	movw	r30, r18
    2ecc:	eb 58       	subi	r30, 0x8B	; 139
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	14 91       	lpm	r17, Z+
    2ed2:	f9 01       	movw	r30, r18
    2ed4:	e5 54       	subi	r30, 0x45	; 69
    2ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed8:	04 91       	lpm	r16, Z+
    2eda:	00 23       	and	r16, r16
    2edc:	d1 f0       	breq	.+52     	; 0x2f12 <digitalWrite+0x62>
    2ede:	88 23       	and	r24, r24
    2ee0:	21 f0       	breq	.+8      	; 0x2eea <digitalWrite+0x3a>
    2ee2:	69 83       	std	Y+1, r22	; 0x01
    2ee4:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <turnOffPWM>
    2ee8:	69 81       	ldd	r22, Y+1	; 0x01
    2eea:	e0 2f       	mov	r30, r16
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	ee 0f       	add	r30, r30
    2ef0:	ff 1f       	adc	r31, r31
    2ef2:	e5 5e       	subi	r30, 0xE5	; 229
    2ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ef6:	85 91       	lpm	r24, Z+
    2ef8:	94 91       	lpm	r25, Z+
    2efa:	dc 01       	movw	r26, r24
    2efc:	9f b7       	in	r25, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	8c 91       	ld	r24, X
    2f02:	61 11       	cpse	r22, r1
    2f04:	03 c0       	rjmp	.+6      	; 0x2f0c <digitalWrite+0x5c>
    2f06:	10 95       	com	r17
    2f08:	81 23       	and	r24, r17
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <digitalWrite+0x5e>
    2f0c:	81 2b       	or	r24, r17
    2f0e:	8c 93       	st	X, r24
    2f10:	9f bf       	out	0x3f, r25	; 63
    2f12:	0f 90       	pop	r0
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	08 95       	ret

00002f1e <digitalRead>:
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	f9 01       	movw	r30, r18
    2f28:	e1 5d       	subi	r30, 0xD1	; 209
    2f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2c:	84 91       	lpm	r24, Z+
    2f2e:	f9 01       	movw	r30, r18
    2f30:	eb 58       	subi	r30, 0x8B	; 139
    2f32:	fe 4f       	sbci	r31, 0xFE	; 254
    2f34:	d4 91       	lpm	r29, Z+
    2f36:	f9 01       	movw	r30, r18
    2f38:	e5 54       	subi	r30, 0x45	; 69
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	c4 91       	lpm	r28, Z+
    2f3e:	cc 23       	and	r28, r28
    2f40:	89 f0       	breq	.+34     	; 0x2f64 <digitalRead+0x46>
    2f42:	81 11       	cpse	r24, r1
    2f44:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <turnOffPWM>
    2f48:	ec 2f       	mov	r30, r28
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	ee 0f       	add	r30, r30
    2f4e:	ff 1f       	adc	r31, r31
    2f50:	ef 5f       	subi	r30, 0xFF	; 255
    2f52:	fd 4f       	sbci	r31, 0xFD	; 253
    2f54:	85 91       	lpm	r24, Z+
    2f56:	94 91       	lpm	r25, Z+
    2f58:	dc 01       	movw	r26, r24
    2f5a:	8c 91       	ld	r24, X
    2f5c:	8d 23       	and	r24, r29
    2f5e:	21 e0       	ldi	r18, 0x01	; 1
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	11 f4       	brne	.+4      	; 0x2f68 <digitalRead+0x4a>
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	c9 01       	movw	r24, r18
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <yield>:
    2f70:	08 95       	ret

00002f72 <_ZN7PString5writeEh>:
#if defined(ARDUINO) && ARDUINO >= 100
size_t PString::write(uint8_t b)
#else
void PString::write(uint8_t b)
#endif
{
    2f72:	fc 01       	movw	r30, r24
  if (_cur + 1 < _buf + _size)
    2f74:	a6 81       	ldd	r26, Z+6	; 0x06
    2f76:	b7 81       	ldd	r27, Z+7	; 0x07
    2f78:	9d 01       	movw	r18, r26
    2f7a:	2f 5f       	subi	r18, 0xFF	; 255
    2f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7e:	84 81       	ldd	r24, Z+4	; 0x04
    2f80:	95 81       	ldd	r25, Z+5	; 0x05
    2f82:	40 85       	ldd	r20, Z+8	; 0x08
    2f84:	51 85       	ldd	r21, Z+9	; 0x09
    2f86:	84 0f       	add	r24, r20
    2f88:	95 1f       	adc	r25, r21
    2f8a:	28 17       	cp	r18, r24
    2f8c:	39 07       	cpc	r19, r25
    2f8e:	40 f4       	brcc	.+16     	; 0x2fa0 <_ZN7PString5writeEh+0x2e>
  {
    *_cur++ = (char)b;
    2f90:	6c 93       	st	X, r22
    2f92:	37 83       	std	Z+7, r19	; 0x07
    2f94:	26 83       	std	Z+6, r18	; 0x06
    *_cur = '\0';
    2f96:	11 96       	adiw	r26, 0x01	; 1
    2f98:	1c 92       	st	X, r1
#if defined(ARDUINO) && ARDUINO >= 100
		return 1;
    2f9a:	21 e0       	ldi	r18, 0x01	; 1
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <_ZN7PString5writeEh+0x32>
#endif
	}

#if defined(ARDUINO) && ARDUINO >= 100
	return 0;
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
#endif
}
    2fa4:	c9 01       	movw	r24, r18
    2fa6:	08 95       	ret

00002fa8 <_ZN7PString5beginEv>:
*/

#include "PString.h"

void PString::begin()
{
    2fa8:	fc 01       	movw	r30, r24
  _cur = _buf;
    2faa:	a4 81       	ldd	r26, Z+4	; 0x04
    2fac:	b5 81       	ldd	r27, Z+5	; 0x05
    2fae:	b7 83       	std	Z+7, r27	; 0x07
    2fb0:	a6 83       	std	Z+6, r26	; 0x06
  if (_size > 0)
    2fb2:	80 85       	ldd	r24, Z+8	; 0x08
    2fb4:	91 85       	ldd	r25, Z+9	; 0x09
    2fb6:	89 2b       	or	r24, r25
    2fb8:	09 f0       	breq	.+2      	; 0x2fbc <_ZN7PString5beginEv+0x14>
    _buf[0] = '\0';
    2fba:	1c 92       	st	X, r1
    2fbc:	08 95       	ret

00002fbe <_ZN3PIDC1Ev>:
  #include "WProgram.h"
#endif

#include <PID_v1/PID_v1.h>

PID::PID(){};
    2fbe:	08 95       	ret

00002fc0 <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    2fc0:	2f 92       	push	r2
    2fc2:	3f 92       	push	r3
    2fc4:	4f 92       	push	r4
    2fc6:	5f 92       	push	r5
    2fc8:	6f 92       	push	r6
    2fca:	7f 92       	push	r7
    2fcc:	8f 92       	push	r8
    2fce:	9f 92       	push	r9
    2fd0:	af 92       	push	r10
    2fd2:	bf 92       	push	r11
    2fd4:	cf 92       	push	r12
    2fd6:	df 92       	push	r13
    2fd8:	ef 92       	push	r14
    2fda:	ff 92       	push	r15
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	2a 97       	sbiw	r28, 0x0a	; 10
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	9a 87       	std	Y+10, r25	; 0x0a
    2ff6:	89 87       	std	Y+9, r24	; 0x09
   if(!inAuto) return;
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	d6 96       	adiw	r26, 0x36	; 54
    2ffc:	8c 91       	ld	r24, X
    2ffe:	88 23       	and	r24, r24
    3000:	09 f4       	brne	.+2      	; 0x3004 <_ZN3PID7ComputeEv+0x44>
    3002:	fa c0       	rjmp	.+500    	; 0x31f8 <_ZN3PID7ComputeEv+0x238>
   unsigned long now = millis();
    3004:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    3008:	69 83       	std	Y+1, r22	; 0x01
    300a:	7a 83       	std	Y+2, r23	; 0x02
    300c:	8b 83       	std	Y+3, r24	; 0x03
    300e:	9c 83       	std	Y+4, r25	; 0x04
   int timeChange = (now - lastTime);
    3010:	e9 85       	ldd	r30, Y+9	; 0x09
    3012:	fa 85       	ldd	r31, Y+10	; 0x0a
    3014:	80 a1       	ldd	r24, Z+32	; 0x20
    3016:	91 a1       	ldd	r25, Z+33	; 0x21
    3018:	29 81       	ldd	r18, Y+1	; 0x01
    301a:	3a 81       	ldd	r19, Y+2	; 0x02
    301c:	28 1b       	sub	r18, r24
    301e:	39 0b       	sbc	r19, r25
   if(timeChange>=SampleTime)
    3020:	84 a5       	ldd	r24, Z+44	; 0x2c
    3022:	95 a5       	ldd	r25, Z+45	; 0x2d
    3024:	28 17       	cp	r18, r24
    3026:	39 07       	cpc	r19, r25
    3028:	0c f4       	brge	.+2      	; 0x302c <_ZN3PID7ComputeEv+0x6c>
    302a:	e6 c0       	rjmp	.+460    	; 0x31f8 <_ZN3PID7ComputeEv+0x238>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    302c:	02 8c       	ldd	r0, Z+26	; 0x1a
    302e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3030:	e0 2d       	mov	r30, r0
    3032:	c0 80       	ld	r12, Z
    3034:	d1 80       	ldd	r13, Z+1	; 0x01
    3036:	e2 80       	ldd	r14, Z+2	; 0x02
    3038:	f3 80       	ldd	r15, Z+3	; 0x03
      double error = *mySetpoint - input;
    303a:	a9 85       	ldd	r26, Y+9	; 0x09
    303c:	ba 85       	ldd	r27, Y+10	; 0x0a
    303e:	5e 96       	adiw	r26, 0x1e	; 30
    3040:	ed 91       	ld	r30, X+
    3042:	fc 91       	ld	r31, X
    3044:	5f 97       	sbiw	r26, 0x1f	; 31
    3046:	a7 01       	movw	r20, r14
    3048:	96 01       	movw	r18, r12
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3056:	6d 83       	std	Y+5, r22	; 0x05
    3058:	7e 83       	std	Y+6, r23	; 0x06
    305a:	8f 83       	std	Y+7, r24	; 0x07
    305c:	98 87       	std	Y+8, r25	; 0x08
      ITerm+= (ki * error);
    305e:	e9 85       	ldd	r30, Y+9	; 0x09
    3060:	fa 85       	ldd	r31, Y+10	; 0x0a
    3062:	20 89       	ldd	r18, Z+16	; 0x10
    3064:	31 89       	ldd	r19, Z+17	; 0x11
    3066:	42 89       	ldd	r20, Z+18	; 0x12
    3068:	53 89       	ldd	r21, Z+19	; 0x13
    306a:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    306e:	a9 85       	ldd	r26, Y+9	; 0x09
    3070:	ba 85       	ldd	r27, Y+10	; 0x0a
    3072:	94 96       	adiw	r26, 0x24	; 36
    3074:	2d 91       	ld	r18, X+
    3076:	3d 91       	ld	r19, X+
    3078:	4d 91       	ld	r20, X+
    307a:	5c 91       	ld	r21, X
    307c:	97 97       	sbiw	r26, 0x27	; 39
    307e:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    3082:	56 2e       	mov	r5, r22
    3084:	67 2e       	mov	r6, r23
    3086:	78 2e       	mov	r7, r24
    3088:	09 2f       	mov	r16, r25
    308a:	98 2f       	mov	r25, r24
    308c:	45 2d       	mov	r20, r5
    308e:	56 2d       	mov	r21, r6
    3090:	69 2f       	mov	r22, r25
    3092:	70 2f       	mov	r23, r16
    3094:	e9 85       	ldd	r30, Y+9	; 0x09
    3096:	fa 85       	ldd	r31, Y+10	; 0x0a
    3098:	44 a3       	std	Z+36, r20	; 0x24
    309a:	55 a3       	std	Z+37, r21	; 0x25
    309c:	66 a3       	std	Z+38, r22	; 0x26
    309e:	77 a3       	std	Z+39, r23	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    30a0:	22 a8       	ldd	r2, Z+50	; 0x32
    30a2:	13 a9       	ldd	r17, Z+51	; 0x33
    30a4:	34 a8       	ldd	r3, Z+52	; 0x34
    30a6:	45 a8       	ldd	r4, Z+53	; 0x35
    30a8:	22 2d       	mov	r18, r2
    30aa:	31 2f       	mov	r19, r17
    30ac:	43 2d       	mov	r20, r3
    30ae:	54 2d       	mov	r21, r4
    30b0:	65 2d       	mov	r22, r5
    30b2:	76 2d       	mov	r23, r6
    30b4:	87 2d       	mov	r24, r7
    30b6:	90 2f       	mov	r25, r16
    30b8:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    30bc:	18 16       	cp	r1, r24
    30be:	6c f4       	brge	.+26     	; 0x30da <_ZN3PID7ComputeEv+0x11a>
    30c0:	42 2d       	mov	r20, r2
    30c2:	51 2f       	mov	r21, r17
    30c4:	63 2d       	mov	r22, r3
    30c6:	74 2d       	mov	r23, r4
    30c8:	a9 85       	ldd	r26, Y+9	; 0x09
    30ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    30cc:	94 96       	adiw	r26, 0x24	; 36
    30ce:	4d 93       	st	X+, r20
    30d0:	5d 93       	st	X+, r21
    30d2:	6d 93       	st	X+, r22
    30d4:	7c 93       	st	X, r23
    30d6:	97 97       	sbiw	r26, 0x27	; 39
    30d8:	18 c0       	rjmp	.+48     	; 0x310a <_ZN3PID7ComputeEv+0x14a>
      else if(ITerm < outMin) ITerm= outMin;
    30da:	e9 85       	ldd	r30, Y+9	; 0x09
    30dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    30de:	86 a4       	ldd	r8, Z+46	; 0x2e
    30e0:	97 a4       	ldd	r9, Z+47	; 0x2f
    30e2:	a0 a8       	ldd	r10, Z+48	; 0x30
    30e4:	b1 a8       	ldd	r11, Z+49	; 0x31
    30e6:	a5 01       	movw	r20, r10
    30e8:	94 01       	movw	r18, r8
    30ea:	65 2d       	mov	r22, r5
    30ec:	76 2d       	mov	r23, r6
    30ee:	87 2d       	mov	r24, r7
    30f0:	90 2f       	mov	r25, r16
    30f2:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    30f6:	87 ff       	sbrs	r24, 7
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <_ZN3PID7ComputeEv+0x14a>
    30fa:	a9 85       	ldd	r26, Y+9	; 0x09
    30fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    30fe:	94 96       	adiw	r26, 0x24	; 36
    3100:	8d 92       	st	X+, r8
    3102:	9d 92       	st	X+, r9
    3104:	ad 92       	st	X+, r10
    3106:	bc 92       	st	X, r11
    3108:	97 97       	sbiw	r26, 0x27	; 39
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    310a:	e9 85       	ldd	r30, Y+9	; 0x09
    310c:	fa 85       	ldd	r31, Y+10	; 0x0a
    310e:	24 85       	ldd	r18, Z+12	; 0x0c
    3110:	35 85       	ldd	r19, Z+13	; 0x0d
    3112:	46 85       	ldd	r20, Z+14	; 0x0e
    3114:	57 85       	ldd	r21, Z+15	; 0x0f
    3116:	bd 81       	ldd	r27, Y+5	; 0x05
    3118:	ae 81       	ldd	r26, Y+6	; 0x06
    311a:	0f 81       	ldd	r16, Y+7	; 0x07
    311c:	b8 84       	ldd	r11, Y+8	; 0x08
    311e:	6b 2f       	mov	r22, r27
    3120:	7a 2f       	mov	r23, r26
    3122:	80 2f       	mov	r24, r16
    3124:	9b 2d       	mov	r25, r11
    3126:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    312a:	a9 85       	ldd	r26, Y+9	; 0x09
    312c:	ba 85       	ldd	r27, Y+10	; 0x0a
    312e:	94 96       	adiw	r26, 0x24	; 36
    3130:	2d 91       	ld	r18, X+
    3132:	3d 91       	ld	r19, X+
    3134:	4d 91       	ld	r20, X+
    3136:	5c 91       	ld	r21, X
    3138:	97 97       	sbiw	r26, 0x27	; 39
    313a:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    313e:	4b 01       	movw	r8, r22
    3140:	5c 01       	movw	r10, r24
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
    3142:	e9 85       	ldd	r30, Y+9	; 0x09
    3144:	fa 85       	ldd	r31, Y+10	; 0x0a
    3146:	20 a5       	ldd	r18, Z+40	; 0x28
    3148:	31 a5       	ldd	r19, Z+41	; 0x29
    314a:	42 a5       	ldd	r20, Z+42	; 0x2a
    314c:	53 a5       	ldd	r21, Z+43	; 0x2b
    314e:	c7 01       	movw	r24, r14
    3150:	b6 01       	movw	r22, r12
    3152:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    3156:	a9 85       	ldd	r26, Y+9	; 0x09
    3158:	ba 85       	ldd	r27, Y+10	; 0x0a
    315a:	54 96       	adiw	r26, 0x14	; 20
    315c:	2d 91       	ld	r18, X+
    315e:	3d 91       	ld	r19, X+
    3160:	4d 91       	ld	r20, X+
    3162:	5c 91       	ld	r21, X
    3164:	57 97       	sbiw	r26, 0x17	; 23
    3166:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    316a:	9b 01       	movw	r18, r22
    316c:	ac 01       	movw	r20, r24
    316e:	c5 01       	movw	r24, r10
    3170:	b4 01       	movw	r22, r8
    3172:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3176:	96 2e       	mov	r9, r22
    3178:	a7 2e       	mov	r10, r23
    317a:	b8 2e       	mov	r11, r24
    317c:	09 2f       	mov	r16, r25
      
	  if(output > outMax) output = outMax;
    317e:	22 2d       	mov	r18, r2
    3180:	31 2f       	mov	r19, r17
    3182:	43 2d       	mov	r20, r3
    3184:	54 2d       	mov	r21, r4
    3186:	69 2d       	mov	r22, r9
    3188:	7a 2d       	mov	r23, r10
    318a:	8b 2d       	mov	r24, r11
    318c:	90 2f       	mov	r25, r16
    318e:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    3192:	18 16       	cp	r1, r24
    3194:	b4 f0       	brlt	.+44     	; 0x31c2 <_ZN3PID7ComputeEv+0x202>
      else if(output < outMin) output = outMin;
    3196:	e9 85       	ldd	r30, Y+9	; 0x09
    3198:	fa 85       	ldd	r31, Y+10	; 0x0a
    319a:	26 a4       	ldd	r2, Z+46	; 0x2e
    319c:	17 a5       	ldd	r17, Z+47	; 0x2f
    319e:	30 a8       	ldd	r3, Z+48	; 0x30
    31a0:	41 a8       	ldd	r4, Z+49	; 0x31
    31a2:	22 2d       	mov	r18, r2
    31a4:	31 2f       	mov	r19, r17
    31a6:	43 2d       	mov	r20, r3
    31a8:	54 2d       	mov	r21, r4
    31aa:	69 2d       	mov	r22, r9
    31ac:	7a 2d       	mov	r23, r10
    31ae:	8b 2d       	mov	r24, r11
    31b0:	90 2f       	mov	r25, r16
    31b2:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    31b6:	87 fd       	sbrc	r24, 7
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <_ZN3PID7ComputeEv+0x202>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    31ba:	29 2c       	mov	r2, r9
    31bc:	1a 2d       	mov	r17, r10
    31be:	3b 2c       	mov	r3, r11
    31c0:	40 2e       	mov	r4, r16
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    31c2:	a9 85       	ldd	r26, Y+9	; 0x09
    31c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    31c6:	5c 96       	adiw	r26, 0x1c	; 28
    31c8:	ed 91       	ld	r30, X+
    31ca:	fc 91       	ld	r31, X
    31cc:	5d 97       	sbiw	r26, 0x1d	; 29
    31ce:	42 2d       	mov	r20, r2
    31d0:	51 2f       	mov	r21, r17
    31d2:	63 2d       	mov	r22, r3
    31d4:	74 2d       	mov	r23, r4
    31d6:	40 83       	st	Z, r20
    31d8:	51 83       	std	Z+1, r21	; 0x01
    31da:	62 83       	std	Z+2, r22	; 0x02
    31dc:	73 83       	std	Z+3, r23	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    31de:	fd 01       	movw	r30, r26
    31e0:	c0 a6       	std	Z+40, r12	; 0x28
    31e2:	d1 a6       	std	Z+41, r13	; 0x29
    31e4:	e2 a6       	std	Z+42, r14	; 0x2a
    31e6:	f3 a6       	std	Z+43, r15	; 0x2b
      lastTime = now;
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	ab 81       	ldd	r26, Y+3	; 0x03
    31ee:	bc 81       	ldd	r27, Y+4	; 0x04
    31f0:	80 a3       	std	Z+32, r24	; 0x20
    31f2:	91 a3       	std	Z+33, r25	; 0x21
    31f4:	a2 a3       	std	Z+34, r26	; 0x22
    31f6:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    31f8:	2a 96       	adiw	r28, 0x0a	; 10
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	cf 90       	pop	r12
    3214:	bf 90       	pop	r11
    3216:	af 90       	pop	r10
    3218:	9f 90       	pop	r9
    321a:	8f 90       	pop	r8
    321c:	7f 90       	pop	r7
    321e:	6f 90       	pop	r6
    3220:	5f 90       	pop	r5
    3222:	4f 90       	pop	r4
    3224:	3f 90       	pop	r3
    3226:	2f 90       	pop	r2
    3228:	08 95       	ret

0000322a <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    322a:	2f 92       	push	r2
    322c:	3f 92       	push	r3
    322e:	4f 92       	push	r4
    3230:	5f 92       	push	r5
    3232:	6f 92       	push	r6
    3234:	7f 92       	push	r7
    3236:	8f 92       	push	r8
    3238:	9f 92       	push	r9
    323a:	af 92       	push	r10
    323c:	bf 92       	push	r11
    323e:	cf 92       	push	r12
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	1c 01       	movw	r2, r24
    3250:	4a 01       	movw	r8, r20
    3252:	5b 01       	movw	r10, r22
    3254:	28 01       	movw	r4, r16
    3256:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	a9 01       	movw	r20, r18
    325e:	c5 01       	movw	r24, r10
    3260:	b4 01       	movw	r22, r8
    3262:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    3266:	87 fd       	sbrc	r24, 7
    3268:	8e c0       	rjmp	.+284    	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	a9 01       	movw	r20, r18
    3270:	c3 01       	movw	r24, r6
    3272:	b2 01       	movw	r22, r4
    3274:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    3278:	87 fd       	sbrc	r24, 7
    327a:	85 c0       	rjmp	.+266    	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	a9 01       	movw	r20, r18
    3282:	c7 01       	movw	r24, r14
    3284:	b6 01       	movw	r22, r12
    3286:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    328a:	87 fd       	sbrc	r24, 7
    328c:	7c c0       	rjmp	.+248    	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    328e:	f1 01       	movw	r30, r2
    3290:	80 82       	st	Z, r8
    3292:	91 82       	std	Z+1, r9	; 0x01
    3294:	a2 82       	std	Z+2, r10	; 0x02
    3296:	b3 82       	std	Z+3, r11	; 0x03
    3298:	44 82       	std	Z+4, r4	; 0x04
    329a:	55 82       	std	Z+5, r5	; 0x05
    329c:	66 82       	std	Z+6, r6	; 0x06
    329e:	77 82       	std	Z+7, r7	; 0x07
    32a0:	c0 86       	std	Z+8, r12	; 0x08
    32a2:	d1 86       	std	Z+9, r13	; 0x09
    32a4:	e2 86       	std	Z+10, r14	; 0x0a
    32a6:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    32a8:	64 a5       	ldd	r22, Z+44	; 0x2c
    32aa:	75 a5       	ldd	r23, Z+45	; 0x2d
    32ac:	88 27       	eor	r24, r24
    32ae:	77 fd       	sbrc	r23, 7
    32b0:	80 95       	com	r24
    32b2:	98 2f       	mov	r25, r24
    32b4:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	4a e7       	ldi	r20, 0x7A	; 122
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    32c4:	d6 2f       	mov	r29, r22
    32c6:	c7 2f       	mov	r28, r23
    32c8:	8c 01       	movw	r16, r24
   kp = Kp;
    32ca:	f1 01       	movw	r30, r2
    32cc:	84 86       	std	Z+12, r8	; 0x0c
    32ce:	95 86       	std	Z+13, r9	; 0x0d
    32d0:	a6 86       	std	Z+14, r10	; 0x0e
    32d2:	b7 86       	std	Z+15, r11	; 0x0f
   ki = Ki * SampleTimeInSec;
    32d4:	be 01       	movw	r22, r28
    32d6:	98 2f       	mov	r25, r24
    32d8:	27 2f       	mov	r18, r23
    32da:	36 2f       	mov	r19, r22
    32dc:	49 2f       	mov	r20, r25
    32de:	51 2f       	mov	r21, r17
    32e0:	c3 01       	movw	r24, r6
    32e2:	b2 01       	movw	r22, r4
    32e4:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    32e8:	2b 01       	movw	r4, r22
    32ea:	3c 01       	movw	r6, r24
    32ec:	98 2f       	mov	r25, r24
    32ee:	44 2d       	mov	r20, r4
    32f0:	55 2d       	mov	r21, r5
    32f2:	69 2f       	mov	r22, r25
    32f4:	77 2d       	mov	r23, r7
    32f6:	f1 01       	movw	r30, r2
    32f8:	40 8b       	std	Z+16, r20	; 0x10
    32fa:	51 8b       	std	Z+17, r21	; 0x11
    32fc:	62 8b       	std	Z+18, r22	; 0x12
    32fe:	73 8b       	std	Z+19, r23	; 0x13
   kd = Kd / SampleTimeInSec;
    3300:	be 01       	movw	r22, r28
    3302:	27 2f       	mov	r18, r23
    3304:	36 2f       	mov	r19, r22
    3306:	40 2f       	mov	r20, r16
    3308:	51 2f       	mov	r21, r17
    330a:	c7 01       	movw	r24, r14
    330c:	b6 01       	movw	r22, r12
    330e:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    3312:	7b 01       	movw	r14, r22
    3314:	d8 2f       	mov	r29, r24
    3316:	c9 2f       	mov	r28, r25
    3318:	ce 01       	movw	r24, r28
    331a:	0e 2d       	mov	r16, r14
    331c:	1f 2d       	mov	r17, r15
    331e:	29 2f       	mov	r18, r25
    3320:	38 2f       	mov	r19, r24
    3322:	f1 01       	movw	r30, r2
    3324:	04 8b       	std	Z+20, r16	; 0x14
    3326:	15 8b       	std	Z+21, r17	; 0x15
    3328:	26 8b       	std	Z+22, r18	; 0x16
    332a:	37 8b       	std	Z+23, r19	; 0x17
 
  if(controllerDirection ==REVERSE)
    332c:	80 8d       	ldd	r24, Z+24	; 0x18
    332e:	91 8d       	ldd	r25, Z+25	; 0x19
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	49 f5       	brne	.+82     	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
   {
      kp = (0 - kp);
    3334:	a5 01       	movw	r20, r10
    3336:	94 01       	movw	r18, r8
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	cb 01       	movw	r24, r22
    333e:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3342:	f1 01       	movw	r30, r2
    3344:	64 87       	std	Z+12, r22	; 0x0c
    3346:	75 87       	std	Z+13, r23	; 0x0d
    3348:	86 87       	std	Z+14, r24	; 0x0e
    334a:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    334c:	24 2d       	mov	r18, r4
    334e:	35 2d       	mov	r19, r5
    3350:	46 2d       	mov	r20, r6
    3352:	57 2d       	mov	r21, r7
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	cb 01       	movw	r24, r22
    335a:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    335e:	f1 01       	movw	r30, r2
    3360:	60 8b       	std	Z+16, r22	; 0x10
    3362:	71 8b       	std	Z+17, r23	; 0x11
    3364:	82 8b       	std	Z+18, r24	; 0x12
    3366:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    3368:	ce 01       	movw	r24, r28
    336a:	20 2f       	mov	r18, r16
    336c:	31 2f       	mov	r19, r17
    336e:	49 2f       	mov	r20, r25
    3370:	58 2f       	mov	r21, r24
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	cb 01       	movw	r24, r22
    3378:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    337c:	f1 01       	movw	r30, r2
    337e:	64 8b       	std	Z+20, r22	; 0x14
    3380:	75 8b       	std	Z+21, r23	; 0x15
    3382:	86 8b       	std	Z+22, r24	; 0x16
    3384:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	ff 90       	pop	r15
    3390:	ef 90       	pop	r14
    3392:	df 90       	pop	r13
    3394:	cf 90       	pop	r12
    3396:	bf 90       	pop	r11
    3398:	af 90       	pop	r10
    339a:	9f 90       	pop	r9
    339c:	8f 90       	pop	r8
    339e:	7f 90       	pop	r7
    33a0:	6f 90       	pop	r6
    33a2:	5f 90       	pop	r5
    33a4:	4f 90       	pop	r4
    33a6:	3f 90       	pop	r3
    33a8:	2f 90       	pop	r2
    33aa:	08 95       	ret

000033ac <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	ec 01       	movw	r28, r24
    33be:	8b 01       	movw	r16, r22
   if (NewSampleTime > 0)
    33c0:	16 16       	cp	r1, r22
    33c2:	17 06       	cpc	r1, r23
    33c4:	bc f5       	brge	.+110    	; 0x3434 <_ZN3PID13SetSampleTimeEi+0x88>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    33c6:	88 27       	eor	r24, r24
    33c8:	77 fd       	sbrc	r23, 7
    33ca:	80 95       	com	r24
    33cc:	98 2f       	mov	r25, r24
    33ce:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    33d2:	6b 01       	movw	r12, r22
    33d4:	7c 01       	movw	r14, r24
    33d6:	6c a5       	ldd	r22, Y+44	; 0x2c
    33d8:	7d a5       	ldd	r23, Y+45	; 0x2d
    33da:	88 27       	eor	r24, r24
    33dc:	77 fd       	sbrc	r23, 7
    33de:	80 95       	com	r24
    33e0:	98 2f       	mov	r25, r24
    33e2:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    33e6:	9b 01       	movw	r18, r22
    33e8:	ac 01       	movw	r20, r24
    33ea:	c7 01       	movw	r24, r14
    33ec:	b6 01       	movw	r22, r12
    33ee:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    33f2:	6b 01       	movw	r12, r22
    33f4:	7c 01       	movw	r14, r24
      ki *= ratio;
    33f6:	76 2f       	mov	r23, r22
    33f8:	27 2f       	mov	r18, r23
    33fa:	3d 2d       	mov	r19, r13
    33fc:	4e 2d       	mov	r20, r14
    33fe:	5f 2d       	mov	r21, r15
    3400:	68 89       	ldd	r22, Y+16	; 0x10
    3402:	79 89       	ldd	r23, Y+17	; 0x11
    3404:	8a 89       	ldd	r24, Y+18	; 0x12
    3406:	9b 89       	ldd	r25, Y+19	; 0x13
    3408:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    340c:	68 8b       	std	Y+16, r22	; 0x10
    340e:	79 8b       	std	Y+17, r23	; 0x11
    3410:	8a 8b       	std	Y+18, r24	; 0x12
    3412:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    3414:	2c 2d       	mov	r18, r12
    3416:	3d 2d       	mov	r19, r13
    3418:	4e 2d       	mov	r20, r14
    341a:	5f 2d       	mov	r21, r15
    341c:	6c 89       	ldd	r22, Y+20	; 0x14
    341e:	7d 89       	ldd	r23, Y+21	; 0x15
    3420:	8e 89       	ldd	r24, Y+22	; 0x16
    3422:	9f 89       	ldd	r25, Y+23	; 0x17
    3424:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    3428:	6c 8b       	std	Y+20, r22	; 0x14
    342a:	7d 8b       	std	Y+21, r23	; 0x15
    342c:	8e 8b       	std	Y+22, r24	; 0x16
    342e:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    3430:	1d a7       	std	Y+45, r17	; 0x2d
    3432:	0c a7       	std	Y+44, r16	; 0x2c
   }
}
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	08 95       	ret

00003446 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    3446:	4f 92       	push	r4
    3448:	5f 92       	push	r5
    344a:	6f 92       	push	r6
    344c:	7f 92       	push	r7
    344e:	8f 92       	push	r8
    3450:	9f 92       	push	r9
    3452:	af 92       	push	r10
    3454:	bf 92       	push	r11
    3456:	cf 92       	push	r12
    3458:	df 92       	push	r13
    345a:	ef 92       	push	r14
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	ec 01       	movw	r28, r24
    3468:	6a 01       	movw	r12, r20
    346a:	7b 01       	movw	r14, r22
    346c:	48 01       	movw	r8, r16
    346e:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    3470:	a9 01       	movw	r20, r18
    3472:	98 01       	movw	r18, r16
    3474:	c7 01       	movw	r24, r14
    3476:	b6 01       	movw	r22, r12
    3478:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    347c:	87 ff       	sbrs	r24, 7
    347e:	4f c0       	rjmp	.+158    	; 0x351e <_ZN3PID15SetOutputLimitsEdd+0xd8>
   outMin = Min;
    3480:	ce a6       	std	Y+46, r12	; 0x2e
    3482:	df a6       	std	Y+47, r13	; 0x2f
    3484:	e8 aa       	std	Y+48, r14	; 0x30
    3486:	f9 aa       	std	Y+49, r15	; 0x31
   outMax = Max;
    3488:	8a aa       	std	Y+50, r8	; 0x32
    348a:	9b aa       	std	Y+51, r9	; 0x33
    348c:	ac aa       	std	Y+52, r10	; 0x34
    348e:	bd aa       	std	Y+53, r11	; 0x35
 
   if(inAuto)
    3490:	8e a9       	ldd	r24, Y+54	; 0x36
    3492:	88 23       	and	r24, r24
    3494:	09 f4       	brne	.+2      	; 0x3498 <_ZN3PID15SetOutputLimitsEdd+0x52>
    3496:	43 c0       	rjmp	.+134    	; 0x351e <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    3498:	0c 8d       	ldd	r16, Y+28	; 0x1c
    349a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    349c:	f8 01       	movw	r30, r16
    349e:	40 80       	ld	r4, Z
    34a0:	51 80       	ldd	r5, Z+1	; 0x01
    34a2:	62 80       	ldd	r6, Z+2	; 0x02
    34a4:	73 80       	ldd	r7, Z+3	; 0x03
    34a6:	a5 01       	movw	r20, r10
    34a8:	94 01       	movw	r18, r8
    34aa:	c3 01       	movw	r24, r6
    34ac:	b2 01       	movw	r22, r4
    34ae:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    34b2:	18 16       	cp	r1, r24
    34b4:	34 f4       	brge	.+12     	; 0x34c2 <_ZN3PID15SetOutputLimitsEdd+0x7c>
    34b6:	f8 01       	movw	r30, r16
    34b8:	80 82       	st	Z, r8
    34ba:	91 82       	std	Z+1, r9	; 0x01
    34bc:	a2 82       	std	Z+2, r10	; 0x02
    34be:	b3 82       	std	Z+3, r11	; 0x03
    34c0:	0d c0       	rjmp	.+26     	; 0x34dc <_ZN3PID15SetOutputLimitsEdd+0x96>
	   else if(*myOutput < outMin) *myOutput = outMin;
    34c2:	a7 01       	movw	r20, r14
    34c4:	96 01       	movw	r18, r12
    34c6:	c3 01       	movw	r24, r6
    34c8:	b2 01       	movw	r22, r4
    34ca:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    34ce:	87 ff       	sbrs	r24, 7
    34d0:	05 c0       	rjmp	.+10     	; 0x34dc <_ZN3PID15SetOutputLimitsEdd+0x96>
    34d2:	f8 01       	movw	r30, r16
    34d4:	c0 82       	st	Z, r12
    34d6:	d1 82       	std	Z+1, r13	; 0x01
    34d8:	e2 82       	std	Z+2, r14	; 0x02
    34da:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    34dc:	8c a0       	ldd	r8, Y+36	; 0x24
    34de:	9d a0       	ldd	r9, Y+37	; 0x25
    34e0:	ae a0       	ldd	r10, Y+38	; 0x26
    34e2:	bf a0       	ldd	r11, Y+39	; 0x27
    34e4:	ca a8       	ldd	r12, Y+50	; 0x32
    34e6:	db a8       	ldd	r13, Y+51	; 0x33
    34e8:	ec a8       	ldd	r14, Y+52	; 0x34
    34ea:	fd a8       	ldd	r15, Y+53	; 0x35
    34ec:	a7 01       	movw	r20, r14
    34ee:	96 01       	movw	r18, r12
    34f0:	c5 01       	movw	r24, r10
    34f2:	b4 01       	movw	r22, r8
    34f4:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    34f8:	18 16       	cp	r1, r24
    34fa:	0c f4       	brge	.+2      	; 0x34fe <_ZN3PID15SetOutputLimitsEdd+0xb8>
    34fc:	0c c0       	rjmp	.+24     	; 0x3516 <_ZN3PID15SetOutputLimitsEdd+0xd0>
	   else if(ITerm < outMin) ITerm= outMin;
    34fe:	ce a4       	ldd	r12, Y+46	; 0x2e
    3500:	df a4       	ldd	r13, Y+47	; 0x2f
    3502:	e8 a8       	ldd	r14, Y+48	; 0x30
    3504:	f9 a8       	ldd	r15, Y+49	; 0x31
    3506:	a7 01       	movw	r20, r14
    3508:	96 01       	movw	r18, r12
    350a:	c5 01       	movw	r24, r10
    350c:	b4 01       	movw	r22, r8
    350e:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    3512:	87 ff       	sbrs	r24, 7
    3514:	04 c0       	rjmp	.+8      	; 0x351e <_ZN3PID15SetOutputLimitsEdd+0xd8>
    3516:	cc a2       	std	Y+36, r12	; 0x24
    3518:	dd a2       	std	Y+37, r13	; 0x25
    351a:	ee a2       	std	Y+38, r14	; 0x26
    351c:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	ff 90       	pop	r15
    3528:	ef 90       	pop	r14
    352a:	df 90       	pop	r13
    352c:	cf 90       	pop	r12
    352e:	bf 90       	pop	r11
    3530:	af 90       	pop	r10
    3532:	9f 90       	pop	r9
    3534:	8f 90       	pop	r8
    3536:	7f 90       	pop	r7
    3538:	6f 90       	pop	r6
    353a:	5f 90       	pop	r5
    353c:	4f 90       	pop	r4
    353e:	08 95       	ret

00003540 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    3540:	8f 92       	push	r8
    3542:	9f 92       	push	r9
    3544:	af 92       	push	r10
    3546:	bf 92       	push	r11
    3548:	cf 92       	push	r12
    354a:	df 92       	push	r13
    354c:	ef 92       	push	r14
    354e:	ff 92       	push	r15
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    3556:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3558:	fd 8d       	ldd	r31, Y+29	; 0x1d
    355a:	c0 80       	ld	r12, Z
    355c:	d1 80       	ldd	r13, Z+1	; 0x01
    355e:	e2 80       	ldd	r14, Z+2	; 0x02
    3560:	f3 80       	ldd	r15, Z+3	; 0x03
    3562:	cc a2       	std	Y+36, r12	; 0x24
    3564:	dd a2       	std	Y+37, r13	; 0x25
    3566:	ee a2       	std	Y+38, r14	; 0x26
    3568:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    356a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    356c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    356e:	40 81       	ld	r20, Z
    3570:	51 81       	ldd	r21, Z+1	; 0x01
    3572:	62 81       	ldd	r22, Z+2	; 0x02
    3574:	73 81       	ldd	r23, Z+3	; 0x03
    3576:	48 a7       	std	Y+40, r20	; 0x28
    3578:	59 a7       	std	Y+41, r21	; 0x29
    357a:	6a a7       	std	Y+42, r22	; 0x2a
    357c:	7b a7       	std	Y+43, r23	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    357e:	8a a8       	ldd	r8, Y+50	; 0x32
    3580:	9b a8       	ldd	r9, Y+51	; 0x33
    3582:	ac a8       	ldd	r10, Y+52	; 0x34
    3584:	bd a8       	ldd	r11, Y+53	; 0x35
    3586:	a5 01       	movw	r20, r10
    3588:	94 01       	movw	r18, r8
    358a:	c7 01       	movw	r24, r14
    358c:	b6 01       	movw	r22, r12
    358e:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    3592:	18 16       	cp	r1, r24
    3594:	0c f4       	brge	.+2      	; 0x3598 <_ZN3PID10InitializeEv+0x58>
    3596:	0c c0       	rjmp	.+24     	; 0x35b0 <_ZN3PID10InitializeEv+0x70>
   else if(ITerm < outMin) ITerm = outMin;
    3598:	8e a4       	ldd	r8, Y+46	; 0x2e
    359a:	9f a4       	ldd	r9, Y+47	; 0x2f
    359c:	a8 a8       	ldd	r10, Y+48	; 0x30
    359e:	b9 a8       	ldd	r11, Y+49	; 0x31
    35a0:	a5 01       	movw	r20, r10
    35a2:	94 01       	movw	r18, r8
    35a4:	c7 01       	movw	r24, r14
    35a6:	b6 01       	movw	r22, r12
    35a8:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    35ac:	87 ff       	sbrs	r24, 7
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <_ZN3PID10InitializeEv+0x78>
    35b0:	8c a2       	std	Y+36, r8	; 0x24
    35b2:	9d a2       	std	Y+37, r9	; 0x25
    35b4:	ae a2       	std	Y+38, r10	; 0x26
    35b6:	bf a2       	std	Y+39, r11	; 0x27
}
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	df 90       	pop	r13
    35c2:	cf 90       	pop	r12
    35c4:	bf 90       	pop	r11
    35c6:	af 90       	pop	r10
    35c8:	9f 90       	pop	r9
    35ca:	8f 90       	pop	r8
    35cc:	08 95       	ret

000035ce <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    35ce:	1f 93       	push	r17
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    35d6:	11 e0       	ldi	r17, 0x01	; 1
    35d8:	61 30       	cpi	r22, 0x01	; 1
    35da:	71 05       	cpc	r23, r1
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <_ZN3PID7SetModeEi+0x12>
    35de:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    35e0:	8e a9       	ldd	r24, Y+54	; 0x36
    35e2:	91 e0       	ldi	r25, 0x01	; 1
    35e4:	89 27       	eor	r24, r25
    35e6:	18 13       	cpse	r17, r24
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    35ea:	ce 01       	movw	r24, r28
    35ec:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    35f0:	1e ab       	std	Y+54, r17	; 0x36
}
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	1f 91       	pop	r17
    35f8:	08 95       	ret

000035fa <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
    3604:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    3606:	8e a9       	ldd	r24, Y+54	; 0x36
    3608:	88 23       	and	r24, r24
    360a:	61 f1       	breq	.+88     	; 0x3664 <_ZN3PID22SetControllerDirectionEi+0x6a>
    360c:	88 8d       	ldd	r24, Y+24	; 0x18
    360e:	99 8d       	ldd	r25, Y+25	; 0x19
    3610:	68 17       	cp	r22, r24
    3612:	79 07       	cpc	r23, r25
    3614:	39 f1       	breq	.+78     	; 0x3664 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    3616:	2c 85       	ldd	r18, Y+12	; 0x0c
    3618:	3d 85       	ldd	r19, Y+13	; 0x0d
    361a:	4e 85       	ldd	r20, Y+14	; 0x0e
    361c:	5f 85       	ldd	r21, Y+15	; 0x0f
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	70 e0       	ldi	r23, 0x00	; 0
    3622:	cb 01       	movw	r24, r22
    3624:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3628:	6c 87       	std	Y+12, r22	; 0x0c
    362a:	7d 87       	std	Y+13, r23	; 0x0d
    362c:	8e 87       	std	Y+14, r24	; 0x0e
    362e:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    3630:	28 89       	ldd	r18, Y+16	; 0x10
    3632:	39 89       	ldd	r19, Y+17	; 0x11
    3634:	4a 89       	ldd	r20, Y+18	; 0x12
    3636:	5b 89       	ldd	r21, Y+19	; 0x13
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	70 e0       	ldi	r23, 0x00	; 0
    363c:	cb 01       	movw	r24, r22
    363e:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3642:	68 8b       	std	Y+16, r22	; 0x10
    3644:	79 8b       	std	Y+17, r23	; 0x11
    3646:	8a 8b       	std	Y+18, r24	; 0x12
    3648:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    364a:	2c 89       	ldd	r18, Y+20	; 0x14
    364c:	3d 89       	ldd	r19, Y+21	; 0x15
    364e:	4e 89       	ldd	r20, Y+22	; 0x16
    3650:	5f 89       	ldd	r21, Y+23	; 0x17
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	cb 01       	movw	r24, r22
    3658:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    365c:	6c 8b       	std	Y+20, r22	; 0x14
    365e:	7d 8b       	std	Y+21, r23	; 0x15
    3660:	8e 8b       	std	Y+22, r24	; 0x16
    3662:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    3664:	19 8f       	std	Y+25, r17	; 0x19
    3666:	08 8f       	std	Y+24, r16	; 0x18
}
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	08 95       	ret

00003672 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    3672:	2f 92       	push	r2
    3674:	3f 92       	push	r3
    3676:	4f 92       	push	r4
    3678:	5f 92       	push	r5
    367a:	6f 92       	push	r6
    367c:	7f 92       	push	r7
    367e:	8f 92       	push	r8
    3680:	9f 92       	push	r9
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	cf 92       	push	r12
    3688:	df 92       	push	r13
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	00 d0       	rcall	.+0      	; 0x3698 <_ZN3PIDC1EPdS0_S0_dddi+0x26>
    3698:	00 d0       	rcall	.+0      	; 0x369a <_ZN3PIDC1EPdS0_S0_dddi+0x28>
    369a:	00 d0       	rcall	.+0      	; 0x369c <_ZN3PIDC1EPdS0_S0_dddi+0x2a>
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	1c 01       	movw	r2, r24
    36a2:	7a 83       	std	Y+2, r23	; 0x02
    36a4:	69 83       	std	Y+1, r22	; 0x01
    36a6:	5c 83       	std	Y+4, r21	; 0x04
    36a8:	4b 83       	std	Y+3, r20	; 0x03
    36aa:	3e 83       	std	Y+6, r19	; 0x06
    36ac:	2d 83       	std	Y+5, r18	; 0x05
    36ae:	27 01       	movw	r4, r14
    36b0:	38 01       	movw	r6, r16
    36b2:	45 01       	movw	r8, r10
    36b4:	56 01       	movw	r10, r12
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    36b6:	00 e0       	ldi	r16, 0x00	; 0
    36b8:	10 e0       	ldi	r17, 0x00	; 0
    36ba:	2f e7       	ldi	r18, 0x7F	; 127
    36bc:	33 e4       	ldi	r19, 0x43	; 67
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	50 e0       	ldi	r21, 0x00	; 0
    36c2:	ba 01       	movw	r22, r20
    36c4:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    36c8:	84 e6       	ldi	r24, 0x64	; 100
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	f1 01       	movw	r30, r2
    36ce:	95 a7       	std	Z+45, r25	; 0x2d
    36d0:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    36d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36d4:	78 a1       	ldd	r23, Y+32	; 0x20
    36d6:	c1 01       	movw	r24, r2
    36d8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    36dc:	cb 8c       	ldd	r12, Y+27	; 0x1b
    36de:	dc 8c       	ldd	r13, Y+28	; 0x1c
    36e0:	ed 8c       	ldd	r14, Y+29	; 0x1d
    36e2:	fe 8c       	ldd	r15, Y+30	; 0x1e
    36e4:	95 01       	movw	r18, r10
    36e6:	84 01       	movw	r16, r8
    36e8:	b3 01       	movw	r22, r6
    36ea:	a2 01       	movw	r20, r4
    36ec:	c1 01       	movw	r24, r2
    36ee:	0e 94 15 19 	call	0x322a	; 0x322a <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    36f2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    36f6:	f1 01       	movw	r30, r2
    36f8:	84 a4       	ldd	r8, Z+44	; 0x2c
    36fa:	95 a4       	ldd	r9, Z+45	; 0x2d
    36fc:	aa 24       	eor	r10, r10
    36fe:	97 fc       	sbrc	r9, 7
    3700:	a0 94       	com	r10
    3702:	ba 2c       	mov	r11, r10
    3704:	68 19       	sub	r22, r8
    3706:	79 09       	sbc	r23, r9
    3708:	8a 09       	sbc	r24, r10
    370a:	9b 09       	sbc	r25, r11
    370c:	60 a3       	std	Z+32, r22	; 0x20
    370e:	71 a3       	std	Z+33, r23	; 0x21
    3710:	82 a3       	std	Z+34, r24	; 0x22
    3712:	93 a3       	std	Z+35, r25	; 0x23
    inAuto = false;
    3714:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	9c 81       	ldd	r25, Y+4	; 0x04
    371a:	95 8f       	std	Z+29, r25	; 0x1d
    371c:	84 8f       	std	Z+28, r24	; 0x1c
    myInput = Input;
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	93 8f       	std	Z+27, r25	; 0x1b
    3724:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	9e 81       	ldd	r25, Y+6	; 0x06
    372a:	97 8f       	std	Z+31, r25	; 0x1f
    372c:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    372e:	26 96       	adiw	r28, 0x06	; 6
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	ff 90       	pop	r15
    3744:	ef 90       	pop	r14
    3746:	df 90       	pop	r13
    3748:	cf 90       	pop	r12
    374a:	bf 90       	pop	r11
    374c:	af 90       	pop	r10
    374e:	9f 90       	pop	r9
    3750:	8f 90       	pop	r8
    3752:	7f 90       	pop	r7
    3754:	6f 90       	pop	r6
    3756:	5f 90       	pop	r5
    3758:	4f 90       	pop	r4
    375a:	3f 90       	pop	r3
    375c:	2f 90       	pop	r2
    375e:	08 95       	ret

00003760 <_ZN4NMEAC1Ei>:

//
// constructor method
//

NMEA::NMEA(int connect)
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	fc 01       	movw	r30, r24
{
	// private properties
	_gprmc_only = connect;
    376a:	71 83       	std	Z+1, r23	; 0x01
    376c:	60 83       	st	Z, r22
	_gprmc_utc = 0.0;
    376e:	12 82       	std	Z+2, r1	; 0x02
    3770:	13 82       	std	Z+3, r1	; 0x03
    3772:	14 82       	std	Z+4, r1	; 0x04
    3774:	15 82       	std	Z+5, r1	; 0x05
	_gprmc_status = 'V';
    3776:	86 e5       	ldi	r24, 0x56	; 86
    3778:	86 83       	std	Z+6, r24	; 0x06
	_gprmc_lat = 0.0;
    377a:	17 82       	std	Z+7, r1	; 0x07
    377c:	10 86       	std	Z+8, r1	; 0x08
    377e:	11 86       	std	Z+9, r1	; 0x09
    3780:	12 86       	std	Z+10, r1	; 0x0a
	_gprmc_long = 0.0;
    3782:	13 86       	std	Z+11, r1	; 0x0b
    3784:	14 86       	std	Z+12, r1	; 0x0c
    3786:	15 86       	std	Z+13, r1	; 0x0d
    3788:	16 86       	std	Z+14, r1	; 0x0e
	_gprmc_speed = 0.0;
    378a:	17 86       	std	Z+15, r1	; 0x0f
    378c:	10 8a       	std	Z+16, r1	; 0x10
    378e:	11 8a       	std	Z+17, r1	; 0x11
    3790:	12 8a       	std	Z+18, r1	; 0x12
	_gprmc_angle = 0.0;
    3792:	13 8a       	std	Z+19, r1	; 0x13
    3794:	14 8a       	std	Z+20, r1	; 0x14
    3796:	15 8a       	std	Z+21, r1	; 0x15
    3798:	16 8a       	std	Z+22, r1	; 0x16
	_terms = 0;
    379a:	df 01       	movw	r26, r30
    379c:	a7 54       	subi	r26, 0x47	; 71
    379e:	bf 4f       	sbci	r27, 0xFF	; 255
    37a0:	1d 92       	st	X+, r1
    37a2:	1c 92       	st	X, r1
	n = 0;
    37a4:	df 01       	movw	r26, r30
    37a6:	a5 5a       	subi	r26, 0xA5	; 165
    37a8:	be 4f       	sbci	r27, 0xFE	; 254
    37aa:	1d 92       	st	X+, r1
    37ac:	1c 92       	st	X, r1
	_state = 0;
    37ae:	df 01       	movw	r26, r30
    37b0:	a1 5a       	subi	r26, 0xA1	; 161
    37b2:	be 4f       	sbci	r27, 0xFE	; 254
    37b4:	1d 92       	st	X+, r1
    37b6:	1c 92       	st	X, r1
	_parity = 0;
    37b8:	df 01       	movw	r26, r30
    37ba:	af 59       	subi	r26, 0x9F	; 159
    37bc:	be 4f       	sbci	r27, 0xFE	; 254
    37be:	1d 92       	st	X+, r1
    37c0:	1c 92       	st	X, r1
	_nt = 0;
    37c2:	df 01       	movw	r26, r30
    37c4:	ad 59       	subi	r26, 0x9D	; 157
    37c6:	be 4f       	sbci	r27, 0xFE	; 254
    37c8:	1d 92       	st	X+, r1
    37ca:	1c 92       	st	X, r1

	f_sentence[0] = 0;
    37cc:	17 8a       	std	Z+23, r1	; 0x17
	f_terms = 0;
    37ce:	df 01       	movw	r26, r30
    37d0:	a9 54       	subi	r26, 0x49	; 73
    37d2:	bf 4f       	sbci	r27, 0xFF	; 255
    37d4:	1d 92       	st	X+, r1
    37d6:	1c 92       	st	X, r1
    37d8:	ef 01       	movw	r28, r30
    37da:	0e e1       	ldi	r16, 0x1E	; 30
    37dc:	10 e0       	ldi	r17, 0x00	; 0
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    37de:	8f e0       	ldi	r24, 0x0F	; 15
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	0e 94 84 13 	call	0x2708	; 0x2708 <malloc>

//
// constructor method
//

NMEA::NMEA(int connect)
    37e6:	fe 01       	movw	r30, r28
    37e8:	e1 5e       	subi	r30, 0xE1	; 225
    37ea:	fe 4f       	sbci	r31, 0xFE	; 254

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    37ec:	80 83       	st	Z, r24
    37ee:	91 83       	std	Z+1, r25	; 0x01
    f_term[t] = (char*) malloc (15 * sizeof(char));
    37f0:	8f e0       	ldi	r24, 0x0F	; 15
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 84 13 	call	0x2708	; 0x2708 <malloc>
    37f8:	fc 01       	movw	r30, r24

//
// constructor method
//

NMEA::NMEA(int connect)
    37fa:	de 01       	movw	r26, r28
    37fc:	a5 58       	subi	r26, 0x85	; 133
    37fe:	bf 4f       	sbci	r27, 0xFF	; 255
	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    3800:	8d 93       	st	X+, r24
    3802:	9c 93       	st	X, r25
    (f_term[t])[0] = 0;
    3804:	10 82       	st	Z, r1
    3806:	01 50       	subi	r16, 0x01	; 1
    3808:	11 09       	sbc	r17, r1
    380a:	22 96       	adiw	r28, 0x02	; 2
	_nt = 0;

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    380c:	01 15       	cp	r16, r1
    380e:	11 05       	cpc	r17, r1
    3810:	31 f7       	brne	.-52     	; 0x37de <_ZN4NMEAC1Ei+0x7e>
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    (f_term[t])[0] = 0;
  }
}
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	1f 91       	pop	r17
    3818:	0f 91       	pop	r16
    381a:	08 95       	ret

0000381c <_ZN4NMEA9gprmc_utcEv>:
    break;
  }
  return 0;
}

float NMEA::gprmc_utc() {
    381c:	fc 01       	movw	r30, r24
	// returns decimal value of UTC term of last-known GPRMC sentence
	return _gprmc_utc;
}
    381e:	52 81       	ldd	r21, Z+2	; 0x02
    3820:	43 81       	ldd	r20, Z+3	; 0x03
    3822:	34 81       	ldd	r19, Z+4	; 0x04
    3824:	25 81       	ldd	r18, Z+5	; 0x05
    3826:	65 2f       	mov	r22, r21
    3828:	74 2f       	mov	r23, r20
    382a:	83 2f       	mov	r24, r19
    382c:	92 2f       	mov	r25, r18
    382e:	08 95       	ret

00003830 <_ZN4NMEA12gprmc_statusEv>:

char NMEA::gprmc_status() {
	// returns status character of last-known GPRMC sentence ('A' or 'V')
	return _gprmc_status;
}
    3830:	fc 01       	movw	r30, r24
    3832:	86 81       	ldd	r24, Z+6	; 0x06
    3834:	08 95       	ret

00003836 <_ZN4NMEA14gprmc_latitudeEv>:

float NMEA::gprmc_latitude() {
    3836:	fc 01       	movw	r30, r24
	// returns signed degree-decimal latitude value of last-known GPRMC position
	return _gprmc_lat;
}
    3838:	57 81       	ldd	r21, Z+7	; 0x07
    383a:	40 85       	ldd	r20, Z+8	; 0x08
    383c:	31 85       	ldd	r19, Z+9	; 0x09
    383e:	22 85       	ldd	r18, Z+10	; 0x0a
    3840:	65 2f       	mov	r22, r21
    3842:	74 2f       	mov	r23, r20
    3844:	83 2f       	mov	r24, r19
    3846:	92 2f       	mov	r25, r18
    3848:	08 95       	ret

0000384a <_ZN4NMEA15gprmc_longitudeEv>:

float NMEA::gprmc_longitude() {
    384a:	fc 01       	movw	r30, r24
	// returns signed degree-decimal longitude value of last-known GPRMC position
	return _gprmc_long;
}
    384c:	53 85       	ldd	r21, Z+11	; 0x0b
    384e:	44 85       	ldd	r20, Z+12	; 0x0c
    3850:	35 85       	ldd	r19, Z+13	; 0x0d
    3852:	26 85       	ldd	r18, Z+14	; 0x0e
    3854:	65 2f       	mov	r22, r21
    3856:	74 2f       	mov	r23, r20
    3858:	83 2f       	mov	r24, r19
    385a:	92 2f       	mov	r25, r18
    385c:	08 95       	ret

0000385e <_ZN4NMEA11gprmc_speedEf>:

float NMEA::gprmc_speed(float unit) {
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
    3866:	6a 01       	movw	r12, r20
    3868:	7b 01       	movw	r14, r22
	// returns speed-over-ground from last-known GPRMC sentence
	return (_gprmc_speed * unit);
    386a:	fc 01       	movw	r30, r24
    386c:	27 85       	ldd	r18, Z+15	; 0x0f
    386e:	30 89       	ldd	r19, Z+16	; 0x10
    3870:	41 89       	ldd	r20, Z+17	; 0x11
    3872:	52 89       	ldd	r21, Z+18	; 0x12
    3874:	c7 01       	movw	r24, r14
    3876:	b6 01       	movw	r22, r12
    3878:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
}
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	df 90       	pop	r13
    3882:	cf 90       	pop	r12
    3884:	08 95       	ret

00003886 <_ZN4NMEA12gprmc_courseEv>:

float NMEA::gprmc_course() {
    3886:	fc 01       	movw	r30, r24
	// returns decimal value of track-angle-made-good term in last-known GPRMC sentence - 0-360 deg
	return _gprmc_angle;
}
    3888:	53 89       	ldd	r21, Z+19	; 0x13
    388a:	44 89       	ldd	r20, Z+20	; 0x14
    388c:	35 89       	ldd	r19, Z+21	; 0x15
    388e:	26 89       	ldd	r18, Z+22	; 0x16
    3890:	65 2f       	mov	r22, r21
    3892:	74 2f       	mov	r23, r20
    3894:	83 2f       	mov	r24, r19
    3896:	92 2f       	mov	r25, r18
    3898:	08 95       	ret

0000389a <_ZN4NMEA8sentenceEv>:
//	return rc;
//}

char* NMEA::sentence() {
	// returns last received full sentence as zero terminated string
  return f_sentence;
    389a:	9c 01       	movw	r18, r24
    389c:	29 5e       	subi	r18, 0xE9	; 233
    389e:	3f 4f       	sbci	r19, 0xFF	; 255
}
    38a0:	c9 01       	movw	r24, r18
    38a2:	08 95       	ret

000038a4 <_ZN4NMEA4termEi>:
  return f_terms;
}

char* NMEA::term(int t) {
	// returns term t of last received full sentence as zero terminated string
  return f_term[t];
    38a4:	66 0f       	add	r22, r22
    38a6:	77 1f       	adc	r23, r23
    38a8:	68 0f       	add	r22, r24
    38aa:	79 1f       	adc	r23, r25
    38ac:	fb 01       	movw	r30, r22
    38ae:	e5 58       	subi	r30, 0x85	; 133
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	08 95       	ret

000038b8 <_ZN4NMEA8_decimalEPc>:
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    38b8:	4f 92       	push	r4
    38ba:	5f 92       	push	r5
    38bc:	6f 92       	push	r6
    38be:	7f 92       	push	r7
    38c0:	8f 92       	push	r8
    38c2:	9f 92       	push	r9
    38c4:	af 92       	push	r10
    38c6:	bf 92       	push	r11
    38c8:	cf 92       	push	r12
    38ca:	df 92       	push	r13
    38cc:	ef 92       	push	r14
    38ce:	ff 92       	push	r15
    38d0:	0f 93       	push	r16
    38d2:	1f 93       	push	r17
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
    38d8:	db 01       	movw	r26, r22
    38da:	cc 91       	ld	r28, X
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	cd 32       	cpi	r28, 0x2D	; 45
    38e2:	21 f0       	breq	.+8      	; 0x38ec <_ZN4NMEA8_decimalEPc+0x34>
    38e4:	cb 32       	cpi	r28, 0x2B	; 43
    38e6:	11 f0       	breq	.+4      	; 0x38ec <_ZN4NMEA8_decimalEPc+0x34>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	90 e0       	ldi	r25, 0x00	; 0
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    38ec:	2b 01       	movw	r4, r22
    38ee:	48 0e       	add	r4, r24
    38f0:	59 1e       	adc	r5, r25
    38f2:	61 2c       	mov	r6, r1
    38f4:	3d ec       	ldi	r19, 0xCD	; 205
    38f6:	a3 2e       	mov	r10, r19
    38f8:	4c ec       	ldi	r20, 0xCC	; 204
    38fa:	94 2e       	mov	r9, r20
    38fc:	5c ec       	ldi	r21, 0xCC	; 204
    38fe:	85 2e       	mov	r8, r21
    3900:	6d e3       	ldi	r22, 0x3D	; 61
    3902:	76 2e       	mov	r7, r22
    3904:	b1 2c       	mov	r11, r1
    3906:	00 e0       	ldi	r16, 0x00	; 0
    3908:	10 e0       	ldi	r17, 0x00	; 0
    390a:	d0 e0       	ldi	r29, 0x00	; 0
    390c:	c1 2c       	mov	r12, r1
    390e:	d1 2c       	mov	r13, r1
    3910:	76 01       	movw	r14, r12
    3912:	4a c0       	rjmp	.+148    	; 0x39a8 <_ZN4NMEA8_decimalEPc+0xf0>
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
    3914:	ee 32       	cpi	r30, 0x2E	; 46
    3916:	09 f4       	brne	.+2      	; 0x391a <_ZN4NMEA8_decimalEPc+0x62>
    3918:	45 c0       	rjmp	.+138    	; 0x39a4 <_ZN4NMEA8_decimalEPc+0xec>
    391a:	ff 27       	eor	r31, r31
    391c:	e7 fd       	sbrc	r30, 7
    391e:	f0 95       	com	r31
      dec = true;
    }
    else{
      if (!dec) {
    3920:	61 10       	cpse	r6, r1
    3922:	15 c0       	rjmp	.+42     	; 0x394e <_ZN4NMEA8_decimalEPc+0x96>
        rl = (10 * rl) + (s[i] - 48);
    3924:	aa e0       	ldi	r26, 0x0A	; 10
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	a7 01       	movw	r20, r14
    392a:	96 01       	movw	r18, r12
    392c:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    3930:	6b 01       	movw	r12, r22
    3932:	7c 01       	movw	r14, r24
    3934:	bf 01       	movw	r22, r30
    3936:	60 53       	subi	r22, 0x30	; 48
    3938:	71 09       	sbc	r23, r1
    393a:	cb 01       	movw	r24, r22
    393c:	aa 27       	eor	r26, r26
    393e:	97 fd       	sbrc	r25, 7
    3940:	a0 95       	com	r26
    3942:	ba 2f       	mov	r27, r26
    3944:	c8 0e       	add	r12, r24
    3946:	d9 1e       	adc	r13, r25
    3948:	ea 1e       	adc	r14, r26
    394a:	fb 1e       	adc	r15, r27
    394c:	2d c0       	rjmp	.+90     	; 0x39a8 <_ZN4NMEA8_decimalEPc+0xf0>
      }
      else {
        rr += rb * (float)(s[i] - 48);
    394e:	bf 01       	movw	r22, r30
    3950:	60 53       	subi	r22, 0x30	; 48
    3952:	71 09       	sbc	r23, r1
    3954:	88 27       	eor	r24, r24
    3956:	77 fd       	sbrc	r23, 7
    3958:	80 95       	com	r24
    395a:	98 2f       	mov	r25, r24
    395c:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    3960:	9b 01       	movw	r18, r22
    3962:	ac 01       	movw	r20, r24
    3964:	6a 2d       	mov	r22, r10
    3966:	79 2d       	mov	r23, r9
    3968:	88 2d       	mov	r24, r8
    396a:	97 2d       	mov	r25, r7
    396c:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    3970:	9b 01       	movw	r18, r22
    3972:	ac 01       	movw	r20, r24
    3974:	6b 2d       	mov	r22, r11
    3976:	70 2f       	mov	r23, r16
    3978:	81 2f       	mov	r24, r17
    397a:	9d 2f       	mov	r25, r29
    397c:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    3980:	b6 2e       	mov	r11, r22
    3982:	07 2f       	mov	r16, r23
    3984:	18 2f       	mov	r17, r24
    3986:	d9 2f       	mov	r29, r25
        rb /= 10.0;
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e2       	ldi	r20, 0x20	; 32
    398e:	51 e4       	ldi	r21, 0x41	; 65
    3990:	6a 2d       	mov	r22, r10
    3992:	79 2d       	mov	r23, r9
    3994:	88 2d       	mov	r24, r8
    3996:	97 2d       	mov	r25, r7
    3998:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    399c:	a6 2e       	mov	r10, r22
    399e:	97 2e       	mov	r9, r23
    39a0:	88 2e       	mov	r8, r24
    39a2:	79 2e       	mov	r7, r25
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
      dec = true;
    39a4:	66 24       	eor	r6, r6
    39a6:	63 94       	inc	r6
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    39a8:	d2 01       	movw	r26, r4
    39aa:	ed 91       	ld	r30, X+
    39ac:	2d 01       	movw	r4, r26
    39ae:	e1 11       	cpse	r30, r1
    39b0:	b1 cf       	rjmp	.-158    	; 0x3914 <_ZN4NMEA8_decimalEPc+0x5c>
        rb /= 10.0;
      }
    }
    i++;
  }
  rr += (float)rl;
    39b2:	c7 01       	movw	r24, r14
    39b4:	b6 01       	movw	r22, r12
    39b6:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    39ba:	9b 01       	movw	r18, r22
    39bc:	ac 01       	movw	r20, r24
    39be:	6b 2d       	mov	r22, r11
    39c0:	70 2f       	mov	r23, r16
    39c2:	81 2f       	mov	r24, r17
    39c4:	9d 2f       	mov	r25, r29
    39c6:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
  if (s[0] == '-') {
    39ca:	cd 32       	cpi	r28, 0x2D	; 45
    39cc:	49 f4       	brne	.+18     	; 0x39e0 <_ZN4NMEA8_decimalEPc+0x128>
    rr = 0.0 - rr;
    39ce:	26 2f       	mov	r18, r22
    39d0:	37 2f       	mov	r19, r23
    39d2:	48 2f       	mov	r20, r24
    39d4:	59 2f       	mov	r21, r25
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	70 e0       	ldi	r23, 0x00	; 0
    39da:	cb 01       	movw	r24, r22
    39dc:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
  }
  return rr;
}
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	1f 91       	pop	r17
    39e6:	0f 91       	pop	r16
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	df 90       	pop	r13
    39ee:	cf 90       	pop	r12
    39f0:	bf 90       	pop	r11
    39f2:	af 90       	pop	r10
    39f4:	9f 90       	pop	r9
    39f6:	8f 90       	pop	r8
    39f8:	7f 90       	pop	r7
    39fa:	6f 90       	pop	r6
    39fc:	5f 90       	pop	r5
    39fe:	4f 90       	pop	r4
    3a00:	08 95       	ret

00003a02 <_ZN4NMEA6decodeEc>:

//
// public methods
//

int NMEA::decode(char c) {
    3a02:	8f 92       	push	r8
    3a04:	9f 92       	push	r9
    3a06:	af 92       	push	r10
    3a08:	bf 92       	push	r11
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	ec 01       	movw	r28, r24
  // avoid runaway sentences (>99 chars or >29 terms) and terms (>14 chars)
  if ((n >= 100) || (_terms >= 30) || (_nt >= 15)) { _state = 0; }
    3a18:	fc 01       	movw	r30, r24
    3a1a:	e5 5a       	subi	r30, 0xA5	; 165
    3a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1e:	80 81       	ld	r24, Z
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	84 36       	cpi	r24, 0x64	; 100
    3a24:	91 05       	cpc	r25, r1
    3a26:	84 f4       	brge	.+32     	; 0x3a48 <_ZN4NMEA6decodeEc+0x46>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e7 54       	subi	r30, 0x47	; 71
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	20 81       	ld	r18, Z
    3a30:	31 81       	ldd	r19, Z+1	; 0x01
    3a32:	2e 31       	cpi	r18, 0x1E	; 30
    3a34:	31 05       	cpc	r19, r1
    3a36:	44 f4       	brge	.+16     	; 0x3a48 <_ZN4NMEA6decodeEc+0x46>
    3a38:	fe 01       	movw	r30, r28
    3a3a:	ed 59       	subi	r30, 0x9D	; 157
    3a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a3e:	20 81       	ld	r18, Z
    3a40:	31 81       	ldd	r19, Z+1	; 0x01
    3a42:	2f 30       	cpi	r18, 0x0F	; 15
    3a44:	31 05       	cpc	r19, r1
    3a46:	2c f0       	brlt	.+10     	; 0x3a52 <_ZN4NMEA6decodeEc+0x50>
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e1 5a       	subi	r30, 0xA1	; 161
    3a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a4e:	11 82       	std	Z+1, r1	; 0x01
    3a50:	10 82       	st	Z, r1
    3a52:	8e 01       	movw	r16, r28
    3a54:	01 5a       	subi	r16, 0xA1	; 161
    3a56:	1e 4f       	sbci	r17, 0xFE	; 254
  // LF and CR always reset parser
  if ((c == 0x0A) || (c == 0x0D)) { _state = 0; }
    3a58:	6a 30       	cpi	r22, 0x0A	; 10
    3a5a:	11 f0       	breq	.+4      	; 0x3a60 <_ZN4NMEA6decodeEc+0x5e>
    3a5c:	6d 30       	cpi	r22, 0x0D	; 13
    3a5e:	19 f4       	brne	.+6      	; 0x3a66 <_ZN4NMEA6decodeEc+0x64>
    3a60:	d8 01       	movw	r26, r16
    3a62:	1d 92       	st	X+, r1
    3a64:	1c 92       	st	X, r1
  // '$' always starts a new sentence
  if (c == '$') {
    3a66:	64 32       	cpi	r22, 0x24	; 36
    3a68:	11 f5       	brne	.+68     	; 0x3aae <_ZN4NMEA6decodeEc+0xac>
    _gprmc_tag = 0;
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e3 5a       	subi	r30, 0xA3	; 163
    3a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a70:	11 82       	std	Z+1, r1	; 0x01
    3a72:	10 82       	st	Z, r1
    _parity = 0;
    3a74:	fe 01       	movw	r30, r28
    3a76:	ef 59       	subi	r30, 0x9F	; 159
    3a78:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7a:	11 82       	std	Z+1, r1	; 0x01
    3a7c:	10 82       	st	Z, r1
    _terms = 0;
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e7 54       	subi	r30, 0x47	; 71
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	11 82       	std	Z+1, r1	; 0x01
    3a86:	10 82       	st	Z, r1
    _nt = 0;
    3a88:	fe 01       	movw	r30, r28
    3a8a:	ed 59       	subi	r30, 0x9D	; 157
    3a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8e:	11 82       	std	Z+1, r1	; 0x01
    3a90:	10 82       	st	Z, r1
    _sentence[0] = c;
    3a92:	fe 01       	movw	r30, r28
    3a94:	e5 54       	subi	r30, 0x45	; 69
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	60 83       	st	Z, r22
    n = 1;
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e5 5a       	subi	r30, 0xA5	; 165
    3a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
    _state = 1;
    3aa8:	c1 5a       	subi	r28, 0xA1	; 161
    3aaa:	de 4f       	sbci	r29, 0xFE	; 254
    3aac:	e0 c0       	rjmp	.+448    	; 0x3c6e <_ZN4NMEA6decodeEc+0x26c>
    return 0;
  }
  // parse other chars according to parser state
  switch(_state) {
    3aae:	f8 01       	movw	r30, r16
    3ab0:	20 81       	ld	r18, Z
    3ab2:	31 81       	ldd	r19, Z+1	; 0x01
    3ab4:	21 30       	cpi	r18, 0x01	; 1
    3ab6:	31 05       	cpc	r19, r1
    3ab8:	71 f0       	breq	.+28     	; 0x3ad6 <_ZN4NMEA6decodeEc+0xd4>
    3aba:	24 f4       	brge	.+8      	; 0x3ac4 <_ZN4NMEA6decodeEc+0xc2>
    3abc:	23 2b       	or	r18, r19
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <_ZN4NMEA6decodeEc+0xc0>
    3ac0:	8d c2       	rjmp	.+1306   	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
    3ac2:	88 c2       	rjmp	.+1296   	; 0x3fd4 <_ZN4NMEA6decodeEc+0x5d2>
    3ac4:	22 30       	cpi	r18, 0x02	; 2
    3ac6:	31 05       	cpc	r19, r1
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <_ZN4NMEA6decodeEc+0xca>
    3aca:	8b c0       	rjmp	.+278    	; 0x3be2 <_ZN4NMEA6decodeEc+0x1e0>
    3acc:	23 30       	cpi	r18, 0x03	; 3
    3ace:	31 05       	cpc	r19, r1
    3ad0:	09 f0       	breq	.+2      	; 0x3ad4 <_ZN4NMEA6decodeEc+0xd2>
    3ad2:	80 c2       	rjmp	.+1280   	; 0x3fd4 <_ZN4NMEA6decodeEc+0x5d2>
    3ad4:	cf c0       	rjmp	.+414    	; 0x3c74 <_ZN4NMEA6decodeEc+0x272>
  case 0:
    // waiting for '$', do nothing
    break;
  case 1:
  	// decode chars after '$' and before '*' found
    if (n < 7) {
    3ad6:	87 30       	cpi	r24, 0x07	; 7
    3ad8:	91 05       	cpc	r25, r1
    3ada:	7c f4       	brge	.+30     	; 0x3afa <_ZN4NMEA6decodeEc+0xf8>
    	// see if first seven chars match "$GPRMC,"
    	if (c == _GPRMC_TERM[n]) { _gprmc_tag++; }
    3adc:	fc 01       	movw	r30, r24
    3ade:	e4 5f       	subi	r30, 0xF4	; 244
    3ae0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ae2:	20 81       	ld	r18, Z
    3ae4:	62 13       	cpse	r22, r18
    3ae6:	09 c0       	rjmp	.+18     	; 0x3afa <_ZN4NMEA6decodeEc+0xf8>
    3ae8:	fe 01       	movw	r30, r28
    3aea:	e3 5a       	subi	r30, 0xA3	; 163
    3aec:	fe 4f       	sbci	r31, 0xFE	; 254
    3aee:	20 81       	ld	r18, Z
    3af0:	31 81       	ldd	r19, Z+1	; 0x01
    3af2:	2f 5f       	subi	r18, 0xFF	; 255
    3af4:	3f 4f       	sbci	r19, 0xFF	; 255
    3af6:	31 83       	std	Z+1, r19	; 0x01
    3af8:	20 83       	st	Z, r18
    }
    // add received char to sentence
    _sentence[n++] = c;
    3afa:	fe 01       	movw	r30, r28
    3afc:	e8 0f       	add	r30, r24
    3afe:	f9 1f       	adc	r31, r25
    3b00:	e5 54       	subi	r30, 0x45	; 69
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	60 83       	st	Z, r22
    3b06:	fe 01       	movw	r30, r28
    3b08:	e5 5a       	subi	r30, 0xA5	; 165
    3b0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0c:	01 96       	adiw	r24, 0x01	; 1
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	80 83       	st	Z, r24
    3b12:	8e 01       	movw	r16, r28
    3b14:	07 54       	subi	r16, 0x47	; 71
    3b16:	1f 4f       	sbci	r17, 0xFF	; 255
    3b18:	fe 01       	movw	r30, r28
    3b1a:	ed 59       	subi	r30, 0x9D	; 157
    3b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    switch (c) {
    3b1e:	6a 32       	cpi	r22, 0x2A	; 42
    3b20:	19 f1       	breq	.+70     	; 0x3b68 <_ZN4NMEA6decodeEc+0x166>
    3b22:	6c 32       	cpi	r22, 0x2C	; 44
    3b24:	e1 f5       	brne	.+120    	; 0x3b9e <_ZN4NMEA6decodeEc+0x19c>
    case ',':
    	// ',' delimits the individual terms
      (_term[_terms++])[_nt] = 0;
    3b26:	d8 01       	movw	r26, r16
    3b28:	2d 91       	ld	r18, X+
    3b2a:	3c 91       	ld	r19, X
    3b2c:	c9 01       	movw	r24, r18
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	8c 0f       	add	r24, r28
    3b34:	9d 1f       	adc	r25, r29
    3b36:	81 5e       	subi	r24, 0xE1	; 225
    3b38:	9e 4f       	sbci	r25, 0xFE	; 254
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	8d 91       	ld	r24, X+
    3b3e:	9c 91       	ld	r25, X
    3b40:	40 81       	ld	r20, Z
    3b42:	51 81       	ldd	r21, Z+1	; 0x01
    3b44:	84 0f       	add	r24, r20
    3b46:	95 1f       	adc	r25, r21
    3b48:	dc 01       	movw	r26, r24
    3b4a:	1c 92       	st	X, r1
    3b4c:	2f 5f       	subi	r18, 0xFF	; 255
    3b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b50:	d8 01       	movw	r26, r16
    3b52:	2d 93       	st	X+, r18
    3b54:	3c 93       	st	X, r19
      _nt = 0;
    3b56:	11 82       	std	Z+1, r1	; 0x01
    3b58:	10 82       	st	Z, r1
      _parity = _parity ^ c;
    3b5a:	cf 59       	subi	r28, 0x9F	; 159
    3b5c:	de 4f       	sbci	r29, 0xFE	; 254
    3b5e:	88 81       	ld	r24, Y
    3b60:	99 81       	ldd	r25, Y+1	; 0x01
    3b62:	bc e2       	ldi	r27, 0x2C	; 44
    3b64:	8b 27       	eor	r24, r27
    3b66:	83 c0       	rjmp	.+262    	; 0x3c6e <_ZN4NMEA6decodeEc+0x26c>
      break;
    case '*':
    	// '*' delimits term and precedes checksum term
      (_term[_terms++])[_nt] = 0;
    3b68:	d8 01       	movw	r26, r16
    3b6a:	2d 91       	ld	r18, X+
    3b6c:	3c 91       	ld	r19, X
    3b6e:	c9 01       	movw	r24, r18
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	8c 0f       	add	r24, r28
    3b76:	9d 1f       	adc	r25, r29
    3b78:	81 5e       	subi	r24, 0xE1	; 225
    3b7a:	9e 4f       	sbci	r25, 0xFE	; 254
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	8d 91       	ld	r24, X+
    3b80:	9c 91       	ld	r25, X
    3b82:	40 81       	ld	r20, Z
    3b84:	51 81       	ldd	r21, Z+1	; 0x01
    3b86:	84 0f       	add	r24, r20
    3b88:	95 1f       	adc	r25, r21
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	1c 92       	st	X, r1
    3b8e:	2f 5f       	subi	r18, 0xFF	; 255
    3b90:	3f 4f       	sbci	r19, 0xFF	; 255
    3b92:	d8 01       	movw	r26, r16
    3b94:	2d 93       	st	X+, r18
    3b96:	3c 93       	st	X, r19
      _nt = 0;
    3b98:	11 82       	std	Z+1, r1	; 0x01
    3b9a:	10 82       	st	Z, r1
    3b9c:	63 c0       	rjmp	.+198    	; 0x3c64 <_ZN4NMEA6decodeEc+0x262>
      _state++;
      break;
    default:
    	// all other chars between '$' and '*' are part of a term
      (_term[_terms])[_nt++] = c;
    3b9e:	20 81       	ld	r18, Z
    3ba0:	31 81       	ldd	r19, Z+1	; 0x01
    3ba2:	d8 01       	movw	r26, r16
    3ba4:	8d 91       	ld	r24, X+
    3ba6:	9c 91       	ld	r25, X
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	8c 0f       	add	r24, r28
    3bae:	9d 1f       	adc	r25, r29
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	a1 5e       	subi	r26, 0xE1	; 225
    3bb4:	be 4f       	sbci	r27, 0xFE	; 254
    3bb6:	0d 90       	ld	r0, X+
    3bb8:	bc 91       	ld	r27, X
    3bba:	a0 2d       	mov	r26, r0
    3bbc:	a2 0f       	add	r26, r18
    3bbe:	b3 1f       	adc	r27, r19
    3bc0:	6c 93       	st	X, r22
    3bc2:	2f 5f       	subi	r18, 0xFF	; 255
    3bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc6:	31 83       	std	Z+1, r19	; 0x01
    3bc8:	20 83       	st	Z, r18
      _parity = _parity ^ c;
    3bca:	cf 59       	subi	r28, 0x9F	; 159
    3bcc:	de 4f       	sbci	r29, 0xFE	; 254
    3bce:	77 27       	eor	r23, r23
    3bd0:	67 fd       	sbrc	r22, 7
    3bd2:	70 95       	com	r23
    3bd4:	88 81       	ld	r24, Y
    3bd6:	99 81       	ldd	r25, Y+1	; 0x01
    3bd8:	68 27       	eor	r22, r24
    3bda:	79 27       	eor	r23, r25
    3bdc:	79 83       	std	Y+1, r23	; 0x01
    3bde:	68 83       	st	Y, r22
    3be0:	fd c1       	rjmp	.+1018   	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
      break;
    }
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    3be2:	fe 01       	movw	r30, r28
    3be4:	e8 0f       	add	r30, r24
    3be6:	f9 1f       	adc	r31, r25
    3be8:	e5 54       	subi	r30, 0x45	; 69
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	60 83       	st	Z, r22
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e5 5a       	subi	r30, 0xA5	; 165
    3bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf4:	01 96       	adiw	r24, 0x01	; 1
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    3bfa:	de 01       	movw	r26, r28
    3bfc:	ad 59       	subi	r26, 0x9D	; 157
    3bfe:	be 4f       	sbci	r27, 0xFE	; 254
    3c00:	2d 91       	ld	r18, X+
    3c02:	3c 91       	ld	r19, X
    3c04:	11 97       	sbiw	r26, 0x01	; 1
    3c06:	fe 01       	movw	r30, r28
    3c08:	e7 54       	subi	r30, 0x47	; 71
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	8c 0f       	add	r24, r28
    3c16:	9d 1f       	adc	r25, r29
    3c18:	fc 01       	movw	r30, r24
    3c1a:	e1 5e       	subi	r30, 0xE1	; 225
    3c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c1e:	01 90       	ld	r0, Z+
    3c20:	f0 81       	ld	r31, Z
    3c22:	e0 2d       	mov	r30, r0
    3c24:	e2 0f       	add	r30, r18
    3c26:	f3 1f       	adc	r31, r19
    3c28:	60 83       	st	Z, r22
    3c2a:	2f 5f       	subi	r18, 0xFF	; 255
    3c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2e:	2d 93       	st	X+, r18
    3c30:	3c 93       	st	X, r19
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3c32:	fe 01       	movw	r30, r28
    3c34:	ef 59       	subi	r30, 0x9F	; 159
    3c36:	fe 4f       	sbci	r31, 0xFE	; 254
    3c38:	40 81       	ld	r20, Z
    3c3a:	51 81       	ldd	r21, Z+1	; 0x01
    3c3c:	86 2f       	mov	r24, r22
    3c3e:	99 27       	eor	r25, r25
    3c40:	87 fd       	sbrc	r24, 7
    3c42:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3c44:	61 34       	cpi	r22, 0x41	; 65
    3c46:	14 f0       	brlt	.+4      	; 0x3c4c <_ZN4NMEA6decodeEc+0x24a>
    return int(a)-55;
    3c48:	c7 97       	sbiw	r24, 0x37	; 55
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <_ZN4NMEA6decodeEc+0x24c>
  }
  else {
    return int(a)-48;
    3c4c:	c0 97       	sbiw	r24, 0x30	; 48
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    (_term[_terms])[_nt++] = c;
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3c4e:	9c 01       	movw	r18, r24
    3c50:	a4 e0       	ldi	r26, 0x04	; 4
    3c52:	22 0f       	add	r18, r18
    3c54:	33 1f       	adc	r19, r19
    3c56:	aa 95       	dec	r26
    3c58:	e1 f7       	brne	.-8      	; 0x3c52 <_ZN4NMEA6decodeEc+0x250>
    3c5a:	ca 01       	movw	r24, r20
    3c5c:	82 1b       	sub	r24, r18
    3c5e:	93 0b       	sbc	r25, r19
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	80 83       	st	Z, r24
    _state++;
    3c64:	c1 5a       	subi	r28, 0xA1	; 161
    3c66:	de 4f       	sbci	r29, 0xFE	; 254
    3c68:	88 81       	ld	r24, Y
    3c6a:	99 81       	ldd	r25, Y+1	; 0x01
    3c6c:	01 96       	adiw	r24, 0x01	; 1
    3c6e:	99 83       	std	Y+1, r25	; 0x01
    3c70:	88 83       	st	Y, r24
    3c72:	b4 c1       	rjmp	.+872    	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
    break;
  case 3:
  	// second char after '*' completes the checksum (LSB)
    _sentence[n++] = c;
    3c74:	9e 01       	movw	r18, r28
    3c76:	28 0f       	add	r18, r24
    3c78:	39 1f       	adc	r19, r25
    3c7a:	d9 01       	movw	r26, r18
    3c7c:	a5 54       	subi	r26, 0x45	; 69
    3c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c80:	6c 93       	st	X, r22
    _sentence[n++] = 0;
    3c82:	d9 01       	movw	r26, r18
    3c84:	a4 54       	subi	r26, 0x44	; 68
    3c86:	bf 4f       	sbci	r27, 0xFF	; 255
    3c88:	1c 92       	st	X, r1
    3c8a:	de 01       	movw	r26, r28
    3c8c:	a5 5a       	subi	r26, 0xA5	; 165
    3c8e:	be 4f       	sbci	r27, 0xFE	; 254
    3c90:	02 96       	adiw	r24, 0x02	; 2
    3c92:	8d 93       	st	X+, r24
    3c94:	9c 93       	st	X, r25
    (_term[_terms])[_nt++] = c;
    3c96:	9e 01       	movw	r18, r28
    3c98:	2d 59       	subi	r18, 0x9D	; 157
    3c9a:	3e 4f       	sbci	r19, 0xFE	; 254
    3c9c:	f9 01       	movw	r30, r18
    3c9e:	40 81       	ld	r20, Z
    3ca0:	51 81       	ldd	r21, Z+1	; 0x01
    3ca2:	de 01       	movw	r26, r28
    3ca4:	a7 54       	subi	r26, 0x47	; 71
    3ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca8:	8d 91       	ld	r24, X+
    3caa:	9c 91       	ld	r25, X
    3cac:	11 97       	sbiw	r26, 0x01	; 1
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	8c 0f       	add	r24, r28
    3cb4:	9d 1f       	adc	r25, r29
    3cb6:	81 5e       	subi	r24, 0xE1	; 225
    3cb8:	9e 4f       	sbci	r25, 0xFE	; 254
    3cba:	fc 01       	movw	r30, r24
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	84 0f       	add	r24, r20
    3cc2:	95 1f       	adc	r25, r21
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	60 83       	st	Z, r22
    3cc8:	4f 5f       	subi	r20, 0xFF	; 255
    3cca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ccc:	f9 01       	movw	r30, r18
    3cce:	51 83       	std	Z+1, r21	; 0x01
    3cd0:	40 83       	st	Z, r20
    (_term[_terms++])[_nt] = 0;
    3cd2:	2d 91       	ld	r18, X+
    3cd4:	3c 91       	ld	r19, X
    3cd6:	11 97       	sbiw	r26, 0x01	; 1
    3cd8:	c9 01       	movw	r24, r18
    3cda:	88 0f       	add	r24, r24
    3cdc:	99 1f       	adc	r25, r25
    3cde:	8c 0f       	add	r24, r28
    3ce0:	9d 1f       	adc	r25, r29
    3ce2:	81 5e       	subi	r24, 0xE1	; 225
    3ce4:	9e 4f       	sbci	r25, 0xFE	; 254
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	80 81       	ld	r24, Z
    3cea:	91 81       	ldd	r25, Z+1	; 0x01
    3cec:	84 0f       	add	r24, r20
    3cee:	95 1f       	adc	r25, r21
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	10 82       	st	Z, r1
    3cf4:	2f 5f       	subi	r18, 0xFF	; 255
    3cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf8:	2d 93       	st	X+, r18
    3cfa:	3c 93       	st	X, r19
    _state = 0;
    3cfc:	d8 01       	movw	r26, r16
    3cfe:	1d 92       	st	X+, r1
    3d00:	1c 92       	st	X, r1
    _parity = _parity - _dehex(c);
    3d02:	fe 01       	movw	r30, r28
    3d04:	ef 59       	subi	r30, 0x9F	; 159
    3d06:	fe 4f       	sbci	r31, 0xFE	; 254
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	26 2f       	mov	r18, r22
    3d0e:	33 27       	eor	r19, r19
    3d10:	27 fd       	sbrc	r18, 7
    3d12:	30 95       	com	r19
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3d14:	61 34       	cpi	r22, 0x41	; 65
    3d16:	1c f0       	brlt	.+6      	; 0x3d1e <_ZN4NMEA6decodeEc+0x31c>
    return int(a)-55;
    3d18:	27 53       	subi	r18, 0x37	; 55
    3d1a:	31 09       	sbc	r19, r1
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <_ZN4NMEA6decodeEc+0x320>
  }
  else {
    return int(a)-48;
    3d1e:	20 53       	subi	r18, 0x30	; 48
    3d20:	31 09       	sbc	r19, r1
    _sentence[n++] = c;
    _sentence[n++] = 0;
    (_term[_terms])[_nt++] = c;
    (_term[_terms++])[_nt] = 0;
    _state = 0;
    _parity = _parity - _dehex(c);
    3d22:	82 1b       	sub	r24, r18
    3d24:	93 0b       	sbc	r25, r19
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    3d2a:	89 2b       	or	r24, r25
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <_ZN4NMEA6decodeEc+0x32e>
    3d2e:	56 c1       	rjmp	.+684    	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    3d30:	88 81       	ld	r24, Y
    3d32:	99 81       	ldd	r25, Y+1	; 0x01
    3d34:	89 2b       	or	r24, r25
    3d36:	39 f4       	brne	.+14     	; 0x3d46 <_ZN4NMEA6decodeEc+0x344>
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e5 5a       	subi	r30, 0xA5	; 165
    3d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3e:	20 81       	ld	r18, Z
    3d40:	31 81       	ldd	r19, Z+1	; 0x01
    3d42:	c9 01       	movw	r24, r18
    3d44:	10 c0       	rjmp	.+32     	; 0x3d66 <_ZN4NMEA6decodeEc+0x364>
    3d46:	fe 01       	movw	r30, r28
    3d48:	e3 5a       	subi	r30, 0xA3	; 163
    3d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	06 97       	sbiw	r24, 0x06	; 6
    3d52:	91 f3       	breq	.-28     	; 0x3d38 <_ZN4NMEA6decodeEc+0x336>
    3d54:	43 c1       	rjmp	.+646    	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>

//
// public methods
//

int NMEA::decode(char c) {
    3d56:	fe 01       	movw	r30, r28
    3d58:	e8 0f       	add	r30, r24
    3d5a:	f9 1f       	adc	r31, r25
    3d5c:	df 01       	movw	r26, r30
    3d5e:	a5 54       	subi	r26, 0x45	; 69
    3d60:	bf 4f       	sbci	r27, 0xFF	; 255
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    3d62:	4c 91       	ld	r20, X
    3d64:	47 8b       	std	Z+23, r20	; 0x17
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	97 ff       	sbrs	r25, 7
    3d6a:	f5 cf       	rjmp	.-22     	; 0x3d56 <_ZN4NMEA6decodeEc+0x354>

//
// public methods
//

int NMEA::decode(char c) {
    3d6c:	a9 01       	movw	r20, r18
    3d6e:	41 50       	subi	r20, 0x01	; 1
    3d70:	51 09       	sbc	r21, r1
    3d72:	c9 01       	movw	r24, r18
    3d74:	37 ff       	sbrs	r19, 7
    3d76:	02 c0       	rjmp	.+4      	; 0x3d7c <_ZN4NMEA6decodeEc+0x37a>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e5 5a       	subi	r30, 0xA5	; 165
    3d80:	fe 4f       	sbci	r31, 0xFE	; 254
    3d82:	9a 01       	movw	r18, r20
    3d84:	28 1b       	sub	r18, r24
    3d86:	39 0b       	sbc	r19, r25
    3d88:	31 83       	std	Z+1, r19	; 0x01
    3d8a:	20 83       	st	Z, r18
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3d8c:	7e 01       	movw	r14, r28
    3d8e:	37 eb       	ldi	r19, 0xB7	; 183
    3d90:	e3 0e       	add	r14, r19
    3d92:	f1 1c       	adc	r15, r1
    3d94:	d7 01       	movw	r26, r14
    3d96:	1d 92       	st	X+, r1
    3d98:	1c 92       	st	X, r1
    3d9a:	b7 01       	movw	r22, r14
    3d9c:	8e 01       	movw	r16, r28
    3d9e:	07 54       	subi	r16, 0x47	; 71
    3da0:	1f 4f       	sbci	r17, 0xFF	; 255
	      	_nt = 0;
    3da2:	de 01       	movw	r26, r28
    3da4:	ad 59       	subi	r26, 0x9D	; 157
    3da6:	be 4f       	sbci	r27, 0xFE	; 254
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3da8:	31 c0       	rjmp	.+98     	; 0x3e0c <_ZN4NMEA6decodeEc+0x40a>
	      	_nt = 0;
    3daa:	11 96       	adiw	r26, 0x01	; 1
    3dac:	1c 92       	st	X, r1
    3dae:	1e 92       	st	-X, r1
	      	while ((_term[f_terms])[_nt]) {
    3db0:	08 c0       	rjmp	.+16     	; 0x3dc2 <_ZN4NMEA6decodeEc+0x3c0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3db2:	40 83       	st	Z, r20
	        	_nt++;
    3db4:	8d 91       	ld	r24, X+
    3db6:	9c 91       	ld	r25, X
    3db8:	11 97       	sbiw	r26, 0x01	; 1
    3dba:	01 96       	adiw	r24, 0x01	; 1
    3dbc:	11 96       	adiw	r26, 0x01	; 1
    3dbe:	9c 93       	st	X, r25
    3dc0:	8e 93       	st	-X, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3dc2:	fb 01       	movw	r30, r22
    3dc4:	80 81       	ld	r24, Z
    3dc6:	91 81       	ldd	r25, Z+1	; 0x01
    3dc8:	2d 91       	ld	r18, X+
    3dca:	3c 91       	ld	r19, X
    3dcc:	11 97       	sbiw	r26, 0x01	; 1
    3dce:	88 0f       	add	r24, r24
    3dd0:	99 1f       	adc	r25, r25
    3dd2:	8c 0f       	add	r24, r28
    3dd4:	9d 1f       	adc	r25, r29
    3dd6:	ac 01       	movw	r20, r24
    3dd8:	41 5e       	subi	r20, 0xE1	; 225
    3dda:	5e 4f       	sbci	r21, 0xFE	; 254
    3ddc:	fa 01       	movw	r30, r20
    3dde:	40 81       	ld	r20, Z
    3de0:	51 81       	ldd	r21, Z+1	; 0x01
    3de2:	42 0f       	add	r20, r18
    3de4:	53 1f       	adc	r21, r19
    3de6:	fa 01       	movw	r30, r20
    3de8:	40 81       	ld	r20, Z
    3dea:	85 58       	subi	r24, 0x85	; 133
    3dec:	9f 4f       	sbci	r25, 0xFF	; 255
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3dee:	fc 01       	movw	r30, r24
    3df0:	80 81       	ld	r24, Z
    3df2:	91 81       	ldd	r25, Z+1	; 0x01
    3df4:	82 0f       	add	r24, r18
    3df6:	93 1f       	adc	r25, r19
    3df8:	fc 01       	movw	r30, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3dfa:	41 11       	cpse	r20, r1
    3dfc:	da cf       	rjmp	.-76     	; 0x3db2 <_ZN4NMEA6decodeEc+0x3b0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
    3dfe:	10 82       	st	Z, r1
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3e00:	f7 01       	movw	r30, r14
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	01 96       	adiw	r24, 0x01	; 1
    3e08:	91 83       	std	Z+1, r25	; 0x01
    3e0a:	80 83       	st	Z, r24
    3e0c:	fb 01       	movw	r30, r22
    3e0e:	20 81       	ld	r18, Z
    3e10:	31 81       	ldd	r19, Z+1	; 0x01
    3e12:	f8 01       	movw	r30, r16
    3e14:	80 81       	ld	r24, Z
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	28 17       	cp	r18, r24
    3e1a:	39 07       	cpc	r19, r25
    3e1c:	34 f2       	brlt	.-116    	; 0x3daa <_ZN4NMEA6decodeEc+0x3a8>
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
	      }
	      // when sentence is of datatype GPRMC
	      if (_gprmc_tag == 6) {
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e3 5a       	subi	r30, 0xA3	; 163
    3e22:	fe 4f       	sbci	r31, 0xFE	; 254
    3e24:	80 81       	ld	r24, Z
    3e26:	91 81       	ldd	r25, Z+1	; 0x01
    3e28:	06 97       	sbiw	r24, 0x06	; 6
    3e2a:	09 f0       	breq	.+2      	; 0x3e2e <_ZN4NMEA6decodeEc+0x42c>
    3e2c:	da c0       	rjmp	.+436    	; 0x3fe2 <_ZN4NMEA6decodeEc+0x5e0>
	      	// store values of relevant GPRMC terms
	      	_gprmc_utc = _decimal(_term[1]);
    3e2e:	fe 01       	movw	r30, r28
    3e30:	ef 5d       	subi	r30, 0xDF	; 223
    3e32:	fe 4f       	sbci	r31, 0xFE	; 254
    3e34:	60 81       	ld	r22, Z
    3e36:	71 81       	ldd	r23, Z+1	; 0x01
    3e38:	ce 01       	movw	r24, r28
    3e3a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3e3e:	6a 83       	std	Y+2, r22	; 0x02
    3e40:	7b 83       	std	Y+3, r23	; 0x03
    3e42:	8c 83       	std	Y+4, r24	; 0x04
    3e44:	9d 83       	std	Y+5, r25	; 0x05
	      	_gprmc_status = (_term[2])[0];
    3e46:	fe 01       	movw	r30, r28
    3e48:	ed 5d       	subi	r30, 0xDD	; 221
    3e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4c:	01 90       	ld	r0, Z+
    3e4e:	f0 81       	ld	r31, Z
    3e50:	e0 2d       	mov	r30, r0
    3e52:	80 81       	ld	r24, Z
    3e54:	8e 83       	std	Y+6, r24	; 0x06
	        // calculate signed degree-decimal value of latitude term
	        _gprmc_lat = _decimal(_term[3]) / 100.0;
    3e56:	fe 01       	movw	r30, r28
    3e58:	eb 5d       	subi	r30, 0xDB	; 219
    3e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	ce 01       	movw	r24, r28
    3e62:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	48 ec       	ldi	r20, 0xC8	; 200
    3e6c:	52 e4       	ldi	r21, 0x42	; 66
    3e6e:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    3e72:	7b 01       	movw	r14, r22
    3e74:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_lat);
    3e76:	7f 2d       	mov	r23, r15
    3e78:	80 2f       	mov	r24, r16
    3e7a:	91 2f       	mov	r25, r17
    3e7c:	0e 94 92 41 	call	0x8324	; 0x8324 <floor>
    3e80:	4b 01       	movw	r8, r22
    3e82:	5c 01       	movw	r10, r24
    3e84:	fe 01       	movw	r30, r28
    3e86:	eb 59       	subi	r30, 0x9B	; 155
    3e88:	fe 4f       	sbci	r31, 0xFE	; 254
    3e8a:	60 83       	st	Z, r22
    3e8c:	71 83       	std	Z+1, r23	; 0x01
    3e8e:	82 83       	std	Z+2, r24	; 0x02
    3e90:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_lat = (100.0 * (_gprmc_lat - _degs)) / 60.0;
    3e92:	9b 01       	movw	r18, r22
    3e94:	ac 01       	movw	r20, r24
    3e96:	6e 2d       	mov	r22, r14
    3e98:	7f 2d       	mov	r23, r15
    3e9a:	80 2f       	mov	r24, r16
    3e9c:	91 2f       	mov	r25, r17
    3e9e:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	48 ec       	ldi	r20, 0xC8	; 200
    3ea8:	52 e4       	ldi	r21, 0x42	; 66
    3eaa:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	40 e7       	ldi	r20, 0x70	; 112
    3eb4:	52 e4       	ldi	r21, 0x42	; 66
    3eb6:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
	        _gprmc_lat += _degs;
    3eba:	a5 01       	movw	r20, r10
    3ebc:	94 01       	movw	r18, r8
    3ebe:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    3ec2:	9b 01       	movw	r18, r22
    3ec4:	46 2f       	mov	r20, r22
    3ec6:	53 2f       	mov	r21, r19
    3ec8:	68 2f       	mov	r22, r24
    3eca:	79 2f       	mov	r23, r25
    3ecc:	4f 83       	std	Y+7, r20	; 0x07
    3ece:	58 87       	std	Y+8, r21	; 0x08
    3ed0:	69 87       	std	Y+9, r22	; 0x09
    3ed2:	7a 87       	std	Y+10, r23	; 0x0a
	        // southern hemisphere is negative-valued
	        if ((_term[4])[0] == 'S') {
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e9 5d       	subi	r30, 0xD9	; 217
    3ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eda:	01 90       	ld	r0, Z+
    3edc:	f0 81       	ld	r31, Z
    3ede:	e0 2d       	mov	r30, r0
    3ee0:	40 81       	ld	r20, Z
    3ee2:	43 35       	cpi	r20, 0x53	; 83
    3ee4:	59 f4       	brne	.+22     	; 0x3efc <_ZN4NMEA6decodeEc+0x4fa>
	          _gprmc_lat = 0.0 - _gprmc_lat;
    3ee6:	48 2f       	mov	r20, r24
    3ee8:	59 2f       	mov	r21, r25
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	70 e0       	ldi	r23, 0x00	; 0
    3eee:	cb 01       	movw	r24, r22
    3ef0:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3ef4:	6f 83       	std	Y+7, r22	; 0x07
    3ef6:	78 87       	std	Y+8, r23	; 0x08
    3ef8:	89 87       	std	Y+9, r24	; 0x09
    3efa:	9a 87       	std	Y+10, r25	; 0x0a
	        }
	        // calculate signed degree-decimal value of longitude term
	        _gprmc_long = _decimal(_term[5]) / 100.0;
    3efc:	fe 01       	movw	r30, r28
    3efe:	e7 5d       	subi	r30, 0xD7	; 215
    3f00:	fe 4f       	sbci	r31, 0xFE	; 254
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	ce 01       	movw	r24, r28
    3f08:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	48 ec       	ldi	r20, 0xC8	; 200
    3f12:	52 e4       	ldi	r21, 0x42	; 66
    3f14:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    3f18:	7b 01       	movw	r14, r22
    3f1a:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_long);
    3f1c:	7f 2d       	mov	r23, r15
    3f1e:	80 2f       	mov	r24, r16
    3f20:	91 2f       	mov	r25, r17
    3f22:	0e 94 92 41 	call	0x8324	; 0x8324 <floor>
    3f26:	4b 01       	movw	r8, r22
    3f28:	5c 01       	movw	r10, r24
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	eb 59       	subi	r30, 0x9B	; 155
    3f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f30:	60 83       	st	Z, r22
    3f32:	71 83       	std	Z+1, r23	; 0x01
    3f34:	82 83       	std	Z+2, r24	; 0x02
    3f36:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_long = (100.0 * (_gprmc_long - _degs)) / 60.0;
    3f38:	9b 01       	movw	r18, r22
    3f3a:	ac 01       	movw	r20, r24
    3f3c:	6e 2d       	mov	r22, r14
    3f3e:	7f 2d       	mov	r23, r15
    3f40:	80 2f       	mov	r24, r16
    3f42:	91 2f       	mov	r25, r17
    3f44:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	48 ec       	ldi	r20, 0xC8	; 200
    3f4e:	52 e4       	ldi	r21, 0x42	; 66
    3f50:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e7       	ldi	r20, 0x70	; 112
    3f5a:	52 e4       	ldi	r21, 0x42	; 66
    3f5c:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
	        _gprmc_long += _degs;
    3f60:	a5 01       	movw	r20, r10
    3f62:	94 01       	movw	r18, r8
    3f64:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    3f68:	9b 01       	movw	r18, r22
    3f6a:	46 2f       	mov	r20, r22
    3f6c:	53 2f       	mov	r21, r19
    3f6e:	68 2f       	mov	r22, r24
    3f70:	79 2f       	mov	r23, r25
    3f72:	4b 87       	std	Y+11, r20	; 0x0b
    3f74:	5c 87       	std	Y+12, r21	; 0x0c
    3f76:	6d 87       	std	Y+13, r22	; 0x0d
    3f78:	7e 87       	std	Y+14, r23	; 0x0e
	        // western hemisphere is negative-valued
	        if ((_term[6])[0] == 'W') {
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e5 5d       	subi	r30, 0xD5	; 213
    3f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f80:	01 90       	ld	r0, Z+
    3f82:	f0 81       	ld	r31, Z
    3f84:	e0 2d       	mov	r30, r0
    3f86:	40 81       	ld	r20, Z
    3f88:	47 35       	cpi	r20, 0x57	; 87
    3f8a:	59 f4       	brne	.+22     	; 0x3fa2 <_ZN4NMEA6decodeEc+0x5a0>
	          _gprmc_long = 0.0 - _gprmc_long;
    3f8c:	48 2f       	mov	r20, r24
    3f8e:	59 2f       	mov	r21, r25
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	70 e0       	ldi	r23, 0x00	; 0
    3f94:	cb 01       	movw	r24, r22
    3f96:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    3f9a:	6b 87       	std	Y+11, r22	; 0x0b
    3f9c:	7c 87       	std	Y+12, r23	; 0x0c
    3f9e:	8d 87       	std	Y+13, r24	; 0x0d
    3fa0:	9e 87       	std	Y+14, r25	; 0x0e
	        }
	        _gprmc_speed = _decimal(_term[7]);
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e3 5d       	subi	r30, 0xD3	; 211
    3fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa8:	60 81       	ld	r22, Z
    3faa:	71 81       	ldd	r23, Z+1	; 0x01
    3fac:	ce 01       	movw	r24, r28
    3fae:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3fb2:	6f 87       	std	Y+15, r22	; 0x0f
    3fb4:	78 8b       	std	Y+16, r23	; 0x10
    3fb6:	89 8b       	std	Y+17, r24	; 0x11
    3fb8:	9a 8b       	std	Y+18, r25	; 0x12
	        _gprmc_angle = _decimal(_term[8]);
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e1 5d       	subi	r30, 0xD1	; 209
    3fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc0:	60 81       	ld	r22, Z
    3fc2:	71 81       	ldd	r23, Z+1	; 0x01
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3fca:	6b 8b       	std	Y+19, r22	; 0x13
    3fcc:	7c 8b       	std	Y+20, r23	; 0x14
    3fce:	8d 8b       	std	Y+21, r24	; 0x15
    3fd0:	9e 8b       	std	Y+22, r25	; 0x16
    3fd2:	07 c0       	rjmp	.+14     	; 0x3fe2 <_ZN4NMEA6decodeEc+0x5e0>
      	return 1;
      }
    }
    break;
  default:
    _state = 0;
    3fd4:	c1 5a       	subi	r28, 0xA1	; 161
    3fd6:	de 4f       	sbci	r29, 0xFE	; 254
    3fd8:	19 82       	std	Y+1, r1	; 0x01
    3fda:	18 82       	st	Y, r1
    break;
  }
  return 0;
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	02 c0       	rjmp	.+4      	; 0x3fe6 <_ZN4NMEA6decodeEc+0x5e4>
	        }
	        _gprmc_speed = _decimal(_term[7]);
	        _gprmc_angle = _decimal(_term[8]);
	      }
      	// sentence accepted!
      	return 1;
    3fe2:	21 e0       	ldi	r18, 0x01	; 1
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
  default:
    _state = 0;
    break;
  }
  return 0;
}
    3fe6:	c9 01       	movw	r24, r18
    3fe8:	df 91       	pop	r29
    3fea:	cf 91       	pop	r28
    3fec:	1f 91       	pop	r17
    3fee:	0f 91       	pop	r16
    3ff0:	ff 90       	pop	r15
    3ff2:	ef 90       	pop	r14
    3ff4:	bf 90       	pop	r11
    3ff6:	af 90       	pop	r10
    3ff8:	9f 90       	pop	r9
    3ffa:	8f 90       	pop	r8
    3ffc:	08 95       	ret

00003ffe <_ZN11FlexiTimer23setEmdPFvvE>:
/**
 * @param resolution
 *   0.001 implies a 1 ms (1/1000s = 0.001s = 1ms) resolution. Therefore,
 *   0.0005 implies a 0.5 ms (1/2000s) resolution. And so on.
 */
void FlexiTimer2::set(unsigned long units, double resolution, void (*f)()) {
    3ffe:	cf 92       	push	r12
    4000:	df 92       	push	r13
    4002:	ef 92       	push	r14
    4004:	ff 92       	push	r15
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	6b 01       	movw	r12, r22
    400c:	7c 01       	movw	r14, r24
    400e:	ca 01       	movw	r24, r20
    4010:	b9 01       	movw	r22, r18
	float prescaler = 0.0;
	
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
    4012:	20 91 70 00 	lds	r18, 0x0070
    4016:	2e 7f       	andi	r18, 0xFE	; 254
    4018:	20 93 70 00 	sts	0x0070, r18
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    401c:	20 91 b0 00 	lds	r18, 0x00B0
    4020:	2c 7f       	andi	r18, 0xFC	; 252
    4022:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B &= ~(1<<WGM22);
    4026:	20 91 b1 00 	lds	r18, 0x00B1
    402a:	27 7f       	andi	r18, 0xF7	; 247
    402c:	20 93 b1 00 	sts	0x00B1, r18
	ASSR &= ~(1<<AS2);
    4030:	20 91 b6 00 	lds	r18, 0x00B6
    4034:	2f 7d       	andi	r18, 0xDF	; 223
    4036:	20 93 b6 00 	sts	0x00B6, r18
	TIMSK2 &= ~(1<<OCIE2A);
    403a:	20 91 70 00 	lds	r18, 0x0070
    403e:	2d 7f       	andi	r18, 0xFD	; 253
    4040:	20 93 70 00 	sts	0x0070, r18
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    4044:	20 91 b1 00 	lds	r18, 0x00B1
    4048:	24 60       	ori	r18, 0x04	; 4
    404a:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    404e:	20 91 b1 00 	lds	r18, 0x00B1
    4052:	2c 7f       	andi	r18, 0xFC	; 252
    4054:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * resolution / prescaler);
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	34 e2       	ldi	r19, 0x24	; 36
    405c:	44 e7       	ldi	r20, 0x74	; 116
    405e:	5b e4       	ldi	r21, 0x4B	; 75
    4060:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e8       	ldi	r20, 0x80	; 128
    406a:	5c e3       	ldi	r21, 0x3C	; 60
    406c:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    4070:	0e 94 24 41 	call	0x8248	; 0x8248 <__fixsfsi>
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	91 e0       	ldi	r25, 0x01	; 1
    4078:	86 1b       	sub	r24, r22
    407a:	97 0b       	sbc	r25, r23
    407c:	90 93 3b 09 	sts	0x093B, r25
    4080:	80 93 3a 09 	sts	0x093A, r24
	
	if (units == 0)
    4084:	c1 14       	cp	r12, r1
    4086:	d1 04       	cpc	r13, r1
    4088:	e1 04       	cpc	r14, r1
    408a:	f1 04       	cpc	r15, r1
    408c:	69 f4       	brne	.+26     	; 0x40a8 <_ZN11FlexiTimer23setEmdPFvvE+0xaa>
		time_units = 1;
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	a0 e0       	ldi	r26, 0x00	; 0
    4094:	b0 e0       	ldi	r27, 0x00	; 0
    4096:	80 93 43 09 	sts	0x0943, r24
    409a:	90 93 44 09 	sts	0x0944, r25
    409e:	a0 93 45 09 	sts	0x0945, r26
    40a2:	b0 93 46 09 	sts	0x0946, r27
    40a6:	08 c0       	rjmp	.+16     	; 0x40b8 <_ZN11FlexiTimer23setEmdPFvvE+0xba>
	else
		time_units = units;
    40a8:	c0 92 43 09 	sts	0x0943, r12
    40ac:	d0 92 44 09 	sts	0x0944, r13
    40b0:	e0 92 45 09 	sts	0x0945, r14
    40b4:	f0 92 46 09 	sts	0x0946, r15
		
	func = f;
    40b8:	10 93 42 09 	sts	0x0942, r17
    40bc:	00 93 41 09 	sts	0x0941, r16
}
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	ff 90       	pop	r15
    40c6:	ef 90       	pop	r14
    40c8:	df 90       	pop	r13
    40ca:	cf 90       	pop	r12
    40cc:	08 95       	ret

000040ce <_ZN11FlexiTimer23setEmPFvvE>:
void (*FlexiTimer2::func)();
volatile unsigned long FlexiTimer2::count;
volatile char FlexiTimer2::overflowing;
volatile unsigned int FlexiTimer2::tcnt2;

void FlexiTimer2::set(unsigned long ms, void (*f)()) {
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    FlexiTimer2::set(ms, 0.001, f);
    40d2:	8a 01       	movw	r16, r20
    40d4:	2f e6       	ldi	r18, 0x6F	; 111
    40d6:	32 e1       	ldi	r19, 0x12	; 18
    40d8:	43 e8       	ldi	r20, 0x83	; 131
    40da:	5a e3       	ldi	r21, 0x3A	; 58
    40dc:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_ZN11FlexiTimer23setEmdPFvvE>
}
    40e0:	1f 91       	pop	r17
    40e2:	0f 91       	pop	r16
    40e4:	08 95       	ret

000040e6 <_ZN11FlexiTimer25startEv>:
		
	func = f;
}

void FlexiTimer2::start() {
	count = 0;
    40e6:	10 92 3d 09 	sts	0x093D, r1
    40ea:	10 92 3e 09 	sts	0x093E, r1
    40ee:	10 92 3f 09 	sts	0x093F, r1
    40f2:	10 92 40 09 	sts	0x0940, r1
	overflowing = 0;
    40f6:	10 92 3c 09 	sts	0x093C, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = tcnt2;
    40fa:	80 91 3a 09 	lds	r24, 0x093A
    40fe:	90 91 3b 09 	lds	r25, 0x093B
    4102:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    4106:	e0 e7       	ldi	r30, 0x70	; 112
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	81 60       	ori	r24, 0x01	; 1
    410e:	80 83       	st	Z, r24
    4110:	08 95       	ret

00004112 <_ZN11FlexiTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void FlexiTimer2::_overflow() {
	count += 1;
    4112:	80 91 3d 09 	lds	r24, 0x093D
    4116:	90 91 3e 09 	lds	r25, 0x093E
    411a:	a0 91 3f 09 	lds	r26, 0x093F
    411e:	b0 91 40 09 	lds	r27, 0x0940
    4122:	01 96       	adiw	r24, 0x01	; 1
    4124:	a1 1d       	adc	r26, r1
    4126:	b1 1d       	adc	r27, r1
    4128:	80 93 3d 09 	sts	0x093D, r24
    412c:	90 93 3e 09 	sts	0x093E, r25
    4130:	a0 93 3f 09 	sts	0x093F, r26
    4134:	b0 93 40 09 	sts	0x0940, r27
	
	if (count >= time_units && !overflowing) {
    4138:	40 91 3d 09 	lds	r20, 0x093D
    413c:	50 91 3e 09 	lds	r21, 0x093E
    4140:	60 91 3f 09 	lds	r22, 0x093F
    4144:	70 91 40 09 	lds	r23, 0x0940
    4148:	80 91 43 09 	lds	r24, 0x0943
    414c:	90 91 44 09 	lds	r25, 0x0944
    4150:	a0 91 45 09 	lds	r26, 0x0945
    4154:	b0 91 46 09 	lds	r27, 0x0946
    4158:	48 17       	cp	r20, r24
    415a:	59 07       	cpc	r21, r25
    415c:	6a 07       	cpc	r22, r26
    415e:	7b 07       	cpc	r23, r27
    4160:	b0 f0       	brcs	.+44     	; 0x418e <_ZN11FlexiTimer29_overflowEv+0x7c>
    4162:	80 91 3c 09 	lds	r24, 0x093C
    4166:	81 11       	cpse	r24, r1
    4168:	12 c0       	rjmp	.+36     	; 0x418e <_ZN11FlexiTimer29_overflowEv+0x7c>
		overflowing = 1;
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	80 93 3c 09 	sts	0x093C, r24
		count = 0;
    4170:	10 92 3d 09 	sts	0x093D, r1
    4174:	10 92 3e 09 	sts	0x093E, r1
    4178:	10 92 3f 09 	sts	0x093F, r1
    417c:	10 92 40 09 	sts	0x0940, r1
		(*func)();
    4180:	e0 91 41 09 	lds	r30, 0x0941
    4184:	f0 91 42 09 	lds	r31, 0x0942
    4188:	09 95       	icall
		overflowing = 0;
    418a:	10 92 3c 09 	sts	0x093C, r1
    418e:	08 95       	ret

00004190 <__vector_15>:
	}
}

ISR(TIMER2_OVF_vect) {
    4190:	1f 92       	push	r1
    4192:	0f 92       	push	r0
    4194:	0f b6       	in	r0, 0x3f	; 63
    4196:	0f 92       	push	r0
    4198:	11 24       	eor	r1, r1
    419a:	0b b6       	in	r0, 0x3b	; 59
    419c:	0f 92       	push	r0
    419e:	1b be       	out	0x3b, r1	; 59
    41a0:	2f 93       	push	r18
    41a2:	3f 93       	push	r19
    41a4:	4f 93       	push	r20
    41a6:	5f 93       	push	r21
    41a8:	6f 93       	push	r22
    41aa:	7f 93       	push	r23
    41ac:	8f 93       	push	r24
    41ae:	9f 93       	push	r25
    41b0:	af 93       	push	r26
    41b2:	bf 93       	push	r27
    41b4:	ef 93       	push	r30
    41b6:	ff 93       	push	r31
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = FlexiTimer2::tcnt2;
    41b8:	80 91 3a 09 	lds	r24, 0x093A
    41bc:	90 91 3b 09 	lds	r25, 0x093B
    41c0:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega128__)
	TCNT2 = FlexiTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = FlexiTimer2::tcnt2;
#endif
	FlexiTimer2::_overflow();
    41c4:	0e 94 89 20 	call	0x4112	; 0x4112 <_ZN11FlexiTimer29_overflowEv>
}
    41c8:	ff 91       	pop	r31
    41ca:	ef 91       	pop	r30
    41cc:	bf 91       	pop	r27
    41ce:	af 91       	pop	r26
    41d0:	9f 91       	pop	r25
    41d2:	8f 91       	pop	r24
    41d4:	7f 91       	pop	r23
    41d6:	6f 91       	pop	r22
    41d8:	5f 91       	pop	r21
    41da:	4f 91       	pop	r20
    41dc:	3f 91       	pop	r19
    41de:	2f 91       	pop	r18
    41e0:	0f 90       	pop	r0
    41e2:	0b be       	out	0x3b, r0	; 59
    41e4:	0f 90       	pop	r0
    41e6:	0f be       	out	0x3f, r0	; 63
    41e8:	0f 90       	pop	r0
    41ea:	1f 90       	pop	r1
    41ec:	18 95       	reti

000041ee <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
    41ee:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
    41f0:	0c 94 db 45 	jmp	0x8bb6	; 0x8bb6 <__eerd_byte_m1280>

000041f4 <_ZN11EEPROMClass5writeEih>:
}

void EEPROMClass::write(int address, uint8_t value)
{
    41f4:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
    41f6:	64 2f       	mov	r22, r20
    41f8:	0c 94 e3 45 	jmp	0x8bc6	; 0x8bc6 <__eewr_byte_m1280>

000041fc <_ZN13AltSoftSerial4readEv>:

int AltSoftSerial::read(void)
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
    41fc:	90 91 ec 09 	lds	r25, 0x09EC
	tail = rx_buffer_tail;
    4200:	80 91 eb 09 	lds	r24, 0x09EB
	if (head == tail) return -1;
    4204:	98 17       	cp	r25, r24
    4206:	69 f0       	breq	.+26     	; 0x4222 <_ZN13AltSoftSerial4readEv+0x26>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    4208:	8f 5f       	subi	r24, 0xFF	; 255
    420a:	80 35       	cpi	r24, 0x50	; 80
    420c:	08 f0       	brcs	.+2      	; 0x4210 <_ZN13AltSoftSerial4readEv+0x14>
    420e:	80 e0       	ldi	r24, 0x00	; 0
	out = rx_buffer[tail];
    4210:	e8 2f       	mov	r30, r24
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	e5 56       	subi	r30, 0x65	; 101
    4216:	f6 4f       	sbci	r31, 0xF6	; 246
    4218:	20 81       	ld	r18, Z
	rx_buffer_tail = tail;
    421a:	80 93 eb 09 	sts	0x09EB, r24
	return out;
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <_ZN13AltSoftSerial4readEv+0x2a>
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4222:	2f ef       	ldi	r18, 0xFF	; 255
    4224:	3f ef       	ldi	r19, 0xFF	; 255
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	out = rx_buffer[tail];
	rx_buffer_tail = tail;
	return out;
}
    4226:	c9 01       	movw	r24, r18
    4228:	08 95       	ret

0000422a <_ZN13AltSoftSerial4peekEv>:

int AltSoftSerial::peek(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    422a:	80 91 ec 09 	lds	r24, 0x09EC
	tail = rx_buffer_tail;
    422e:	e0 91 eb 09 	lds	r30, 0x09EB
	if (head == tail) return -1;
    4232:	8e 17       	cp	r24, r30
    4234:	31 f0       	breq	.+12     	; 0x4242 <_ZN13AltSoftSerial4peekEv+0x18>
	return rx_buffer[tail];
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	e5 56       	subi	r30, 0x65	; 101
    423a:	f6 4f       	sbci	r31, 0xF6	; 246
    423c:	20 81       	ld	r18, Z
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	02 c0       	rjmp	.+4      	; 0x4246 <_ZN13AltSoftSerial4peekEv+0x1c>
{
	uint8_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4242:	2f ef       	ldi	r18, 0xFF	; 255
    4244:	3f ef       	ldi	r19, 0xFF	; 255
	return rx_buffer[tail];
}
    4246:	c9 01       	movw	r24, r18
    4248:	08 95       	ret

0000424a <_ZN13AltSoftSerial9availableEv>:

int AltSoftSerial::available(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    424a:	50 91 ec 09 	lds	r21, 0x09EC
	tail = rx_buffer_tail;
    424e:	40 91 eb 09 	lds	r20, 0x09EB
    4252:	25 2f       	mov	r18, r21
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	84 2f       	mov	r24, r20
    4258:	90 e0       	ldi	r25, 0x00	; 0
	if (head >= tail) return head - tail;
    425a:	54 17       	cp	r21, r20
    425c:	08 f0       	brcs	.+2      	; 0x4260 <_ZN13AltSoftSerial9availableEv+0x16>
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <_ZN13AltSoftSerial9availableEv+0x1a>
	return RX_BUFFER_SIZE + head - tail;
    4260:	20 5b       	subi	r18, 0xB0	; 176
    4262:	3f 4f       	sbci	r19, 0xFF	; 255
    4264:	28 1b       	sub	r18, r24
    4266:	39 0b       	sbc	r19, r25
}
    4268:	c9 01       	movw	r24, r18
    426a:	08 95       	ret

0000426c <_ZN13AltSoftSerial4initEm>:
#ifndef INPUT_PULLUP
#define INPUT_PULLUP INPUT
#endif

void AltSoftSerial::init(uint32_t cycles_per_bit)
{
    426c:	9b 01       	movw	r18, r22
    426e:	ac 01       	movw	r20, r24
	if (cycles_per_bit < 7085) {
    4270:	2d 3a       	cpi	r18, 0xAD	; 173
    4272:	8b e1       	ldi	r24, 0x1B	; 27
    4274:	38 07       	cpc	r19, r24
    4276:	41 05       	cpc	r20, r1
    4278:	51 05       	cpc	r21, r1
    427a:	30 f4       	brcc	.+12     	; 0x4288 <_ZN13AltSoftSerial4initEm+0x1c>
		CONFIG_TIMER_NOPRESCALE();
    427c:	10 92 73 00 	sts	0x0073, r1
    4280:	10 92 20 01 	sts	0x0120, r1
    4284:	81 e8       	ldi	r24, 0x81	; 129
    4286:	12 c0       	rjmp	.+36     	; 0x42ac <_ZN13AltSoftSerial4initEm+0x40>
	} else {
		cycles_per_bit /= 8;
    4288:	63 e0       	ldi	r22, 0x03	; 3
    428a:	56 95       	lsr	r21
    428c:	47 95       	ror	r20
    428e:	37 95       	ror	r19
    4290:	27 95       	ror	r18
    4292:	6a 95       	dec	r22
    4294:	d1 f7       	brne	.-12     	; 0x428a <_ZN13AltSoftSerial4initEm+0x1e>
		if (cycles_per_bit < 7085) {
    4296:	2d 3a       	cpi	r18, 0xAD	; 173
    4298:	8b e1       	ldi	r24, 0x1B	; 27
    429a:	38 07       	cpc	r19, r24
    429c:	41 05       	cpc	r20, r1
    429e:	51 05       	cpc	r21, r1
    42a0:	b0 f5       	brcc	.+108    	; 0x430e <_ZN13AltSoftSerial4initEm+0xa2>
			CONFIG_TIMER_PRESCALE_8();
    42a2:	10 92 73 00 	sts	0x0073, r1
    42a6:	10 92 20 01 	sts	0x0120, r1
    42aa:	82 e8       	ldi	r24, 0x82	; 130
    42ac:	80 93 21 01 	sts	0x0121, r24
		} else {
			return; // minimum 283 baud at 16 MHz clock
		}
	}
	ticks_per_bit = cycles_per_bit;
    42b0:	30 93 f0 09 	sts	0x09F0, r19
    42b4:	20 93 ef 09 	sts	0x09EF, r18
	rx_stop_ticks = cycles_per_bit * 37 / 4;
    42b8:	a5 e2       	ldi	r26, 0x25	; 37
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    42c0:	22 e0       	ldi	r18, 0x02	; 2
    42c2:	96 95       	lsr	r25
    42c4:	87 95       	ror	r24
    42c6:	77 95       	ror	r23
    42c8:	67 95       	ror	r22
    42ca:	2a 95       	dec	r18
    42cc:	d1 f7       	brne	.-12     	; 0x42c2 <_ZN13AltSoftSerial4initEm+0x56>
    42ce:	70 93 f2 09 	sts	0x09F2, r23
    42d2:	60 93 f1 09 	sts	0x09F1, r22
	pinMode(INPUT_CAPTURE_PIN, INPUT_PULLUP);
    42d6:	62 e0       	ldi	r22, 0x02	; 2
    42d8:	80 e3       	ldi	r24, 0x30	; 48
    42da:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	digitalWrite(OUTPUT_COMPARE_A_PIN, HIGH);
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	8e e2       	ldi	r24, 0x2E	; 46
    42e2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
	pinMode(OUTPUT_COMPARE_A_PIN, OUTPUT);
    42e6:	61 e0       	ldi	r22, 0x01	; 1
    42e8:	8e e2       	ldi	r24, 0x2E	; 46
    42ea:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	rx_count = 0;
    42ee:	10 92 ed 09 	sts	0x09ED, r1
	rx_buffer_head = 0;
    42f2:	10 92 ec 09 	sts	0x09EC, r1
	rx_buffer_tail = 0;
    42f6:	10 92 eb 09 	sts	0x09EB, r1
	tx_state = 0;
    42fa:	10 92 9a 09 	sts	0x099A, r1
	tx_buffer_head = 0;
    42fe:	10 92 99 09 	sts	0x0999, r1
	tx_buffer_tail = 0;
    4302:	10 92 98 09 	sts	0x0998, r1
	ENABLE_INT_INPUT_CAPTURE();
    4306:	80 e2       	ldi	r24, 0x20	; 32
    4308:	8a bb       	out	0x1a, r24	; 26
    430a:	80 93 73 00 	sts	0x0073, r24
    430e:	08 95       	ret

00004310 <_ZN13AltSoftSerial9writeByteEh>:

void AltSoftSerial::writeByte(uint8_t b)
{
	uint8_t intr_state, head;

	head = tx_buffer_head + 1;
    4310:	90 91 99 09 	lds	r25, 0x0999
    4314:	9f 5f       	subi	r25, 0xFF	; 255
	if (head >= TX_BUFFER_SIZE) head = 0;
    4316:	94 34       	cpi	r25, 0x44	; 68
    4318:	08 f0       	brcs	.+2      	; 0x431c <_ZN13AltSoftSerial9writeByteEh+0xc>
    431a:	90 e0       	ldi	r25, 0x00	; 0
	while (tx_buffer_tail == head) ; // wait until space in buffer
    431c:	20 91 98 09 	lds	r18, 0x0998
    4320:	29 17       	cp	r18, r25
    4322:	e1 f3       	breq	.-8      	; 0x431c <_ZN13AltSoftSerial9writeByteEh+0xc>
	intr_state = SREG;
    4324:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4326:	f8 94       	cli
	if (tx_state) {
    4328:	30 91 9a 09 	lds	r19, 0x099A
    432c:	33 23       	and	r19, r19
    432e:	41 f0       	breq	.+16     	; 0x4340 <_ZN13AltSoftSerial9writeByteEh+0x30>
		tx_buffer[head] = b;
    4330:	e9 2f       	mov	r30, r25
    4332:	f0 e0       	ldi	r31, 0x00	; 0
    4334:	e8 5b       	subi	r30, 0xB8	; 184
    4336:	f6 4f       	sbci	r31, 0xF6	; 246
    4338:	80 83       	st	Z, r24
		tx_buffer_head = head;
    433a:	90 93 99 09 	sts	0x0999, r25
    433e:	1d c0       	rjmp	.+58     	; 0x437a <_ZN13AltSoftSerial9writeByteEh+0x6a>
	} else {
		tx_state = 1;
    4340:	91 e0       	ldi	r25, 0x01	; 1
    4342:	90 93 9a 09 	sts	0x099A, r25
		tx_byte = b;
    4346:	80 93 f3 09 	sts	0x09F3, r24
		tx_bit = 0;
    434a:	10 92 f4 09 	sts	0x09F4, r1
		ENABLE_INT_COMPARE_A();
    434e:	82 e0       	ldi	r24, 0x02	; 2
    4350:	8a bb       	out	0x1a, r24	; 26
    4352:	80 91 73 00 	lds	r24, 0x0073
    4356:	82 60       	ori	r24, 0x02	; 2
    4358:	80 93 73 00 	sts	0x0073, r24
		CONFIG_MATCH_CLEAR();
    435c:	80 91 20 01 	lds	r24, 0x0120
    4360:	8f 73       	andi	r24, 0x3F	; 63
    4362:	80 68       	ori	r24, 0x80	; 128
    4364:	80 93 20 01 	sts	0x0120, r24
		SET_COMPARE_A(GET_TIMER_COUNT() + 16);
    4368:	80 91 24 01 	lds	r24, 0x0124
    436c:	90 91 25 01 	lds	r25, 0x0125
    4370:	40 96       	adiw	r24, 0x10	; 16
    4372:	90 93 29 01 	sts	0x0129, r25
    4376:	80 93 28 01 	sts	0x0128, r24
	}
	SREG = intr_state;
    437a:	2f bf       	out	0x3f, r18	; 63
    437c:	08 95       	ret

0000437e <_ZN13AltSoftSerial5writeEh>:
    437e:	86 2f       	mov	r24, r22
    4380:	0e 94 88 21 	call	0x4310	; 0x4310 <_ZN13AltSoftSerial9writeByteEh>
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	08 95       	ret

0000438a <__vector_47>:
}


ISR(COMPARE_A_INTERRUPT)
{
    438a:	1f 92       	push	r1
    438c:	0f 92       	push	r0
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	0f 92       	push	r0
    4392:	11 24       	eor	r1, r1
    4394:	0b b6       	in	r0, 0x3b	; 59
    4396:	0f 92       	push	r0
    4398:	1b be       	out	0x3b, r1	; 59
    439a:	2f 93       	push	r18
    439c:	3f 93       	push	r19
    439e:	4f 93       	push	r20
    43a0:	5f 93       	push	r21
    43a2:	6f 93       	push	r22
    43a4:	7f 93       	push	r23
    43a6:	8f 93       	push	r24
    43a8:	9f 93       	push	r25
    43aa:	ef 93       	push	r30
    43ac:	ff 93       	push	r31
	uint8_t state, byte, bit, head, tail;
	uint16_t target;

	state = tx_state;
    43ae:	40 91 9a 09 	lds	r20, 0x099A
	byte = tx_byte;
    43b2:	50 91 f3 09 	lds	r21, 0x09F3
	target = GET_COMPARE_A();
    43b6:	80 91 28 01 	lds	r24, 0x0128
    43ba:	90 91 29 01 	lds	r25, 0x0129
	while (state < 9) {
		target += ticks_per_bit;
    43be:	20 91 ef 09 	lds	r18, 0x09EF
    43c2:	30 91 f0 09 	lds	r19, 0x09F0
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
    43c6:	70 91 f4 09 	lds	r23, 0x09F4
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    43ca:	1d c0       	rjmp	.+58     	; 0x4406 <__vector_47+0x7c>
		target += ticks_per_bit;
    43cc:	82 0f       	add	r24, r18
    43ce:	93 1f       	adc	r25, r19
		bit = byte & 1;
    43d0:	65 2f       	mov	r22, r21
    43d2:	61 70       	andi	r22, 0x01	; 1
		byte >>= 1;
    43d4:	56 95       	lsr	r21
		state++;
    43d6:	4f 5f       	subi	r20, 0xFF	; 255
		if (bit != tx_bit) {
    43d8:	67 17       	cp	r22, r23
    43da:	a9 f0       	breq	.+42     	; 0x4406 <__vector_47+0x7c>
			if (bit) {
				CONFIG_MATCH_SET();
    43dc:	20 91 20 01 	lds	r18, 0x0120
		target += ticks_per_bit;
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
			if (bit) {
    43e0:	66 23       	and	r22, r22
    43e2:	11 f0       	breq	.+4      	; 0x43e8 <__vector_47+0x5e>
				CONFIG_MATCH_SET();
    43e4:	20 6c       	ori	r18, 0xC0	; 192
    43e6:	02 c0       	rjmp	.+4      	; 0x43ec <__vector_47+0x62>
			} else {
				CONFIG_MATCH_CLEAR();
    43e8:	2f 73       	andi	r18, 0x3F	; 63
    43ea:	20 68       	ori	r18, 0x80	; 128
    43ec:	20 93 20 01 	sts	0x0120, r18
			}
			SET_COMPARE_A(target);
    43f0:	90 93 29 01 	sts	0x0129, r25
    43f4:	80 93 28 01 	sts	0x0128, r24
			tx_bit = bit;
    43f8:	60 93 f4 09 	sts	0x09F4, r22
			tx_byte = byte;
    43fc:	50 93 f3 09 	sts	0x09F3, r21
			tx_state = state;
    4400:	40 93 9a 09 	sts	0x099A, r20
			// TODO: how to detect timing_error?
			return;
    4404:	3f c0       	rjmp	.+126    	; 0x4484 <__vector_47+0xfa>
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    4406:	49 30       	cpi	r20, 0x09	; 9
    4408:	08 f3       	brcs	.-62     	; 0x43cc <__vector_47+0x42>
			tx_state = state;
			// TODO: how to detect timing_error?
			return;
		}
	}
	if (state == 9) {
    440a:	49 30       	cpi	r20, 0x09	; 9
    440c:	39 f4       	brne	.+14     	; 0x441c <__vector_47+0x92>
		tx_state = 10;
    440e:	2a e0       	ldi	r18, 0x0A	; 10
    4410:	20 93 9a 09 	sts	0x099A, r18
		CONFIG_MATCH_SET();
    4414:	20 91 20 01 	lds	r18, 0x0120
    4418:	20 6c       	ori	r18, 0xC0	; 192
    441a:	28 c0       	rjmp	.+80     	; 0x446c <__vector_47+0xe2>
		SET_COMPARE_A(target + ticks_per_bit);
		return;
	}
	head = tx_buffer_head;
    441c:	20 91 99 09 	lds	r18, 0x0999
	tail = tx_buffer_tail;
    4420:	e0 91 98 09 	lds	r30, 0x0998
	if (head == tail) {
    4424:	2e 13       	cpse	r18, r30
    4426:	0d c0       	rjmp	.+26     	; 0x4442 <__vector_47+0xb8>
		tx_state = 0;
    4428:	10 92 9a 09 	sts	0x099A, r1
		CONFIG_MATCH_NORMAL();
    442c:	80 91 20 01 	lds	r24, 0x0120
    4430:	8f 73       	andi	r24, 0x3F	; 63
    4432:	80 93 20 01 	sts	0x0120, r24
		DISABLE_INT_COMPARE_A();
    4436:	80 91 73 00 	lds	r24, 0x0073
    443a:	8d 7f       	andi	r24, 0xFD	; 253
    443c:	80 93 73 00 	sts	0x0073, r24
    4440:	21 c0       	rjmp	.+66     	; 0x4484 <__vector_47+0xfa>
	} else {
		tx_state = 1;
    4442:	21 e0       	ldi	r18, 0x01	; 1
    4444:	20 93 9a 09 	sts	0x099A, r18
		if (++tail >= TX_BUFFER_SIZE) tail = 0;
    4448:	ef 5f       	subi	r30, 0xFF	; 255
    444a:	e4 34       	cpi	r30, 0x44	; 68
    444c:	08 f0       	brcs	.+2      	; 0x4450 <__vector_47+0xc6>
    444e:	e0 e0       	ldi	r30, 0x00	; 0
		tx_buffer_tail = tail;
    4450:	e0 93 98 09 	sts	0x0998, r30
		tx_byte = tx_buffer[tail];
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	e8 5b       	subi	r30, 0xB8	; 184
    4458:	f6 4f       	sbci	r31, 0xF6	; 246
    445a:	20 81       	ld	r18, Z
    445c:	20 93 f3 09 	sts	0x09F3, r18
		tx_bit = 0;
    4460:	10 92 f4 09 	sts	0x09F4, r1
		CONFIG_MATCH_CLEAR();
    4464:	20 91 20 01 	lds	r18, 0x0120
    4468:	2f 73       	andi	r18, 0x3F	; 63
    446a:	20 68       	ori	r18, 0x80	; 128
    446c:	20 93 20 01 	sts	0x0120, r18
		SET_COMPARE_A(target + ticks_per_bit);
    4470:	20 91 ef 09 	lds	r18, 0x09EF
    4474:	30 91 f0 09 	lds	r19, 0x09F0
    4478:	28 0f       	add	r18, r24
    447a:	39 1f       	adc	r19, r25
    447c:	30 93 29 01 	sts	0x0129, r19
    4480:	20 93 28 01 	sts	0x0128, r18
		// TODO: how to detect timing_error?
	}
}
    4484:	ff 91       	pop	r31
    4486:	ef 91       	pop	r30
    4488:	9f 91       	pop	r25
    448a:	8f 91       	pop	r24
    448c:	7f 91       	pop	r23
    448e:	6f 91       	pop	r22
    4490:	5f 91       	pop	r21
    4492:	4f 91       	pop	r20
    4494:	3f 91       	pop	r19
    4496:	2f 91       	pop	r18
    4498:	0f 90       	pop	r0
    449a:	0b be       	out	0x3b, r0	; 59
    449c:	0f 90       	pop	r0
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	0f 90       	pop	r0
    44a2:	1f 90       	pop	r1
    44a4:	18 95       	reti

000044a6 <_ZN13AltSoftSerial11flushOutputEv>:

void AltSoftSerial::flushOutput(void)
{
	while (tx_state) /* wait */ ;
    44a6:	80 91 9a 09 	lds	r24, 0x099A
    44aa:	81 11       	cpse	r24, r1
    44ac:	fc cf       	rjmp	.-8      	; 0x44a6 <_ZN13AltSoftSerial11flushOutputEv>
}
    44ae:	08 95       	ret

000044b0 <_ZN13AltSoftSerial5flushEv>:
    44b0:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <_ZN13AltSoftSerial11flushOutputEv>

000044b4 <__vector_46>:
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
    44b4:	1f 92       	push	r1
    44b6:	0f 92       	push	r0
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	0f 92       	push	r0
    44bc:	11 24       	eor	r1, r1
    44be:	0b b6       	in	r0, 0x3b	; 59
    44c0:	0f 92       	push	r0
    44c2:	1b be       	out	0x3b, r1	; 59
    44c4:	2f 93       	push	r18
    44c6:	3f 93       	push	r19
    44c8:	4f 93       	push	r20
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	ef 93       	push	r30
    44d0:	ff 93       	push	r31
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
    44d2:	80 91 26 01 	lds	r24, 0x0126
    44d6:	90 91 27 01 	lds	r25, 0x0127
	count = rx_count;
    44da:	40 91 ed 09 	lds	r20, 0x09ED
	if (count & 1) {
		CONFIG_CAPTURE_FALLING_EDGE();
    44de:	20 91 21 01 	lds	r18, 0x0121
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
	count = rx_count;
	if (count & 1) {
    44e2:	40 ff       	sbrs	r20, 0
    44e4:	04 c0       	rjmp	.+8      	; 0x44ee <__vector_46+0x3a>
		CONFIG_CAPTURE_FALLING_EDGE();
    44e6:	2f 7b       	andi	r18, 0xBF	; 191
    44e8:	20 93 21 01 	sts	0x0121, r18
    44ec:	1b c0       	rjmp	.+54     	; 0x4524 <__vector_46+0x70>
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
    44ee:	20 64       	ori	r18, 0x40	; 64
    44f0:	20 93 21 01 	sts	0x0121, r18
	}
	if (count == 0) {
    44f4:	41 11       	cpse	r20, r1
    44f6:	16 c0       	rjmp	.+44     	; 0x4524 <__vector_46+0x70>
		SET_COMPARE_B(capture + rx_stop_ticks);
    44f8:	20 91 f1 09 	lds	r18, 0x09F1
    44fc:	30 91 f2 09 	lds	r19, 0x09F2
    4500:	28 0f       	add	r18, r24
    4502:	39 1f       	adc	r19, r25
    4504:	30 93 2b 01 	sts	0x012B, r19
    4508:	20 93 2a 01 	sts	0x012A, r18
		ENABLE_INT_COMPARE_B();
    450c:	24 e0       	ldi	r18, 0x04	; 4
    450e:	2a bb       	out	0x1a, r18	; 26
    4510:	20 91 73 00 	lds	r18, 0x0073
    4514:	24 60       	ori	r18, 0x04	; 4
    4516:	20 93 73 00 	sts	0x0073, r18
		rx_event[0] = capture;
    451a:	90 93 f6 09 	sts	0x09F6, r25
    451e:	80 93 f5 09 	sts	0x09F5, r24
    4522:	0a c0       	rjmp	.+20     	; 0x4538 <__vector_46+0x84>
	} else if (count < MAX_RX_EVENTS) {
    4524:	4a 30       	cpi	r20, 0x0A	; 10
    4526:	40 f4       	brcc	.+16     	; 0x4538 <__vector_46+0x84>
		rx_event[count] = capture;
    4528:	e4 2f       	mov	r30, r20
    452a:	f0 e0       	ldi	r31, 0x00	; 0
    452c:	ee 0f       	add	r30, r30
    452e:	ff 1f       	adc	r31, r31
    4530:	eb 50       	subi	r30, 0x0B	; 11
    4532:	f6 4f       	sbci	r31, 0xF6	; 246
    4534:	91 83       	std	Z+1, r25	; 0x01
    4536:	80 83       	st	Z, r24
	}
	rx_count = count + 1;
    4538:	4f 5f       	subi	r20, 0xFF	; 255
    453a:	40 93 ed 09 	sts	0x09ED, r20
	if (GET_TIMER_COUNT() - capture > ticks_per_bit) {
    453e:	20 91 24 01 	lds	r18, 0x0124
    4542:	30 91 25 01 	lds	r19, 0x0125
    4546:	28 1b       	sub	r18, r24
    4548:	39 0b       	sbc	r19, r25
    454a:	80 91 ef 09 	lds	r24, 0x09EF
    454e:	90 91 f0 09 	lds	r25, 0x09F0
    4552:	82 17       	cp	r24, r18
    4554:	93 07       	cpc	r25, r19
    4556:	18 f4       	brcc	.+6      	; 0x455e <__vector_46+0xaa>
		AltSoftSerial::timing_error = true;
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	80 93 ee 09 	sts	0x09EE, r24
	}
}
    455e:	ff 91       	pop	r31
    4560:	ef 91       	pop	r30
    4562:	9f 91       	pop	r25
    4564:	8f 91       	pop	r24
    4566:	4f 91       	pop	r20
    4568:	3f 91       	pop	r19
    456a:	2f 91       	pop	r18
    456c:	0f 90       	pop	r0
    456e:	0b be       	out	0x3b, r0	; 59
    4570:	0f 90       	pop	r0
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	0f 90       	pop	r0
    4576:	1f 90       	pop	r1
    4578:	18 95       	reti

0000457a <__vector_48>:
	}
	return out;
}

ISR(COMPARE_B_INTERRUPT)
{
    457a:	1f 92       	push	r1
    457c:	0f 92       	push	r0
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	0f 92       	push	r0
    4582:	11 24       	eor	r1, r1
    4584:	0b b6       	in	r0, 0x3b	; 59
    4586:	0f 92       	push	r0
    4588:	1b be       	out	0x3b, r1	; 59
    458a:	af 92       	push	r10
    458c:	bf 92       	push	r11
    458e:	cf 92       	push	r12
    4590:	df 92       	push	r13
    4592:	ef 92       	push	r14
    4594:	ff 92       	push	r15
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	2f 93       	push	r18
    459c:	3f 93       	push	r19
    459e:	4f 93       	push	r20
    45a0:	5f 93       	push	r21
    45a2:	6f 93       	push	r22
    45a4:	7f 93       	push	r23
    45a6:	8f 93       	push	r24
    45a8:	9f 93       	push	r25
    45aa:	af 93       	push	r26
    45ac:	bf 93       	push	r27
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	ef 93       	push	r30
    45b4:	ff 93       	push	r31
	uint8_t head;

	DISABLE_INT_COMPARE_B();
    45b6:	80 91 73 00 	lds	r24, 0x0073
    45ba:	8b 7f       	andi	r24, 0xFB	; 251
    45bc:	80 93 73 00 	sts	0x0073, r24
	CONFIG_CAPTURE_FALLING_EDGE();
    45c0:	80 91 21 01 	lds	r24, 0x0121
    45c4:	8f 7b       	andi	r24, 0xBF	; 191
    45c6:	80 93 21 01 	sts	0x0121, r24
	head = rx_buffer_head + 1;
    45ca:	10 91 ec 09 	lds	r17, 0x09EC
    45ce:	1f 5f       	subi	r17, 0xFF	; 255
	if (head >= RX_BUFFER_SIZE) head = 0;
    45d0:	10 35       	cpi	r17, 0x50	; 80
    45d2:	08 f0       	brcs	.+2      	; 0x45d6 <__vector_48+0x5c>
    45d4:	10 e0       	ldi	r17, 0x00	; 0
	if (head != rx_buffer_tail) {
    45d6:	80 91 eb 09 	lds	r24, 0x09EB
    45da:	18 17       	cp	r17, r24
    45dc:	e9 f1       	breq	.+122    	; 0x4658 <__vector_48+0xde>
		rx_buffer[head] = analyze(rx_count);
    45de:	c1 2f       	mov	r28, r17
    45e0:	d0 e0       	ldi	r29, 0x00	; 0
    45e2:	00 91 ed 09 	lds	r16, 0x09ED
    45e6:	0b 30       	cpi	r16, 0x0B	; 11
    45e8:	08 f0       	brcs	.+2      	; 0x45ec <__vector_48+0x72>
    45ea:	0a e0       	ldi	r16, 0x0A	; 10
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    45ec:	60 91 f5 09 	lds	r22, 0x09F5
    45f0:	70 91 f6 09 	lds	r23, 0x09F6
	target = ticks_per_bit + ticks_per_bit / 2;
    45f4:	20 91 ef 09 	lds	r18, 0x09EF
    45f8:	30 91 f0 09 	lds	r19, 0x09F0
    45fc:	c9 01       	movw	r24, r18
    45fe:	96 95       	lsr	r25
    4600:	87 95       	ror	r24
    4602:	82 0f       	add	r24, r18
    4604:	93 1f       	adc	r25, r19

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;
    4606:	40 e0       	ldi	r20, 0x00	; 0
    4608:	50 e0       	ldi	r21, 0x00	; 0
}

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
    460a:	e1 2c       	mov	r14, r1
    460c:	dd 24       	eor	r13, r13
    460e:	d3 94       	inc	r13
    4610:	ff 24       	eor	r15, r15
    4612:	fa 94       	dec	r15
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    4614:	e7 ef       	ldi	r30, 0xF7	; 247
    4616:	f9 e0       	ldi	r31, 0x09	; 9
		while (now >= target) {
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    4618:	cc 24       	eor	r12, r12
    461a:	c3 94       	inc	r12
    461c:	15 c0       	rjmp	.+42     	; 0x4648 <__vector_48+0xce>

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
    461e:	a1 91       	ld	r26, Z+
    4620:	b1 91       	ld	r27, Z+
		now += tmp - begin;
    4622:	5d 01       	movw	r10, r26
    4624:	a6 1a       	sub	r10, r22
    4626:	b7 0a       	sbc	r11, r23
    4628:	4a 0d       	add	r20, r10
    462a:	5b 1d       	adc	r21, r11
    462c:	08 c0       	rjmp	.+16     	; 0x463e <__vector_48+0xc4>
		begin = tmp;
		while (now >= target) {
			if (state == 0) out &= ~mask;
    462e:	e1 10       	cpse	r14, r1
    4630:	03 c0       	rjmp	.+6      	; 0x4638 <__vector_48+0xbe>
    4632:	6d 2d       	mov	r22, r13
    4634:	60 95       	com	r22
    4636:	f6 22       	and	r15, r22
			mask <<= 1;
    4638:	dd 0c       	add	r13, r13
			target += ticks_per_bit;
    463a:	82 0f       	add	r24, r18
    463c:	93 1f       	adc	r25, r19
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
		while (now >= target) {
    463e:	48 17       	cp	r20, r24
    4640:	59 07       	cpc	r21, r25
    4642:	a8 f7       	brcc	.-22     	; 0x462e <__vector_48+0xb4>
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    4644:	ec 24       	eor	r14, r12
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
    4646:	bd 01       	movw	r22, r26
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
    4648:	01 50       	subi	r16, 0x01	; 1
    464a:	49 f7       	brne	.-46     	; 0x461e <__vector_48+0xa4>
	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	head = rx_buffer_head + 1;
	if (head >= RX_BUFFER_SIZE) head = 0;
	if (head != rx_buffer_tail) {
		rx_buffer[head] = analyze(rx_count);
    464c:	fe 01       	movw	r30, r28
    464e:	e5 56       	subi	r30, 0x65	; 101
    4650:	f6 4f       	sbci	r31, 0xF6	; 246
    4652:	f0 82       	st	Z, r15
		rx_buffer_head = head;
    4654:	10 93 ec 09 	sts	0x09EC, r17
	}
	rx_count = 0;
    4658:	10 92 ed 09 	sts	0x09ED, r1
}
    465c:	ff 91       	pop	r31
    465e:	ef 91       	pop	r30
    4660:	df 91       	pop	r29
    4662:	cf 91       	pop	r28
    4664:	bf 91       	pop	r27
    4666:	af 91       	pop	r26
    4668:	9f 91       	pop	r25
    466a:	8f 91       	pop	r24
    466c:	7f 91       	pop	r23
    466e:	6f 91       	pop	r22
    4670:	5f 91       	pop	r21
    4672:	4f 91       	pop	r20
    4674:	3f 91       	pop	r19
    4676:	2f 91       	pop	r18
    4678:	1f 91       	pop	r17
    467a:	0f 91       	pop	r16
    467c:	ff 90       	pop	r15
    467e:	ef 90       	pop	r14
    4680:	df 90       	pop	r13
    4682:	cf 90       	pop	r12
    4684:	bf 90       	pop	r11
    4686:	af 90       	pop	r10
    4688:	0f 90       	pop	r0
    468a:	0b be       	out	0x3b, r0	; 59
    468c:	0f 90       	pop	r0
    468e:	0f be       	out	0x3f, r0	; 63
    4690:	0f 90       	pop	r0
    4692:	1f 90       	pop	r1
    4694:	18 95       	reti

00004696 <_ZN13AltSoftSerial10flushInputEv>:
	return RX_BUFFER_SIZE + head - tail;
}

void AltSoftSerial::flushInput(void)
{
	rx_buffer_head = rx_buffer_tail;
    4696:	80 91 eb 09 	lds	r24, 0x09EB
    469a:	80 93 ec 09 	sts	0x09EC, r24
    469e:	08 95       	ret

000046a0 <_ZN13AltSoftSerial3endEv>:
	tx_buffer_tail = 0;
	ENABLE_INT_INPUT_CAPTURE();
}

void AltSoftSerial::end(void)
{
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
	DISABLE_INT_COMPARE_B();
    46a4:	c3 e7       	ldi	r28, 0x73	; 115
    46a6:	d0 e0       	ldi	r29, 0x00	; 0
    46a8:	88 81       	ld	r24, Y
    46aa:	8b 7f       	andi	r24, 0xFB	; 251
    46ac:	88 83       	st	Y, r24
	DISABLE_INT_INPUT_CAPTURE();
    46ae:	88 81       	ld	r24, Y
    46b0:	8f 7d       	andi	r24, 0xDF	; 223
    46b2:	88 83       	st	Y, r24
	flushInput();
    46b4:	0e 94 4b 23 	call	0x4696	; 0x4696 <_ZN13AltSoftSerial10flushInputEv>
	flushOutput();
    46b8:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_ZN13AltSoftSerial11flushOutputEv>
	DISABLE_INT_COMPARE_A();
    46bc:	88 81       	ld	r24, Y
    46be:	8d 7f       	andi	r24, 0xFD	; 253
    46c0:	88 83       	st	Y, r24
	// TODO: restore timer to original settings?
}
    46c2:	df 91       	pop	r29
    46c4:	cf 91       	pop	r28
    46c6:	08 95       	ret

000046c8 <_ZN5AlarmD1Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    46c8:	28 e2       	ldi	r18, 0x28	; 40
    46ca:	32 e0       	ldi	r19, 0x02	; 2
    46cc:	fc 01       	movw	r30, r24
    46ce:	31 83       	std	Z+1, r19	; 0x01
    46d0:	20 83       	st	Z, r18
    46d2:	08 95       	ret

000046d4 <_ZN5AlarmD0Ev>:
    46d4:	28 e2       	ldi	r18, 0x28	; 40
    46d6:	32 e0       	ldi	r19, 0x02	; 2
    46d8:	fc 01       	movw	r30, r24
    46da:	31 83       	std	Z+1, r19	; 0x01
    46dc:	20 83       	st	Z, r18

}
    46de:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

000046e2 <_ZN5AlarmC1EP14FreeBoardModel>:
 *      Author: robert
 */

#include "Alarm.h"

Alarm::Alarm(FreeBoardModel* model) {
    46e2:	fc 01       	movw	r30, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	28 e2       	ldi	r18, 0x28	; 40
    46e8:	32 e0       	ldi	r19, 0x02	; 2
    46ea:	31 83       	std	Z+1, r19	; 0x01
    46ec:	20 83       	st	Z, r18
	this->model=model;
    46ee:	73 83       	std	Z+3, r23	; 0x03
    46f0:	62 83       	std	Z+2, r22	; 0x02
	alarmBeepState=false;
    46f2:	14 82       	std	Z+4, r1	; 0x04
	model->setAlarmLast(0);
    46f4:	40 e0       	ldi	r20, 0x00	; 0
    46f6:	50 e0       	ldi	r21, 0x00	; 0
    46f8:	ba 01       	movw	r22, r20
    46fa:	0e 94 ad 2c 	call	0x595a	; 0x595a <_ZN14FreeBoardModel12setAlarmLastEm>
	pinMode(alarmPin0, OUTPUT);
    46fe:	61 e0       	ldi	r22, 0x01	; 1
    4700:	86 e1       	ldi	r24, 0x16	; 22
    4702:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(alarmPin1, OUTPUT);
    4706:	61 e0       	ldi	r22, 0x01	; 1
    4708:	87 e1       	ldi	r24, 0x17	; 23
    470a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(alarmPin2, OUTPUT);
    470e:	61 e0       	ldi	r22, 0x01	; 1
    4710:	88 e1       	ldi	r24, 0x18	; 24
    4712:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(alarmPin3, OUTPUT);
    4716:	61 e0       	ldi	r22, 0x01	; 1
    4718:	89 e1       	ldi	r24, 0x19	; 25
    471a:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <pinMode>

0000471e <_ZN5Alarm14checkWindAlarmEv>:
		digitalWrite(alarmPin2, LOW);
		digitalWrite(alarmPin3, LOW);
	}
}

void Alarm::checkWindAlarm(){
    471e:	cf 92       	push	r12
    4720:	df 92       	push	r13
    4722:	ef 92       	push	r14
    4724:	ff 92       	push	r15
    4726:	cf 93       	push	r28
    4728:	df 93       	push	r29
    472a:	ec 01       	movw	r28, r24
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    472c:	8a 81       	ldd	r24, Y+2	; 0x02
    472e:	9b 81       	ldd	r25, Y+3	; 0x03
    4730:	0e 94 a8 2c 	call	0x5950	; 0x5950 <_ZN14FreeBoardModel13isWindAlarmOnEv>
    4734:	88 23       	and	r24, r24
    4736:	11 f1       	breq	.+68     	; 0x477c <_ZN5Alarm14checkWindAlarmEv+0x5e>
    4738:	8a 81       	ldd	r24, Y+2	; 0x02
    473a:	9b 81       	ldd	r25, Y+3	; 0x03
    473c:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    4740:	18 16       	cp	r1, r24
    4742:	19 06       	cpc	r1, r25
    4744:	dc f4       	brge	.+54     	; 0x477c <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
    4746:	8a 81       	ldd	r24, Y+2	; 0x02
    4748:	9b 81       	ldd	r25, Y+3	; 0x03
    474a:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN14FreeBoardModel14getWindAverageEv>
    474e:	6b 01       	movw	r12, r22
    4750:	7c 01       	movw	r14, r24
    4752:	8a 81       	ldd	r24, Y+2	; 0x02
    4754:	9b 81       	ldd	r25, Y+3	; 0x03
    4756:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
	}
}

void Alarm::checkWindAlarm(){
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    475a:	bc 01       	movw	r22, r24
    475c:	88 27       	eor	r24, r24
    475e:	77 fd       	sbrc	r23, 7
    4760:	80 95       	com	r24
    4762:	98 2f       	mov	r25, r24
    4764:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    4768:	9b 01       	movw	r18, r22
    476a:	ac 01       	movw	r20, r24
    476c:	c7 01       	movw	r24, r14
    476e:	b6 01       	movw	r22, r12
    4770:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    4774:	18 16       	cp	r1, r24
    4776:	14 f4       	brge	.+4      	; 0x477c <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
    4778:	61 e0       	ldi	r22, 0x01	; 1
    477a:	01 c0       	rjmp	.+2      	; 0x477e <_ZN5Alarm14checkWindAlarmEv+0x60>
		} else {
			model->setWindAlarmTriggered(false);
    477c:	60 e0       	ldi	r22, 0x00	; 0
    477e:	8a 81       	ldd	r24, Y+2	; 0x02
    4780:	9b 81       	ldd	r25, Y+3	; 0x03
		}
}
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	ff 90       	pop	r15
    4788:	ef 90       	pop	r14
    478a:	df 90       	pop	r13
    478c:	cf 90       	pop	r12
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
		} else {
			model->setWindAlarmTriggered(false);
    478e:	0c 94 dd 2d 	jmp	0x5bba	; 0x5bba <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>

00004792 <_ZN6AnchorD1Ev>:

	this->model=model;
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
}

Anchor::~Anchor(){
    4792:	20 e3       	ldi	r18, 0x30	; 48
    4794:	32 e0       	ldi	r19, 0x02	; 2
    4796:	fc 01       	movw	r30, r24
    4798:	31 83       	std	Z+1, r19	; 0x01
    479a:	20 83       	st	Z, r18
    479c:	08 95       	ret

0000479e <_ZN6AnchorD0Ev>:
    479e:	20 e3       	ldi	r18, 0x30	; 48
    47a0:	32 e0       	ldi	r19, 0x02	; 2
    47a2:	fc 01       	movw	r30, r24
    47a4:	31 83       	std	Z+1, r19	; 0x01
    47a6:	20 83       	st	Z, r18

}
    47a8:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

000047ac <_ZN6Anchor15updateAnchorBoxEff>:


/* Adjust the size of the anchor box. Will not go smaller than MINMTRS */
void Anchor::updateAnchorBox(float laty, float lonx) {
    47ac:	2f 92       	push	r2
    47ae:	3f 92       	push	r3
    47b0:	4f 92       	push	r4
    47b2:	5f 92       	push	r5
    47b4:	6f 92       	push	r6
    47b6:	7f 92       	push	r7
    47b8:	8f 92       	push	r8
    47ba:	9f 92       	push	r9
    47bc:	af 92       	push	r10
    47be:	bf 92       	push	r11
    47c0:	cf 92       	push	r12
    47c2:	df 92       	push	r13
    47c4:	ef 92       	push	r14
    47c6:	ff 92       	push	r15
    47c8:	0f 93       	push	r16
    47ca:	1f 93       	push	r17
    47cc:	cf 93       	push	r28
    47ce:	df 93       	push	r29
    47d0:	00 d0       	rcall	.+0      	; 0x47d2 <_ZN6Anchor15updateAnchorBoxEff+0x26>
    47d2:	00 d0       	rcall	.+0      	; 0x47d4 <_ZN6Anchor15updateAnchorBoxEff+0x28>
    47d4:	00 d0       	rcall	.+0      	; 0x47d6 <_ZN6Anchor15updateAnchorBoxEff+0x2a>
    47d6:	cd b7       	in	r28, 0x3d	; 61
    47d8:	de b7       	in	r29, 0x3e	; 62
    47da:	9e 83       	std	Y+6, r25	; 0x06
    47dc:	8d 83       	std	Y+5, r24	; 0x05
    47de:	4a 01       	movw	r8, r20
    47e0:	5b 01       	movw	r10, r22
    47e2:	68 01       	movw	r12, r16
    47e4:	79 01       	movw	r14, r18
	//TODO: error testing around 0, 90, 180deg

	float n = laty + model->getAnchorRadiusDeg();
    47e6:	fc 01       	movw	r30, r24
    47e8:	82 81       	ldd	r24, Z+2	; 0x02
    47ea:	93 81       	ldd	r25, Z+3	; 0x03
    47ec:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    47f0:	9b 01       	movw	r18, r22
    47f2:	ac 01       	movw	r20, r24
    47f4:	c5 01       	movw	r24, r10
    47f6:	b4 01       	movw	r22, r8
    47f8:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    47fc:	69 83       	std	Y+1, r22	; 0x01
    47fe:	7a 83       	std	Y+2, r23	; 0x02
    4800:	1c 01       	movw	r2, r24
	float s = laty - model->getAnchorRadiusDeg();
    4802:	ed 81       	ldd	r30, Y+5	; 0x05
    4804:	fe 81       	ldd	r31, Y+6	; 0x06
    4806:	82 81       	ldd	r24, Z+2	; 0x02
    4808:	93 81       	ldd	r25, Z+3	; 0x03
    480a:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    480e:	9b 01       	movw	r18, r22
    4810:	ac 01       	movw	r20, r24
    4812:	c5 01       	movw	r24, r10
    4814:	b4 01       	movw	r22, r8
    4816:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    481a:	2b 01       	movw	r4, r22
    481c:	3c 01       	movw	r6, r24
	float e = lonx + model->getAnchorRadiusDeg();
    481e:	ed 81       	ldd	r30, Y+5	; 0x05
    4820:	fe 81       	ldd	r31, Y+6	; 0x06
    4822:	82 81       	ldd	r24, Z+2	; 0x02
    4824:	93 81       	ldd	r25, Z+3	; 0x03
    4826:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    482a:	9b 01       	movw	r18, r22
    482c:	ac 01       	movw	r20, r24
    482e:	c7 01       	movw	r24, r14
    4830:	b6 01       	movw	r22, r12
    4832:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    4836:	4b 01       	movw	r8, r22
    4838:	5c 01       	movw	r10, r24
	float w = lonx - model->getAnchorRadiusDeg();
    483a:	ed 81       	ldd	r30, Y+5	; 0x05
    483c:	fe 81       	ldd	r31, Y+6	; 0x06
    483e:	82 81       	ldd	r24, Z+2	; 0x02
    4840:	93 81       	ldd	r25, Z+3	; 0x03
    4842:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    4846:	9b 01       	movw	r18, r22
    4848:	ac 01       	movw	r20, r24
    484a:	c7 01       	movw	r24, r14
    484c:	b6 01       	movw	r22, r12
    484e:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    4852:	16 2f       	mov	r17, r22
    4854:	7b 83       	std	Y+3, r23	; 0x03
    4856:	8c 83       	std	Y+4, r24	; 0x04
    4858:	09 2f       	mov	r16, r25
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
    485a:	ed 81       	ldd	r30, Y+5	; 0x05
    485c:	fe 81       	ldd	r31, Y+6	; 0x06
    485e:	82 81       	ldd	r24, Z+2	; 0x02
    4860:	93 81       	ldd	r25, Z+3	; 0x03
    4862:	0e 94 ac 2a 	call	0x5558	; 0x5558 <_ZN14FreeBoardModel10getAnchorSEv>
    4866:	6b 01       	movw	r12, r22
    4868:	7c 01       	movw	r14, r24
    486a:	24 e8       	ldi	r18, 0x84	; 132
    486c:	3a eb       	ldi	r19, 0xBA	; 186
    486e:	4c e3       	ldi	r20, 0x3C	; 60
    4870:	58 e3       	ldi	r21, 0x38	; 56
    4872:	b9 81       	ldd	r27, Y+1	; 0x01
    4874:	aa 81       	ldd	r26, Y+2	; 0x02
    4876:	6b 2f       	mov	r22, r27
    4878:	7a 2f       	mov	r23, r26
    487a:	82 2d       	mov	r24, r2
    487c:	93 2d       	mov	r25, r3
    487e:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    4882:	a7 01       	movw	r20, r14
    4884:	96 01       	movw	r18, r12
    4886:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    488a:	18 16       	cp	r1, r24
    488c:	94 f4       	brge	.+36     	; 0x48b2 <_ZN6Anchor15updateAnchorBoxEff+0x106>
    488e:	ed 81       	ldd	r30, Y+5	; 0x05
    4890:	fe 81       	ldd	r31, Y+6	; 0x06
    4892:	82 81       	ldd	r24, Z+2	; 0x02
    4894:	93 81       	ldd	r25, Z+3	; 0x03
    4896:	0e 94 8c 2a 	call	0x5518	; 0x5518 <_ZN14FreeBoardModel10getAnchorNEv>
    489a:	9b 01       	movw	r18, r22
    489c:	ac 01       	movw	r20, r24
    489e:	b9 81       	ldd	r27, Y+1	; 0x01
    48a0:	aa 81       	ldd	r26, Y+2	; 0x02
    48a2:	6b 2f       	mov	r22, r27
    48a4:	7a 2f       	mov	r23, r26
    48a6:	82 2d       	mov	r24, r2
    48a8:	93 2d       	mov	r25, r3
    48aa:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    48ae:	87 fd       	sbrc	r24, 7
    48b0:	7e c0       	rjmp	.+252    	; 0x49ae <_ZN6Anchor15updateAnchorBoxEff+0x202>
		model->setAnchorN(n);
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
    48b2:	ed 81       	ldd	r30, Y+5	; 0x05
    48b4:	fe 81       	ldd	r31, Y+6	; 0x06
    48b6:	82 81       	ldd	r24, Z+2	; 0x02
    48b8:	93 81       	ldd	r25, Z+3	; 0x03
    48ba:	0e 94 8c 2a 	call	0x5518	; 0x5518 <_ZN14FreeBoardModel10getAnchorNEv>
    48be:	6b 01       	movw	r12, r22
    48c0:	7c 01       	movw	r14, r24
    48c2:	24 e8       	ldi	r18, 0x84	; 132
    48c4:	3a eb       	ldi	r19, 0xBA	; 186
    48c6:	4c e3       	ldi	r20, 0x3C	; 60
    48c8:	58 e3       	ldi	r21, 0x38	; 56
    48ca:	64 2d       	mov	r22, r4
    48cc:	75 2d       	mov	r23, r5
    48ce:	86 2d       	mov	r24, r6
    48d0:	97 2d       	mov	r25, r7
    48d2:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    48d6:	a7 01       	movw	r20, r14
    48d8:	96 01       	movw	r18, r12
    48da:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    48de:	87 ff       	sbrs	r24, 7
    48e0:	11 c0       	rjmp	.+34     	; 0x4904 <_ZN6Anchor15updateAnchorBoxEff+0x158>
    48e2:	ed 81       	ldd	r30, Y+5	; 0x05
    48e4:	fe 81       	ldd	r31, Y+6	; 0x06
    48e6:	82 81       	ldd	r24, Z+2	; 0x02
    48e8:	93 81       	ldd	r25, Z+3	; 0x03
    48ea:	0e 94 ac 2a 	call	0x5558	; 0x5558 <_ZN14FreeBoardModel10getAnchorSEv>
    48ee:	9b 01       	movw	r18, r22
    48f0:	ac 01       	movw	r20, r24
    48f2:	64 2d       	mov	r22, r4
    48f4:	75 2d       	mov	r23, r5
    48f6:	86 2d       	mov	r24, r6
    48f8:	97 2d       	mov	r25, r7
    48fa:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    48fe:	18 16       	cp	r1, r24
    4900:	0c f4       	brge	.+2      	; 0x4904 <_ZN6Anchor15updateAnchorBoxEff+0x158>
    4902:	62 c0       	rjmp	.+196    	; 0x49c8 <_ZN6Anchor15updateAnchorBoxEff+0x21c>
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
    4904:	ed 81       	ldd	r30, Y+5	; 0x05
    4906:	fe 81       	ldd	r31, Y+6	; 0x06
    4908:	82 81       	ldd	r24, Z+2	; 0x02
    490a:	93 81       	ldd	r25, Z+3	; 0x03
    490c:	0e 94 b6 2a 	call	0x556c	; 0x556c <_ZN14FreeBoardModel10getAnchorWEv>
    4910:	2b 01       	movw	r4, r22
    4912:	3c 01       	movw	r6, r24
    4914:	24 e8       	ldi	r18, 0x84	; 132
    4916:	3a eb       	ldi	r19, 0xBA	; 186
    4918:	4c e3       	ldi	r20, 0x3C	; 60
    491a:	58 e3       	ldi	r21, 0x38	; 56
    491c:	68 2d       	mov	r22, r8
    491e:	79 2d       	mov	r23, r9
    4920:	8a 2d       	mov	r24, r10
    4922:	9b 2d       	mov	r25, r11
    4924:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    4928:	a3 01       	movw	r20, r6
    492a:	92 01       	movw	r18, r4
    492c:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    4930:	18 16       	cp	r1, r24
    4932:	84 f4       	brge	.+32     	; 0x4954 <_ZN6Anchor15updateAnchorBoxEff+0x1a8>
    4934:	ed 81       	ldd	r30, Y+5	; 0x05
    4936:	fe 81       	ldd	r31, Y+6	; 0x06
    4938:	82 81       	ldd	r24, Z+2	; 0x02
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN14FreeBoardModel10getAnchorEEv>
    4940:	9b 01       	movw	r18, r22
    4942:	ac 01       	movw	r20, r24
    4944:	68 2d       	mov	r22, r8
    4946:	79 2d       	mov	r23, r9
    4948:	8a 2d       	mov	r24, r10
    494a:	9b 2d       	mov	r25, r11
    494c:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    4950:	87 fd       	sbrc	r24, 7
    4952:	45 c0       	rjmp	.+138    	; 0x49de <_ZN6Anchor15updateAnchorBoxEff+0x232>
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
    4954:	ed 81       	ldd	r30, Y+5	; 0x05
    4956:	fe 81       	ldd	r31, Y+6	; 0x06
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	93 81       	ldd	r25, Z+3	; 0x03
    495c:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <_ZN14FreeBoardModel10getAnchorEEv>
    4960:	4b 01       	movw	r8, r22
    4962:	5c 01       	movw	r10, r24
    4964:	24 e8       	ldi	r18, 0x84	; 132
    4966:	3a eb       	ldi	r19, 0xBA	; 186
    4968:	4c e3       	ldi	r20, 0x3C	; 60
    496a:	58 e3       	ldi	r21, 0x38	; 56
    496c:	ab 81       	ldd	r26, Y+3	; 0x03
    496e:	fc 80       	ldd	r15, Y+4	; 0x04
    4970:	61 2f       	mov	r22, r17
    4972:	7a 2f       	mov	r23, r26
    4974:	8f 2d       	mov	r24, r15
    4976:	90 2f       	mov	r25, r16
    4978:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    497c:	a5 01       	movw	r20, r10
    497e:	94 01       	movw	r18, r8
    4980:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    4984:	87 ff       	sbrs	r24, 7
    4986:	5a c0       	rjmp	.+180    	; 0x4a3c <_ZN6Anchor15updateAnchorBoxEff+0x290>
    4988:	ed 81       	ldd	r30, Y+5	; 0x05
    498a:	fe 81       	ldd	r31, Y+6	; 0x06
    498c:	82 81       	ldd	r24, Z+2	; 0x02
    498e:	93 81       	ldd	r25, Z+3	; 0x03
    4990:	0e 94 b6 2a 	call	0x556c	; 0x556c <_ZN14FreeBoardModel10getAnchorWEv>
    4994:	9b 01       	movw	r18, r22
    4996:	ac 01       	movw	r20, r24
    4998:	ab 81       	ldd	r26, Y+3	; 0x03
    499a:	fc 80       	ldd	r15, Y+4	; 0x04
    499c:	61 2f       	mov	r22, r17
    499e:	7a 2f       	mov	r23, r26
    49a0:	8f 2d       	mov	r24, r15
    49a2:	90 2f       	mov	r25, r16
    49a4:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    49a8:	18 16       	cp	r1, r24
    49aa:	24 f1       	brlt	.+72     	; 0x49f4 <_ZN6Anchor15updateAnchorBoxEff+0x248>
    49ac:	47 c0       	rjmp	.+142    	; 0x4a3c <_ZN6Anchor15updateAnchorBoxEff+0x290>
	float s = laty - model->getAnchorRadiusDeg();
	float e = lonx + model->getAnchorRadiusDeg();
	float w = lonx - model->getAnchorRadiusDeg();
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
		model->setAnchorN(n);
    49ae:	39 81       	ldd	r19, Y+1	; 0x01
    49b0:	2a 81       	ldd	r18, Y+2	; 0x02
    49b2:	43 2f       	mov	r20, r19
    49b4:	52 2f       	mov	r21, r18
    49b6:	62 2d       	mov	r22, r2
    49b8:	73 2d       	mov	r23, r3
    49ba:	ed 81       	ldd	r30, Y+5	; 0x05
    49bc:	fe 81       	ldd	r31, Y+6	; 0x06
    49be:	82 81       	ldd	r24, Z+2	; 0x02
    49c0:	93 81       	ldd	r25, Z+3	; 0x03
    49c2:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <_ZN14FreeBoardModel10setAnchorNEf>
    49c6:	75 cf       	rjmp	.-278    	; 0x48b2 <_ZN6Anchor15updateAnchorBoxEff+0x106>
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
    49c8:	44 2d       	mov	r20, r4
    49ca:	55 2d       	mov	r21, r5
    49cc:	66 2d       	mov	r22, r6
    49ce:	77 2d       	mov	r23, r7
    49d0:	ed 81       	ldd	r30, Y+5	; 0x05
    49d2:	fe 81       	ldd	r31, Y+6	; 0x06
    49d4:	82 81       	ldd	r24, Z+2	; 0x02
    49d6:	93 81       	ldd	r25, Z+3	; 0x03
    49d8:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <_ZN14FreeBoardModel10setAnchorSEf>
    49dc:	93 cf       	rjmp	.-218    	; 0x4904 <_ZN6Anchor15updateAnchorBoxEff+0x158>
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
    49de:	48 2d       	mov	r20, r8
    49e0:	59 2d       	mov	r21, r9
    49e2:	6a 2d       	mov	r22, r10
    49e4:	7b 2d       	mov	r23, r11
    49e6:	ed 81       	ldd	r30, Y+5	; 0x05
    49e8:	fe 81       	ldd	r31, Y+6	; 0x06
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	0e 94 c7 2c 	call	0x598e	; 0x598e <_ZN14FreeBoardModel10setAnchorEEf>
    49f2:	b0 cf       	rjmp	.-160    	; 0x4954 <_ZN6Anchor15updateAnchorBoxEff+0x1a8>
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    49f4:	2b 81       	ldd	r18, Y+3	; 0x03
    49f6:	9c 81       	ldd	r25, Y+4	; 0x04
    49f8:	41 2f       	mov	r20, r17
    49fa:	52 2f       	mov	r21, r18
    49fc:	69 2f       	mov	r22, r25
    49fe:	70 2f       	mov	r23, r16
    4a00:	ed 81       	ldd	r30, Y+5	; 0x05
    4a02:	fe 81       	ldd	r31, Y+6	; 0x06
    4a04:	82 81       	ldd	r24, Z+2	; 0x02
    4a06:	93 81       	ldd	r25, Z+3	; 0x03

}
    4a08:	26 96       	adiw	r28, 0x06	; 6
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	df 91       	pop	r29
    4a16:	cf 91       	pop	r28
    4a18:	1f 91       	pop	r17
    4a1a:	0f 91       	pop	r16
    4a1c:	ff 90       	pop	r15
    4a1e:	ef 90       	pop	r14
    4a20:	df 90       	pop	r13
    4a22:	cf 90       	pop	r12
    4a24:	bf 90       	pop	r11
    4a26:	af 90       	pop	r10
    4a28:	9f 90       	pop	r9
    4a2a:	8f 90       	pop	r8
    4a2c:	7f 90       	pop	r7
    4a2e:	6f 90       	pop	r6
    4a30:	5f 90       	pop	r5
    4a32:	4f 90       	pop	r4
    4a34:	3f 90       	pop	r3
    4a36:	2f 90       	pop	r2
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    4a38:	0c 94 fd 2c 	jmp	0x59fa	; 0x59fa <_ZN14FreeBoardModel10setAnchorWEf>

}
    4a3c:	26 96       	adiw	r28, 0x06	; 6
    4a3e:	0f b6       	in	r0, 0x3f	; 63
    4a40:	f8 94       	cli
    4a42:	de bf       	out	0x3e, r29	; 62
    4a44:	0f be       	out	0x3f, r0	; 63
    4a46:	cd bf       	out	0x3d, r28	; 61
    4a48:	df 91       	pop	r29
    4a4a:	cf 91       	pop	r28
    4a4c:	1f 91       	pop	r17
    4a4e:	0f 91       	pop	r16
    4a50:	ff 90       	pop	r15
    4a52:	ef 90       	pop	r14
    4a54:	df 90       	pop	r13
    4a56:	cf 90       	pop	r12
    4a58:	bf 90       	pop	r11
    4a5a:	af 90       	pop	r10
    4a5c:	9f 90       	pop	r9
    4a5e:	8f 90       	pop	r8
    4a60:	7f 90       	pop	r7
    4a62:	6f 90       	pop	r6
    4a64:	5f 90       	pop	r5
    4a66:	4f 90       	pop	r4
    4a68:	3f 90       	pop	r3
    4a6a:	2f 90       	pop	r2
    4a6c:	08 95       	ret

00004a6e <_ZN6Anchor14resetAnchorBoxEff>:

void Anchor::resetAnchorBox(float laty, float lonx) {
    4a6e:	8f 92       	push	r8
    4a70:	9f 92       	push	r9
    4a72:	af 92       	push	r10
    4a74:	bf 92       	push	r11
    4a76:	cf 92       	push	r12
    4a78:	df 92       	push	r13
    4a7a:	ef 92       	push	r14
    4a7c:	ff 92       	push	r15
    4a7e:	0f 93       	push	r16
    4a80:	1f 93       	push	r17
    4a82:	cf 93       	push	r28
    4a84:	df 93       	push	r29
    4a86:	ec 01       	movw	r28, r24
    4a88:	6a 01       	movw	r12, r20
    4a8a:	7b 01       	movw	r14, r22
    4a8c:	48 01       	movw	r8, r16
    4a8e:	59 01       	movw	r10, r18
	model->setAnchorN(90.0);
    4a90:	40 e0       	ldi	r20, 0x00	; 0
    4a92:	50 e0       	ldi	r21, 0x00	; 0
    4a94:	64 eb       	ldi	r22, 0xB4	; 180
    4a96:	72 e4       	ldi	r23, 0x42	; 66
    4a98:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9c:	0e 94 e3 2c 	call	0x59c6	; 0x59c6 <_ZN14FreeBoardModel10setAnchorNEf>
	model->setAnchorS(-90.0);
    4aa0:	40 e0       	ldi	r20, 0x00	; 0
    4aa2:	50 e0       	ldi	r21, 0x00	; 0
    4aa4:	64 eb       	ldi	r22, 0xB4	; 180
    4aa6:	72 ec       	ldi	r23, 0xC2	; 194
    4aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aaa:	9b 81       	ldd	r25, Y+3	; 0x03
    4aac:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <_ZN14FreeBoardModel10setAnchorSEf>
	model->setAnchorE(180.0);
    4ab0:	40 e0       	ldi	r20, 0x00	; 0
    4ab2:	50 e0       	ldi	r21, 0x00	; 0
    4ab4:	64 e3       	ldi	r22, 0x34	; 52
    4ab6:	73 e4       	ldi	r23, 0x43	; 67
    4ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aba:	9b 81       	ldd	r25, Y+3	; 0x03
    4abc:	0e 94 c7 2c 	call	0x598e	; 0x598e <_ZN14FreeBoardModel10setAnchorEEf>
	model->setAnchorW(-180.0);
    4ac0:	40 e0       	ldi	r20, 0x00	; 0
    4ac2:	50 e0       	ldi	r21, 0x00	; 0
    4ac4:	64 e3       	ldi	r22, 0x34	; 52
    4ac6:	73 ec       	ldi	r23, 0xC3	; 195
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	9b 81       	ldd	r25, Y+3	; 0x03
    4acc:	0e 94 fd 2c 	call	0x59fa	; 0x59fa <_ZN14FreeBoardModel10setAnchorWEf>
	model->setAnchorRadiusDeg(model->getAnchorRadius() * LLMTRS);
    4ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad4:	0e 94 96 2a 	call	0x552c	; 0x552c <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4ad8:	2d e9       	ldi	r18, 0x9D	; 157
    4ada:	3b ef       	ldi	r19, 0xFB	; 251
    4adc:	46 e1       	ldi	r20, 0x16	; 22
    4ade:	57 e3       	ldi	r21, 0x37	; 55
    4ae0:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    4ae4:	ab 01       	movw	r20, r22
    4ae6:	bc 01       	movw	r22, r24
    4ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aea:	9b 81       	ldd	r25, Y+3	; 0x03
    4aec:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <_ZN14FreeBoardModel18setAnchorRadiusDegEf>
	updateAnchorBox(laty, lonx);
    4af0:	95 01       	movw	r18, r10
    4af2:	84 01       	movw	r16, r8
    4af4:	b7 01       	movw	r22, r14
    4af6:	a6 01       	movw	r20, r12
    4af8:	ce 01       	movw	r24, r28
    4afa:	0e 94 d6 23 	call	0x47ac	; 0x47ac <_ZN6Anchor15updateAnchorBoxEff>
}
    4afe:	df 91       	pop	r29
    4b00:	cf 91       	pop	r28
    4b02:	1f 91       	pop	r17
    4b04:	0f 91       	pop	r16
    4b06:	ff 90       	pop	r15
    4b08:	ef 90       	pop	r14
    4b0a:	df 90       	pop	r13
    4b0c:	cf 90       	pop	r12
    4b0e:	bf 90       	pop	r11
    4b10:	af 90       	pop	r10
    4b12:	9f 90       	pop	r9
    4b14:	8f 90       	pop	r8
    4b16:	08 95       	ret

00004b18 <_ZN6AnchorC1EP14FreeBoardModel>:

#include "Anchor.h"



Anchor::Anchor(FreeBoardModel* model) {
    4b18:	cf 92       	push	r12
    4b1a:	df 92       	push	r13
    4b1c:	ef 92       	push	r14
    4b1e:	ff 92       	push	r15
    4b20:	0f 93       	push	r16
    4b22:	1f 93       	push	r17
    4b24:	cf 93       	push	r28
    4b26:	df 93       	push	r29
    4b28:	00 d0       	rcall	.+0      	; 0x4b2a <_ZN6AnchorC1EP14FreeBoardModel+0x12>
    4b2a:	cd b7       	in	r28, 0x3d	; 61
    4b2c:	de b7       	in	r29, 0x3e	; 62
    4b2e:	6c 01       	movw	r12, r24
    4b30:	7b 01       	movw	r14, r22
    4b32:	80 e3       	ldi	r24, 0x30	; 48
    4b34:	92 e0       	ldi	r25, 0x02	; 2
    4b36:	f6 01       	movw	r30, r12
    4b38:	91 83       	std	Z+1, r25	; 0x01
    4b3a:	80 83       	st	Z, r24


	this->model=model;
    4b3c:	73 83       	std	Z+3, r23	; 0x03
    4b3e:	62 83       	std	Z+2, r22	; 0x02
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
    4b40:	cb 01       	movw	r24, r22
    4b42:	0e 94 76 2a 	call	0x54ec	; 0x54ec <_ZN14FreeBoardModel12getAnchorLonEv>
    4b46:	8b 01       	movw	r16, r22
    4b48:	9c 01       	movw	r18, r24
    4b4a:	c7 01       	movw	r24, r14
    4b4c:	29 83       	std	Y+1, r18	; 0x01
    4b4e:	3a 83       	std	Y+2, r19	; 0x02
    4b50:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <_ZN14FreeBoardModel12getAnchorLatEv>
    4b54:	ab 01       	movw	r20, r22
    4b56:	bc 01       	movw	r22, r24
    4b58:	29 81       	ldd	r18, Y+1	; 0x01
    4b5a:	3a 81       	ldd	r19, Y+2	; 0x02
    4b5c:	c6 01       	movw	r24, r12
    4b5e:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <_ZN6Anchor14resetAnchorBoxEff>
}
    4b62:	0f 90       	pop	r0
    4b64:	0f 90       	pop	r0
    4b66:	df 91       	pop	r29
    4b68:	cf 91       	pop	r28
    4b6a:	1f 91       	pop	r17
    4b6c:	0f 91       	pop	r16
    4b6e:	ff 90       	pop	r15
    4b70:	ef 90       	pop	r14
    4b72:	df 90       	pop	r13
    4b74:	cf 90       	pop	r12
    4b76:	08 95       	ret

00004b78 <_ZN6Anchor11checkAnchorEv>:
		model->setAnchorW(model->getAnchorW() - change);

	}
}
/*calc all params, and set alarm buzzer state*/
void Anchor::checkAnchor() {
    4b78:	8f 92       	push	r8
    4b7a:	9f 92       	push	r9
    4b7c:	af 92       	push	r10
    4b7e:	bf 92       	push	r11
    4b80:	cf 92       	push	r12
    4b82:	df 92       	push	r13
    4b84:	ef 92       	push	r14
    4b86:	ff 92       	push	r15
    4b88:	0f 93       	push	r16
    4b8a:	1f 93       	push	r17
    4b8c:	cf 93       	push	r28
    4b8e:	df 93       	push	r29
    4b90:	00 d0       	rcall	.+0      	; 0x4b92 <_ZN6Anchor11checkAnchorEv+0x1a>
    4b92:	00 d0       	rcall	.+0      	; 0x4b94 <_ZN6Anchor11checkAnchorEv+0x1c>
    4b94:	cd b7       	in	r28, 0x3d	; 61
    4b96:	de b7       	in	r29, 0x3e	; 62
    4b98:	4c 01       	movw	r8, r24

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	82 81       	ldd	r24, Z+2	; 0x02
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4ba4:	88 23       	and	r24, r24
    4ba6:	09 f4       	brne	.+2      	; 0x4baa <_ZN6Anchor11checkAnchorEv+0x32>
    4ba8:	cf c0       	rjmp	.+414    	; 0x4d48 <_ZN6Anchor11checkAnchorEv+0x1d0>
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4baa:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    4bae:	6b 01       	movw	r12, r22
    4bb0:	7c 01       	movw	r14, r24
    4bb2:	f4 01       	movw	r30, r8
    4bb4:	82 81       	ldd	r24, Z+2	; 0x02
    4bb6:	93 81       	ldd	r25, Z+3	; 0x03
    4bb8:	0e 94 3d 2c 	call	0x587a	; 0x587a <_ZN14FreeBoardModel13getGpsLastFixEv>
    4bbc:	c6 1a       	sub	r12, r22
    4bbe:	d7 0a       	sbc	r13, r23
    4bc0:	e8 0a       	sbc	r14, r24
    4bc2:	f9 0a       	sbc	r15, r25
    4bc4:	f1 ee       	ldi	r31, 0xE1	; 225
    4bc6:	cf 16       	cp	r12, r31
    4bc8:	f3 e9       	ldi	r31, 0x93	; 147
    4bca:	df 06       	cpc	r13, r31
    4bcc:	f4 e0       	ldi	r31, 0x04	; 4
    4bce:	ef 06       	cpc	r14, r31
    4bd0:	f1 04       	cpc	r15, r1
    4bd2:	38 f0       	brcs	.+14     	; 0x4be2 <_ZN6Anchor11checkAnchorEv+0x6a>
				&& model->isAnchorAlarmOn()) {
    4bd4:	f4 01       	movw	r30, r8
    4bd6:	82 81       	ldd	r24, Z+2	; 0x02
    4bd8:	93 81       	ldd	r25, Z+3	; 0x03
    4bda:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN14FreeBoardModel15isAnchorAlarmOnEv>

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4bde:	81 11       	cpse	r24, r1
    4be0:	84 c0       	rjmp	.+264    	; 0x4cea <_ZN6Anchor11checkAnchorEv+0x172>
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
			model->setAnchorAlarmTriggered(true);
		}
		//now check position
		if (model->getGpsStatus()) {
    4be2:	f4 01       	movw	r30, r8
    4be4:	82 81       	ldd	r24, Z+2	; 0x02
    4be6:	93 81       	ldd	r25, Z+3	; 0x03
    4be8:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <_ZN14FreeBoardModel12getGpsStatusEv>
    4bec:	88 23       	and	r24, r24
    4bee:	09 f4       	brne	.+2      	; 0x4bf2 <_ZN6Anchor11checkAnchorEv+0x7a>
    4bf0:	ab c0       	rjmp	.+342    	; 0x4d48 <_ZN6Anchor11checkAnchorEv+0x1d0>
			model->setAnchorDistance(Gps::getMetersTo(model->getAnchorLat(), model->getAnchorLon(),model->getGpsLatitude(),model->getGpsLongitude()));
    4bf2:	f4 01       	movw	r30, r8
    4bf4:	82 81       	ldd	r24, Z+2	; 0x02
    4bf6:	93 81       	ldd	r25, Z+3	; 0x03
    4bf8:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4bfc:	5b 01       	movw	r10, r22
    4bfe:	6c 01       	movw	r12, r24
    4c00:	f4 01       	movw	r30, r8
    4c02:	82 81       	ldd	r24, Z+2	; 0x02
    4c04:	93 81       	ldd	r25, Z+3	; 0x03
    4c06:	0e 94 45 2c 	call	0x588a	; 0x588a <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4c0a:	7b 01       	movw	r14, r22
    4c0c:	8c 01       	movw	r16, r24
    4c0e:	f4 01       	movw	r30, r8
    4c10:	82 81       	ldd	r24, Z+2	; 0x02
    4c12:	93 81       	ldd	r25, Z+3	; 0x03
    4c14:	0e 94 76 2a 	call	0x54ec	; 0x54ec <_ZN14FreeBoardModel12getAnchorLonEv>
    4c18:	9b 01       	movw	r18, r22
    4c1a:	ac 01       	movw	r20, r24
    4c1c:	f4 01       	movw	r30, r8
    4c1e:	82 81       	ldd	r24, Z+2	; 0x02
    4c20:	93 81       	ldd	r25, Z+3	; 0x03
    4c22:	2b 83       	std	Y+3, r18	; 0x03
    4c24:	3c 83       	std	Y+4, r19	; 0x04
    4c26:	49 83       	std	Y+1, r20	; 0x01
    4c28:	5a 83       	std	Y+2, r21	; 0x02
    4c2a:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <_ZN14FreeBoardModel12getAnchorLatEv>
    4c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    4c30:	3c 81       	ldd	r19, Y+4	; 0x04
    4c32:	49 81       	ldd	r20, Y+1	; 0x01
    4c34:	5a 81       	ldd	r21, Y+2	; 0x02
    4c36:	0e 94 41 34 	call	0x6882	; 0x6882 <_ZN3Gps11getMetersToEffff>
    4c3a:	ab 01       	movw	r20, r22
    4c3c:	bc 01       	movw	r22, r24
    4c3e:	f4 01       	movw	r30, r8
    4c40:	82 81       	ldd	r24, Z+2	; 0x02
    4c42:	93 81       	ldd	r25, Z+3	; 0x03
    4c44:	0e 94 c1 2c 	call	0x5982	; 0x5982 <_ZN14FreeBoardModel17setAnchorDistanceEf>
			if (model->getAnchorDistance() > model->getAnchorMaxDistance())
    4c48:	f4 01       	movw	r30, r8
    4c4a:	82 81       	ldd	r24, Z+2	; 0x02
    4c4c:	93 81       	ldd	r25, Z+3	; 0x03
    4c4e:	0e 94 56 2a 	call	0x54ac	; 0x54ac <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4c52:	6b 01       	movw	r12, r22
    4c54:	7c 01       	movw	r14, r24
    4c56:	f4 01       	movw	r30, r8
    4c58:	82 81       	ldd	r24, Z+2	; 0x02
    4c5a:	93 81       	ldd	r25, Z+3	; 0x03
    4c5c:	0e 94 82 2a 	call	0x5504	; 0x5504 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>
    4c60:	9b 01       	movw	r18, r22
    4c62:	ac 01       	movw	r20, r24
    4c64:	c7 01       	movw	r24, r14
    4c66:	b6 01       	movw	r22, r12
    4c68:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    4c6c:	18 16       	cp	r1, r24
    4c6e:	64 f4       	brge	.+24     	; 0x4c88 <_ZN6Anchor11checkAnchorEv+0x110>
				model->setAnchorMaxDistance(model->getAnchorDistance());
    4c70:	f4 01       	movw	r30, r8
    4c72:	82 81       	ldd	r24, Z+2	; 0x02
    4c74:	93 81       	ldd	r25, Z+3	; 0x03
    4c76:	0e 94 56 2a 	call	0x54ac	; 0x54ac <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4c7a:	ab 01       	movw	r20, r22
    4c7c:	bc 01       	movw	r22, r24
    4c7e:	f4 01       	movw	r30, r8
    4c80:	82 81       	ldd	r24, Z+2	; 0x02
    4c82:	93 81       	ldd	r25, Z+3	; 0x03
    4c84:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

			//update the anchor box
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());
    4c88:	f4 01       	movw	r30, r8
    4c8a:	82 81       	ldd	r24, Z+2	; 0x02
    4c8c:	93 81       	ldd	r25, Z+3	; 0x03
    4c8e:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4c92:	8b 01       	movw	r16, r22
    4c94:	9c 01       	movw	r18, r24
    4c96:	f4 01       	movw	r30, r8
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    4c9a:	93 81       	ldd	r25, Z+3	; 0x03
    4c9c:	2b 83       	std	Y+3, r18	; 0x03
    4c9e:	3c 83       	std	Y+4, r19	; 0x04
    4ca0:	0e 94 45 2c 	call	0x588a	; 0x588a <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4ca4:	ab 01       	movw	r20, r22
    4ca6:	bc 01       	movw	r22, r24
    4ca8:	2b 81       	ldd	r18, Y+3	; 0x03
    4caa:	3c 81       	ldd	r19, Y+4	; 0x04
    4cac:	c4 01       	movw	r24, r8
    4cae:	0e 94 d6 23 	call	0x47ac	; 0x47ac <_ZN6Anchor15updateAnchorBoxEff>

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
    4cb2:	f4 01       	movw	r30, r8
    4cb4:	82 81       	ldd	r24, Z+2	; 0x02
    4cb6:	93 81       	ldd	r25, Z+3	; 0x03
    4cb8:	0e 94 9e 2c 	call	0x593c	; 0x593c <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4cbc:	88 23       	and	r24, r24
    4cbe:	71 f1       	breq	.+92     	; 0x4d1c <_ZN6Anchor11checkAnchorEv+0x1a4>
    4cc0:	f4 01       	movw	r30, r8
    4cc2:	82 81       	ldd	r24, Z+2	; 0x02
    4cc4:	93 81       	ldd	r25, Z+3	; 0x03
    4cc6:	0e 94 56 2a 	call	0x54ac	; 0x54ac <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4cca:	6b 01       	movw	r12, r22
    4ccc:	7c 01       	movw	r14, r24
    4cce:	f4 01       	movw	r30, r8
    4cd0:	82 81       	ldd	r24, Z+2	; 0x02
    4cd2:	93 81       	ldd	r25, Z+3	; 0x03
    4cd4:	0e 94 96 2a 	call	0x552c	; 0x552c <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4cd8:	9b 01       	movw	r18, r22
    4cda:	ac 01       	movw	r20, r24
    4cdc:	c7 01       	movw	r24, r14
    4cde:	b6 01       	movw	r22, r12
    4ce0:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    4ce4:	18 16       	cp	r1, r24
    4ce6:	84 f0       	brlt	.+32     	; 0x4d08 <_ZN6Anchor11checkAnchorEv+0x190>
    4ce8:	19 c0       	rjmp	.+50     	; 0x4d1c <_ZN6Anchor11checkAnchorEv+0x1a4>
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
    4cea:	40 e0       	ldi	r20, 0x00	; 0
    4cec:	50 e0       	ldi	r21, 0x00	; 0
    4cee:	ba 01       	movw	r22, r20
    4cf0:	f4 01       	movw	r30, r8
    4cf2:	82 81       	ldd	r24, Z+2	; 0x02
    4cf4:	93 81       	ldd	r25, Z+3	; 0x03
    4cf6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
			model->setAnchorAlarmTriggered(true);
    4cfa:	61 e0       	ldi	r22, 0x01	; 1
    4cfc:	f4 01       	movw	r30, r8
    4cfe:	82 81       	ldd	r24, Z+2	; 0x02
    4d00:	93 81       	ldd	r25, Z+3	; 0x03
    4d02:	0e 94 be 2c 	call	0x597c	; 0x597c <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
    4d06:	6d cf       	rjmp	.-294    	; 0x4be2 <_ZN6Anchor11checkAnchorEv+0x6a>
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
    4d08:	40 e0       	ldi	r20, 0x00	; 0
    4d0a:	50 e0       	ldi	r21, 0x00	; 0
    4d0c:	ba 01       	movw	r22, r20
    4d0e:	f4 01       	movw	r30, r8
    4d10:	82 81       	ldd	r24, Z+2	; 0x02
    4d12:	93 81       	ldd	r25, Z+3	; 0x03
    4d14:	0e 94 b3 2c 	call	0x5966	; 0x5966 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
				model->setAnchorAlarmTriggered(true);
    4d18:	61 e0       	ldi	r22, 0x01	; 1
    4d1a:	01 c0       	rjmp	.+2      	; 0x4d1e <_ZN6Anchor11checkAnchorEv+0x1a6>
			} else {
				model->setAnchorAlarmTriggered(false);
    4d1c:	60 e0       	ldi	r22, 0x00	; 0
    4d1e:	f4 01       	movw	r30, r8
    4d20:	82 81       	ldd	r24, Z+2	; 0x02
    4d22:	93 81       	ldd	r25, Z+3	; 0x03
			}
		}
	}

}
    4d24:	0f 90       	pop	r0
    4d26:	0f 90       	pop	r0
    4d28:	0f 90       	pop	r0
    4d2a:	0f 90       	pop	r0
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	1f 91       	pop	r17
    4d32:	0f 91       	pop	r16
    4d34:	ff 90       	pop	r15
    4d36:	ef 90       	pop	r14
    4d38:	df 90       	pop	r13
    4d3a:	cf 90       	pop	r12
    4d3c:	bf 90       	pop	r11
    4d3e:	af 90       	pop	r10
    4d40:	9f 90       	pop	r9
    4d42:	8f 90       	pop	r8
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
				model->setAnchorAlarmTriggered(true);
			} else {
				model->setAnchorAlarmTriggered(false);
    4d44:	0c 94 be 2c 	jmp	0x597c	; 0x597c <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
			}
		}
	}

}
    4d48:	0f 90       	pop	r0
    4d4a:	0f 90       	pop	r0
    4d4c:	0f 90       	pop	r0
    4d4e:	0f 90       	pop	r0
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	1f 91       	pop	r17
    4d56:	0f 91       	pop	r16
    4d58:	ff 90       	pop	r15
    4d5a:	ef 90       	pop	r14
    4d5c:	df 90       	pop	r13
    4d5e:	cf 90       	pop	r12
    4d60:	bf 90       	pop	r11
    4d62:	af 90       	pop	r10
    4d64:	9f 90       	pop	r9
    4d66:	8f 90       	pop	r8
    4d68:	08 95       	ret

00004d6a <_ZN6Anchor14setAnchorPointEv>:

/*Set anchor position*/
void Anchor::setAnchorPoint() {
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	ec 01       	movw	r28, r24
	model->setAnchorLat(model->getGpsLatitude());
    4d70:	8a 81       	ldd	r24, Y+2	; 0x02
    4d72:	9b 81       	ldd	r25, Y+3	; 0x03
    4d74:	0e 94 45 2c 	call	0x588a	; 0x588a <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4d78:	ab 01       	movw	r20, r22
    4d7a:	bc 01       	movw	r22, r24
    4d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d80:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN14FreeBoardModel12setAnchorLatEf>
	model->setAnchorLon(model->getGpsLongitude());
    4d84:	8a 81       	ldd	r24, Y+2	; 0x02
    4d86:	9b 81       	ldd	r25, Y+3	; 0x03
    4d88:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4d8c:	ab 01       	movw	r20, r22
    4d8e:	bc 01       	movw	r22, r24
    4d90:	8a 81       	ldd	r24, Y+2	; 0x02
    4d92:	9b 81       	ldd	r25, Y+3	; 0x03
    4d94:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <_ZN14FreeBoardModel12setAnchorLonEf>
	model->setAnchorMaxDistance(0);
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	50 e0       	ldi	r21, 0x00	; 0
    4d9c:	ba 01       	movw	r22, r20
    4d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4da0:	9b 81       	ldd	r25, Y+3	; 0x03

}
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28

/*Set anchor position*/
void Anchor::setAnchorPoint() {
	model->setAnchorLat(model->getGpsLatitude());
	model->setAnchorLon(model->getGpsLongitude());
	model->setAnchorMaxDistance(0);
    4da6:	0c 94 dd 2c 	jmp	0x59ba	; 0x59ba <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

00004daa <_ZN9AutopilotC1EP14FreeBoardModel>:
 * And lastly, if the second you enable the controller the output goes in the wrong direction and pegs at 0 or 100%, you've got the sign of the P_Param wrong.
 * That is, if you've got a 3 in there, make it -3.
 */
#include "Autopilot.h"

Autopilot::Autopilot(FreeBoardModel* model) {
    4daa:	6f 92       	push	r6
    4dac:	7f 92       	push	r7
    4dae:	8f 92       	push	r8
    4db0:	9f 92       	push	r9
    4db2:	af 92       	push	r10
    4db4:	bf 92       	push	r11
    4db6:	cf 92       	push	r12
    4db8:	df 92       	push	r13
    4dba:	ef 92       	push	r14
    4dbc:	ff 92       	push	r15
    4dbe:	0f 93       	push	r16
    4dc0:	1f 93       	push	r17
    4dc2:	cf 93       	push	r28
    4dc4:	df 93       	push	r29
    4dc6:	cd b7       	in	r28, 0x3d	; 61
    4dc8:	de b7       	in	r29, 0x3e	; 62
    4dca:	e7 97       	sbiw	r28, 0x37	; 55
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
    4dd6:	4c 01       	movw	r8, r24
    4dd8:	8b 01       	movw	r16, r22
    4dda:	3c 01       	movw	r6, r24
    4ddc:	83 e1       	ldi	r24, 0x13	; 19
    4dde:	68 0e       	add	r6, r24
    4de0:	71 1c       	adc	r7, r1
    4de2:	c3 01       	movw	r24, r6
    4de4:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <_ZN3PIDC1Ev>
	this->model = model;
    4de8:	f4 01       	movw	r30, r8
    4dea:	12 8b       	std	Z+18, r17	; 0x12
    4dec:	01 8b       	std	Z+17, r16	; 0x11
	autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    4dee:	c8 01       	movw	r24, r16
    4df0:	0e 94 ca 2a 	call	0x5594	; 0x5594 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    4df4:	20 e0       	ldi	r18, 0x00	; 0
    4df6:	30 e0       	ldi	r19, 0x00	; 0
    4df8:	44 e3       	ldi	r20, 0x34	; 52
    4dfa:	54 e4       	ldi	r21, 0x44	; 68
    4dfc:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    4e00:	6b 01       	movw	r12, r22
    4e02:	7c 01       	movw	r14, r24
    4e04:	98 2f       	mov	r25, r24
    4e06:	4c 2d       	mov	r20, r12
    4e08:	5d 2d       	mov	r21, r13
    4e0a:	69 2f       	mov	r22, r25
    4e0c:	7f 2d       	mov	r23, r15
    4e0e:	f4 01       	movw	r30, r8
    4e10:	40 83       	st	Z, r20
    4e12:	51 83       	std	Z+1, r21	; 0x01
    4e14:	62 83       	std	Z+2, r22	; 0x02
    4e16:	73 83       	std	Z+3, r23	; 0x03
	autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    4e18:	c8 01       	movw	r24, r16
    4e1a:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    4e1e:	9b 01       	movw	r18, r22
    4e20:	ac 01       	movw	r20, r24
    4e22:	6c 2d       	mov	r22, r12
    4e24:	7d 2d       	mov	r23, r13
    4e26:	8e 2d       	mov	r24, r14
    4e28:	9f 2d       	mov	r25, r15
    4e2a:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    4e2e:	f4 01       	movw	r30, r8
    4e30:	64 83       	std	Z+4, r22	; 0x04
    4e32:	75 83       	std	Z+5, r23	; 0x05
    4e34:	86 83       	std	Z+6, r24	; 0x06
    4e36:	97 83       	std	Z+7, r25	; 0x07
	autopilotRudderCommand = model->getAutopilotRudderCommand();
    4e38:	c8 01       	movw	r24, r16
    4e3a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    4e3e:	f4 01       	movw	r30, r8
    4e40:	60 87       	std	Z+8, r22	; 0x08
    4e42:	71 87       	std	Z+9, r23	; 0x09
    4e44:	82 87       	std	Z+10, r24	; 0x0a
    4e46:	93 87       	std	Z+11, r25	; 0x0b
	lastDirection=true;
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	80 8b       	std	Z+16, r24	; 0x10
	this->headingPid = PID(&autopilotCurrentHeading, &autopilotRudderCommand, &autopilotTargetHeading, P_Param, I_Param, D_Param, REVERSE);
    4e4c:	a4 01       	movw	r20, r8
    4e4e:	48 5f       	subi	r20, 0xF8	; 248
    4e50:	5f 4f       	sbci	r21, 0xFF	; 255
    4e52:	b4 01       	movw	r22, r8
    4e54:	6c 5f       	subi	r22, 0xFC	; 252
    4e56:	7f 4f       	sbci	r23, 0xFF	; 255
    4e58:	1f 92       	push	r1
    4e5a:	8f 93       	push	r24
    4e5c:	8f e3       	ldi	r24, 0x3F	; 63
    4e5e:	8f 93       	push	r24
    4e60:	85 e0       	ldi	r24, 0x05	; 5
    4e62:	8f 93       	push	r24
    4e64:	8e e1       	ldi	r24, 0x1E	; 30
    4e66:	8f 93       	push	r24
    4e68:	88 eb       	ldi	r24, 0xB8	; 184
    4e6a:	8f 93       	push	r24
    4e6c:	8a e0       	ldi	r24, 0x0A	; 10
    4e6e:	a8 2e       	mov	r10, r24
    4e70:	87 ed       	ldi	r24, 0xD7	; 215
    4e72:	b8 2e       	mov	r11, r24
    4e74:	83 ea       	ldi	r24, 0xA3	; 163
    4e76:	c8 2e       	mov	r12, r24
    4e78:	8d e3       	ldi	r24, 0x3D	; 61
    4e7a:	d8 2e       	mov	r13, r24
    4e7c:	16 e6       	ldi	r17, 0x66	; 102
    4e7e:	e1 2e       	mov	r14, r17
    4e80:	fe 2c       	mov	r15, r14
    4e82:	06 ee       	ldi	r16, 0xE6	; 230
    4e84:	1e e3       	ldi	r17, 0x3E	; 62
    4e86:	94 01       	movw	r18, r8
    4e88:	ce 01       	movw	r24, r28
    4e8a:	01 96       	adiw	r24, 0x01	; 1
    4e8c:	0e 94 39 1b 	call	0x3672	; 0x3672 <_ZN3PIDC1EPdS0_S0_dddi>
    4e90:	87 e3       	ldi	r24, 0x37	; 55
    4e92:	fe 01       	movw	r30, r28
    4e94:	31 96       	adiw	r30, 0x01	; 1
    4e96:	d3 01       	movw	r26, r6
    4e98:	01 90       	ld	r0, Z+
    4e9a:	0d 92       	st	X+, r0
    4e9c:	8a 95       	dec	r24
    4e9e:	e1 f7       	brne	.-8      	; 0x4e98 <_ZN9AutopilotC1EP14FreeBoardModel+0xee>

	headingPid.SetOutputLimits(0.0, 66.0); //output limits
    4ea0:	00 e0       	ldi	r16, 0x00	; 0
    4ea2:	10 e0       	ldi	r17, 0x00	; 0
    4ea4:	24 e8       	ldi	r18, 0x84	; 132
    4ea6:	32 e4       	ldi	r19, 0x42	; 66
    4ea8:	40 e0       	ldi	r20, 0x00	; 0
    4eaa:	50 e0       	ldi	r21, 0x00	; 0
    4eac:	ba 01       	movw	r22, r20
    4eae:	c3 01       	movw	r24, r6
    4eb0:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN3PID15SetOutputLimitsEdd>
	headingPid.SetSampleTime(100);
    4eb4:	64 e6       	ldi	r22, 0x64	; 100
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	c3 01       	movw	r24, r6
    4eba:	0e 94 d6 19 	call	0x33ac	; 0x33ac <_ZN3PID13SetSampleTimeEi>
    4ebe:	0f 90       	pop	r0
    4ec0:	0f 90       	pop	r0
    4ec2:	0f 90       	pop	r0
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0

}
    4eca:	e7 96       	adiw	r28, 0x37	; 55
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	f8 94       	cli
    4ed0:	de bf       	out	0x3e, r29	; 62
    4ed2:	0f be       	out	0x3f, r0	; 63
    4ed4:	cd bf       	out	0x3d, r28	; 61
    4ed6:	df 91       	pop	r29
    4ed8:	cf 91       	pop	r28
    4eda:	1f 91       	pop	r17
    4edc:	0f 91       	pop	r16
    4ede:	ff 90       	pop	r15
    4ee0:	ef 90       	pop	r14
    4ee2:	df 90       	pop	r13
    4ee4:	cf 90       	pop	r12
    4ee6:	bf 90       	pop	r11
    4ee8:	af 90       	pop	r10
    4eea:	9f 90       	pop	r9
    4eec:	8f 90       	pop	r8
    4eee:	7f 90       	pop	r7
    4ef0:	6f 90       	pop	r6
    4ef2:	08 95       	ret

00004ef4 <_ZN9AutopilotD1Ev>:
Autopilot::~Autopilot() {
    4ef4:	08 95       	ret

00004ef6 <_ZN9Autopilot13calcAutoPilotEv>:

}

void Autopilot::calcAutoPilot() {
    4ef6:	8f 92       	push	r8
    4ef8:	9f 92       	push	r9
    4efa:	af 92       	push	r10
    4efc:	bf 92       	push	r11
    4efe:	cf 92       	push	r12
    4f00:	df 92       	push	r13
    4f02:	ef 92       	push	r14
    4f04:	ff 92       	push	r15
    4f06:	0f 93       	push	r16
    4f08:	1f 93       	push	r17
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
    4f0e:	ec 01       	movw	r28, r24
	//we dont do this if the autopilot is MANUAL
	if (model->isAutopilotOn()) {
    4f10:	89 89       	ldd	r24, Y+17	; 0x11
    4f12:	9a 89       	ldd	r25, Y+18	; 0x12
    4f14:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <_ZN14FreeBoardModel13isAutopilotOnEv>
    4f18:	8e 01       	movw	r16, r28
    4f1a:	0d 5e       	subi	r16, 0xED	; 237
    4f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f1e:	88 23       	and	r24, r24
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <_ZN9Autopilot13calcAutoPilotEv+0x2e>
    4f22:	cd c0       	rjmp	.+410    	; 0x50be <_ZN9Autopilot13calcAutoPilotEv+0x1c8>
		//does nothing if its already on, inits if off
		headingPid.SetMode(AUTOMATIC);
    4f24:	61 e0       	ldi	r22, 0x01	; 1
    4f26:	70 e0       	ldi	r23, 0x00	; 0
    4f28:	c8 01       	movw	r24, r16
    4f2a:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN3PID7SetModeEi>
		autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    4f2e:	89 89       	ldd	r24, Y+17	; 0x11
    4f30:	9a 89       	ldd	r25, Y+18	; 0x12
    4f32:	0e 94 ca 2a 	call	0x5594	; 0x5594 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    4f36:	20 e0       	ldi	r18, 0x00	; 0
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	44 e3       	ldi	r20, 0x34	; 52
    4f3c:	54 e4       	ldi	r21, 0x44	; 68
    4f3e:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    4f42:	6b 01       	movw	r12, r22
    4f44:	7c 01       	movw	r14, r24
    4f46:	98 2f       	mov	r25, r24
    4f48:	4c 2d       	mov	r20, r12
    4f4a:	5d 2d       	mov	r21, r13
    4f4c:	69 2f       	mov	r22, r25
    4f4e:	7f 2d       	mov	r23, r15
    4f50:	48 83       	st	Y, r20
    4f52:	59 83       	std	Y+1, r21	; 0x01
    4f54:	6a 83       	std	Y+2, r22	; 0x02
    4f56:	7b 83       	std	Y+3, r23	; 0x03
		autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    4f58:	89 89       	ldd	r24, Y+17	; 0x11
    4f5a:	9a 89       	ldd	r25, Y+18	; 0x12
    4f5c:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    4f60:	9b 01       	movw	r18, r22
    4f62:	ac 01       	movw	r20, r24
    4f64:	6c 2d       	mov	r22, r12
    4f66:	7d 2d       	mov	r23, r13
    4f68:	8e 2d       	mov	r24, r14
    4f6a:	9f 2d       	mov	r25, r15
    4f6c:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    4f70:	6c 83       	std	Y+4, r22	; 0x04
    4f72:	7d 83       	std	Y+5, r23	; 0x05
    4f74:	8e 83       	std	Y+6, r24	; 0x06
    4f76:	9f 83       	std	Y+7, r25	; 0x07
		headingPid.Compute();
    4f78:	c8 01       	movw	r24, r16
    4f7a:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN3PID7ComputeEv>
		//check deadzone
		if (abs(autopilotRudderCommand - lastRudderCommand) > model->getAutopilotDeadZone()) {
    4f7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f80:	3d 85       	ldd	r19, Y+13	; 0x0d
    4f82:	4e 85       	ldd	r20, Y+14	; 0x0e
    4f84:	5f 85       	ldd	r21, Y+15	; 0x0f
    4f86:	68 85       	ldd	r22, Y+8	; 0x08
    4f88:	79 85       	ldd	r23, Y+9	; 0x09
    4f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f8e:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    4f92:	b6 2f       	mov	r27, r22
    4f94:	a7 2f       	mov	r26, r23
    4f96:	46 2f       	mov	r20, r22
    4f98:	57 2f       	mov	r21, r23
    4f9a:	68 2f       	mov	r22, r24
    4f9c:	79 2f       	mov	r23, r25
    4f9e:	4a 01       	movw	r8, r20
    4fa0:	5b 01       	movw	r10, r22
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	a9 01       	movw	r20, r18
    4fa8:	6b 2f       	mov	r22, r27
    4faa:	7a 2f       	mov	r23, r26
    4fac:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    4fb0:	18 16       	cp	r1, r24
    4fb2:	24 f0       	brlt	.+8      	; 0x4fbc <_ZN9Autopilot13calcAutoPilotEv+0xc6>
    4fb4:	b7 fa       	bst	r11, 7
    4fb6:	b0 94       	com	r11
    4fb8:	b7 f8       	bld	r11, 7
    4fba:	b0 94       	com	r11
    4fbc:	89 89       	ldd	r24, Y+17	; 0x11
    4fbe:	9a 89       	ldd	r25, Y+18	; 0x12
    4fc0:	0e 94 31 2c 	call	0x5862	; 0x5862 <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>
    4fc4:	bc 01       	movw	r22, r24
    4fc6:	88 27       	eor	r24, r24
    4fc8:	77 fd       	sbrc	r23, 7
    4fca:	80 95       	com	r24
    4fcc:	98 2f       	mov	r25, r24
    4fce:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    4fd2:	9b 01       	movw	r18, r22
    4fd4:	ac 01       	movw	r20, r24
    4fd6:	c5 01       	movw	r24, r10
    4fd8:	b4 01       	movw	r22, r8
    4fda:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    4fde:	18 16       	cp	r1, r24
    4fe0:	0c f0       	brlt	.+2      	; 0x4fe4 <_ZN9Autopilot13calcAutoPilotEv+0xee>
    4fe2:	7e c0       	rjmp	.+252    	; 0x50e0 <_ZN9Autopilot13calcAutoPilotEv+0x1ea>
			//then we move the rudder.
			//is it changing movement direction, we need to compensate for slack
			if (lastDirection && autopilotRudderCommand > lastRudderCommand) {
    4fe4:	88 89       	ldd	r24, Y+16	; 0x10
    4fe6:	c8 84       	ldd	r12, Y+8	; 0x08
    4fe8:	d9 84       	ldd	r13, Y+9	; 0x09
    4fea:	ea 84       	ldd	r14, Y+10	; 0x0a
    4fec:	fb 84       	ldd	r15, Y+11	; 0x0b
    4fee:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ff0:	9d 84       	ldd	r9, Y+13	; 0x0d
    4ff2:	ae 84       	ldd	r10, Y+14	; 0x0e
    4ff4:	bf 84       	ldd	r11, Y+15	; 0x0f
    4ff6:	a5 01       	movw	r20, r10
    4ff8:	94 01       	movw	r18, r8
    4ffa:	88 23       	and	r24, r24
    4ffc:	11 f1       	breq	.+68     	; 0x5042 <_ZN9Autopilot13calcAutoPilotEv+0x14c>
    4ffe:	c7 01       	movw	r24, r14
    5000:	b6 01       	movw	r22, r12
    5002:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    5006:	18 16       	cp	r1, r24
    5008:	0c f4       	brge	.+2      	; 0x500c <_ZN9Autopilot13calcAutoPilotEv+0x116>
    500a:	21 c0       	rjmp	.+66     	; 0x504e <_ZN9Autopilot13calcAutoPilotEv+0x158>
				//same direction to stbd, no slack
				lastRudderCommand = autopilotRudderCommand;
			}else if (lastDirection && autopilotRudderCommand < lastRudderCommand) {
    500c:	a5 01       	movw	r20, r10
    500e:	94 01       	movw	r18, r8
    5010:	c7 01       	movw	r24, r14
    5012:	b6 01       	movw	r22, r12
    5014:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    5018:	87 ff       	sbrs	r24, 7
    501a:	3d c0       	rjmp	.+122    	; 0x5096 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to port, subtract slack
				lastDirection = false;
    501c:	18 8a       	std	Y+16, r1	; 0x10
				lastRudderCommand = autopilotRudderCommand - model->getAutopilotSlack();
    501e:	89 89       	ldd	r24, Y+17	; 0x11
    5020:	9a 89       	ldd	r25, Y+18	; 0x12
    5022:	0e 94 37 2c 	call	0x586e	; 0x586e <_ZN14FreeBoardModel17getAutopilotSlackEv>
    5026:	bc 01       	movw	r22, r24
    5028:	88 27       	eor	r24, r24
    502a:	77 fd       	sbrc	r23, 7
    502c:	80 95       	com	r24
    502e:	98 2f       	mov	r25, r24
    5030:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    5034:	9b 01       	movw	r18, r22
    5036:	ac 01       	movw	r20, r24
    5038:	c7 01       	movw	r24, r14
    503a:	b6 01       	movw	r22, r12
    503c:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    5040:	26 c0       	rjmp	.+76     	; 0x508e <_ZN9Autopilot13calcAutoPilotEv+0x198>
			}else if (!lastDirection && autopilotRudderCommand < lastRudderCommand) {
    5042:	c7 01       	movw	r24, r14
    5044:	b6 01       	movw	r22, r12
    5046:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    504a:	87 ff       	sbrs	r24, 7
    504c:	05 c0       	rjmp	.+10     	; 0x5058 <_ZN9Autopilot13calcAutoPilotEv+0x162>
				//same direction to port
				lastRudderCommand = autopilotRudderCommand;
    504e:	cc 86       	std	Y+12, r12	; 0x0c
    5050:	dd 86       	std	Y+13, r13	; 0x0d
    5052:	ee 86       	std	Y+14, r14	; 0x0e
    5054:	ff 86       	std	Y+15, r15	; 0x0f
    5056:	1f c0       	rjmp	.+62     	; 0x5096 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
			}else if (!lastDirection && autopilotRudderCommand > lastRudderCommand) {
    5058:	a5 01       	movw	r20, r10
    505a:	94 01       	movw	r18, r8
    505c:	c7 01       	movw	r24, r14
    505e:	b6 01       	movw	r22, r12
    5060:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    5064:	18 16       	cp	r1, r24
    5066:	bc f4       	brge	.+46     	; 0x5096 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to stbd, add slack
				lastDirection = true;
    5068:	81 e0       	ldi	r24, 0x01	; 1
    506a:	88 8b       	std	Y+16, r24	; 0x10
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
    506c:	89 89       	ldd	r24, Y+17	; 0x11
    506e:	9a 89       	ldd	r25, Y+18	; 0x12
    5070:	0e 94 37 2c 	call	0x586e	; 0x586e <_ZN14FreeBoardModel17getAutopilotSlackEv>
    5074:	bc 01       	movw	r22, r24
    5076:	88 27       	eor	r24, r24
    5078:	77 fd       	sbrc	r23, 7
    507a:	80 95       	com	r24
    507c:	98 2f       	mov	r25, r24
    507e:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    5082:	9b 01       	movw	r18, r22
    5084:	ac 01       	movw	r20, r24
    5086:	c7 01       	movw	r24, r14
    5088:	b6 01       	movw	r22, r12
    508a:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    508e:	6c 87       	std	Y+12, r22	; 0x0c
    5090:	7d 87       	std	Y+13, r23	; 0x0d
    5092:	8e 87       	std	Y+14, r24	; 0x0e
    5094:	9f 87       	std	Y+15, r25	; 0x0f
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    5096:	4c 85       	ldd	r20, Y+12	; 0x0c
    5098:	5d 85       	ldd	r21, Y+13	; 0x0d
    509a:	6e 85       	ldd	r22, Y+14	; 0x0e
    509c:	7f 85       	ldd	r23, Y+15	; 0x0f
    509e:	89 89       	ldd	r24, Y+17	; 0x11
    50a0:	9a 89       	ldd	r25, Y+18	; 0x12
		}

	} else {
		headingPid.SetMode(MANUAL);
	}
}
    50a2:	df 91       	pop	r29
    50a4:	cf 91       	pop	r28
    50a6:	1f 91       	pop	r17
    50a8:	0f 91       	pop	r16
    50aa:	ff 90       	pop	r15
    50ac:	ef 90       	pop	r14
    50ae:	df 90       	pop	r13
    50b0:	cf 90       	pop	r12
    50b2:	bf 90       	pop	r11
    50b4:	af 90       	pop	r10
    50b6:	9f 90       	pop	r9
    50b8:	8f 90       	pop	r8
				lastDirection = true;
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    50ba:	0c 94 32 2d 	jmp	0x5a64	; 0x5a64 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>
		}

	} else {
		headingPid.SetMode(MANUAL);
    50be:	60 e0       	ldi	r22, 0x00	; 0
    50c0:	70 e0       	ldi	r23, 0x00	; 0
    50c2:	c8 01       	movw	r24, r16
	}
}
    50c4:	df 91       	pop	r29
    50c6:	cf 91       	pop	r28
    50c8:	1f 91       	pop	r17
    50ca:	0f 91       	pop	r16
    50cc:	ff 90       	pop	r15
    50ce:	ef 90       	pop	r14
    50d0:	df 90       	pop	r13
    50d2:	cf 90       	pop	r12
    50d4:	bf 90       	pop	r11
    50d6:	af 90       	pop	r10
    50d8:	9f 90       	pop	r9
    50da:	8f 90       	pop	r8
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
		}

	} else {
		headingPid.SetMode(MANUAL);
    50dc:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <_ZN3PID7SetModeEi>
	}
}
    50e0:	df 91       	pop	r29
    50e2:	cf 91       	pop	r28
    50e4:	1f 91       	pop	r17
    50e6:	0f 91       	pop	r16
    50e8:	ff 90       	pop	r15
    50ea:	ef 90       	pop	r14
    50ec:	df 90       	pop	r13
    50ee:	cf 90       	pop	r12
    50f0:	bf 90       	pop	r11
    50f2:	af 90       	pop	r10
    50f4:	9f 90       	pop	r9
    50f6:	8f 90       	pop	r8
    50f8:	08 95       	ret

000050fa <_ZN14FreeBoardModelC1Ev>:
 *      Author: robert
 */

#include "FreeBoardModel.h"

FreeBoardModel::FreeBoardModel() {
    50fa:	fc 01       	movw	r30, r24
	alarmLast = 0; //millis time of last beep state change
    50fc:	10 82       	st	Z, r1
    50fe:	11 82       	std	Z+1, r1	; 0x01
    5100:	12 82       	std	Z+2, r1	; 0x02
    5102:	13 82       	std	Z+3, r1	; 0x03
	alarmSnooze = 0; //5 minute alarm snooze
    5104:	14 82       	std	Z+4, r1	; 0x04
    5106:	15 82       	std	Z+5, r1	; 0x05
    5108:	16 82       	std	Z+6, r1	; 0x06
    510a:	17 82       	std	Z+7, r1	; 0x07
	//unsigned long alarmTriggered ; //true if any alarm is triggered - derived

	//anchor
	//float anchorRadius; //anchor alarm radius in meters
	anchorState.anchorRadiusDeg = 0.0; //anchor alarm radius in decimal degrees, eg 1deg = 60NM.
    510c:	10 8a       	std	Z+16, r1	; 0x10
    510e:	11 8a       	std	Z+17, r1	; 0x11
    5110:	12 8a       	std	Z+18, r1	; 0x12
    5112:	13 8a       	std	Z+19, r1	; 0x13

	//anchor alarm data
	//float anchorLat; // variable for reading the anchor latitude
	//float anchorLon; // variable for reading the anchor longitude
	anchorState.anchorDistance = 0.0;
    5114:	14 8a       	std	Z+20, r1	; 0x14
    5116:	15 8a       	std	Z+21, r1	; 0x15
    5118:	16 8a       	std	Z+22, r1	; 0x16
    511a:	17 8a       	std	Z+23, r1	; 0x17
	anchorState.anchorMaxDistance = 0.0;
    511c:	10 8e       	std	Z+24, r1	; 0x18
    511e:	11 8e       	std	Z+25, r1	; 0x19
    5120:	12 8e       	std	Z+26, r1	; 0x1a
    5122:	13 8e       	std	Z+27, r1	; 0x1b
	//bool anchorAlarmOn; //flag to turn anchor alarm on/off toggle
	anchorState.anchorAlarmTriggered = false; //set to true to trigger anchor alarm
    5124:	14 8e       	std	Z+28, r1	; 0x1c

	//a box around the anchor, shrinks with every GPS reading to home in on the anchor itself
	anchorState.anchorN = 90.0;
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	64 eb       	ldi	r22, 0xB4	; 180
    512c:	72 e4       	ldi	r23, 0x42	; 66
    512e:	45 8f       	std	Z+29, r20	; 0x1d
    5130:	56 8f       	std	Z+30, r21	; 0x1e
    5132:	67 8f       	std	Z+31, r22	; 0x1f
    5134:	70 a3       	std	Z+32, r23	; 0x20
	anchorState.anchorS = -90.0;
    5136:	40 e0       	ldi	r20, 0x00	; 0
    5138:	50 e0       	ldi	r21, 0x00	; 0
    513a:	64 eb       	ldi	r22, 0xB4	; 180
    513c:	72 ec       	ldi	r23, 0xC2	; 194
    513e:	41 a3       	std	Z+33, r20	; 0x21
    5140:	52 a3       	std	Z+34, r21	; 0x22
    5142:	63 a3       	std	Z+35, r22	; 0x23
    5144:	74 a3       	std	Z+36, r23	; 0x24
	anchorState.anchorE = 180.0;
    5146:	40 e0       	ldi	r20, 0x00	; 0
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	64 e3       	ldi	r22, 0x34	; 52
    514c:	73 e4       	ldi	r23, 0x43	; 67
    514e:	45 a3       	std	Z+37, r20	; 0x25
    5150:	56 a3       	std	Z+38, r21	; 0x26
    5152:	67 a3       	std	Z+39, r22	; 0x27
    5154:	70 a7       	std	Z+40, r23	; 0x28
	anchorState.anchorW = -180.0;
    5156:	40 e0       	ldi	r20, 0x00	; 0
    5158:	50 e0       	ldi	r21, 0x00	; 0
    515a:	64 e3       	ldi	r22, 0x34	; 52
    515c:	73 ec       	ldi	r23, 0xC3	; 195
    515e:	41 a7       	std	Z+41, r20	; 0x29
    5160:	52 a7       	std	Z+42, r21	; 0x2a
    5162:	63 a7       	std	Z+43, r22	; 0x2b
    5164:	74 a7       	std	Z+44, r23	; 0x2c

	//autopilot
	autopilotState.autopilotOn=false;
    5166:	15 a6       	std	Z+45, r1	; 0x2d
	//disengage the autopilot if we reboot!!
	//Dont want to go screaming off on wrong course.
	autopilotState.autopilotReference = AUTOPILOT_COMPASS;
    5168:	83 e4       	ldi	r24, 0x43	; 67
    516a:	82 ab       	std	Z+50, r24	; 0x32
	autopilotState.autopilotTargetHeading = 0; //Setpoint
    516c:	13 aa       	std	Z+51, r1	; 0x33
    516e:	14 aa       	std	Z+52, r1	; 0x34
    5170:	15 aa       	std	Z+53, r1	; 0x35
    5172:	16 aa       	std	Z+54, r1	; 0x36
	autopilotState.autopilotRudderCommand = 33; //Output (rudder central)
    5174:	40 e0       	ldi	r20, 0x00	; 0
    5176:	50 e0       	ldi	r21, 0x00	; 0
    5178:	64 e0       	ldi	r22, 0x04	; 4
    517a:	72 e4       	ldi	r23, 0x42	; 66
    517c:	47 ab       	std	Z+55, r20	; 0x37
    517e:	50 af       	std	Z+56, r21	; 0x38
    5180:	61 af       	std	Z+57, r22	; 0x39
    5182:	72 af       	std	Z+58, r23	; 0x3a
	//bool autopilotAlarmOn;
	autopilotState.autopilotAlarmTriggered = false;
    5184:	13 ae       	std	Z+59, r1	; 0x3b
	autopilotState.autopilotAlarmMaxXTError = 100; // +/- meters cross track error
    5186:	40 e0       	ldi	r20, 0x00	; 0
    5188:	50 e0       	ldi	r21, 0x00	; 0
    518a:	68 ec       	ldi	r22, 0xC8	; 200
    518c:	72 e4       	ldi	r23, 0x42	; 66
    518e:	44 af       	std	Z+60, r20	; 0x3c
    5190:	55 af       	std	Z+61, r21	; 0x3d
    5192:	66 af       	std	Z+62, r22	; 0x3e
    5194:	77 af       	std	Z+63, r23	; 0x3f
	autopilotState.autopilotAlarmMaxWindError = 10; // +/- wind angle change, for over 1 minute
    5196:	df 01       	movw	r26, r30
    5198:	a0 5c       	subi	r26, 0xC0	; 192
    519a:	bf 4f       	sbci	r27, 0xFF	; 255
    519c:	40 e0       	ldi	r20, 0x00	; 0
    519e:	50 e0       	ldi	r21, 0x00	; 0
    51a0:	60 e2       	ldi	r22, 0x20	; 32
    51a2:	71 e4       	ldi	r23, 0x41	; 65
    51a4:	4d 93       	st	X+, r20
    51a6:	5d 93       	st	X+, r21
    51a8:	6d 93       	st	X+, r22
    51aa:	7c 93       	st	X, r23
    51ac:	13 97       	sbiw	r26, 0x03	; 3
	autopilotState.autopilotAlarmMaxCourseError = 10; // +/- course error, for over 1 minute
    51ae:	df 01       	movw	r26, r30
    51b0:	ac 5b       	subi	r26, 0xBC	; 188
    51b2:	bf 4f       	sbci	r27, 0xFF	; 255
    51b4:	4d 93       	st	X+, r20
    51b6:	5d 93       	st	X+, r21
    51b8:	6d 93       	st	X+, r22
    51ba:	7c 93       	st	X, r23
    51bc:	13 97       	sbiw	r26, 0x03	; 3

	//compass
	magneticHeading=0;
    51be:	10 86       	std	Z+8, r1	; 0x08
    51c0:	11 86       	std	Z+9, r1	; 0x09
    51c2:	12 86       	std	Z+10, r1	; 0x0a
    51c4:	13 86       	std	Z+11, r1	; 0x0b
	declination=0;
    51c6:	14 86       	std	Z+12, r1	; 0x0c
    51c8:	15 86       	std	Z+13, r1	; 0x0d
    51ca:	16 86       	std	Z+14, r1	; 0x0e
    51cc:	17 86       	std	Z+15, r1	; 0x0f
	//gps
	gpsState.gpsDecode = false; //flag to indicate a new sentence was decoded.
    51ce:	df 01       	movw	r26, r30
    51d0:	a8 5b       	subi	r26, 0xB8	; 184
    51d2:	bf 4f       	sbci	r27, 0xFF	; 255
    51d4:	1c 92       	st	X, r1
	gpsState.gpsLastFix = 0; //time of last good gps fix.
    51d6:	df 01       	movw	r26, r30
    51d8:	a7 5b       	subi	r26, 0xB7	; 183
    51da:	bf 4f       	sbci	r27, 0xFF	; 255
    51dc:	1d 92       	st	X+, r1
    51de:	1d 92       	st	X+, r1
    51e0:	1d 92       	st	X+, r1
    51e2:	1c 92       	st	X, r1
    51e4:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsUtc = 0; // decimal value of UTC term in last full GPRMC sentence
    51e6:	df 01       	movw	r26, r30
    51e8:	a3 5b       	subi	r26, 0xB3	; 179
    51ea:	bf 4f       	sbci	r27, 0xFF	; 255
    51ec:	1d 92       	st	X+, r1
    51ee:	1d 92       	st	X+, r1
    51f0:	1d 92       	st	X+, r1
    51f2:	1c 92       	st	X, r1
    51f4:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsStatus = 'V'; //  status character in last full GPRMC sentence ('A' or 'V')
    51f6:	df 01       	movw	r26, r30
    51f8:	af 5a       	subi	r26, 0xAF	; 175
    51fa:	bf 4f       	sbci	r27, 0xFF	; 255
    51fc:	86 e5       	ldi	r24, 0x56	; 86
    51fe:	8c 93       	st	X, r24
	gpsState.gpsLatitude = 0.0; // signed degree-decimal value of latitude terms in last full GPRMC sentence
    5200:	df 01       	movw	r26, r30
    5202:	ae 5a       	subi	r26, 0xAE	; 174
    5204:	bf 4f       	sbci	r27, 0xFF	; 255
    5206:	1d 92       	st	X+, r1
    5208:	1d 92       	st	X+, r1
    520a:	1d 92       	st	X+, r1
    520c:	1c 92       	st	X, r1
    520e:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsLongitude = 0.0; // signed degree-decimal value of longitude terms in last full GPRMC sentence
    5210:	df 01       	movw	r26, r30
    5212:	aa 5a       	subi	r26, 0xAA	; 170
    5214:	bf 4f       	sbci	r27, 0xFF	; 255
    5216:	1d 92       	st	X+, r1
    5218:	1d 92       	st	X+, r1
    521a:	1d 92       	st	X+, r1
    521c:	1c 92       	st	X, r1
    521e:	13 97       	sbiw	r26, 0x03	; 3
	//float gpsSpeedUnit; //unit multiplier for gpsSpeed. 1.0 = KNT,1.1507794	=MPH, see nmea.h
	gpsState.gpsSpeed = 0.0; // speed-on-ground term in last full GPRMC sentence
    5220:	df 01       	movw	r26, r30
    5222:	a6 5a       	subi	r26, 0xA6	; 166
    5224:	bf 4f       	sbci	r27, 0xFF	; 255
    5226:	1d 92       	st	X+, r1
    5228:	1d 92       	st	X+, r1
    522a:	1d 92       	st	X+, r1
    522c:	1c 92       	st	X, r1
    522e:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsCourse = 0.0; // track-angle-made-good term in last full GPRMC sentence
    5230:	df 01       	movw	r26, r30
    5232:	a2 5a       	subi	r26, 0xA2	; 162
    5234:	bf 4f       	sbci	r27, 0xFF	; 255
    5236:	1d 92       	st	X+, r1
    5238:	1d 92       	st	X+, r1
    523a:	1d 92       	st	X+, r1
    523c:	1c 92       	st	X, r1
    523e:	13 97       	sbiw	r26, 0x03	; 3
	//bool gpsAlarmOn; //true to engage alarm
	gpsState.gpsAlarmTriggered = false; //set to true to trigger gps alarm
    5240:	df 01       	movw	r26, r30
    5242:	ae 59       	subi	r26, 0x9E	; 158
    5244:	bf 4f       	sbci	r27, 0xFF	; 255
    5246:	1c 92       	st	X, r1
	//double gpsAlarmFixTime; //max time in millis without fix

	//seatalk
	//volatile bool radarAlarmOn; //set to true to enable radar alarm
	radarAlarmTriggered = false; //set to true to trigger radar alarm
    5248:	df 01       	movw	r26, r30
    524a:	ad 59       	subi	r26, 0x9D	; 157
    524c:	bf 4f       	sbci	r27, 0xFF	; 255
    524e:	1c 92       	st	X, r1
	//volatile bool mobAlarmOn; //set to true to enable mob alarm
	mobAlarmTriggered = false; //set to true to trigger MOB alarm
    5250:	df 01       	movw	r26, r30
    5252:	ac 59       	subi	r26, 0x9C	; 156
    5254:	bf 4f       	sbci	r27, 0xFF	; 255
    5256:	1c 92       	st	X, r1

	//wind
	windState.windLastUpdate = 0;
    5258:	df 01       	movw	r26, r30
    525a:	ab 59       	subi	r26, 0x9B	; 155
    525c:	bf 4f       	sbci	r27, 0xFF	; 255
    525e:	1d 92       	st	X+, r1
    5260:	1d 92       	st	X+, r1
    5262:	1d 92       	st	X+, r1
    5264:	1c 92       	st	X, r1
    5266:	13 97       	sbiw	r26, 0x03	; 3
	windState.windAverage = 0.0;
    5268:	df 01       	movw	r26, r30
    526a:	a7 59       	subi	r26, 0x97	; 151
    526c:	bf 4f       	sbci	r27, 0xFF	; 255
    526e:	1d 92       	st	X+, r1
    5270:	1d 92       	st	X+, r1
    5272:	1d 92       	st	X+, r1
    5274:	1c 92       	st	X, r1
    5276:	13 97       	sbiw	r26, 0x03	; 3
	//windState.windFactor=0;
	windState.windMax = 0;
    5278:	df 01       	movw	r26, r30
    527a:	a3 59       	subi	r26, 0x93	; 147
    527c:	bf 4f       	sbci	r27, 0xFF	; 255
    527e:	1d 92       	st	X+, r1
    5280:	1c 92       	st	X, r1
	windState.windApparentDir = 0;
    5282:	df 01       	movw	r26, r30
    5284:	a1 59       	subi	r26, 0x91	; 145
    5286:	bf 4f       	sbci	r27, 0xFF	; 255
    5288:	1d 92       	st	X+, r1
    528a:	1c 92       	st	X, r1
	windState.windTrueDir=0;
    528c:	df 01       	movw	r26, r30
    528e:	af 58       	subi	r26, 0x8F	; 143
    5290:	bf 4f       	sbci	r27, 0xFF	; 255
    5292:	1d 92       	st	X+, r1
    5294:	1c 92       	st	X, r1
	//int windAlarmSpeed;
	//bool windAlarmOn;
	windState.windAlarmTriggered = false;
    5296:	df 01       	movw	r26, r30
    5298:	ad 58       	subi	r26, 0x8D	; 141
    529a:	bf 4f       	sbci	r27, 0xFF	; 255
    529c:	1c 92       	st	X, r1

	//struct Configuration{
	config.anchorLat = 0.0;
    529e:	df 01       	movw	r26, r30
    52a0:	ac 58       	subi	r26, 0x8C	; 140
    52a2:	bf 4f       	sbci	r27, 0xFF	; 255
    52a4:	1d 92       	st	X+, r1
    52a6:	1d 92       	st	X+, r1
    52a8:	1d 92       	st	X+, r1
    52aa:	1c 92       	st	X, r1
    52ac:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorLon = 0.0;
    52ae:	df 01       	movw	r26, r30
    52b0:	a8 58       	subi	r26, 0x88	; 136
    52b2:	bf 4f       	sbci	r27, 0xFF	; 255
    52b4:	1d 92       	st	X+, r1
    52b6:	1d 92       	st	X+, r1
    52b8:	1d 92       	st	X+, r1
    52ba:	1c 92       	st	X, r1
    52bc:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorRadius = 40.0;
    52be:	df 01       	movw	r26, r30
    52c0:	a4 58       	subi	r26, 0x84	; 132
    52c2:	bf 4f       	sbci	r27, 0xFF	; 255
    52c4:	40 e0       	ldi	r20, 0x00	; 0
    52c6:	50 e0       	ldi	r21, 0x00	; 0
    52c8:	60 e2       	ldi	r22, 0x20	; 32
    52ca:	72 e4       	ldi	r23, 0x42	; 66
    52cc:	4d 93       	st	X+, r20
    52ce:	5d 93       	st	X+, r21
    52d0:	6d 93       	st	X+, r22
    52d2:	7c 93       	st	X, r23
    52d4:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorAlarmOn = false;
    52d6:	df 01       	movw	r26, r30
    52d8:	a0 58       	subi	r26, 0x80	; 128
    52da:	bf 4f       	sbci	r27, 0xFF	; 255
    52dc:	1c 92       	st	X, r1
	config.autopilotAlarmOn = false;
    52de:	df 01       	movw	r26, r30
    52e0:	af 57       	subi	r26, 0x7F	; 127
    52e2:	bf 4f       	sbci	r27, 0xFF	; 255
    52e4:	1c 92       	st	X, r1
	config.autopilotDeadZone = 0;
    52e6:	df 01       	movw	r26, r30
    52e8:	ae 57       	subi	r26, 0x7E	; 126
    52ea:	bf 4f       	sbci	r27, 0xFF	; 255
    52ec:	1d 92       	st	X+, r1
    52ee:	1c 92       	st	X, r1
	config.autopilotSlack = 0;
    52f0:	df 01       	movw	r26, r30
    52f2:	ac 57       	subi	r26, 0x7C	; 124
    52f4:	bf 4f       	sbci	r27, 0xFF	; 255
    52f6:	1d 92       	st	X+, r1
    52f8:	1c 92       	st	X, r1
	config.gpsSpeedUnit = KTS;
    52fa:	df 01       	movw	r26, r30
    52fc:	aa 57       	subi	r26, 0x7A	; 122
    52fe:	bf 4f       	sbci	r27, 0xFF	; 255
    5300:	40 e0       	ldi	r20, 0x00	; 0
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	60 e8       	ldi	r22, 0x80	; 128
    5306:	7f e3       	ldi	r23, 0x3F	; 63
    5308:	4d 93       	st	X+, r20
    530a:	5d 93       	st	X+, r21
    530c:	6d 93       	st	X+, r22
    530e:	7c 93       	st	X, r23
    5310:	13 97       	sbiw	r26, 0x03	; 3
	config.gpsAlarmOn = false;
    5312:	df 01       	movw	r26, r30
    5314:	a6 57       	subi	r26, 0x76	; 118
    5316:	bf 4f       	sbci	r27, 0xFF	; 255
    5318:	1c 92       	st	X, r1
	config.gpsAlarmFixTime = 1000l * 60 * 5; //5 min
    531a:	df 01       	movw	r26, r30
    531c:	a5 57       	subi	r26, 0x75	; 117
    531e:	bf 4f       	sbci	r27, 0xFF	; 255
    5320:	40 ee       	ldi	r20, 0xE0	; 224
    5322:	53 e9       	ldi	r21, 0x93	; 147
    5324:	64 e0       	ldi	r22, 0x04	; 4
    5326:	70 e0       	ldi	r23, 0x00	; 0
    5328:	4d 93       	st	X+, r20
    532a:	5d 93       	st	X+, r21
    532c:	6d 93       	st	X+, r22
    532e:	7c 93       	st	X, r23
    5330:	13 97       	sbiw	r26, 0x03	; 3
	config.radarAlarmOn = false;
    5332:	df 01       	movw	r26, r30
    5334:	a1 57       	subi	r26, 0x71	; 113
    5336:	bf 4f       	sbci	r27, 0xFF	; 255
    5338:	1c 92       	st	X, r1
	config.mobAlarmOn = false;
    533a:	df 01       	movw	r26, r30
    533c:	a0 57       	subi	r26, 0x70	; 112
    533e:	bf 4f       	sbci	r27, 0xFF	; 255
    5340:	1c 92       	st	X, r1
	config.windAlarmSpeed = 99;
    5342:	df 01       	movw	r26, r30
    5344:	af 56       	subi	r26, 0x6F	; 111
    5346:	bf 4f       	sbci	r27, 0xFF	; 255
    5348:	83 e6       	ldi	r24, 0x63	; 99
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	8d 93       	st	X+, r24
    534e:	9c 93       	st	X, r25
	config.windAlarmOn = false;
    5350:	df 01       	movw	r26, r30
    5352:	ad 56       	subi	r26, 0x6D	; 109
    5354:	bf 4f       	sbci	r27, 0xFF	; 255
    5356:	1c 92       	st	X, r1
	config.windFactor = 10000.0;
    5358:	df 01       	movw	r26, r30
    535a:	ac 56       	subi	r26, 0x6C	; 108
    535c:	bf 4f       	sbci	r27, 0xFF	; 255
    535e:	40 e0       	ldi	r20, 0x00	; 0
    5360:	50 e4       	ldi	r21, 0x40	; 64
    5362:	6c e1       	ldi	r22, 0x1C	; 28
    5364:	76 e4       	ldi	r23, 0x46	; 70
    5366:	4d 93       	st	X+, r20
    5368:	5d 93       	st	X+, r21
    536a:	6d 93       	st	X+, r22
    536c:	7c 93       	st	X, r23
    536e:	13 97       	sbiw	r26, 0x03	; 3
	config.windZeroOffset = 0;
    5370:	df 01       	movw	r26, r30
    5372:	a8 56       	subi	r26, 0x68	; 104
    5374:	bf 4f       	sbci	r27, 0xFF	; 255
    5376:	1d 92       	st	X+, r1
    5378:	1c 92       	st	X, r1
	//ver6
	config.gpsModel= GPS_EM_406A;
    537a:	df 01       	movw	r26, r30
    537c:	a6 56       	subi	r26, 0x66	; 102
    537e:	bf 4f       	sbci	r27, 0xFF	; 255
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	90 e0       	ldi	r25, 0x00	; 0
    5384:	8d 93       	st	X+, r24
    5386:	9c 93       	st	X, r25
	config.serialBaud=38400;
    5388:	df 01       	movw	r26, r30
    538a:	a4 56       	subi	r26, 0x64	; 100
    538c:	bf 4f       	sbci	r27, 0xFF	; 255
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	96 e9       	ldi	r25, 0x96	; 150
    5392:	8d 93       	st	X+, r24
    5394:	9c 93       	st	X, r25
	config.serialBaud1=38400;
    5396:	df 01       	movw	r26, r30
    5398:	a2 56       	subi	r26, 0x62	; 98
    539a:	bf 4f       	sbci	r27, 0xFF	; 255
    539c:	8d 93       	st	X+, r24
    539e:	9c 93       	st	X, r25
	config.serialBaud2=9600; //seatalk?
    53a0:	df 01       	movw	r26, r30
    53a2:	a0 56       	subi	r26, 0x60	; 96
    53a4:	bf 4f       	sbci	r27, 0xFF	; 255
    53a6:	80 e8       	ldi	r24, 0x80	; 128
    53a8:	95 e2       	ldi	r25, 0x25	; 37
    53aa:	8d 93       	st	X+, r24
    53ac:	9c 93       	st	X, r25
	config.serialBaud3=9600; //16 bytes
    53ae:	df 01       	movw	r26, r30
    53b0:	ae 55       	subi	r26, 0x5E	; 94
    53b2:	bf 4f       	sbci	r27, 0xFF	; 255
    53b4:	8d 93       	st	X+, r24
    53b6:	9c 93       	st	X, r25
	config.seaTalk=false;
    53b8:	df 01       	movw	r26, r30
    53ba:	ac 55       	subi	r26, 0x5C	; 92
    53bc:	bf 4f       	sbci	r27, 0xFF	; 255
    53be:	1c 92       	st	X, r1
	//}config;

//we change this if we change the struct so we can tell before reloading incompatible versions
	version = EEPROM_VER;
    53c0:	eb 55       	subi	r30, 0x5B	; 91
    53c2:	ff 4f       	sbci	r31, 0xFF	; 255
    53c4:	86 e0       	ldi	r24, 0x06	; 6
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	91 83       	std	Z+1, r25	; 0x01
    53ca:	80 83       	st	Z, r24
    53cc:	08 95       	ret

000053ce <_ZN14FreeBoardModel10saveConfigEv>:
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
	return i;
}
void FreeBoardModel::saveConfig() {
    53ce:	0f 93       	push	r16
    53d0:	1f 93       	push	r17
    53d2:	cf 93       	push	r28
    53d4:	df 93       	push	r29
    53d6:	ec 01       	movw	r28, r24

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    53d8:	fc 01       	movw	r30, r24
    53da:	eb 55       	subi	r30, 0x5B	; 91
    53dc:	ff 4f       	sbci	r31, 0xFF	; 255
    53de:	40 81       	ld	r20, Z
    53e0:	60 e0       	ldi	r22, 0x00	; 0
    53e2:	70 e0       	ldi	r23, 0x00	; 0
    53e4:	87 e4       	ldi	r24, 0x47	; 71
    53e6:	99 e0       	ldi	r25, 0x09	; 9
    53e8:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN11EEPROMClass5writeEih>
    53ec:	fe 01       	movw	r30, r28
    53ee:	ea 55       	subi	r30, 0x5A	; 90
    53f0:	ff 4f       	sbci	r31, 0xFF	; 255
    53f2:	40 81       	ld	r20, Z
    53f4:	61 e0       	ldi	r22, 0x01	; 1
    53f6:	70 e0       	ldi	r23, 0x00	; 0
    53f8:	87 e4       	ldi	r24, 0x47	; 71
    53fa:	99 e0       	ldi	r25, 0x09	; 9
    53fc:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN11EEPROMClass5writeEih>
}
void FreeBoardModel::saveConfig() {
	//write out a current version
	EEPROM_writeAnything(0, version);
	//write data
	EEPROM_writeAnything(EEPROM_VER, config);
    5400:	cc 58       	subi	r28, 0x8C	; 140
    5402:	df 4f       	sbci	r29, 0xFF	; 255
    5404:	66 e0       	ldi	r22, 0x06	; 6
    5406:	70 e0       	ldi	r23, 0x00	; 0

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    5408:	49 91       	ld	r20, Y+
    540a:	8b 01       	movw	r16, r22
    540c:	0f 5f       	subi	r16, 0xFF	; 255
    540e:	1f 4f       	sbci	r17, 0xFF	; 255
    5410:	87 e4       	ldi	r24, 0x47	; 71
    5412:	99 e0       	ldi	r25, 0x09	; 9
    5414:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN11EEPROMClass5writeEih>
    5418:	b8 01       	movw	r22, r16
}

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    541a:	07 33       	cpi	r16, 0x37	; 55
    541c:	11 05       	cpc	r17, r1
    541e:	a1 f7       	brne	.-24     	; 0x5408 <_ZN14FreeBoardModel10saveConfigEv+0x3a>
void FreeBoardModel::saveConfig() {
	//write out a current version
	EEPROM_writeAnything(0, version);
	//write data
	EEPROM_writeAnything(EEPROM_VER, config);
}
    5420:	df 91       	pop	r29
    5422:	cf 91       	pop	r28
    5424:	1f 91       	pop	r17
    5426:	0f 91       	pop	r16
    5428:	08 95       	ret

0000542a <_ZN14FreeBoardModel10readConfigEv>:

void FreeBoardModel::readConfig() {
    542a:	ef 92       	push	r14
    542c:	ff 92       	push	r15
    542e:	0f 93       	push	r16
    5430:	1f 93       	push	r17
    5432:	cf 93       	push	r28
    5434:	df 93       	push	r29
    5436:	00 d0       	rcall	.+0      	; 0x5438 <_ZN14FreeBoardModel10readConfigEv+0xe>
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
    543c:	8c 01       	movw	r16, r24
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    543e:	60 e0       	ldi	r22, 0x00	; 0
    5440:	70 e0       	ldi	r23, 0x00	; 0
    5442:	87 e4       	ldi	r24, 0x47	; 71
    5444:	99 e0       	ldi	r25, 0x09	; 9
    5446:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN11EEPROMClass4readEi>
    544a:	89 83       	std	Y+1, r24	; 0x01
    544c:	61 e0       	ldi	r22, 0x01	; 1
    544e:	70 e0       	ldi	r23, 0x00	; 0
    5450:	87 e4       	ldi	r24, 0x47	; 71
    5452:	99 e0       	ldi	r25, 0x09	; 9
    5454:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN11EEPROMClass4readEi>
    5458:	8a 83       	std	Y+2, r24	; 0x02

void FreeBoardModel::readConfig() {
	//check versions here
	int ver;
	EEPROM_readAnything(0, ver);
	if (ver != version) {
    545a:	f8 01       	movw	r30, r16
    545c:	eb 55       	subi	r30, 0x5B	; 91
    545e:	ff 4f       	sbci	r31, 0xFF	; 255
    5460:	29 81       	ldd	r18, Y+1	; 0x01
    5462:	3a 81       	ldd	r19, Y+2	; 0x02
    5464:	80 81       	ld	r24, Z
    5466:	91 81       	ldd	r25, Z+1	; 0x01
    5468:	28 17       	cp	r18, r24
    546a:	39 07       	cpc	r19, r25
    546c:	19 f0       	breq	.+6      	; 0x5474 <_ZN14FreeBoardModel10readConfigEv+0x4a>
		//if windfactor <10 then 100000000
		if(EEPROM_VER<6 && config.windFactor<1000.0){
			config.windFactor=10000.0;
		}
		//save
		saveConfig();
    546e:	c8 01       	movw	r24, r16
    5470:	0e 94 e7 29 	call	0x53ce	; 0x53ce <_ZN14FreeBoardModel10saveConfigEv>
	}

	//now we know its compatible
	EEPROM_readAnything(EEPROM_VER, config);
    5474:	0c 58       	subi	r16, 0x8C	; 140
    5476:	1f 4f       	sbci	r17, 0xFF	; 255
    5478:	66 e0       	ldi	r22, 0x06	; 6
    547a:	70 e0       	ldi	r23, 0x00	; 0
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    547c:	7b 01       	movw	r14, r22
    547e:	8f ef       	ldi	r24, 0xFF	; 255
    5480:	e8 1a       	sub	r14, r24
    5482:	f8 0a       	sbc	r15, r24
    5484:	87 e4       	ldi	r24, 0x47	; 71
    5486:	99 e0       	ldi	r25, 0x09	; 9
    5488:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN11EEPROMClass4readEi>
    548c:	f8 01       	movw	r30, r16
    548e:	81 93       	st	Z+, r24
    5490:	8f 01       	movw	r16, r30
    5492:	b7 01       	movw	r22, r14
}
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    5494:	67 33       	cpi	r22, 0x37	; 55
    5496:	71 05       	cpc	r23, r1
    5498:	89 f7       	brne	.-30     	; 0x547c <_ZN14FreeBoardModel10readConfigEv+0x52>
	}

	//now we know its compatible
	EEPROM_readAnything(EEPROM_VER, config);

}
    549a:	0f 90       	pop	r0
    549c:	0f 90       	pop	r0
    549e:	df 91       	pop	r29
    54a0:	cf 91       	pop	r28
    54a2:	1f 91       	pop	r17
    54a4:	0f 91       	pop	r16
    54a6:	ff 90       	pop	r15
    54a8:	ef 90       	pop	r14
    54aa:	08 95       	ret

000054ac <_ZN14FreeBoardModel17getAnchorDistanceEv>:

unsigned long FreeBoardModel::getAlarmSnooze() {
	return alarmSnooze;
}

float FreeBoardModel::getAnchorDistance() {
    54ac:	fc 01       	movw	r30, r24
	return anchorState.anchorDistance;
}
    54ae:	54 89       	ldd	r21, Z+20	; 0x14
    54b0:	45 89       	ldd	r20, Z+21	; 0x15
    54b2:	36 89       	ldd	r19, Z+22	; 0x16
    54b4:	27 89       	ldd	r18, Z+23	; 0x17
    54b6:	65 2f       	mov	r22, r21
    54b8:	74 2f       	mov	r23, r20
    54ba:	83 2f       	mov	r24, r19
    54bc:	92 2f       	mov	r25, r18
    54be:	08 95       	ret

000054c0 <_ZN14FreeBoardModel10getAnchorEEv>:

float FreeBoardModel::getAnchorE() {
    54c0:	fc 01       	movw	r30, r24
	return anchorState.anchorE;
}
    54c2:	55 a1       	ldd	r21, Z+37	; 0x25
    54c4:	46 a1       	ldd	r20, Z+38	; 0x26
    54c6:	37 a1       	ldd	r19, Z+39	; 0x27
    54c8:	20 a5       	ldd	r18, Z+40	; 0x28
    54ca:	65 2f       	mov	r22, r21
    54cc:	74 2f       	mov	r23, r20
    54ce:	83 2f       	mov	r24, r19
    54d0:	92 2f       	mov	r25, r18
    54d2:	08 95       	ret

000054d4 <_ZN14FreeBoardModel12getAnchorLatEv>:

float FreeBoardModel::getAnchorLat() {
	return config.anchorLat;
    54d4:	fc 01       	movw	r30, r24
    54d6:	ec 58       	subi	r30, 0x8C	; 140
    54d8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    54da:	50 81       	ld	r21, Z
    54dc:	41 81       	ldd	r20, Z+1	; 0x01
    54de:	32 81       	ldd	r19, Z+2	; 0x02
    54e0:	23 81       	ldd	r18, Z+3	; 0x03
    54e2:	65 2f       	mov	r22, r21
    54e4:	74 2f       	mov	r23, r20
    54e6:	83 2f       	mov	r24, r19
    54e8:	92 2f       	mov	r25, r18
    54ea:	08 95       	ret

000054ec <_ZN14FreeBoardModel12getAnchorLonEv>:

float FreeBoardModel::getAnchorLon() {
	return config.anchorLon;
    54ec:	fc 01       	movw	r30, r24
    54ee:	e8 58       	subi	r30, 0x88	; 136
    54f0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    54f2:	50 81       	ld	r21, Z
    54f4:	41 81       	ldd	r20, Z+1	; 0x01
    54f6:	32 81       	ldd	r19, Z+2	; 0x02
    54f8:	23 81       	ldd	r18, Z+3	; 0x03
    54fa:	65 2f       	mov	r22, r21
    54fc:	74 2f       	mov	r23, r20
    54fe:	83 2f       	mov	r24, r19
    5500:	92 2f       	mov	r25, r18
    5502:	08 95       	ret

00005504 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>:

float FreeBoardModel::getAnchorMaxDistance() {
    5504:	fc 01       	movw	r30, r24
	return anchorState.anchorMaxDistance;
}
    5506:	50 8d       	ldd	r21, Z+24	; 0x18
    5508:	41 8d       	ldd	r20, Z+25	; 0x19
    550a:	32 8d       	ldd	r19, Z+26	; 0x1a
    550c:	23 8d       	ldd	r18, Z+27	; 0x1b
    550e:	65 2f       	mov	r22, r21
    5510:	74 2f       	mov	r23, r20
    5512:	83 2f       	mov	r24, r19
    5514:	92 2f       	mov	r25, r18
    5516:	08 95       	ret

00005518 <_ZN14FreeBoardModel10getAnchorNEv>:

float FreeBoardModel::getAnchorN() {
    5518:	fc 01       	movw	r30, r24
	return anchorState.anchorN;
}
    551a:	55 8d       	ldd	r21, Z+29	; 0x1d
    551c:	46 8d       	ldd	r20, Z+30	; 0x1e
    551e:	37 8d       	ldd	r19, Z+31	; 0x1f
    5520:	20 a1       	ldd	r18, Z+32	; 0x20
    5522:	65 2f       	mov	r22, r21
    5524:	74 2f       	mov	r23, r20
    5526:	83 2f       	mov	r24, r19
    5528:	92 2f       	mov	r25, r18
    552a:	08 95       	ret

0000552c <_ZN14FreeBoardModel15getAnchorRadiusEv>:

float FreeBoardModel::getAnchorRadius() {
	return config.anchorRadius;
    552c:	fc 01       	movw	r30, r24
    552e:	e4 58       	subi	r30, 0x84	; 132
    5530:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5532:	50 81       	ld	r21, Z
    5534:	41 81       	ldd	r20, Z+1	; 0x01
    5536:	32 81       	ldd	r19, Z+2	; 0x02
    5538:	23 81       	ldd	r18, Z+3	; 0x03
    553a:	65 2f       	mov	r22, r21
    553c:	74 2f       	mov	r23, r20
    553e:	83 2f       	mov	r24, r19
    5540:	92 2f       	mov	r25, r18
    5542:	08 95       	ret

00005544 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>:

float FreeBoardModel::getAnchorRadiusDeg() {
    5544:	fc 01       	movw	r30, r24
	return anchorState.anchorRadiusDeg;
}
    5546:	50 89       	ldd	r21, Z+16	; 0x10
    5548:	41 89       	ldd	r20, Z+17	; 0x11
    554a:	32 89       	ldd	r19, Z+18	; 0x12
    554c:	23 89       	ldd	r18, Z+19	; 0x13
    554e:	65 2f       	mov	r22, r21
    5550:	74 2f       	mov	r23, r20
    5552:	83 2f       	mov	r24, r19
    5554:	92 2f       	mov	r25, r18
    5556:	08 95       	ret

00005558 <_ZN14FreeBoardModel10getAnchorSEv>:

float FreeBoardModel::getAnchorS() {
    5558:	fc 01       	movw	r30, r24
	return anchorState.anchorS;
}
    555a:	51 a1       	ldd	r21, Z+33	; 0x21
    555c:	42 a1       	ldd	r20, Z+34	; 0x22
    555e:	33 a1       	ldd	r19, Z+35	; 0x23
    5560:	24 a1       	ldd	r18, Z+36	; 0x24
    5562:	65 2f       	mov	r22, r21
    5564:	74 2f       	mov	r23, r20
    5566:	83 2f       	mov	r24, r19
    5568:	92 2f       	mov	r25, r18
    556a:	08 95       	ret

0000556c <_ZN14FreeBoardModel10getAnchorWEv>:

float FreeBoardModel::getAnchorW() {
    556c:	fc 01       	movw	r30, r24
	return anchorState.anchorW;
}
    556e:	51 a5       	ldd	r21, Z+41	; 0x29
    5570:	42 a5       	ldd	r20, Z+42	; 0x2a
    5572:	33 a5       	ldd	r19, Z+43	; 0x2b
    5574:	24 a5       	ldd	r18, Z+44	; 0x2c
    5576:	65 2f       	mov	r22, r21
    5578:	74 2f       	mov	r23, r20
    557a:	83 2f       	mov	r24, r19
    557c:	92 2f       	mov	r25, r18
    557e:	08 95       	ret

00005580 <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>:

double FreeBoardModel::getAutopilotAlarmMaxXtError() {
	return autopilotState.autopilotAlarmMaxXTError;
}

double FreeBoardModel::getAutopilotRudderCommand() {
    5580:	fc 01       	movw	r30, r24
	return autopilotState.autopilotRudderCommand;
}
    5582:	57 a9       	ldd	r21, Z+55	; 0x37
    5584:	40 ad       	ldd	r20, Z+56	; 0x38
    5586:	31 ad       	ldd	r19, Z+57	; 0x39
    5588:	22 ad       	ldd	r18, Z+58	; 0x3a
    558a:	65 2f       	mov	r22, r21
    558c:	74 2f       	mov	r23, r20
    558e:	83 2f       	mov	r24, r19
    5590:	92 2f       	mov	r25, r18
    5592:	08 95       	ret

00005594 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>:

double FreeBoardModel::getAutopilotTargetHeading() {
    5594:	fc 01       	movw	r30, r24
	return autopilotState.autopilotTargetHeading;
}
    5596:	53 a9       	ldd	r21, Z+51	; 0x33
    5598:	44 a9       	ldd	r20, Z+52	; 0x34
    559a:	35 a9       	ldd	r19, Z+53	; 0x35
    559c:	26 a9       	ldd	r18, Z+54	; 0x36
    559e:	65 2f       	mov	r22, r21
    55a0:	74 2f       	mov	r23, r20
    55a2:	83 2f       	mov	r24, r19
    55a4:	92 2f       	mov	r25, r18
    55a6:	08 95       	ret

000055a8 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>:
double FreeBoardModel::getAutopilotCurrentHeading() {
    55a8:	fc 01       	movw	r30, r24
	if(autopilotState.autopilotReference == AUTOPILOT_WIND){
    55aa:	82 a9       	ldd	r24, Z+50	; 0x32
    55ac:	87 35       	cpi	r24, 0x57	; 87
    55ae:	59 f4       	brne	.+22     	; 0x55c6 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x1e>
		return windState.windApparentDir;
    55b0:	e1 59       	subi	r30, 0x91	; 145
    55b2:	ff 4f       	sbci	r31, 0xFF	; 255
    55b4:	60 81       	ld	r22, Z
    55b6:	71 81       	ldd	r23, Z+1	; 0x01
    55b8:	88 27       	eor	r24, r24
    55ba:	77 fd       	sbrc	r23, 7
    55bc:	80 95       	com	r24
    55be:	98 2f       	mov	r25, r24
    55c0:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    55c4:	04 c0       	rjmp	.+8      	; 0x55ce <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x26>
	}
	//default option - compass
	return magneticHeading;
    55c6:	60 85       	ldd	r22, Z+8	; 0x08
    55c8:	71 85       	ldd	r23, Z+9	; 0x09
    55ca:	82 85       	ldd	r24, Z+10	; 0x0a
    55cc:	93 85       	ldd	r25, Z+11	; 0x0b
}
    55ce:	08 95       	ret

000055d0 <_ZN14FreeBoardModel21getAutopilotOffCourseEv>:
}

/*
 * Returns -179 to +180 as the degrees off course
 */
double FreeBoardModel::getAutopilotOffCourse() {
    55d0:	ef 92       	push	r14
    55d2:	ff 92       	push	r15
    55d4:	0f 93       	push	r16
    55d6:	1f 93       	push	r17
    55d8:	cf 93       	push	r28
    55da:	df 93       	push	r29
    55dc:	ec 01       	movw	r28, r24
	//get degrees between
	autopilotState.autopilotOffCourse = getAutopilotTargetHeading()	- getAutopilotCurrentHeading();
    55de:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    55e2:	9b 01       	movw	r18, r22
    55e4:	ac 01       	movw	r20, r24
    55e6:	6b a9       	ldd	r22, Y+51	; 0x33
    55e8:	7c a9       	ldd	r23, Y+52	; 0x34
    55ea:	8d a9       	ldd	r24, Y+53	; 0x35
    55ec:	9e a9       	ldd	r25, Y+54	; 0x36
    55ee:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    55f2:	7b 01       	movw	r14, r22
    55f4:	8c 01       	movw	r16, r24
	autopilotState.autopilotOffCourse += (autopilotState.autopilotOffCourse>180) ? -360 : (autopilotState.autopilotOffCourse<-180) ? 360 : 0;
    55f6:	20 e0       	ldi	r18, 0x00	; 0
    55f8:	30 e0       	ldi	r19, 0x00	; 0
    55fa:	44 e3       	ldi	r20, 0x34	; 52
    55fc:	53 e4       	ldi	r21, 0x43	; 67
    55fe:	7f 2d       	mov	r23, r15
    5600:	91 2f       	mov	r25, r17
    5602:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    5606:	18 16       	cp	r1, r24
    5608:	8c f0       	brlt	.+34     	; 0x562c <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x5c>
    560a:	20 e0       	ldi	r18, 0x00	; 0
    560c:	30 e0       	ldi	r19, 0x00	; 0
    560e:	44 e3       	ldi	r20, 0x34	; 52
    5610:	53 ec       	ldi	r21, 0xC3	; 195
    5612:	6e 2d       	mov	r22, r14
    5614:	7f 2d       	mov	r23, r15
    5616:	80 2f       	mov	r24, r16
    5618:	91 2f       	mov	r25, r17
    561a:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    561e:	87 ff       	sbrs	r24, 7
    5620:	0a c0       	rjmp	.+20     	; 0x5636 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x66>
    5622:	20 e0       	ldi	r18, 0x00	; 0
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	44 eb       	ldi	r20, 0xB4	; 180
    5628:	53 e4       	ldi	r21, 0x43	; 67
    562a:	08 c0       	rjmp	.+16     	; 0x563c <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    562c:	20 e0       	ldi	r18, 0x00	; 0
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	44 eb       	ldi	r20, 0xB4	; 180
    5632:	53 ec       	ldi	r21, 0xC3	; 195
    5634:	03 c0       	rjmp	.+6      	; 0x563c <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	a9 01       	movw	r20, r18
    563c:	6e 2d       	mov	r22, r14
    563e:	7f 2d       	mov	r23, r15
    5640:	80 2f       	mov	r24, r16
    5642:	91 2f       	mov	r25, r17
    5644:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    5648:	9b 01       	movw	r18, r22
    564a:	46 2f       	mov	r20, r22
    564c:	53 2f       	mov	r21, r19
    564e:	68 2f       	mov	r22, r24
    5650:	79 2f       	mov	r23, r25
    5652:	4e a7       	std	Y+46, r20	; 0x2e
    5654:	5f a7       	std	Y+47, r21	; 0x2f
    5656:	68 ab       	std	Y+48, r22	; 0x30
    5658:	79 ab       	std	Y+49, r23	; 0x31

	return autopilotState.autopilotOffCourse;
}
    565a:	62 2f       	mov	r22, r18
    565c:	73 2f       	mov	r23, r19
    565e:	df 91       	pop	r29
    5660:	cf 91       	pop	r28
    5662:	1f 91       	pop	r17
    5664:	0f 91       	pop	r16
    5666:	ff 90       	pop	r15
    5668:	ef 90       	pop	r14
    566a:	08 95       	ret

0000566c <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>:
	return i;

}


int FreeBoardModel::writeSimple(HardwareSerial ser) {
    566c:	ef 92       	push	r14
    566e:	ff 92       	push	r15
    5670:	0f 93       	push	r16
    5672:	1f 93       	push	r17
    5674:	cf 93       	push	r28
    5676:	df 93       	push	r29
    5678:	8c 01       	movw	r16, r24
    567a:	d6 2f       	mov	r29, r22
    567c:	c7 2f       	mov	r28, r23
	//ArduIMU output format
	//!!VER:1.9,RLL:-0.52,PCH:0.06,YAW:80.24,IMUH:253,MGX:44,MGY:-254,MGZ:-257,MGH:80.11,LAT:-412937350,LON:1732472000,ALT:14,COG:116,SOG:0,FIX:1,SAT:5,TOW:22504700,

	ser.print("!!VER:1.9,");
    567e:	64 e5       	ldi	r22, 0x54	; 84
    5680:	72 e0       	ldi	r23, 0x02	; 2
    5682:	8d 2f       	mov	r24, r29
    5684:	9c 2f       	mov	r25, r28
    5686:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print("UID:MEGA,APX:");
    568a:	6f e5       	ldi	r22, 0x5F	; 95
    568c:	72 e0       	ldi	r23, 0x02	; 2
    568e:	8d 2f       	mov	r24, r29
    5690:	9c 2f       	mov	r25, r28
    5692:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(autopilotState.autopilotOn);
    5696:	f8 01       	movw	r30, r16
    5698:	65 a5       	ldd	r22, Z+45	; 0x2d
    569a:	4a e0       	ldi	r20, 0x0A	; 10
    569c:	50 e0       	ldi	r21, 0x00	; 0
    569e:	70 e0       	ldi	r23, 0x00	; 0
    56a0:	8d 2f       	mov	r24, r29
    56a2:	9c 2f       	mov	r25, r28
    56a4:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	ser.print(",APS:");
    56a8:	6d e6       	ldi	r22, 0x6D	; 109
    56aa:	72 e0       	ldi	r23, 0x02	; 2
    56ac:	8d 2f       	mov	r24, r29
    56ae:	9c 2f       	mov	r25, r28
    56b0:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(autopilotState.autopilotReference);
    56b4:	f8 01       	movw	r30, r16
    56b6:	62 a9       	ldd	r22, Z+50	; 0x32
    56b8:	8d 2f       	mov	r24, r29
    56ba:	9c 2f       	mov	r25, r28
    56bc:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
	//if autopilot on, send autopilot data
	if (autopilotState.autopilotOn) {
    56c0:	f8 01       	movw	r30, r16
    56c2:	85 a5       	ldd	r24, Z+45	; 0x2d
    56c4:	88 23       	and	r24, r24
    56c6:	d9 f1       	breq	.+118    	; 0x573e <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0xd2>
		ser.print(",APT:");
    56c8:	63 e7       	ldi	r22, 0x73	; 115
    56ca:	72 e0       	ldi	r23, 0x02	; 2
    56cc:	8d 2f       	mov	r24, r29
    56ce:	9c 2f       	mov	r25, r28
    56d0:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(getAutopilotTargetHeading());
    56d4:	f8 01       	movw	r30, r16
    56d6:	43 a9       	ldd	r20, Z+51	; 0x33
    56d8:	54 a9       	ldd	r21, Z+52	; 0x34
    56da:	65 a9       	ldd	r22, Z+53	; 0x35
    56dc:	76 a9       	ldd	r23, Z+54	; 0x36
    56de:	22 e0       	ldi	r18, 0x02	; 2
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	8d 2f       	mov	r24, r29
    56e4:	9c 2f       	mov	r25, r28
    56e6:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",APC:");
    56ea:	69 e7       	ldi	r22, 0x79	; 121
    56ec:	72 e0       	ldi	r23, 0x02	; 2
    56ee:	8d 2f       	mov	r24, r29
    56f0:	9c 2f       	mov	r25, r28
    56f2:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(getAutopilotCurrentHeading());
    56f6:	c8 01       	movw	r24, r16
    56f8:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    56fc:	ab 01       	movw	r20, r22
    56fe:	bc 01       	movw	r22, r24
    5700:	22 e0       	ldi	r18, 0x02	; 2
    5702:	30 e0       	ldi	r19, 0x00	; 0
    5704:	8d 2f       	mov	r24, r29
    5706:	9c 2f       	mov	r25, r28
    5708:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",APR:");
    570c:	6f e7       	ldi	r22, 0x7F	; 127
    570e:	72 e0       	ldi	r23, 0x02	; 2
    5710:	8d 2f       	mov	r24, r29
    5712:	9c 2f       	mov	r25, r28
    5714:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(autopilotState.autopilotRudderCommand-33.0);// 0-66 in model
    5718:	20 e0       	ldi	r18, 0x00	; 0
    571a:	30 e0       	ldi	r19, 0x00	; 0
    571c:	44 e0       	ldi	r20, 0x04	; 4
    571e:	52 e4       	ldi	r21, 0x42	; 66
    5720:	f8 01       	movw	r30, r16
    5722:	67 a9       	ldd	r22, Z+55	; 0x37
    5724:	70 ad       	ldd	r23, Z+56	; 0x38
    5726:	81 ad       	ldd	r24, Z+57	; 0x39
    5728:	92 ad       	ldd	r25, Z+58	; 0x3a
    572a:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    572e:	ab 01       	movw	r20, r22
    5730:	bc 01       	movw	r22, r24
    5732:	22 e0       	ldi	r18, 0x02	; 2
    5734:	30 e0       	ldi	r19, 0x00	; 0
    5736:	8d 2f       	mov	r24, r29
    5738:	9c 2f       	mov	r25, r28
    573a:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	}
	//if anchor alarm on, send data
	ser.print(",AAX:");
    573e:	65 e8       	ldi	r22, 0x85	; 133
    5740:	72 e0       	ldi	r23, 0x02	; 2
    5742:	8d 2f       	mov	r24, r29
    5744:	9c 2f       	mov	r25, r28
    5746:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.anchorAlarmOn);
    574a:	78 01       	movw	r14, r16
    574c:	f0 e8       	ldi	r31, 0x80	; 128
    574e:	ef 0e       	add	r14, r31
    5750:	f1 1c       	adc	r15, r1
    5752:	f7 01       	movw	r30, r14
    5754:	60 81       	ld	r22, Z
    5756:	4a e0       	ldi	r20, 0x0A	; 10
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	70 e0       	ldi	r23, 0x00	; 0
    575c:	8d 2f       	mov	r24, r29
    575e:	9c 2f       	mov	r25, r28
    5760:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	ser.print(",AAR:");
    5764:	6b e8       	ldi	r22, 0x8B	; 139
    5766:	72 e0       	ldi	r23, 0x02	; 2
    5768:	8d 2f       	mov	r24, r29
    576a:	9c 2f       	mov	r25, r28
    576c:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.anchorRadius);
    5770:	f8 01       	movw	r30, r16
    5772:	e4 58       	subi	r30, 0x84	; 132
    5774:	ff 4f       	sbci	r31, 0xFF	; 255
    5776:	40 81       	ld	r20, Z
    5778:	51 81       	ldd	r21, Z+1	; 0x01
    577a:	62 81       	ldd	r22, Z+2	; 0x02
    577c:	73 81       	ldd	r23, Z+3	; 0x03
    577e:	22 e0       	ldi	r18, 0x02	; 2
    5780:	30 e0       	ldi	r19, 0x00	; 0
    5782:	8d 2f       	mov	r24, r29
    5784:	9c 2f       	mov	r25, r28
    5786:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	if (config.anchorAlarmOn) {
    578a:	f7 01       	movw	r30, r14
    578c:	80 81       	ld	r24, Z
    578e:	88 23       	and	r24, r24
    5790:	b9 f1       	breq	.+110    	; 0x5800 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0x194>
		ser.print(",AAN:");
    5792:	61 e9       	ldi	r22, 0x91	; 145
    5794:	72 e0       	ldi	r23, 0x02	; 2
    5796:	8d 2f       	mov	r24, r29
    5798:	9c 2f       	mov	r25, r28
    579a:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(config.anchorLat);
    579e:	f8 01       	movw	r30, r16
    57a0:	ec 58       	subi	r30, 0x8C	; 140
    57a2:	ff 4f       	sbci	r31, 0xFF	; 255
    57a4:	40 81       	ld	r20, Z
    57a6:	51 81       	ldd	r21, Z+1	; 0x01
    57a8:	62 81       	ldd	r22, Z+2	; 0x02
    57aa:	73 81       	ldd	r23, Z+3	; 0x03
    57ac:	22 e0       	ldi	r18, 0x02	; 2
    57ae:	30 e0       	ldi	r19, 0x00	; 0
    57b0:	8d 2f       	mov	r24, r29
    57b2:	9c 2f       	mov	r25, r28
    57b4:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",AAE:");
    57b8:	67 e9       	ldi	r22, 0x97	; 151
    57ba:	72 e0       	ldi	r23, 0x02	; 2
    57bc:	8d 2f       	mov	r24, r29
    57be:	9c 2f       	mov	r25, r28
    57c0:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(config.anchorLon);
    57c4:	f8 01       	movw	r30, r16
    57c6:	e8 58       	subi	r30, 0x88	; 136
    57c8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ca:	40 81       	ld	r20, Z
    57cc:	51 81       	ldd	r21, Z+1	; 0x01
    57ce:	62 81       	ldd	r22, Z+2	; 0x02
    57d0:	73 81       	ldd	r23, Z+3	; 0x03
    57d2:	22 e0       	ldi	r18, 0x02	; 2
    57d4:	30 e0       	ldi	r19, 0x00	; 0
    57d6:	8d 2f       	mov	r24, r29
    57d8:	9c 2f       	mov	r25, r28
    57da:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",AAD:");
    57de:	6d e9       	ldi	r22, 0x9D	; 157
    57e0:	72 e0       	ldi	r23, 0x02	; 2
    57e2:	8d 2f       	mov	r24, r29
    57e4:	9c 2f       	mov	r25, r28
    57e6:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(getAnchorDistance());
    57ea:	f8 01       	movw	r30, r16
    57ec:	44 89       	ldd	r20, Z+20	; 0x14
    57ee:	55 89       	ldd	r21, Z+21	; 0x15
    57f0:	66 89       	ldd	r22, Z+22	; 0x16
    57f2:	77 89       	ldd	r23, Z+23	; 0x17
    57f4:	22 e0       	ldi	r18, 0x02	; 2
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	8d 2f       	mov	r24, r29
    57fa:	9c 2f       	mov	r25, r28
    57fc:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	}
	//if wind alarm on, send data
	ser.print(",WSX:");
    5800:	63 ea       	ldi	r22, 0xA3	; 163
    5802:	72 e0       	ldi	r23, 0x02	; 2
    5804:	8d 2f       	mov	r24, r29
    5806:	9c 2f       	mov	r25, r28
    5808:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.windAlarmOn);
    580c:	f8 01       	movw	r30, r16
    580e:	ed 56       	subi	r30, 0x6D	; 109
    5810:	ff 4f       	sbci	r31, 0xFF	; 255
    5812:	60 81       	ld	r22, Z
    5814:	4a e0       	ldi	r20, 0x0A	; 10
    5816:	50 e0       	ldi	r21, 0x00	; 0
    5818:	70 e0       	ldi	r23, 0x00	; 0
    581a:	8d 2f       	mov	r24, r29
    581c:	9c 2f       	mov	r25, r28
    581e:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	ser.print(",WSK:");
    5822:	69 ea       	ldi	r22, 0xA9	; 169
    5824:	72 e0       	ldi	r23, 0x02	; 2
    5826:	8d 2f       	mov	r24, r29
    5828:	9c 2f       	mov	r25, r28
    582a:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.windAlarmSpeed);
    582e:	f8 01       	movw	r30, r16
    5830:	ef 56       	subi	r30, 0x6F	; 111
    5832:	ff 4f       	sbci	r31, 0xFF	; 255
    5834:	60 81       	ld	r22, Z
    5836:	71 81       	ldd	r23, Z+1	; 0x01
    5838:	4a e0       	ldi	r20, 0x0A	; 10
    583a:	50 e0       	ldi	r21, 0x00	; 0
    583c:	8d 2f       	mov	r24, r29
    583e:	9c 2f       	mov	r25, r28
    5840:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>

	ser.println(",");
    5844:	66 ee       	ldi	r22, 0xE6	; 230
    5846:	74 e0       	ldi	r23, 0x04	; 4
    5848:	8d 2f       	mov	r24, r29
    584a:	9c 2f       	mov	r25, r28
    584c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	return 0;
}
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	1f 91       	pop	r17
    585a:	0f 91       	pop	r16
    585c:	ff 90       	pop	r15
    585e:	ef 90       	pop	r14
    5860:	08 95       	ret

00005862 <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>:
	//default option - compass
	return magneticHeading;
}

int FreeBoardModel::getAutopilotDeadZone(){
	return this->config.autopilotDeadZone;
    5862:	fc 01       	movw	r30, r24
    5864:	ee 57       	subi	r30, 0x7E	; 126
    5866:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5868:	80 81       	ld	r24, Z
    586a:	91 81       	ldd	r25, Z+1	; 0x01
    586c:	08 95       	ret

0000586e <_ZN14FreeBoardModel17getAutopilotSlackEv>:
int FreeBoardModel::getAutopilotSlack(){
	return this->config.autopilotSlack;
    586e:	fc 01       	movw	r30, r24
    5870:	ec 57       	subi	r30, 0x7C	; 124
    5872:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5874:	80 81       	ld	r24, Z
    5876:	91 81       	ldd	r25, Z+1	; 0x01
    5878:	08 95       	ret

0000587a <_ZN14FreeBoardModel13getGpsLastFixEv>:
float FreeBoardModel::getGpsCourse() {
	return gpsState.gpsCourse;
}

unsigned long FreeBoardModel::getGpsLastFix() {
	return gpsState.gpsLastFix;
    587a:	fc 01       	movw	r30, r24
    587c:	e7 5b       	subi	r30, 0xB7	; 183
    587e:	ff 4f       	sbci	r31, 0xFF	; 255
    5880:	60 81       	ld	r22, Z
    5882:	71 81       	ldd	r23, Z+1	; 0x01
}
    5884:	82 81       	ldd	r24, Z+2	; 0x02
    5886:	93 81       	ldd	r25, Z+3	; 0x03
    5888:	08 95       	ret

0000588a <_ZN14FreeBoardModel14getGpsLatitudeEv>:

float FreeBoardModel::getGpsLatitude() {
	return gpsState.gpsLatitude;
    588a:	fc 01       	movw	r30, r24
    588c:	ee 5a       	subi	r30, 0xAE	; 174
    588e:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5890:	50 81       	ld	r21, Z
    5892:	41 81       	ldd	r20, Z+1	; 0x01
    5894:	32 81       	ldd	r19, Z+2	; 0x02
    5896:	23 81       	ldd	r18, Z+3	; 0x03
    5898:	65 2f       	mov	r22, r21
    589a:	74 2f       	mov	r23, r20
    589c:	83 2f       	mov	r24, r19
    589e:	92 2f       	mov	r25, r18
    58a0:	08 95       	ret

000058a2 <_ZN14FreeBoardModel15getGpsLongitudeEv>:

float FreeBoardModel::getGpsLongitude() {
	return gpsState.gpsLongitude;
    58a2:	fc 01       	movw	r30, r24
    58a4:	ea 5a       	subi	r30, 0xAA	; 170
    58a6:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58a8:	50 81       	ld	r21, Z
    58aa:	41 81       	ldd	r20, Z+1	; 0x01
    58ac:	32 81       	ldd	r19, Z+2	; 0x02
    58ae:	23 81       	ldd	r18, Z+3	; 0x03
    58b0:	65 2f       	mov	r22, r21
    58b2:	74 2f       	mov	r23, r20
    58b4:	83 2f       	mov	r24, r19
    58b6:	92 2f       	mov	r25, r18
    58b8:	08 95       	ret

000058ba <_ZN14FreeBoardModel15getGpsSpeedUnitEv>:
float FreeBoardModel::getGpsSpeed() {
	return gpsState.gpsSpeed;
}

float FreeBoardModel::getGpsSpeedUnit() {
	return config.gpsSpeedUnit;
    58ba:	fc 01       	movw	r30, r24
    58bc:	ea 57       	subi	r30, 0x7A	; 122
    58be:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58c0:	50 81       	ld	r21, Z
    58c2:	41 81       	ldd	r20, Z+1	; 0x01
    58c4:	32 81       	ldd	r19, Z+2	; 0x02
    58c6:	23 81       	ldd	r18, Z+3	; 0x03
    58c8:	65 2f       	mov	r22, r21
    58ca:	74 2f       	mov	r23, r20
    58cc:	83 2f       	mov	r24, r19
    58ce:	92 2f       	mov	r25, r18
    58d0:	08 95       	ret

000058d2 <_ZN14FreeBoardModel12getGpsStatusEv>:

char FreeBoardModel::getGpsStatus() {
	return gpsState.gpsStatus;
    58d2:	8f 5a       	subi	r24, 0xAF	; 175
    58d4:	9f 4f       	sbci	r25, 0xFF	; 255
}
    58d6:	fc 01       	movw	r30, r24
    58d8:	80 81       	ld	r24, Z
    58da:	08 95       	ret

000058dc <_ZN14FreeBoardModel17getWindZeroOffsetEv>:
volatile bool FreeBoardModel::isRadarAlarmTriggered() {
	return radarAlarmTriggered;
}

int FreeBoardModel::getWindZeroOffset() {
	return config.windZeroOffset;
    58dc:	fc 01       	movw	r30, r24
    58de:	e8 56       	subi	r30, 0x68	; 104
    58e0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58e2:	80 81       	ld	r24, Z
    58e4:	91 81       	ldd	r25, Z+1	; 0x01
    58e6:	08 95       	ret

000058e8 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>:

int FreeBoardModel::getWindAlarmSpeed() {
	return config.windAlarmSpeed;
    58e8:	fc 01       	movw	r30, r24
    58ea:	ef 56       	subi	r30, 0x6F	; 111
    58ec:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58ee:	80 81       	ld	r24, Z
    58f0:	91 81       	ldd	r25, Z+1	; 0x01
    58f2:	08 95       	ret

000058f4 <_ZN14FreeBoardModel18getWindApparentDirEv>:

int FreeBoardModel::getWindApparentDir() {
	return windState.windApparentDir;
    58f4:	fc 01       	movw	r30, r24
    58f6:	e1 59       	subi	r30, 0x91	; 145
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58fa:	80 81       	ld	r24, Z
    58fc:	91 81       	ldd	r25, Z+1	; 0x01
    58fe:	08 95       	ret

00005900 <_ZN14FreeBoardModel14getWindAverageEv>:
int FreeBoardModel::getWindTrueDir() {
	return windState.windTrueDir;
}

float FreeBoardModel::getWindAverage() {
	return windState.windAverage;
    5900:	fc 01       	movw	r30, r24
    5902:	e7 59       	subi	r30, 0x97	; 151
    5904:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5906:	50 81       	ld	r21, Z
    5908:	41 81       	ldd	r20, Z+1	; 0x01
    590a:	32 81       	ldd	r19, Z+2	; 0x02
    590c:	23 81       	ldd	r18, Z+3	; 0x03
    590e:	65 2f       	mov	r22, r21
    5910:	74 2f       	mov	r23, r20
    5912:	83 2f       	mov	r24, r19
    5914:	92 2f       	mov	r25, r18
    5916:	08 95       	ret

00005918 <_ZN14FreeBoardModel13getWindFactorEv>:

float FreeBoardModel::getWindFactor() {
	return config.windFactor;
    5918:	fc 01       	movw	r30, r24
    591a:	ec 56       	subi	r30, 0x6C	; 108
    591c:	ff 4f       	sbci	r31, 0xFF	; 255
}
    591e:	50 81       	ld	r21, Z
    5920:	41 81       	ldd	r20, Z+1	; 0x01
    5922:	32 81       	ldd	r19, Z+2	; 0x02
    5924:	23 81       	ldd	r18, Z+3	; 0x03
    5926:	65 2f       	mov	r22, r21
    5928:	74 2f       	mov	r23, r20
    592a:	83 2f       	mov	r24, r19
    592c:	92 2f       	mov	r25, r18
    592e:	08 95       	ret

00005930 <_ZN14FreeBoardModel10getWindMaxEv>:
unsigned long FreeBoardModel::getWindLastUpdate() {
	return windState.windLastUpdate;
}

int FreeBoardModel::getWindMax() {
	return windState.windMax;
    5930:	fc 01       	movw	r30, r24
    5932:	e3 59       	subi	r30, 0x93	; 147
    5934:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5936:	80 81       	ld	r24, Z
    5938:	91 81       	ldd	r25, Z+1	; 0x01
    593a:	08 95       	ret

0000593c <_ZN14FreeBoardModel15isAnchorAlarmOnEv>:

bool FreeBoardModel::isAnchorAlarmOn() {
	return config.anchorAlarmOn;
    593c:	80 58       	subi	r24, 0x80	; 128
    593e:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5940:	fc 01       	movw	r30, r24
    5942:	80 81       	ld	r24, Z
    5944:	08 95       	ret

00005946 <_ZN14FreeBoardModel11isGpsDecodeEv>:
bool FreeBoardModel::isGpsAlarmTriggered() {
	return gpsState.gpsAlarmTriggered;
}

bool FreeBoardModel::isGpsDecode() {
	return gpsState.gpsDecode;
    5946:	88 5b       	subi	r24, 0xB8	; 184
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
}
    594a:	fc 01       	movw	r30, r24
    594c:	80 81       	ld	r24, Z
    594e:	08 95       	ret

00005950 <_ZN14FreeBoardModel13isWindAlarmOnEv>:

bool FreeBoardModel::isWindAlarmOn() {
	return config.windAlarmOn;
    5950:	8d 56       	subi	r24, 0x6D	; 109
    5952:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5954:	fc 01       	movw	r30, r24
    5956:	80 81       	ld	r24, Z
    5958:	08 95       	ret

0000595a <_ZN14FreeBoardModel12setAlarmLastEm>:

void FreeBoardModel::setAlarmLast(unsigned long alarmLast) {
	this->alarmLast = alarmLast;
    595a:	fc 01       	movw	r30, r24
    595c:	40 83       	st	Z, r20
    595e:	51 83       	std	Z+1, r21	; 0x01
    5960:	62 83       	std	Z+2, r22	; 0x02
    5962:	73 83       	std	Z+3, r23	; 0x03
    5964:	08 95       	ret

00005966 <_ZN14FreeBoardModel14setAlarmSnoozeEm>:
}

void FreeBoardModel::setAlarmSnooze(unsigned long alarmSnooze) {
	this->alarmSnooze = alarmSnooze;
    5966:	fc 01       	movw	r30, r24
    5968:	44 83       	std	Z+4, r20	; 0x04
    596a:	55 83       	std	Z+5, r21	; 0x05
    596c:	66 83       	std	Z+6, r22	; 0x06
    596e:	77 83       	std	Z+7, r23	; 0x07
    5970:	08 95       	ret

00005972 <_ZN14FreeBoardModel16setAnchorAlarmOnEb>:
}

void FreeBoardModel::setAnchorAlarmOn(bool anchorAlarmOn) {
	this->config.anchorAlarmOn = anchorAlarmOn;
    5972:	80 58       	subi	r24, 0x80	; 128
    5974:	9f 4f       	sbci	r25, 0xFF	; 255
    5976:	fc 01       	movw	r30, r24
    5978:	60 83       	st	Z, r22
    597a:	08 95       	ret

0000597c <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>:
}

void FreeBoardModel::setAnchorAlarmTriggered(bool anchorAlarmTriggered) {
	this->anchorState.anchorAlarmTriggered = anchorAlarmTriggered;
    597c:	fc 01       	movw	r30, r24
    597e:	64 8f       	std	Z+28, r22	; 0x1c
    5980:	08 95       	ret

00005982 <_ZN14FreeBoardModel17setAnchorDistanceEf>:
}

void FreeBoardModel::setAnchorDistance(float anchorDistance) {
	this->anchorState.anchorDistance = anchorDistance;
    5982:	fc 01       	movw	r30, r24
    5984:	44 8b       	std	Z+20, r20	; 0x14
    5986:	55 8b       	std	Z+21, r21	; 0x15
    5988:	66 8b       	std	Z+22, r22	; 0x16
    598a:	77 8b       	std	Z+23, r23	; 0x17
    598c:	08 95       	ret

0000598e <_ZN14FreeBoardModel10setAnchorEEf>:
}

void FreeBoardModel::setAnchorE(float anchorE) {
	this->anchorState.anchorE = anchorE;
    598e:	fc 01       	movw	r30, r24
    5990:	45 a3       	std	Z+37, r20	; 0x25
    5992:	56 a3       	std	Z+38, r21	; 0x26
    5994:	67 a3       	std	Z+39, r22	; 0x27
    5996:	70 a7       	std	Z+40, r23	; 0x28
    5998:	08 95       	ret

0000599a <_ZN14FreeBoardModel12setAnchorLatEf>:
}

void FreeBoardModel::setAnchorLat(float anchorLat) {
	this->config.anchorLat = anchorLat;
    599a:	8c 58       	subi	r24, 0x8C	; 140
    599c:	9f 4f       	sbci	r25, 0xFF	; 255
    599e:	fc 01       	movw	r30, r24
    59a0:	40 83       	st	Z, r20
    59a2:	51 83       	std	Z+1, r21	; 0x01
    59a4:	62 83       	std	Z+2, r22	; 0x02
    59a6:	73 83       	std	Z+3, r23	; 0x03
    59a8:	08 95       	ret

000059aa <_ZN14FreeBoardModel12setAnchorLonEf>:
}

void FreeBoardModel::setAnchorLon(float anchorLon) {
	this->config.anchorLon = anchorLon;
    59aa:	88 58       	subi	r24, 0x88	; 136
    59ac:	9f 4f       	sbci	r25, 0xFF	; 255
    59ae:	fc 01       	movw	r30, r24
    59b0:	40 83       	st	Z, r20
    59b2:	51 83       	std	Z+1, r21	; 0x01
    59b4:	62 83       	std	Z+2, r22	; 0x02
    59b6:	73 83       	std	Z+3, r23	; 0x03
    59b8:	08 95       	ret

000059ba <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>:
}

void FreeBoardModel::setAnchorMaxDistance(float anchorMaxDistance) {
	this->anchorState.anchorMaxDistance = anchorMaxDistance;
    59ba:	fc 01       	movw	r30, r24
    59bc:	40 8f       	std	Z+24, r20	; 0x18
    59be:	51 8f       	std	Z+25, r21	; 0x19
    59c0:	62 8f       	std	Z+26, r22	; 0x1a
    59c2:	73 8f       	std	Z+27, r23	; 0x1b
    59c4:	08 95       	ret

000059c6 <_ZN14FreeBoardModel10setAnchorNEf>:
}

void FreeBoardModel::setAnchorN(float anchorN) {
	this->anchorState.anchorN = anchorN;
    59c6:	fc 01       	movw	r30, r24
    59c8:	45 8f       	std	Z+29, r20	; 0x1d
    59ca:	56 8f       	std	Z+30, r21	; 0x1e
    59cc:	67 8f       	std	Z+31, r22	; 0x1f
    59ce:	70 a3       	std	Z+32, r23	; 0x20
    59d0:	08 95       	ret

000059d2 <_ZN14FreeBoardModel15setAnchorRadiusEf>:
}

void FreeBoardModel::setAnchorRadius(float anchorRadius) {
	this->config.anchorRadius = anchorRadius;
    59d2:	84 58       	subi	r24, 0x84	; 132
    59d4:	9f 4f       	sbci	r25, 0xFF	; 255
    59d6:	fc 01       	movw	r30, r24
    59d8:	40 83       	st	Z, r20
    59da:	51 83       	std	Z+1, r21	; 0x01
    59dc:	62 83       	std	Z+2, r22	; 0x02
    59de:	73 83       	std	Z+3, r23	; 0x03
    59e0:	08 95       	ret

000059e2 <_ZN14FreeBoardModel18setAnchorRadiusDegEf>:
}

void FreeBoardModel::setAnchorRadiusDeg(float anchorRadiusDeg) {
	this->anchorState.anchorRadiusDeg = anchorRadiusDeg;
    59e2:	fc 01       	movw	r30, r24
    59e4:	40 8b       	std	Z+16, r20	; 0x10
    59e6:	51 8b       	std	Z+17, r21	; 0x11
    59e8:	62 8b       	std	Z+18, r22	; 0x12
    59ea:	73 8b       	std	Z+19, r23	; 0x13
    59ec:	08 95       	ret

000059ee <_ZN14FreeBoardModel10setAnchorSEf>:
}

void FreeBoardModel::setAnchorS(float anchorS) {
	this->anchorState.anchorS = anchorS;
    59ee:	fc 01       	movw	r30, r24
    59f0:	41 a3       	std	Z+33, r20	; 0x21
    59f2:	52 a3       	std	Z+34, r21	; 0x22
    59f4:	63 a3       	std	Z+35, r22	; 0x23
    59f6:	74 a3       	std	Z+36, r23	; 0x24
    59f8:	08 95       	ret

000059fa <_ZN14FreeBoardModel10setAnchorWEf>:
}

void FreeBoardModel::setAnchorW(float anchorW) {
	this->anchorState.anchorW = anchorW;
    59fa:	fc 01       	movw	r30, r24
    59fc:	41 a7       	std	Z+41, r20	; 0x29
    59fe:	52 a7       	std	Z+42, r21	; 0x2a
    5a00:	63 a7       	std	Z+43, r22	; 0x2b
    5a02:	74 a7       	std	Z+44, r23	; 0x2c
    5a04:	08 95       	ret

00005a06 <_ZN14FreeBoardModel21setAutopilotReferenceEc>:
}

void FreeBoardModel::setAutopilotReference(char autopilotReference) {
    5a06:	cf 93       	push	r28
    5a08:	df 93       	push	r29
    5a0a:	ec 01       	movw	r28, r24

	if(autopilotReference != AUTOPILOT_WIND && autopilotReference != AUTOPILOT_COMPASS) return;
    5a0c:	67 35       	cpi	r22, 0x57	; 87
    5a0e:	11 f0       	breq	.+4      	; 0x5a14 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0xe>
    5a10:	63 34       	cpi	r22, 0x43	; 67
    5a12:	29 f5       	brne	.+74     	; 0x5a5e <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x58>
	this->autopilotState.autopilotReference = autopilotReference;
    5a14:	6a ab       	std	Y+50, r22	; 0x32
	if(autopilotState.autopilotReference ==AUTOPILOT_WIND){
    5a16:	67 35       	cpi	r22, 0x57	; 87
    5a18:	81 f4       	brne	.+32     	; 0x5a3a <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x34>
			autopilotState.autopilotTargetHeading=windState.windApparentDir;
    5a1a:	fe 01       	movw	r30, r28
    5a1c:	e1 59       	subi	r30, 0x91	; 145
    5a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a20:	60 81       	ld	r22, Z
    5a22:	71 81       	ldd	r23, Z+1	; 0x01
    5a24:	88 27       	eor	r24, r24
    5a26:	77 fd       	sbrc	r23, 7
    5a28:	80 95       	com	r24
    5a2a:	98 2f       	mov	r25, r24
    5a2c:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    5a30:	6b ab       	std	Y+51, r22	; 0x33
    5a32:	7c ab       	std	Y+52, r23	; 0x34
    5a34:	8d ab       	std	Y+53, r24	; 0x35
    5a36:	9e ab       	std	Y+54, r25	; 0x36
    5a38:	0a c0       	rjmp	.+20     	; 0x5a4e <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
	}
	if(autopilotState.autopilotReference == AUTOPILOT_COMPASS){
    5a3a:	63 34       	cpi	r22, 0x43	; 67
    5a3c:	41 f4       	brne	.+16     	; 0x5a4e <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
		autopilotState.autopilotTargetHeading=magneticHeading;
    5a3e:	48 85       	ldd	r20, Y+8	; 0x08
    5a40:	59 85       	ldd	r21, Y+9	; 0x09
    5a42:	6a 85       	ldd	r22, Y+10	; 0x0a
    5a44:	7b 85       	ldd	r23, Y+11	; 0x0b
    5a46:	4b ab       	std	Y+51, r20	; 0x33
    5a48:	5c ab       	std	Y+52, r21	; 0x34
    5a4a:	6d ab       	std	Y+53, r22	; 0x35
    5a4c:	7e ab       	std	Y+54, r23	; 0x36
	}
	//and netralise the rudder position too.
	this->autopilotState.autopilotRudderCommand=33;
    5a4e:	40 e0       	ldi	r20, 0x00	; 0
    5a50:	50 e0       	ldi	r21, 0x00	; 0
    5a52:	64 e0       	ldi	r22, 0x04	; 4
    5a54:	72 e4       	ldi	r23, 0x42	; 66
    5a56:	4f ab       	std	Y+55, r20	; 0x37
    5a58:	58 af       	std	Y+56, r21	; 0x38
    5a5a:	69 af       	std	Y+57, r22	; 0x39
    5a5c:	7a af       	std	Y+58, r23	; 0x3a
}
    5a5e:	df 91       	pop	r29
    5a60:	cf 91       	pop	r28
    5a62:	08 95       	ret

00005a64 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>:
	this->autopilotState.autopilotAlarmTriggered = autopilotAlarmTriggered;
}


void FreeBoardModel::setAutopilotRudderCommand(double autopilotRudderCommand) {
	this->autopilotState.autopilotRudderCommand = autopilotRudderCommand;
    5a64:	fc 01       	movw	r30, r24
    5a66:	47 ab       	std	Z+55, r20	; 0x37
    5a68:	50 af       	std	Z+56, r21	; 0x38
    5a6a:	61 af       	std	Z+57, r22	; 0x39
    5a6c:	72 af       	std	Z+58, r23	; 0x3a
    5a6e:	08 95       	ret

00005a70 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>:
/**
 * For magnetic it will be 0-360degM
 * For wind it will be -180 to +180 from bow.
 * Since this matches with target heading, and we convert in autopilot to 0-360, alls good?
 */
void FreeBoardModel::setAutopilotTargetHeading(double autopilotTargetHeading) {
    5a70:	cf 93       	push	r28
    5a72:	df 93       	push	r29
    5a74:	ec 01       	movw	r28, r24
	//make this 0-360 range only
		this->autopilotState.autopilotTargetHeading = (double)(((int)autopilotTargetHeading+360) % 360);
    5a76:	cb 01       	movw	r24, r22
    5a78:	ba 01       	movw	r22, r20
    5a7a:	0e 94 24 41 	call	0x8248	; 0x8248 <__fixsfsi>
    5a7e:	cb 01       	movw	r24, r22
    5a80:	88 59       	subi	r24, 0x98	; 152
    5a82:	9e 4f       	sbci	r25, 0xFE	; 254
    5a84:	68 e6       	ldi	r22, 0x68	; 104
    5a86:	71 e0       	ldi	r23, 0x01	; 1
    5a88:	0e 94 b4 43 	call	0x8768	; 0x8768 <__divmodhi4>
    5a8c:	bc 01       	movw	r22, r24
    5a8e:	88 27       	eor	r24, r24
    5a90:	77 fd       	sbrc	r23, 7
    5a92:	80 95       	com	r24
    5a94:	98 2f       	mov	r25, r24
    5a96:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    5a9a:	6b ab       	std	Y+51, r22	; 0x33
    5a9c:	7c ab       	std	Y+52, r23	; 0x34
    5a9e:	8d ab       	std	Y+53, r24	; 0x35
    5aa0:	9e ab       	std	Y+54, r25	; 0x36
}
    5aa2:	df 91       	pop	r29
    5aa4:	cf 91       	pop	r28
    5aa6:	08 95       	ret

00005aa8 <_ZN14FreeBoardModel12setGpsCourseEf>:
void FreeBoardModel::setGpsAlarmTriggered(bool gpsAlarmTriggered) {
	this->gpsState.gpsAlarmTriggered = gpsAlarmTriggered;
}

void FreeBoardModel::setGpsCourse(float gpsCourse) {
	this->gpsState.gpsCourse = gpsCourse;
    5aa8:	82 5a       	subi	r24, 0xA2	; 162
    5aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    5aac:	fc 01       	movw	r30, r24
    5aae:	40 83       	st	Z, r20
    5ab0:	51 83       	std	Z+1, r21	; 0x01
    5ab2:	62 83       	std	Z+2, r22	; 0x02
    5ab4:	73 83       	std	Z+3, r23	; 0x03
    5ab6:	08 95       	ret

00005ab8 <_ZN14FreeBoardModel12setGpsDecodeEb>:
}

void FreeBoardModel::setGpsDecode(bool gpsDecode) {
	this->gpsState.gpsDecode = gpsDecode;
    5ab8:	88 5b       	subi	r24, 0xB8	; 184
    5aba:	9f 4f       	sbci	r25, 0xFF	; 255
    5abc:	fc 01       	movw	r30, r24
    5abe:	60 83       	st	Z, r22
    5ac0:	08 95       	ret

00005ac2 <_ZN14FreeBoardModel13setGpsLastFixEm>:
}

void FreeBoardModel::setGpsLastFix(unsigned long gpsLastFix) {
	this->gpsState.gpsLastFix = gpsLastFix;
    5ac2:	87 5b       	subi	r24, 0xB7	; 183
    5ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac6:	fc 01       	movw	r30, r24
    5ac8:	40 83       	st	Z, r20
    5aca:	51 83       	std	Z+1, r21	; 0x01
    5acc:	62 83       	std	Z+2, r22	; 0x02
    5ace:	73 83       	std	Z+3, r23	; 0x03
    5ad0:	08 95       	ret

00005ad2 <_ZN14FreeBoardModel14setGpsLatitudeEf>:
}

void FreeBoardModel::setGpsLatitude(float gpsLatitude) {
	this->gpsState.gpsLatitude = gpsLatitude;
    5ad2:	8e 5a       	subi	r24, 0xAE	; 174
    5ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	40 83       	st	Z, r20
    5ada:	51 83       	std	Z+1, r21	; 0x01
    5adc:	62 83       	std	Z+2, r22	; 0x02
    5ade:	73 83       	std	Z+3, r23	; 0x03
    5ae0:	08 95       	ret

00005ae2 <_ZN14FreeBoardModel15setGpsLongitudeEf>:
}

void FreeBoardModel::setGpsLongitude(float gpsLongitude) {
	this->gpsState.gpsLongitude = gpsLongitude;
    5ae2:	8a 5a       	subi	r24, 0xAA	; 170
    5ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae6:	fc 01       	movw	r30, r24
    5ae8:	40 83       	st	Z, r20
    5aea:	51 83       	std	Z+1, r21	; 0x01
    5aec:	62 83       	std	Z+2, r22	; 0x02
    5aee:	73 83       	std	Z+3, r23	; 0x03
    5af0:	08 95       	ret

00005af2 <_ZN14FreeBoardModel11setGpsSpeedEf>:
}

void FreeBoardModel::setGpsSpeed(float gpsSpeed) {
	this->gpsState.gpsSpeed = gpsSpeed;
    5af2:	86 5a       	subi	r24, 0xA6	; 166
    5af4:	9f 4f       	sbci	r25, 0xFF	; 255
    5af6:	fc 01       	movw	r30, r24
    5af8:	40 83       	st	Z, r20
    5afa:	51 83       	std	Z+1, r21	; 0x01
    5afc:	62 83       	std	Z+2, r22	; 0x02
    5afe:	73 83       	std	Z+3, r23	; 0x03
    5b00:	08 95       	ret

00005b02 <_ZN14FreeBoardModel12setGpsStatusEc>:
void FreeBoardModel::setGpsSpeedUnit(float gpsSpeedUnit) {
	this->config.gpsSpeedUnit = gpsSpeedUnit;
}

void FreeBoardModel::setGpsStatus(char gpsStatus) {
	this->gpsState.gpsStatus = gpsStatus;
    5b02:	8f 5a       	subi	r24, 0xAF	; 175
    5b04:	9f 4f       	sbci	r25, 0xFF	; 255
    5b06:	fc 01       	movw	r30, r24
    5b08:	60 83       	st	Z, r22
    5b0a:	08 95       	ret

00005b0c <_ZN14FreeBoardModel9setGpsUtcEf>:
}

void FreeBoardModel::setGpsUtc(float gpsUtc) {
	this->gpsState.gpsUtc = gpsUtc;
    5b0c:	83 5b       	subi	r24, 0xB3	; 179
    5b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b10:	fc 01       	movw	r30, r24
    5b12:	40 83       	st	Z, r20
    5b14:	51 83       	std	Z+1, r21	; 0x01
    5b16:	62 83       	std	Z+2, r22	; 0x02
    5b18:	73 83       	std	Z+3, r23	; 0x03
    5b1a:	08 95       	ret

00005b1c <_ZN14FreeBoardModel18setMagneticHeadingEf>:
}

void FreeBoardModel::setMagneticHeading(float magneticHeading){
	this->magneticHeading=magneticHeading;
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	40 87       	std	Z+8, r20	; 0x08
    5b20:	51 87       	std	Z+9, r21	; 0x09
    5b22:	62 87       	std	Z+10, r22	; 0x0a
    5b24:	73 87       	std	Z+11, r23	; 0x0b
    5b26:	08 95       	ret

00005b28 <_ZN14FreeBoardModel14setDeclinationEf>:
}

void FreeBoardModel::setDeclination(float declination){
	this->declination=declination;
    5b28:	fc 01       	movw	r30, r24
    5b2a:	44 87       	std	Z+12, r20	; 0x0c
    5b2c:	55 87       	std	Z+13, r21	; 0x0d
    5b2e:	66 87       	std	Z+14, r22	; 0x0e
    5b30:	77 87       	std	Z+15, r23	; 0x0f
    5b32:	08 95       	ret

00005b34 <_ZN14FreeBoardModel17setWindZeroOffsetEi>:
void FreeBoardModel::setRadarAlarmTriggered(volatile bool radarAlarmTriggered) {
	this->radarAlarmTriggered = radarAlarmTriggered;
}

void FreeBoardModel::setWindZeroOffset(int windZeroOffset) {
	this->config.windZeroOffset = windZeroOffset;
    5b34:	88 56       	subi	r24, 0x68	; 104
    5b36:	9f 4f       	sbci	r25, 0xFF	; 255
    5b38:	fc 01       	movw	r30, r24
    5b3a:	71 83       	std	Z+1, r23	; 0x01
    5b3c:	60 83       	st	Z, r22
    5b3e:	08 95       	ret

00005b40 <_ZN14FreeBoardModel14setWindAlarmOnEb>:
}

void FreeBoardModel::setWindAlarmOn(bool windAlarmOn) {
	this->config.windAlarmOn = windAlarmOn;
    5b40:	8d 56       	subi	r24, 0x6D	; 109
    5b42:	9f 4f       	sbci	r25, 0xFF	; 255
    5b44:	fc 01       	movw	r30, r24
    5b46:	60 83       	st	Z, r22
    5b48:	08 95       	ret

00005b4a <_ZN14FreeBoardModel17setWindAlarmSpeedEi>:
}

void FreeBoardModel::setWindAlarmSpeed(int windAlarmSpeed) {
	this->config.windAlarmSpeed = windAlarmSpeed;
    5b4a:	8f 56       	subi	r24, 0x6F	; 111
    5b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b4e:	fc 01       	movw	r30, r24
    5b50:	71 83       	std	Z+1, r23	; 0x01
    5b52:	60 83       	st	Z, r22
    5b54:	08 95       	ret

00005b56 <_ZN14FreeBoardModel18setWindApparentDirEi>:
}

void FreeBoardModel::setWindApparentDir(int windApparentDir) {
	this->windState.windApparentDir = windApparentDir;
    5b56:	81 59       	subi	r24, 0x91	; 145
    5b58:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	71 83       	std	Z+1, r23	; 0x01
    5b5e:	60 83       	st	Z, r22
    5b60:	08 95       	ret

00005b62 <_ZN14FreeBoardModel14setWindTrueDirEi>:
}
void FreeBoardModel::setWindTrueDir(int windTrueDir) {
	this->windState.windTrueDir = windTrueDir;
    5b62:	8f 58       	subi	r24, 0x8F	; 143
    5b64:	9f 4f       	sbci	r25, 0xFF	; 255
    5b66:	fc 01       	movw	r30, r24
    5b68:	71 83       	std	Z+1, r23	; 0x01
    5b6a:	60 83       	st	Z, r22
    5b6c:	08 95       	ret

00005b6e <_ZN14FreeBoardModel14setWindAverageEf>:
}

void FreeBoardModel::setWindAverage(float windAverage) {
	this->windState.windAverage = windAverage;
    5b6e:	87 59       	subi	r24, 0x97	; 151
    5b70:	9f 4f       	sbci	r25, 0xFF	; 255
    5b72:	fc 01       	movw	r30, r24
    5b74:	40 83       	st	Z, r20
    5b76:	51 83       	std	Z+1, r21	; 0x01
    5b78:	62 83       	std	Z+2, r22	; 0x02
    5b7a:	73 83       	std	Z+3, r23	; 0x03
    5b7c:	08 95       	ret

00005b7e <_ZN14FreeBoardModel17setWindLastUpdateEm>:
void FreeBoardModel::setWindFactor(float windFactor) {
	this->config.windFactor = windFactor;
}

void FreeBoardModel::setWindLastUpdate(unsigned long windLastUpdate) {
	this->windState.windLastUpdate = windLastUpdate;
    5b7e:	8b 59       	subi	r24, 0x9B	; 155
    5b80:	9f 4f       	sbci	r25, 0xFF	; 255
    5b82:	fc 01       	movw	r30, r24
    5b84:	40 83       	st	Z, r20
    5b86:	51 83       	std	Z+1, r21	; 0x01
    5b88:	62 83       	std	Z+2, r22	; 0x02
    5b8a:	73 83       	std	Z+3, r23	; 0x03
    5b8c:	08 95       	ret

00005b8e <_ZN14FreeBoardModel13isAutopilotOnEv>:
	this->config.mobAlarmOn = mobAlarmOn;
}

bool FreeBoardModel::isAutopilotOn() {
	return autopilotState.autopilotOn;
}
    5b8e:	fc 01       	movw	r30, r24
    5b90:	85 a5       	ldd	r24, Z+45	; 0x2d
    5b92:	08 95       	ret

00005b94 <_ZN14FreeBoardModel14setAutopilotOnEb>:

void FreeBoardModel::setAutopilotOn(bool autopilotOn) {
    5b94:	1f 93       	push	r17
    5b96:	cf 93       	push	r28
    5b98:	df 93       	push	r29
    5b9a:	ec 01       	movw	r28, r24
    5b9c:	16 2f       	mov	r17, r22
	//this is potentally dangerous, since we dont want the boat diving off on an old target heading.
	//ALWAYS reset target heading to current magnetic or wind dir here
	setAutopilotReference(getAutopilotReference());
    5b9e:	6a a9       	ldd	r22, Y+50	; 0x32
    5ba0:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
	this->autopilotState.autopilotOn = autopilotOn;
    5ba4:	1d a7       	std	Y+45, r17	; 0x2d
}
    5ba6:	df 91       	pop	r29
    5ba8:	cf 91       	pop	r28
    5baa:	1f 91       	pop	r17
    5bac:	08 95       	ret

00005bae <_ZN14FreeBoardModel10setWindMaxEi>:
void FreeBoardModel::setRadarAlarmOn(volatile bool radarAlarmOn) {
	this->config.radarAlarmOn = radarAlarmOn;
}

void FreeBoardModel::setWindMax(int windMax) {
	this->windState.windMax = windMax;
    5bae:	83 59       	subi	r24, 0x93	; 147
    5bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	71 83       	std	Z+1, r23	; 0x01
    5bb6:	60 83       	st	Z, r22
    5bb8:	08 95       	ret

00005bba <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>:
}

void FreeBoardModel::setWindAlarmTriggered(bool windAlarmTriggered) {
	this->windState.windAlarmTriggered = windAlarmTriggered;
    5bba:	8d 58       	subi	r24, 0x8D	; 141
    5bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	60 83       	st	Z, r22
    5bc2:	08 95       	ret

00005bc4 <_ZN14FreeBoardModel11getGpsModelEv>:
}

short FreeBoardModel::getGpsModel(){
	return this->config.gpsModel;
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	e6 56       	subi	r30, 0x66	; 102
    5bc8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5bca:	80 81       	ld	r24, Z
    5bcc:	91 81       	ldd	r25, Z+1	; 0x01
    5bce:	08 95       	ret

00005bd0 <_ZN14FreeBoardModel11setGpsModelEs>:
void FreeBoardModel::setGpsModel(short gpsModel){
	this->config.gpsModel=gpsModel;
    5bd0:	86 56       	subi	r24, 0x66	; 102
    5bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd4:	fc 01       	movw	r30, r24
    5bd6:	71 83       	std	Z+1, r23	; 0x01
    5bd8:	60 83       	st	Z, r22
    5bda:	08 95       	ret

00005bdc <_ZN14FreeBoardModel13getSerialBaudEv>:
}
int FreeBoardModel::getSerialBaud(){
	return this->config.serialBaud;
    5bdc:	fc 01       	movw	r30, r24
    5bde:	e4 56       	subi	r30, 0x64	; 100
    5be0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5be2:	80 81       	ld	r24, Z
    5be4:	91 81       	ldd	r25, Z+1	; 0x01
    5be6:	08 95       	ret

00005be8 <_ZN14FreeBoardModel13setSerialBaudEi>:
void FreeBoardModel::setSerialBaud(int serialBaud){
	this->config.serialBaud=serialBaud;
    5be8:	84 56       	subi	r24, 0x64	; 100
    5bea:	9f 4f       	sbci	r25, 0xFF	; 255
    5bec:	fc 01       	movw	r30, r24
    5bee:	71 83       	std	Z+1, r23	; 0x01
    5bf0:	60 83       	st	Z, r22
    5bf2:	08 95       	ret

00005bf4 <_ZN14FreeBoardModel14getSerialBaud1Ev>:
}
int FreeBoardModel::getSerialBaud1(){
	return this->config.serialBaud1;
    5bf4:	fc 01       	movw	r30, r24
    5bf6:	e2 56       	subi	r30, 0x62	; 98
    5bf8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5bfa:	80 81       	ld	r24, Z
    5bfc:	91 81       	ldd	r25, Z+1	; 0x01
    5bfe:	08 95       	ret

00005c00 <_ZN14FreeBoardModel14setSerialBaud1Ei>:
void FreeBoardModel::setSerialBaud1(int serialBaud1){
	this->config.serialBaud1=serialBaud1;
    5c00:	82 56       	subi	r24, 0x62	; 98
    5c02:	9f 4f       	sbci	r25, 0xFF	; 255
    5c04:	fc 01       	movw	r30, r24
    5c06:	71 83       	std	Z+1, r23	; 0x01
    5c08:	60 83       	st	Z, r22
    5c0a:	08 95       	ret

00005c0c <_ZN14FreeBoardModel14getSerialBaud2Ev>:
}
int FreeBoardModel::getSerialBaud2(){
	return this->config.serialBaud2;
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	e0 56       	subi	r30, 0x60	; 96
    5c10:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5c12:	80 81       	ld	r24, Z
    5c14:	91 81       	ldd	r25, Z+1	; 0x01
    5c16:	08 95       	ret

00005c18 <_ZN14FreeBoardModel14setSerialBaud2Ei>:
void FreeBoardModel::setSerialBaud2(int serialBaud2){
	this->config.serialBaud2=serialBaud2;
    5c18:	80 56       	subi	r24, 0x60	; 96
    5c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1c:	fc 01       	movw	r30, r24
    5c1e:	71 83       	std	Z+1, r23	; 0x01
    5c20:	60 83       	st	Z, r22
    5c22:	08 95       	ret

00005c24 <_ZN14FreeBoardModel14getSerialBaud3Ev>:
}
int FreeBoardModel::getSerialBaud3(){
	return this->config.serialBaud3;
    5c24:	fc 01       	movw	r30, r24
    5c26:	ee 55       	subi	r30, 0x5E	; 94
    5c28:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5c2a:	80 81       	ld	r24, Z
    5c2c:	91 81       	ldd	r25, Z+1	; 0x01
    5c2e:	08 95       	ret

00005c30 <_ZN14FreeBoardModel14setSerialBaud3Ei>:
void FreeBoardModel::setSerialBaud3(int serialBaud3){
	this->config.serialBaud3=serialBaud3;
    5c30:	8e 55       	subi	r24, 0x5E	; 94
    5c32:	9f 4f       	sbci	r25, 0xFF	; 255
    5c34:	fc 01       	movw	r30, r24
    5c36:	71 83       	std	Z+1, r23	; 0x01
    5c38:	60 83       	st	Z, r22
    5c3a:	08 95       	ret

00005c3c <_ZN14FreeBoardModel10getSeaTalkEv>:
}
bool FreeBoardModel::getSeaTalk(){
	return this->config.seaTalk;
    5c3c:	8c 55       	subi	r24, 0x5C	; 92
    5c3e:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5c40:	fc 01       	movw	r30, r24
    5c42:	80 81       	ld	r24, Z
    5c44:	08 95       	ret

00005c46 <_ZN14FreeBoardModel10setSeaTalkEb>:
void FreeBoardModel::setSeaTalk(bool seaTalk){
	this->config.seaTalk=seaTalk;
    5c46:	8c 55       	subi	r24, 0x5C	; 92
    5c48:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4a:	fc 01       	movw	r30, r24
    5c4c:	60 83       	st	Z, r22
    5c4e:	08 95       	ret

00005c50 <_Z9calculatev>:
 * Timer interrupt driven method to do time sensitive calculations
 * The calc flag causes the main loop to execute other less sensitive calls.
 */
void calculate() {
	//we create 100ms pings here
	execute = true;
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	80 93 16 11 	sts	0x1116, r24
	//we record the ping count out to 2 secs
	interval++;
    5c56:	80 91 14 11 	lds	r24, 0x1114
    5c5a:	90 91 15 11 	lds	r25, 0x1115
    5c5e:	01 96       	adiw	r24, 0x01	; 1
    5c60:	90 93 15 11 	sts	0x1115, r25
    5c64:	80 93 14 11 	sts	0x1114, r24
	interval = interval % 20;
    5c68:	80 91 14 11 	lds	r24, 0x1114
    5c6c:	90 91 15 11 	lds	r25, 0x1115
    5c70:	64 e1       	ldi	r22, 0x14	; 20
    5c72:	70 e0       	ldi	r23, 0x00	; 0
    5c74:	0e 94 b4 43 	call	0x8768	; 0x8768 <__divmodhi4>
    5c78:	90 93 15 11 	sts	0x1115, r25
    5c7c:	80 93 14 11 	sts	0x1114, r24
    5c80:	08 95       	ret

00005c82 <_Z7readWDDv>:
	wind.readWindDataSpeed();
}

void readWDD() {
	//intCnt++;
	wind.readWindDataDir();
    5c82:	81 e8       	ldi	r24, 0x81	; 129
    5c84:	9a e0       	ldi	r25, 0x0A	; 10
    5c86:	0c 94 60 39 	jmp	0x72c0	; 0x72c0 <_ZN4Wind15readWindDataDirEv>

00005c8a <_Z7readWDSv>:
	interval = interval % 20;
}

void readWDS() {
	//intCnt++;
	wind.readWindDataSpeed();
    5c8a:	81 e8       	ldi	r24, 0x81	; 129
    5c8c:	9a e0       	ldi	r25, 0x0A	; 10
    5c8e:	0c 94 1a 39 	jmp	0x7234	; 0x7234 <_ZN4Wind17readWindDataSpeedEv>

00005c92 <setup>:
boolean inputSerial2Complete = false; // whether the string is complete
boolean inputSerial3Complete = false; // whether the string is complete

void setup() {

	model.readConfig();
    5c92:	8d e6       	ldi	r24, 0x6D	; 109
    5c94:	90 e1       	ldi	r25, 0x10	; 16
    5c96:	0e 94 15 2a 	call	0x542a	; 0x542a <_ZN14FreeBoardModel10readConfigEv>
	inputSerial.reserve(40);
    5c9a:	68 e2       	ldi	r22, 0x28	; 40
    5c9c:	70 e0       	ldi	r23, 0x00	; 0
    5c9e:	8c e0       	ldi	r24, 0x0C	; 12
    5ca0:	9a e0       	ldi	r25, 0x0A	; 10
    5ca2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN6String7reserveEj>
	// initialize  serial ports:
	Serial.begin(model.getSerialBaud(), SERIAL_8N1);
    5ca6:	8d e6       	ldi	r24, 0x6D	; 109
    5ca8:	90 e1       	ldi	r25, 0x10	; 16
    5caa:	0e 94 ee 2d 	call	0x5bdc	; 0x5bdc <_ZN14FreeBoardModel13getSerialBaudEv>
    5cae:	ac 01       	movw	r20, r24
    5cb0:	66 27       	eor	r22, r22
    5cb2:	57 fd       	sbrc	r21, 7
    5cb4:	60 95       	com	r22
    5cb6:	76 2f       	mov	r23, r22
    5cb8:	26 e0       	ldi	r18, 0x06	; 6
    5cba:	8c ed       	ldi	r24, 0xDC	; 220
    5cbc:	96 e0       	ldi	r25, 0x06	; 6
    5cbe:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>
	if (DEBUG) Serial.println("Initializing..");
    5cc2:	6f ea       	ldi	r22, 0xAF	; 175
    5cc4:	72 e0       	ldi	r23, 0x02	; 2
    5cc6:	8c ed       	ldi	r24, 0xDC	; 220
    5cc8:	96 e0       	ldi	r25, 0x06	; 6
    5cca:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

	//start gps on serial1, autobaud
	if (DEBUG) Serial.println("Start gps..");
    5cce:	6e eb       	ldi	r22, 0xBE	; 190
    5cd0:	72 e0       	ldi	r23, 0x02	; 2
    5cd2:	8c ed       	ldi	r24, 0xDC	; 220
    5cd4:	96 e0       	ldi	r25, 0x06	; 6
    5cd6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	gps.setupGps();
    5cda:	8b e7       	ldi	r24, 0x7B	; 123
    5cdc:	9a e0       	ldi	r25, 0x0A	; 10
    5cde:	0e 94 e1 36 	call	0x6dc2	; 0x6dc2 <_ZN3Gps8setupGpsEv>
	Serial1.begin(model.getSerialBaud1());
    5ce2:	8d e6       	ldi	r24, 0x6D	; 109
    5ce4:	90 e1       	ldi	r25, 0x10	; 16
    5ce6:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    5cea:	ac 01       	movw	r20, r24
    5cec:	66 27       	eor	r22, r22
    5cee:	57 fd       	sbrc	r21, 7
    5cf0:	60 95       	com	r22
    5cf2:	76 2f       	mov	r23, r22
    5cf4:	8a eb       	ldi	r24, 0xBA	; 186
    5cf6:	96 e0       	ldi	r25, 0x06	; 6
    5cf8:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>

	if (DEBUG) Serial.println("Start seatalk - serial2..");
    5cfc:	6a ec       	ldi	r22, 0xCA	; 202
    5cfe:	72 e0       	ldi	r23, 0x02	; 2
    5d00:	8c ed       	ldi	r24, 0xDC	; 220
    5d02:	96 e0       	ldi	r25, 0x06	; 6
    5d04:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	if(model.getSeaTalk()){
    5d08:	8d e6       	ldi	r24, 0x6D	; 109
    5d0a:	90 e1       	ldi	r25, 0x10	; 16
    5d0c:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <_ZN14FreeBoardModel10getSeaTalkEv>
    5d10:	88 23       	and	r24, r24
    5d12:	31 f0       	breq	.+12     	; 0x5d20 <setup+0x8e>
		Serial2.begin(4800, SERIAL_9N1); //Seatalk interface
    5d14:	27 e0       	ldi	r18, 0x07	; 7
    5d16:	40 ec       	ldi	r20, 0xC0	; 192
    5d18:	52 e1       	ldi	r21, 0x12	; 18
    5d1a:	60 e0       	ldi	r22, 0x00	; 0
    5d1c:	70 e0       	ldi	r23, 0x00	; 0
    5d1e:	0a c0       	rjmp	.+20     	; 0x5d34 <setup+0xa2>
	}else{
		Serial2.begin(model.getSerialBaud2(), SERIAL_8N1);
    5d20:	8d e6       	ldi	r24, 0x6D	; 109
    5d22:	90 e1       	ldi	r25, 0x10	; 16
    5d24:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <_ZN14FreeBoardModel14getSerialBaud2Ev>
    5d28:	ac 01       	movw	r20, r24
    5d2a:	66 27       	eor	r22, r22
    5d2c:	57 fd       	sbrc	r21, 7
    5d2e:	60 95       	com	r22
    5d30:	76 2f       	mov	r23, r22
    5d32:	26 e0       	ldi	r18, 0x06	; 6
    5d34:	88 e9       	ldi	r24, 0x98	; 152
    5d36:	96 e0       	ldi	r25, 0x06	; 6
    5d38:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>
	}

	if (DEBUG) Serial.println("Start nmea Rx - serial3..");
    5d3c:	64 ee       	ldi	r22, 0xE4	; 228
    5d3e:	72 e0       	ldi	r23, 0x02	; 2
    5d40:	8c ed       	ldi	r24, 0xDC	; 220
    5d42:	96 e0       	ldi	r25, 0x06	; 6
    5d44:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial3.begin(model.getSerialBaud3(), SERIAL_8N1); //talker2
    5d48:	8d e6       	ldi	r24, 0x6D	; 109
    5d4a:	90 e1       	ldi	r25, 0x10	; 16
    5d4c:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <_ZN14FreeBoardModel14getSerialBaud3Ev>
    5d50:	ac 01       	movw	r20, r24
    5d52:	66 27       	eor	r22, r22
    5d54:	57 fd       	sbrc	r21, 7
    5d56:	60 95       	com	r22
    5d58:	76 2f       	mov	r23, r22
    5d5a:	26 e0       	ldi	r18, 0x06	; 6
    5d5c:	86 e7       	ldi	r24, 0x76	; 118
    5d5e:	96 e0       	ldi	r25, 0x06	; 6
    5d60:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>

	if (DEBUG) Serial.println("Start nmea Tx..");
    5d64:	6e ef       	ldi	r22, 0xFE	; 254
    5d66:	72 e0       	ldi	r23, 0x02	; 2
    5d68:	8c ed       	ldi	r24, 0xDC	; 220
    5d6a:	96 e0       	ldi	r25, 0x06	; 6
    5d6c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	pinMode(nmeaRxPin, INPUT);
    5d70:	60 e0       	ldi	r22, 0x00	; 0
    5d72:	84 e3       	ldi	r24, 0x34	; 52
    5d74:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(nmeaTxPin, OUTPUT);
    5d78:	61 e0       	ldi	r22, 0x01	; 1
    5d7a:	85 e3       	ldi	r24, 0x35	; 53
    5d7c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	nmea.begin(4800);
    5d80:	40 ec       	ldi	r20, 0xC0	; 192
    5d82:	52 e1       	ldi	r21, 0x12	; 18
    5d84:	60 e0       	ldi	r22, 0x00	; 0
    5d86:	70 e0       	ldi	r23, 0x00	; 0
    5d88:	8c e2       	ldi	r24, 0x2C	; 44
    5d8a:	90 e1       	ldi	r25, 0x10	; 16
    5d8c:	0e 94 30 37 	call	0x6e60	; 0x6e60 <_ZN10NmeaSerial5beginEl>

	//setup interrupts to windPins
	if (DEBUG) Serial.println("Start wind..");
    5d90:	6e e0       	ldi	r22, 0x0E	; 14
    5d92:	73 e0       	ldi	r23, 0x03	; 3
    5d94:	8c ed       	ldi	r24, 0xDC	; 220
    5d96:	96 e0       	ldi	r25, 0x06	; 6
    5d98:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	pinMode(windSpeedPin, INPUT);
    5d9c:	60 e0       	ldi	r22, 0x00	; 0
    5d9e:	83 e0       	ldi	r24, 0x03	; 3
    5da0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	attachInterrupt(windSpeedInterrupt, readWDS, CHANGE);
    5da4:	41 e0       	ldi	r20, 0x01	; 1
    5da6:	50 e0       	ldi	r21, 0x00	; 0
    5da8:	65 e4       	ldi	r22, 0x45	; 69
    5daa:	7e e2       	ldi	r23, 0x2E	; 46
    5dac:	81 e0       	ldi	r24, 0x01	; 1
    5dae:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <attachInterrupt>
	pinMode(windDirPin, INPUT);
    5db2:	60 e0       	ldi	r22, 0x00	; 0
    5db4:	82 e0       	ldi	r24, 0x02	; 2
    5db6:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	attachInterrupt(windDirInterrupt, readWDD, CHANGE);
    5dba:	41 e0       	ldi	r20, 0x01	; 1
    5dbc:	50 e0       	ldi	r21, 0x00	; 0
    5dbe:	61 e4       	ldi	r22, 0x41	; 65
    5dc0:	7e e2       	ldi	r23, 0x2E	; 46
    5dc2:	80 e0       	ldi	r24, 0x00	; 0
    5dc4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <attachInterrupt>

//	//setup timers
	if (DEBUG) Serial.println("Start timer..");
    5dc8:	6b e1       	ldi	r22, 0x1B	; 27
    5dca:	73 e0       	ldi	r23, 0x03	; 3
    5dcc:	8c ed       	ldi	r24, 0xDC	; 220
    5dce:	96 e0       	ldi	r25, 0x06	; 6
    5dd0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	FlexiTimer2::set(100, calculate); // 100ms period
    5dd4:	48 e2       	ldi	r20, 0x28	; 40
    5dd6:	5e e2       	ldi	r21, 0x2E	; 46
    5dd8:	64 e6       	ldi	r22, 0x64	; 100
    5dda:	70 e0       	ldi	r23, 0x00	; 0
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	0e 94 67 20 	call	0x40ce	; 0x40ce <_ZN11FlexiTimer23setEmPFvvE>
	FlexiTimer2::start();
    5de4:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN11FlexiTimer25startEv>
	//lcd.clearLcd();

	if (DEBUG) Serial.println("Setup complete..");
    5de8:	69 e2       	ldi	r22, 0x29	; 41
    5dea:	73 e0       	ldi	r23, 0x03	; 3
    5dec:	8c ed       	ldi	r24, 0xDC	; 220
    5dee:	96 e0       	ldi	r25, 0x06	; 6
    5df0:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

00005df4 <_Z12serialEvent1v>:

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5df4:	1f c0       	rjmp	.+62     	; 0x5e34 <_Z12serialEvent1v+0x40>
		inputSerial1Complete = gps.decode(Serial1.read());
    5df6:	8a eb       	ldi	r24, 0xBA	; 186
    5df8:	96 e0       	ldi	r25, 0x06	; 6
    5dfa:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    5dfe:	68 2f       	mov	r22, r24
    5e00:	8b e7       	ldi	r24, 0x7B	; 123
    5e02:	9a e0       	ldi	r25, 0x0A	; 10
    5e04:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <_ZN3Gps6decodeEh>
    5e08:	80 93 0b 0a 	sts	0x0A0B, r24
		// read from port 1 (GPS), send to port 0:
		if (inputSerial1Complete) {
    5e0c:	88 23       	and	r24, r24
    5e0e:	91 f0       	breq	.+36     	; 0x5e34 <_Z12serialEvent1v+0x40>
			if (MUX) nmea.printNmea(gpsSource.sentence());
    5e10:	83 ec       	ldi	r24, 0xC3	; 195
    5e12:	9e e0       	ldi	r25, 0x0E	; 14
    5e14:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5e18:	bc 01       	movw	r22, r24
    5e1a:	8c e2       	ldi	r24, 0x2C	; 44
    5e1c:	90 e1       	ldi	r25, 0x10	; 16
    5e1e:	0e 94 41 37 	call	0x6e82	; 0x6e82 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(gpsSource.sentence());
    5e22:	83 ec       	ldi	r24, 0xC3	; 195
    5e24:	9e e0       	ldi	r25, 0x0E	; 14
    5e26:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5e2a:	bc 01       	movw	r22, r24
    5e2c:	8c ed       	ldi	r24, 0xDC	; 220
    5e2e:	96 e0       	ldi	r25, 0x06	; 6
    5e30:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5e34:	8a eb       	ldi	r24, 0xBA	; 186
    5e36:	96 e0       	ldi	r25, 0x06	; 6
    5e38:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    5e3c:	89 2b       	or	r24, r25
    5e3e:	d9 f6       	brne	.-74     	; 0x5df6 <_Z12serialEvent1v+0x2>
			Serial.println(gpsSource.sentence());
			//loop every sentence
			break;
		}
	}
}
    5e40:	08 95       	ret

00005e42 <_Z12serialEvent2v>:

void serialEvent2() {
	while (Serial2.available()) {
    5e42:	88 e9       	ldi	r24, 0x98	; 152
    5e44:	96 e0       	ldi	r25, 0x06	; 6
    5e46:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    5e4a:	89 2b       	or	r24, r25
    5e4c:	79 f1       	breq	.+94     	; 0x5eac <_Z12serialEvent2v+0x6a>
		if(model.getSeaTalk()){
    5e4e:	8d e6       	ldi	r24, 0x6D	; 109
    5e50:	90 e1       	ldi	r25, 0x10	; 16
    5e52:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <_ZN14FreeBoardModel10getSeaTalkEv>
    5e56:	88 23       	and	r24, r24
    5e58:	51 f0       	breq	.+20     	; 0x5e6e <_Z12serialEvent2v+0x2c>
			seatalk.processSeaTalkByte(Serial2.read());
    5e5a:	88 e9       	ldi	r24, 0x98	; 152
    5e5c:	96 e0       	ldi	r25, 0x06	; 6
    5e5e:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    5e62:	68 2f       	mov	r22, r24
    5e64:	83 e1       	ldi	r24, 0x13	; 19
    5e66:	9a e0       	ldi	r25, 0x0A	; 10
    5e68:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <_ZN7Seatalk18processSeaTalkByteEh>
    5e6c:	ea cf       	rjmp	.-44     	; 0x5e42 <_Z12serialEvent2v>
		}else{
			inputSerial2Complete = talker2.decode(Serial2.read());
    5e6e:	88 e9       	ldi	r24, 0x98	; 152
    5e70:	96 e0       	ldi	r25, 0x06	; 6
    5e72:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    5e76:	68 2f       	mov	r22, r24
    5e78:	81 ef       	ldi	r24, 0xF1	; 241
    5e7a:	9b e0       	ldi	r25, 0x0B	; 11
    5e7c:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA6decodeEc>
    5e80:	80 93 0a 0a 	sts	0x0A0A, r24
			if (inputSerial2Complete) {
    5e84:	88 23       	and	r24, r24
    5e86:	e9 f2       	breq	.-70     	; 0x5e42 <_Z12serialEvent2v>
				if (MUX) nmea.printNmea(talker2.sentence());
    5e88:	81 ef       	ldi	r24, 0xF1	; 241
    5e8a:	9b e0       	ldi	r25, 0x0B	; 11
    5e8c:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5e90:	bc 01       	movw	r22, r24
    5e92:	8c e2       	ldi	r24, 0x2C	; 44
    5e94:	90 e1       	ldi	r25, 0x10	; 16
    5e96:	0e 94 41 37 	call	0x6e82	; 0x6e82 <_ZN10NmeaSerial9printNmeaEPc>
				Serial.println(talker2.sentence());
    5e9a:	81 ef       	ldi	r24, 0xF1	; 241
    5e9c:	9b e0       	ldi	r25, 0x0B	; 11
    5e9e:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5ea2:	bc 01       	movw	r22, r24
    5ea4:	8c ed       	ldi	r24, 0xDC	; 220
    5ea6:	96 e0       	ldi	r25, 0x06	; 6
    5ea8:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    5eac:	08 95       	ret

00005eae <_Z12serialEvent3v>:
		}
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    5eae:	1f c0       	rjmp	.+62     	; 0x5eee <_Z12serialEvent3v+0x40>
		inputSerial3Complete = talker3.decode(Serial3.read());
    5eb0:	86 e7       	ldi	r24, 0x76	; 118
    5eb2:	96 e0       	ldi	r25, 0x06	; 6
    5eb4:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    5eb8:	68 2f       	mov	r22, r24
    5eba:	88 e8       	ldi	r24, 0x88	; 136
    5ebc:	9a e0       	ldi	r25, 0x0A	; 10
    5ebe:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA6decodeEc>
    5ec2:	80 93 09 0a 	sts	0x0A09, r24
		if (inputSerial3Complete) {
    5ec6:	88 23       	and	r24, r24
    5ec8:	91 f0       	breq	.+36     	; 0x5eee <_Z12serialEvent3v+0x40>
			if (MUX) nmea.printNmea(talker3.sentence());
    5eca:	88 e8       	ldi	r24, 0x88	; 136
    5ecc:	9a e0       	ldi	r25, 0x0A	; 10
    5ece:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5ed2:	bc 01       	movw	r22, r24
    5ed4:	8c e2       	ldi	r24, 0x2C	; 44
    5ed6:	90 e1       	ldi	r25, 0x10	; 16
    5ed8:	0e 94 41 37 	call	0x6e82	; 0x6e82 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(talker3.sentence());
    5edc:	88 e8       	ldi	r24, 0x88	; 136
    5ede:	9a e0       	ldi	r25, 0x0A	; 10
    5ee0:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5ee4:	bc 01       	movw	r22, r24
    5ee6:	8c ed       	ldi	r24, 0xDC	; 220
    5ee8:	96 e0       	ldi	r25, 0x06	; 6
    5eea:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		}
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    5eee:	86 e7       	ldi	r24, 0x76	; 118
    5ef0:	96 e0       	ldi	r25, 0x06	; 6
    5ef2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    5ef6:	89 2b       	or	r24, r25
    5ef8:	d9 f6       	brne	.-74     	; 0x5eb0 <_Z12serialEvent3v+0x2>
			Serial.println(talker3.sentence());
			//loop every sentence
			break;
		}
	}
}
    5efa:	08 95       	ret

00005efc <loop>:

void loop() {
    5efc:	cf 93       	push	r28
    5efe:	df 93       	push	r29
    5f00:	cd b7       	in	r28, 0x3d	; 61
    5f02:	de b7       	in	r29, 0x3e	; 62
    5f04:	a2 97       	sbiw	r28, 0x22	; 34
    5f06:	0f b6       	in	r0, 0x3f	; 63
    5f08:	f8 94       	cli
    5f0a:	de bf       	out	0x3e, r29	; 62
    5f0c:	0f be       	out	0x3f, r0	; 63
    5f0e:	cd bf       	out	0x3d, r28	; 61

	//if (DEBUG)
	//Serial.println("Looping..");

	if (execute) {
    5f10:	80 91 16 11 	lds	r24, 0x1116
    5f14:	88 23       	and	r24, r24
    5f16:	09 f4       	brne	.+2      	; 0x5f1a <loop+0x1e>
    5f18:	a0 c0       	rjmp	.+320    	; 0x605a <loop+0x15e>
		//timer ping
		//do these every 100ms
		autopilot.calcAutoPilot();
    5f1a:	81 e3       	ldi	r24, 0x31	; 49
    5f1c:	9a e0       	ldi	r25, 0x0A	; 10
    5f1e:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <_ZN9Autopilot13calcAutoPilotEv>

		if (interval % 2 == 0) {
    5f22:	80 91 14 11 	lds	r24, 0x1114
    5f26:	90 91 15 11 	lds	r25, 0x1115
    5f2a:	80 fd       	sbrc	r24, 0
    5f2c:	04 c0       	rjmp	.+8      	; 0x5f36 <loop+0x3a>
			//do every 200ms
			wind.calcWindSpeedAndDir();
    5f2e:	81 e8       	ldi	r24, 0x81	; 129
    5f30:	9a e0       	ldi	r25, 0x0A	; 10
    5f32:	0e 94 a6 39 	call	0x734c	; 0x734c <_ZN4Wind19calcWindSpeedAndDirEv>
		}
		if (interval % 5 == 0) {
    5f36:	80 91 14 11 	lds	r24, 0x1114
    5f3a:	90 91 15 11 	lds	r25, 0x1115
    5f3e:	65 e0       	ldi	r22, 0x05	; 5
    5f40:	70 e0       	ldi	r23, 0x00	; 0
    5f42:	0e 94 b4 43 	call	0x8768	; 0x8768 <__divmodhi4>
    5f46:	89 2b       	or	r24, r25
    5f48:	09 f0       	breq	.+2      	; 0x5f4c <loop+0x50>
    5f4a:	73 c0       	rjmp	.+230    	; 0x6032 <loop+0x136>
			//do every 500ms
			wind.calcWindData();
    5f4c:	81 e8       	ldi	r24, 0x81	; 129
    5f4e:	9a e0       	ldi	r25, 0x0A	; 10
    5f50:	0e 94 41 3c 	call	0x7882	; 0x7882 <_ZN4Wind12calcWindDataEv>
			nmea.printWindNmea();
    5f54:	8c e2       	ldi	r24, 0x2C	; 44
    5f56:	90 e1       	ldi	r25, 0x10	; 16
    5f58:	0e 94 43 37 	call	0x6e86	; 0x6e86 <_ZN10NmeaSerial13printWindNmeaEv>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    5f5c:	80 91 de 06 	lds	r24, 0x06DE
    5f60:	90 91 df 06 	lds	r25, 0x06DF
    5f64:	9c 83       	std	Y+4, r25	; 0x04
    5f66:	8b 83       	std	Y+3, r24	; 0x03
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
    5f68:	80 91 e0 06 	lds	r24, 0x06E0
    5f6c:	90 91 e1 06 	lds	r25, 0x06E1
    5f70:	a0 91 e2 06 	lds	r26, 0x06E2
    5f74:	b0 91 e3 06 	lds	r27, 0x06E3
    5f78:	8d 83       	std	Y+5, r24	; 0x05
    5f7a:	9e 83       	std	Y+6, r25	; 0x06
    5f7c:	af 83       	std	Y+7, r26	; 0x07
    5f7e:	b8 87       	std	Y+8, r27	; 0x08
    5f80:	80 91 e4 06 	lds	r24, 0x06E4
    5f84:	90 91 e5 06 	lds	r25, 0x06E5
    5f88:	a0 91 e6 06 	lds	r26, 0x06E6
    5f8c:	b0 91 e7 06 	lds	r27, 0x06E7
    5f90:	89 87       	std	Y+9, r24	; 0x09
    5f92:	9a 87       	std	Y+10, r25	; 0x0a
    5f94:	ab 87       	std	Y+11, r26	; 0x0b
    5f96:	bc 87       	std	Y+12, r27	; 0x0c

#include "Stream.h"

struct ring_buffer;

class HardwareSerial : public Stream
    5f98:	8b e5       	ldi	r24, 0x5B	; 91
    5f9a:	96 e0       	ldi	r25, 0x06	; 6
    5f9c:	9a 83       	std	Y+2, r25	; 0x02
    5f9e:	89 83       	std	Y+1, r24	; 0x01
    5fa0:	80 91 e8 06 	lds	r24, 0x06E8
    5fa4:	90 91 e9 06 	lds	r25, 0x06E9
    5fa8:	9e 87       	std	Y+14, r25	; 0x0e
    5faa:	8d 87       	std	Y+13, r24	; 0x0d
    5fac:	80 91 ea 06 	lds	r24, 0x06EA
    5fb0:	90 91 eb 06 	lds	r25, 0x06EB
    5fb4:	98 8b       	std	Y+16, r25	; 0x10
    5fb6:	8f 87       	std	Y+15, r24	; 0x0f
    5fb8:	80 91 ec 06 	lds	r24, 0x06EC
    5fbc:	90 91 ed 06 	lds	r25, 0x06ED
    5fc0:	9a 8b       	std	Y+18, r25	; 0x12
    5fc2:	89 8b       	std	Y+17, r24	; 0x11
    5fc4:	80 91 ee 06 	lds	r24, 0x06EE
    5fc8:	90 91 ef 06 	lds	r25, 0x06EF
    5fcc:	9c 8b       	std	Y+20, r25	; 0x14
    5fce:	8b 8b       	std	Y+19, r24	; 0x13
    5fd0:	80 91 f0 06 	lds	r24, 0x06F0
    5fd4:	90 91 f1 06 	lds	r25, 0x06F1
    5fd8:	9e 8b       	std	Y+22, r25	; 0x16
    5fda:	8d 8b       	std	Y+21, r24	; 0x15
    5fdc:	80 91 f2 06 	lds	r24, 0x06F2
    5fe0:	90 91 f3 06 	lds	r25, 0x06F3
    5fe4:	98 8f       	std	Y+24, r25	; 0x18
    5fe6:	8f 8b       	std	Y+23, r24	; 0x17
    5fe8:	80 91 f4 06 	lds	r24, 0x06F4
    5fec:	90 91 f5 06 	lds	r25, 0x06F5
    5ff0:	9a 8f       	std	Y+26, r25	; 0x1a
    5ff2:	89 8f       	std	Y+25, r24	; 0x19
    5ff4:	80 91 f6 06 	lds	r24, 0x06F6
    5ff8:	90 91 f7 06 	lds	r25, 0x06F7
    5ffc:	9c 8f       	std	Y+28, r25	; 0x1c
    5ffe:	8b 8f       	std	Y+27, r24	; 0x1b
    6000:	80 91 f8 06 	lds	r24, 0x06F8
    6004:	8d 8f       	std	Y+29, r24	; 0x1d
    6006:	80 91 f9 06 	lds	r24, 0x06F9
    600a:	8e 8f       	std	Y+30, r24	; 0x1e
    600c:	80 91 fa 06 	lds	r24, 0x06FA
    6010:	8f 8f       	std	Y+31, r24	; 0x1f
    6012:	80 91 fb 06 	lds	r24, 0x06FB
    6016:	88 a3       	std	Y+32, r24	; 0x20
    6018:	80 91 fc 06 	lds	r24, 0x06FC
    601c:	89 a3       	std	Y+33, r24	; 0x21
    601e:	80 91 fd 06 	lds	r24, 0x06FD
    6022:	8a a3       	std	Y+34, r24	; 0x22
			//fire any alarms
			//alarm.checkAlarms();
			model.writeSimple(Serial);
    6024:	be 01       	movw	r22, r28
    6026:	6f 5f       	subi	r22, 0xFF	; 255
    6028:	7f 4f       	sbci	r23, 0xFF	; 255
    602a:	8d e6       	ldi	r24, 0x6D	; 109
    602c:	90 e1       	ldi	r25, 0x10	; 16
    602e:	0e 94 36 2b 	call	0x566c	; 0x566c <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>
		}
		if (interval % 10 == 0) {
    6032:	80 91 14 11 	lds	r24, 0x1114
    6036:	90 91 15 11 	lds	r25, 0x1115
    603a:	6a e0       	ldi	r22, 0x0A	; 10
    603c:	70 e0       	ldi	r23, 0x00	; 0
    603e:	0e 94 b4 43 	call	0x8768	; 0x8768 <__divmodhi4>
    6042:	89 2b       	or	r24, r25
    6044:	41 f4       	brne	.+16     	; 0x6056 <loop+0x15a>
			//do every 1000ms
			anchor.checkAnchor();
    6046:	8d e2       	ldi	r24, 0x2D	; 45
    6048:	9a e0       	ldi	r25, 0x0A	; 10
    604a:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <_ZN6Anchor11checkAnchorEv>
			alarm.checkWindAlarm();
    604e:	83 e8       	ldi	r24, 0x83	; 131
    6050:	9a e0       	ldi	r25, 0x0A	; 10
    6052:	0e 94 8f 23 	call	0x471e	; 0x471e <_ZN5Alarm14checkWindAlarmEv>
		}
		//if (interval % 20 == 0) {
		//do every 2000ms
		//}

		execute = false;
    6056:	10 92 16 11 	sts	0x1116, r1
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    605a:	a2 96       	adiw	r28, 0x22	; 34
    605c:	0f b6       	in	r0, 0x3f	; 63
    605e:	f8 94       	cli
    6060:	de bf       	out	0x3e, r29	; 62
    6062:	0f be       	out	0x3f, r0	; 63
    6064:	cd bf       	out	0x3d, r28	; 61
    6066:	df 91       	pop	r29
    6068:	cf 91       	pop	r28
    606a:	08 95       	ret

0000606c <_Z7processPcc>:

void process(char * s, char parser) {
    606c:	6f 92       	push	r6
    606e:	7f 92       	push	r7
    6070:	8f 92       	push	r8
    6072:	9f 92       	push	r9
    6074:	af 92       	push	r10
    6076:	bf 92       	push	r11
    6078:	cf 92       	push	r12
    607a:	df 92       	push	r13
    607c:	ef 92       	push	r14
    607e:	ff 92       	push	r15
    6080:	0f 93       	push	r16
    6082:	1f 93       	push	r17
    6084:	cf 93       	push	r28
    6086:	df 93       	push	r29
    6088:	00 d0       	rcall	.+0      	; 0x608a <_Z7processPcc+0x1e>
    608a:	00 d0       	rcall	.+0      	; 0x608c <_Z7processPcc+0x20>
    608c:	1f 92       	push	r1
    608e:	cd b7       	in	r28, 0x3d	; 61
    6090:	de b7       	in	r29, 0x3e	; 62
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6092:	8d b6       	in	r8, 0x3d	; 61
    6094:	9e b6       	in	r9, 0x3e	; 62
}

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
    6096:	66 ee       	ldi	r22, 0xE6	; 230
    6098:	74 e0       	ldi	r23, 0x04	; 4
    609a:	d7 c1       	rjmp	.+942    	; 0x644a <_Z7processPcc+0x3de>
    609c:	bd b6       	in	r11, 0x3d	; 61
    609e:	ae b6       	in	r10, 0x3e	; 62
		char key[5];
		int l = strlen(cmd);
		bool save=false;
		if (cmd[0] == '#') {
			//
			strncpy(key, cmd, 4);
    60a0:	44 e0       	ldi	r20, 0x04	; 4
    60a2:	50 e0       	ldi	r21, 0x00	; 0
    60a4:	b7 01       	movw	r22, r14
    60a6:	ce 01       	movw	r24, r28
    60a8:	01 96       	adiw	r24, 0x01	; 1
    60aa:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <strncpy>
			key[4] = '\0';
    60ae:	1d 82       	std	Y+5, r1	; 0x05
			char val[l - 4];
    60b0:	68 01       	movw	r12, r16
    60b2:	85 e0       	ldi	r24, 0x05	; 5
    60b4:	c8 1a       	sub	r12, r24
    60b6:	d1 08       	sbc	r13, r1
    60b8:	04 50       	subi	r16, 0x04	; 4
    60ba:	11 09       	sbc	r17, r1
    60bc:	ad b7       	in	r26, 0x3d	; 61
    60be:	be b7       	in	r27, 0x3e	; 62
    60c0:	a0 1b       	sub	r26, r16
    60c2:	b1 0b       	sbc	r27, r17
    60c4:	0f b6       	in	r0, 0x3f	; 63
    60c6:	f8 94       	cli
    60c8:	be bf       	out	0x3e, r27	; 62
    60ca:	0f be       	out	0x3f, r0	; 63
    60cc:	ad bf       	out	0x3d, r26	; 61
    60ce:	0d b7       	in	r16, 0x3d	; 61
    60d0:	1e b7       	in	r17, 0x3e	; 62
    60d2:	0f 5f       	subi	r16, 0xFF	; 255
    60d4:	1f 4f       	sbci	r17, 0xFF	; 255
			memcpy(val, &cmd[5], l - 5);
    60d6:	38 01       	movw	r6, r16
    60d8:	b5 e0       	ldi	r27, 0x05	; 5
    60da:	eb 0e       	add	r14, r27
    60dc:	f1 1c       	adc	r15, r1
    60de:	a6 01       	movw	r20, r12
    60e0:	b7 01       	movw	r22, r14
    60e2:	c8 01       	movw	r24, r16
    60e4:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
			val[l - 5] = '\0';
    60e8:	f8 01       	movw	r30, r16
    60ea:	ec 0d       	add	r30, r12
    60ec:	fd 1d       	adc	r31, r13
    60ee:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);

			//anchor
			if (strcmp(key, ANCHOR_ALARM_STATE) == 0) {
    60f0:	6a e3       	ldi	r22, 0x3A	; 58
    60f2:	73 e0       	ldi	r23, 0x03	; 3
    60f4:	ce 01       	movw	r24, r28
    60f6:	01 96       	adiw	r24, 0x01	; 1
    60f8:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    60fc:	00 97       	sbiw	r24, 0x00	; 0
    60fe:	b1 f4       	brne	.+44     	; 0x612c <_Z7processPcc+0xc0>
				//if (DEBUG) Serial.print("AA Entered..");
				model.setAnchorAlarmOn(atoi(val));
    6100:	c8 01       	movw	r24, r16
    6102:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    6106:	61 e0       	ldi	r22, 0x01	; 1
    6108:	89 2b       	or	r24, r25
    610a:	09 f4       	brne	.+2      	; 0x610e <_Z7processPcc+0xa2>
    610c:	60 e0       	ldi	r22, 0x00	; 0
    610e:	8d e6       	ldi	r24, 0x6D	; 109
    6110:	90 e1       	ldi	r25, 0x10	; 16
    6112:	0e 94 b9 2c 	call	0x5972	; 0x5972 <_ZN14FreeBoardModel16setAnchorAlarmOnEb>
				if (atoi(val) == 1) {
    6116:	c3 01       	movw	r24, r6
    6118:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    611c:	01 97       	sbiw	r24, 0x01	; 1
    611e:	09 f0       	breq	.+2      	; 0x6122 <_Z7processPcc+0xb6>
    6120:	29 c1       	rjmp	.+594    	; 0x6374 <_Z7processPcc+0x308>
					anchor.setAnchorPoint();
    6122:	8d e2       	ldi	r24, 0x2D	; 45
    6124:	9a e0       	ldi	r25, 0x0A	; 10
    6126:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <_ZN6Anchor14setAnchorPointEv>
    612a:	24 c1       	rjmp	.+584    	; 0x6374 <_Z7processPcc+0x308>
				}
			} else if (strcmp(key, ANCHOR_ALARM_ADJUST) == 0) {
    612c:	6f e3       	ldi	r22, 0x3F	; 63
    612e:	73 e0       	ldi	r23, 0x03	; 3
    6130:	ce 01       	movw	r24, r28
    6132:	01 96       	adiw	r24, 0x01	; 1
    6134:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    6138:	00 97       	sbiw	r24, 0x00	; 0
    613a:	b1 f4       	brne	.+44     	; 0x6168 <_Z7processPcc+0xfc>
				model.setAnchorRadius(model.getAnchorRadius() + atof(val));
    613c:	8d e6       	ldi	r24, 0x6D	; 109
    613e:	90 e1       	ldi	r25, 0x10	; 16
    6140:	0e 94 96 2a 	call	0x552c	; 0x552c <_ZN14FreeBoardModel15getAnchorRadiusEv>
    6144:	6b 01       	movw	r12, r22
    6146:	7c 01       	movw	r14, r24
    6148:	c8 01       	movw	r24, r16
    614a:	0e 94 2a 44 	call	0x8854	; 0x8854 <atof>
    614e:	9b 01       	movw	r18, r22
    6150:	ac 01       	movw	r20, r24
    6152:	c7 01       	movw	r24, r14
    6154:	b6 01       	movw	r22, r12
    6156:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    615a:	ab 01       	movw	r20, r22
    615c:	bc 01       	movw	r22, r24
    615e:	8d e6       	ldi	r24, 0x6D	; 109
    6160:	90 e1       	ldi	r25, 0x10	; 16
    6162:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <_ZN14FreeBoardModel15setAnchorRadiusEf>
    6166:	06 c1       	rjmp	.+524    	; 0x6374 <_Z7processPcc+0x308>
			} else if (strcmp(key, ANCHOR_ALARM_LAT) == 0) {
    6168:	64 e4       	ldi	r22, 0x44	; 68
    616a:	73 e0       	ldi	r23, 0x03	; 3
    616c:	ce 01       	movw	r24, r28
    616e:	01 96       	adiw	r24, 0x01	; 1
    6170:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    6174:	00 97       	sbiw	r24, 0x00	; 0
    6176:	51 f4       	brne	.+20     	; 0x618c <_Z7processPcc+0x120>
				model.setAnchorLat(atof(val));
    6178:	c8 01       	movw	r24, r16
    617a:	0e 94 2a 44 	call	0x8854	; 0x8854 <atof>
    617e:	ab 01       	movw	r20, r22
    6180:	bc 01       	movw	r22, r24
    6182:	8d e6       	ldi	r24, 0x6D	; 109
    6184:	90 e1       	ldi	r25, 0x10	; 16
    6186:	0e 94 cd 2c 	call	0x599a	; 0x599a <_ZN14FreeBoardModel12setAnchorLatEf>
    618a:	f4 c0       	rjmp	.+488    	; 0x6374 <_Z7processPcc+0x308>
			} else if (strcmp(key, ANCHOR_ALARM_LON) == 0) {
    618c:	69 e4       	ldi	r22, 0x49	; 73
    618e:	73 e0       	ldi	r23, 0x03	; 3
    6190:	ce 01       	movw	r24, r28
    6192:	01 96       	adiw	r24, 0x01	; 1
    6194:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    6198:	00 97       	sbiw	r24, 0x00	; 0
    619a:	51 f4       	brne	.+20     	; 0x61b0 <_Z7processPcc+0x144>
				model.setAnchorLon(atof(val));
    619c:	c8 01       	movw	r24, r16
    619e:	0e 94 2a 44 	call	0x8854	; 0x8854 <atof>
    61a2:	ab 01       	movw	r20, r22
    61a4:	bc 01       	movw	r22, r24
    61a6:	8d e6       	ldi	r24, 0x6D	; 109
    61a8:	90 e1       	ldi	r25, 0x10	; 16
    61aa:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <_ZN14FreeBoardModel12setAnchorLonEf>
    61ae:	e2 c0       	rjmp	.+452    	; 0x6374 <_Z7processPcc+0x308>
			}
			//autopliot
			else if (strcmp(key, AUTOPILOT_STATE) == 0) {
    61b0:	6e e4       	ldi	r22, 0x4E	; 78
    61b2:	73 e0       	ldi	r23, 0x03	; 3
    61b4:	ce 01       	movw	r24, r28
    61b6:	01 96       	adiw	r24, 0x01	; 1
    61b8:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    61bc:	00 97       	sbiw	r24, 0x00	; 0
    61be:	61 f4       	brne	.+24     	; 0x61d8 <_Z7processPcc+0x16c>
				//if (DEBUG) Serial.print("AP Entered..");
				//if (DEBUG) Serial.println(val);
				//this is potentailly dangerous, since we dont want the boat diving off on an old target heading.
				//in model we ALWAYS reset to current magnetic or wind heading at this point
				model.setAutopilotOn(atoi(val));
    61c0:	c8 01       	movw	r24, r16
    61c2:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    61c6:	61 e0       	ldi	r22, 0x01	; 1
    61c8:	89 2b       	or	r24, r25
    61ca:	09 f4       	brne	.+2      	; 0x61ce <_Z7processPcc+0x162>
    61cc:	60 e0       	ldi	r22, 0x00	; 0
    61ce:	8d e6       	ldi	r24, 0x6D	; 109
    61d0:	90 e1       	ldi	r25, 0x10	; 16
    61d2:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <_ZN14FreeBoardModel14setAutopilotOnEb>
    61d6:	ce c0       	rjmp	.+412    	; 0x6374 <_Z7processPcc+0x308>
			} else if (strcmp(key, AUTOPILOT_ADJUST) == 0) {
    61d8:	63 e5       	ldi	r22, 0x53	; 83
    61da:	73 e0       	ldi	r23, 0x03	; 3
    61dc:	ce 01       	movw	r24, r28
    61de:	01 96       	adiw	r24, 0x01	; 1
    61e0:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    61e4:	00 97       	sbiw	r24, 0x00	; 0
    61e6:	c1 f4       	brne	.+48     	; 0x6218 <_Z7processPcc+0x1ac>
				model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + atol(val));
    61e8:	8d e6       	ldi	r24, 0x6D	; 109
    61ea:	90 e1       	ldi	r25, 0x10	; 16
    61ec:	0e 94 ca 2a 	call	0x5594	; 0x5594 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    61f0:	6b 01       	movw	r12, r22
    61f2:	7c 01       	movw	r14, r24
    61f4:	c8 01       	movw	r24, r16
    61f6:	0e 94 4c 44 	call	0x8898	; 0x8898 <atol>
    61fa:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    61fe:	9b 01       	movw	r18, r22
    6200:	ac 01       	movw	r20, r24
    6202:	c7 01       	movw	r24, r14
    6204:	b6 01       	movw	r22, r12
    6206:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    620a:	ab 01       	movw	r20, r22
    620c:	bc 01       	movw	r22, r24
    620e:	8d e6       	ldi	r24, 0x6D	; 109
    6210:	90 e1       	ldi	r25, 0x10	; 16
    6212:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
    6216:	ae c0       	rjmp	.+348    	; 0x6374 <_Z7processPcc+0x308>
			} else if (strcmp(key, AUTOPILOT_SOURCE) == 0) {
    6218:	68 e5       	ldi	r22, 0x58	; 88
    621a:	73 e0       	ldi	r23, 0x03	; 3
    621c:	ce 01       	movw	r24, r28
    621e:	01 96       	adiw	r24, 0x01	; 1
    6220:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    6224:	00 97       	sbiw	r24, 0x00	; 0
    6226:	39 f4       	brne	.+14     	; 0x6236 <_Z7processPcc+0x1ca>
				model.setAutopilotReference(val[0]);
    6228:	f8 01       	movw	r30, r16
    622a:	60 81       	ld	r22, Z
    622c:	8d e6       	ldi	r24, 0x6D	; 109
    622e:	90 e1       	ldi	r25, 0x10	; 16
    6230:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
    6234:	9f c0       	rjmp	.+318    	; 0x6374 <_Z7processPcc+0x308>
			}
			//wind
			else if (strcmp(key, WIND_SPEED_ALARM_STATE) == 0) {
    6236:	6d e5       	ldi	r22, 0x5D	; 93
    6238:	73 e0       	ldi	r23, 0x03	; 3
    623a:	ce 01       	movw	r24, r28
    623c:	01 96       	adiw	r24, 0x01	; 1
    623e:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    6242:	00 97       	sbiw	r24, 0x00	; 0
    6244:	61 f4       	brne	.+24     	; 0x625e <_Z7processPcc+0x1f2>
				model.setWindAlarmOn(atoi(val));
    6246:	c8 01       	movw	r24, r16
    6248:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    624c:	61 e0       	ldi	r22, 0x01	; 1
    624e:	89 2b       	or	r24, r25
    6250:	09 f4       	brne	.+2      	; 0x6254 <_Z7processPcc+0x1e8>
    6252:	60 e0       	ldi	r22, 0x00	; 0
    6254:	8d e6       	ldi	r24, 0x6D	; 109
    6256:	90 e1       	ldi	r25, 0x10	; 16
    6258:	0e 94 a0 2d 	call	0x5b40	; 0x5b40 <_ZN14FreeBoardModel14setWindAlarmOnEb>
    625c:	8b c0       	rjmp	.+278    	; 0x6374 <_Z7processPcc+0x308>
			} else if (strcpy(key, WIND_ALARM_KNOTS) == 0) {
    625e:	62 e6       	ldi	r22, 0x62	; 98
    6260:	73 e0       	ldi	r23, 0x03	; 3
    6262:	ce 01       	movw	r24, r28
    6264:	01 96       	adiw	r24, 0x01	; 1
    6266:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    626a:	00 97       	sbiw	r24, 0x00	; 0
    626c:	49 f4       	brne	.+18     	; 0x6280 <_Z7processPcc+0x214>
				model.setWindAlarmSpeed(atoi(val));
    626e:	c8 01       	movw	r24, r16
    6270:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    6274:	bc 01       	movw	r22, r24
    6276:	8d e6       	ldi	r24, 0x6D	; 109
    6278:	90 e1       	ldi	r25, 0x10	; 16
    627a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
    627e:	7a c0       	rjmp	.+244    	; 0x6374 <_Z7processPcc+0x308>
			} else if (strcpy(key, WIND_ZERO_ADJUST) == 0) {
    6280:	67 e6       	ldi	r22, 0x67	; 103
    6282:	73 e0       	ldi	r23, 0x03	; 3
    6284:	ce 01       	movw	r24, r28
    6286:	01 96       	adiw	r24, 0x01	; 1
    6288:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    628c:	00 97       	sbiw	r24, 0x00	; 0
    628e:	49 f4       	brne	.+18     	; 0x62a2 <_Z7processPcc+0x236>
				model.setWindZeroOffset(atoi(val));
    6290:	c8 01       	movw	r24, r16
    6292:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    6296:	bc 01       	movw	r22, r24
    6298:	8d e6       	ldi	r24, 0x6D	; 109
    629a:	90 e1       	ldi	r25, 0x10	; 16
    629c:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <_ZN14FreeBoardModel17setWindZeroOffsetEi>
    62a0:	69 c0       	rjmp	.+210    	; 0x6374 <_Z7processPcc+0x308>
			}
			//gps,serial,seatalk
			else if (strcmp(key, GPS_MODEL) == 0) {
    62a2:	6c e6       	ldi	r22, 0x6C	; 108
    62a4:	73 e0       	ldi	r23, 0x03	; 3
    62a6:	ce 01       	movw	r24, r28
    62a8:	01 96       	adiw	r24, 0x01	; 1
    62aa:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    62ae:	00 97       	sbiw	r24, 0x00	; 0
    62b0:	49 f4       	brne	.+18     	; 0x62c4 <_Z7processPcc+0x258>
				model.setGpsModel(atoi(val));
    62b2:	c8 01       	movw	r24, r16
    62b4:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    62b8:	bc 01       	movw	r22, r24
    62ba:	8d e6       	ldi	r24, 0x6D	; 109
    62bc:	90 e1       	ldi	r25, 0x10	; 16
    62be:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <_ZN14FreeBoardModel11setGpsModelEs>
    62c2:	d5 c0       	rjmp	.+426    	; 0x646e <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD0) == 0) {
    62c4:	61 e7       	ldi	r22, 0x71	; 113
    62c6:	73 e0       	ldi	r23, 0x03	; 3
    62c8:	ce 01       	movw	r24, r28
    62ca:	01 96       	adiw	r24, 0x01	; 1
    62cc:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    62d0:	00 97       	sbiw	r24, 0x00	; 0
    62d2:	49 f4       	brne	.+18     	; 0x62e6 <_Z7processPcc+0x27a>
				model.setSerialBaud(atoi(val));
    62d4:	c8 01       	movw	r24, r16
    62d6:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    62da:	bc 01       	movw	r22, r24
    62dc:	8d e6       	ldi	r24, 0x6D	; 109
    62de:	90 e1       	ldi	r25, 0x10	; 16
    62e0:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <_ZN14FreeBoardModel13setSerialBaudEi>
    62e4:	c4 c0       	rjmp	.+392    	; 0x646e <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD1) == 0) {
    62e6:	66 e7       	ldi	r22, 0x76	; 118
    62e8:	73 e0       	ldi	r23, 0x03	; 3
    62ea:	ce 01       	movw	r24, r28
    62ec:	01 96       	adiw	r24, 0x01	; 1
    62ee:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    62f2:	00 97       	sbiw	r24, 0x00	; 0
    62f4:	49 f4       	brne	.+18     	; 0x6308 <_Z7processPcc+0x29c>
				model.setSerialBaud1(atoi(val));
    62f6:	c8 01       	movw	r24, r16
    62f8:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    62fc:	bc 01       	movw	r22, r24
    62fe:	8d e6       	ldi	r24, 0x6D	; 109
    6300:	90 e1       	ldi	r25, 0x10	; 16
    6302:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <_ZN14FreeBoardModel14setSerialBaud1Ei>
    6306:	b3 c0       	rjmp	.+358    	; 0x646e <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD2) == 0) {
    6308:	6b e7       	ldi	r22, 0x7B	; 123
    630a:	73 e0       	ldi	r23, 0x03	; 3
    630c:	ce 01       	movw	r24, r28
    630e:	01 96       	adiw	r24, 0x01	; 1
    6310:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    6314:	00 97       	sbiw	r24, 0x00	; 0
    6316:	49 f4       	brne	.+18     	; 0x632a <_Z7processPcc+0x2be>
				model.setSerialBaud2(atoi(val));
    6318:	c8 01       	movw	r24, r16
    631a:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    631e:	bc 01       	movw	r22, r24
    6320:	8d e6       	ldi	r24, 0x6D	; 109
    6322:	90 e1       	ldi	r25, 0x10	; 16
    6324:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <_ZN14FreeBoardModel14setSerialBaud2Ei>
    6328:	a2 c0       	rjmp	.+324    	; 0x646e <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD3) == 0) {
    632a:	60 e8       	ldi	r22, 0x80	; 128
    632c:	73 e0       	ldi	r23, 0x03	; 3
    632e:	ce 01       	movw	r24, r28
    6330:	01 96       	adiw	r24, 0x01	; 1
    6332:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    6336:	00 97       	sbiw	r24, 0x00	; 0
    6338:	49 f4       	brne	.+18     	; 0x634c <_Z7processPcc+0x2e0>
				model.setSerialBaud3(atoi(val));
    633a:	c8 01       	movw	r24, r16
    633c:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    6340:	bc 01       	movw	r22, r24
    6342:	8d e6       	ldi	r24, 0x6D	; 109
    6344:	90 e1       	ldi	r25, 0x10	; 16
    6346:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <_ZN14FreeBoardModel14setSerialBaud3Ei>
    634a:	91 c0       	rjmp	.+290    	; 0x646e <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SEATALK) == 0) {
    634c:	65 e8       	ldi	r22, 0x85	; 133
    634e:	73 e0       	ldi	r23, 0x03	; 3
    6350:	ce 01       	movw	r24, r28
    6352:	01 96       	adiw	r24, 0x01	; 1
    6354:	0e 94 be 44 	call	0x897c	; 0x897c <strcpy>
    6358:	00 97       	sbiw	r24, 0x00	; 0
    635a:	61 f4       	brne	.+24     	; 0x6374 <_Z7processPcc+0x308>
				model.setSeaTalk(atoi(val));
    635c:	c8 01       	movw	r24, r16
    635e:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    6362:	61 e0       	ldi	r22, 0x01	; 1
    6364:	89 2b       	or	r24, r25
    6366:	09 f4       	brne	.+2      	; 0x636a <_Z7processPcc+0x2fe>
    6368:	60 e0       	ldi	r22, 0x00	; 0
    636a:	8d e6       	ldi	r24, 0x6D	; 109
    636c:	90 e1       	ldi	r25, 0x10	; 16
    636e:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <_ZN14FreeBoardModel10setSeaTalkEb>
    6372:	7d c0       	rjmp	.+250    	; 0x646e <_Z7processPcc+0x402>
    6374:	95 01       	movw	r18, r10
    6376:	5e c0       	rjmp	.+188    	; 0x6434 <_Z7processPcc+0x3c8>
    6378:	6d b6       	in	r6, 0x3d	; 61
    637a:	7e b6       	in	r7, 0x3e	; 62
				save=true;
			}
			if(save)model.saveConfig();

		} else {
			strncpy(key, cmd, 3);
    637c:	43 e0       	ldi	r20, 0x03	; 3
    637e:	50 e0       	ldi	r21, 0x00	; 0
    6380:	b7 01       	movw	r22, r14
    6382:	ce 01       	movw	r24, r28
    6384:	01 96       	adiw	r24, 0x01	; 1
    6386:	0e 94 d3 44 	call	0x89a6	; 0x89a6 <strncpy>
			key[3] = '\0';
    638a:	1c 82       	std	Y+4, r1	; 0x04
			char val[l - 3];
    638c:	68 01       	movw	r12, r16
    638e:	f4 e0       	ldi	r31, 0x04	; 4
    6390:	cf 1a       	sub	r12, r31
    6392:	d1 08       	sbc	r13, r1
    6394:	03 50       	subi	r16, 0x03	; 3
    6396:	11 09       	sbc	r17, r1
    6398:	8d b7       	in	r24, 0x3d	; 61
    639a:	9e b7       	in	r25, 0x3e	; 62
    639c:	80 1b       	sub	r24, r16
    639e:	91 0b       	sbc	r25, r17
    63a0:	0f b6       	in	r0, 0x3f	; 63
    63a2:	f8 94       	cli
    63a4:	9e bf       	out	0x3e, r25	; 62
    63a6:	0f be       	out	0x3f, r0	; 63
    63a8:	8d bf       	out	0x3d, r24	; 61
    63aa:	0d b7       	in	r16, 0x3d	; 61
    63ac:	1e b7       	in	r17, 0x3e	; 62
    63ae:	0f 5f       	subi	r16, 0xFF	; 255
    63b0:	1f 4f       	sbci	r17, 0xFF	; 255
			memcpy(val, &cmd[4], l - 4);
    63b2:	58 01       	movw	r10, r16
    63b4:	94 e0       	ldi	r25, 0x04	; 4
    63b6:	e9 0e       	add	r14, r25
    63b8:	f1 1c       	adc	r15, r1
    63ba:	a6 01       	movw	r20, r12
    63bc:	b7 01       	movw	r22, r14
    63be:	c8 01       	movw	r24, r16
    63c0:	0e 94 8f 44 	call	0x891e	; 0x891e <memcpy>
			val[l - 4] = '\0';
    63c4:	f8 01       	movw	r30, r16
    63c6:	ec 0d       	add	r30, r12
    63c8:	fd 1d       	adc	r31, r13
    63ca:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);
			// incoming data = WST,WSA,WDT,WDA,WSU,LAT,LON,COG,MGH,SOG,YAW
			if (strcmp(key, MGH) == 0) {
    63cc:	6a e8       	ldi	r22, 0x8A	; 138
    63ce:	73 e0       	ldi	r23, 0x03	; 3
    63d0:	ce 01       	movw	r24, r28
    63d2:	01 96       	adiw	r24, 0x01	; 1
    63d4:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    63d8:	00 97       	sbiw	r24, 0x00	; 0
    63da:	49 f4       	brne	.+18     	; 0x63ee <_Z7processPcc+0x382>
				model.setMagneticHeading(atof(val));
    63dc:	c8 01       	movw	r24, r16
    63de:	0e 94 2a 44 	call	0x8854	; 0x8854 <atof>
    63e2:	ab 01       	movw	r20, r22
    63e4:	bc 01       	movw	r22, r24
    63e6:	8d e6       	ldi	r24, 0x6D	; 109
    63e8:	90 e1       	ldi	r25, 0x10	; 16
    63ea:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN14FreeBoardModel18setMagneticHeadingEf>
			}
			if (strcmp(key, DECL) == 0) {
    63ee:	6e e8       	ldi	r22, 0x8E	; 142
    63f0:	73 e0       	ldi	r23, 0x03	; 3
    63f2:	ce 01       	movw	r24, r28
    63f4:	01 96       	adiw	r24, 0x01	; 1
    63f6:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    63fa:	00 97       	sbiw	r24, 0x00	; 0
    63fc:	49 f4       	brne	.+18     	; 0x6410 <_Z7processPcc+0x3a4>
				model.setDeclination(atof(val));
    63fe:	c5 01       	movw	r24, r10
    6400:	0e 94 2a 44 	call	0x8854	; 0x8854 <atof>
    6404:	ab 01       	movw	r20, r22
    6406:	bc 01       	movw	r22, r24
    6408:	8d e6       	ldi	r24, 0x6D	; 109
    640a:	90 e1       	ldi	r25, 0x10	; 16
    640c:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <_ZN14FreeBoardModel14setDeclinationEf>
			}
			if (strcmp(key, WDT) == 0) {
    6410:	62 e9       	ldi	r22, 0x92	; 146
    6412:	73 e0       	ldi	r23, 0x03	; 3
    6414:	ce 01       	movw	r24, r28
    6416:	01 96       	adiw	r24, 0x01	; 1
    6418:	0e 94 b5 44 	call	0x896a	; 0x896a <strcmp>
    641c:	00 97       	sbiw	r24, 0x00	; 0
    641e:	41 f4       	brne	.+16     	; 0x6430 <_Z7processPcc+0x3c4>
				model.setWindTrueDir(atoi(val));
    6420:	c5 01       	movw	r24, r10
    6422:	0e 94 2e 44 	call	0x885c	; 0x885c <atoi>
    6426:	bc 01       	movw	r22, r24
    6428:	8d e6       	ldi	r24, 0x6D	; 109
    642a:	90 e1       	ldi	r25, 0x10	; 16
    642c:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <_ZN14FreeBoardModel14setWindTrueDirEi>
    6430:	36 2d       	mov	r19, r6
    6432:	27 2d       	mov	r18, r7
    6434:	83 2f       	mov	r24, r19
    6436:	92 2f       	mov	r25, r18
    6438:	0f b6       	in	r0, 0x3f	; 63
    643a:	f8 94       	cli
    643c:	9e bf       	out	0x3e, r25	; 62
    643e:	0f be       	out	0x3f, r0	; 63
    6440:	8d bf       	out	0x3d, r24	; 61
			}

		}
		//next token
		cmd = strtok(NULL, ",");
    6442:	66 ee       	ldi	r22, 0xE6	; 230
    6444:	74 e0       	ldi	r23, 0x04	; 4
    6446:	80 e0       	ldi	r24, 0x00	; 0
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	0e 94 8b 44 	call	0x8916	; 0x8916 <strtok>
    644e:	7c 01       	movw	r14, r24

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
	while (cmd != NULL && strlen(cmd) > 3) {
    6450:	00 97       	sbiw	r24, 0x00	; 0
    6452:	c1 f0       	breq	.+48     	; 0x6484 <_Z7processPcc+0x418>
    6454:	dc 01       	movw	r26, r24
    6456:	0d 90       	ld	r0, X+
    6458:	00 20       	and	r0, r0
    645a:	e9 f7       	brne	.-6      	; 0x6456 <_Z7processPcc+0x3ea>
    645c:	8d 01       	movw	r16, r26
    645e:	01 50       	subi	r16, 0x01	; 1
    6460:	11 09       	sbc	r17, r1
    6462:	08 1b       	sub	r16, r24
    6464:	19 0b       	sbc	r17, r25
    6466:	04 30       	cpi	r16, 0x04	; 4
    6468:	11 05       	cpc	r17, r1
    646a:	30 f4       	brcc	.+12     	; 0x6478 <_Z7processPcc+0x40c>
    646c:	0b c0       	rjmp	.+22     	; 0x6484 <_Z7processPcc+0x418>
				save=true;
			} else if (strcpy(key, SEATALK) == 0) {
				model.setSeaTalk(atoi(val));
				save=true;
			}
			if(save)model.saveConfig();
    646e:	8d e6       	ldi	r24, 0x6D	; 109
    6470:	90 e1       	ldi	r25, 0x10	; 16
    6472:	0e 94 e7 29 	call	0x53ce	; 0x53ce <_ZN14FreeBoardModel10saveConfigEv>
    6476:	7e cf       	rjmp	.-260    	; 0x6374 <_Z7processPcc+0x308>
		//if (DEBUG) Serial.println(cmd);

		char key[5];
		int l = strlen(cmd);
		bool save=false;
		if (cmd[0] == '#') {
    6478:	fc 01       	movw	r30, r24
    647a:	80 81       	ld	r24, Z
    647c:	83 32       	cpi	r24, 0x23	; 35
    647e:	09 f0       	breq	.+2      	; 0x6482 <_Z7processPcc+0x416>
    6480:	7b cf       	rjmp	.-266    	; 0x6378 <_Z7processPcc+0x30c>
    6482:	0c ce       	rjmp	.-1000   	; 0x609c <_Z7processPcc+0x30>
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6484:	0f b6       	in	r0, 0x3f	; 63
    6486:	f8 94       	cli
    6488:	9e be       	out	0x3e, r9	; 62
    648a:	0f be       	out	0x3f, r0	; 63
    648c:	8d be       	out	0x3d, r8	; 61
    648e:	0f 90       	pop	r0
    6490:	0f 90       	pop	r0
    6492:	0f 90       	pop	r0
    6494:	0f 90       	pop	r0
    6496:	0f 90       	pop	r0
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	ff 90       	pop	r15
    64a2:	ef 90       	pop	r14
    64a4:	df 90       	pop	r13
    64a6:	cf 90       	pop	r12
    64a8:	bf 90       	pop	r11
    64aa:	af 90       	pop	r10
    64ac:	9f 90       	pop	r9
    64ae:	8f 90       	pop	r8
    64b0:	7f 90       	pop	r7
    64b2:	6f 90       	pop	r6
    64b4:	08 95       	ret

000064b6 <_Z11serialEventv>:
 SerialEvent occurs whenever a new data comes in the
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
    64b6:	cf 92       	push	r12
    64b8:	df 92       	push	r13
    64ba:	ef 92       	push	r14
    64bc:	ff 92       	push	r15
    64be:	0f 93       	push	r16
    64c0:	1f 93       	push	r17
    64c2:	cf 93       	push	r28
    64c4:	df 93       	push	r29
    64c6:	cd b7       	in	r28, 0x3d	; 61
    64c8:	de b7       	in	r29, 0x3e	; 62
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    64ca:	ed b6       	in	r14, 0x3d	; 61
    64cc:	fe b6       	in	r15, 0x3e	; 62
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    64ce:	39 c0       	rjmp	.+114    	; 0x6542 <_Z11serialEventv+0x8c>
		// get the new byte:
		char inChar = (char) Serial.read();
    64d0:	8c ed       	ldi	r24, 0xDC	; 220
    64d2:	96 e0       	ldi	r25, 0x06	; 6
    64d4:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    64d8:	18 2f       	mov	r17, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    64da:	68 2f       	mov	r22, r24
    64dc:	8c e0       	ldi	r24, 0x0C	; 12
    64de:	9a e0       	ldi	r25, 0x0A	; 10
    64e0:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN6String6concatEc>
		// add it to the inputString:
		inputSerial += inChar;
		if (inChar == '\n') {
    64e4:	1a 30       	cpi	r17, 0x0A	; 10
    64e6:	69 f5       	brne	.+90     	; 0x6542 <_Z11serialEventv+0x8c>
    64e8:	cd b6       	in	r12, 0x3d	; 61
    64ea:	de b6       	in	r13, 0x3e	; 62
			//inputSerialComplete = true;
			char carray[inputSerial.length() + 1]; //determine size of the array
    64ec:	40 91 10 0a 	lds	r20, 0x0A10
    64f0:	50 91 11 0a 	lds	r21, 0x0A11
    64f4:	4f 5f       	subi	r20, 0xFF	; 255
    64f6:	5f 4f       	sbci	r21, 0xFF	; 255
    64f8:	8d b7       	in	r24, 0x3d	; 61
    64fa:	9e b7       	in	r25, 0x3e	; 62
    64fc:	84 1b       	sub	r24, r20
    64fe:	95 0b       	sbc	r25, r21
    6500:	0f b6       	in	r0, 0x3f	; 63
    6502:	f8 94       	cli
    6504:	9e bf       	out	0x3e, r25	; 62
    6506:	0f be       	out	0x3f, r0	; 63
    6508:	8d bf       	out	0x3d, r24	; 61
    650a:	0d b7       	in	r16, 0x3d	; 61
    650c:	1e b7       	in	r17, 0x3e	; 62
    650e:	0f 5f       	subi	r16, 0xFF	; 255
    6510:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    6512:	20 e0       	ldi	r18, 0x00	; 0
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	b8 01       	movw	r22, r16
    6518:	8c e0       	ldi	r24, 0x0C	; 12
    651a:	9a e0       	ldi	r25, 0x0A	; 10
    651c:	0e 94 85 10 	call	0x210a	; 0x210a <_ZNK6String8getBytesEPhjj>
			inputSerial.toCharArray(carray, sizeof(carray));
			process(carray, ',');
    6520:	6c e2       	ldi	r22, 0x2C	; 44
    6522:	c8 01       	movw	r24, r16
    6524:	0e 94 36 30 	call	0x606c	; 0x606c <_Z7processPcc>
			inputSerial = "";
    6528:	63 ef       	ldi	r22, 0xF3	; 243
    652a:	74 e0       	ldi	r23, 0x04	; 4
    652c:	8c e0       	ldi	r24, 0x0C	; 12
    652e:	9a e0       	ldi	r25, 0x0A	; 10
    6530:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    6534:	8c 2d       	mov	r24, r12
    6536:	9d 2d       	mov	r25, r13
    6538:	0f b6       	in	r0, 0x3f	; 63
    653a:	f8 94       	cli
    653c:	9e bf       	out	0x3e, r25	; 62
    653e:	0f be       	out	0x3f, r0	; 63
    6540:	8d bf       	out	0x3d, r24	; 61
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    6542:	8c ed       	ldi	r24, 0xDC	; 220
    6544:	96 e0       	ldi	r25, 0x06	; 6
    6546:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    654a:	89 2b       	or	r24, r25
    654c:	09 f6       	brne	.-126    	; 0x64d0 <_Z11serialEventv+0x1a>
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    654e:	0f b6       	in	r0, 0x3f	; 63
    6550:	f8 94       	cli
    6552:	fe be       	out	0x3e, r15	; 62
    6554:	0f be       	out	0x3f, r0	; 63
    6556:	ed be       	out	0x3d, r14	; 61
    6558:	df 91       	pop	r29
    655a:	cf 91       	pop	r28
    655c:	1f 91       	pop	r17
    655e:	0f 91       	pop	r16
    6560:	ff 90       	pop	r15
    6562:	ef 90       	pop	r14
    6564:	df 90       	pop	r13
    6566:	cf 90       	pop	r12
    6568:	08 95       	ret

0000656a <_Z11getChecksumPc>:
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
	byte cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    656a:	fc 01       	movw	r30, r24
    656c:	01 90       	ld	r0, Z+
    656e:	00 20       	and	r0, r0
    6570:	e9 f7       	brne	.-6      	; 0x656c <_Z11getChecksumPc+0x2>
    6572:	e8 1b       	sub	r30, r24
    6574:	f9 0b       	sbc	r31, r25
    6576:	32 97       	sbiw	r30, 0x02	; 2
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
    6578:	dc 01       	movw	r26, r24
    657a:	11 96       	adiw	r26, 0x01	; 1
	byte cs = 0; //clear any old checksum
    657c:	40 e0       	ldi	r20, 0x00	; 0
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    657e:	02 c0       	rjmp	.+4      	; 0x6584 <_Z11getChecksumPc+0x1a>
		cs ^= str[n]; //calculates the checksum
    6580:	2d 91       	ld	r18, X+
    6582:	42 27       	eor	r20, r18
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
	byte cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    6584:	9d 01       	movw	r18, r26
    6586:	28 1b       	sub	r18, r24
    6588:	39 0b       	sbc	r19, r25
    658a:	2e 17       	cp	r18, r30
    658c:	3f 07       	cpc	r19, r31
    658e:	c0 f3       	brcs	.-16     	; 0x6580 <_Z11getChecksumPc+0x16>
		cs ^= str[n]; //calculates the checksum
	}
	return cs;
}
    6590:	84 2f       	mov	r24, r20
    6592:	08 95       	ret

00006594 <_GLOBAL__sub_I_execute>:
int inByteSerial3;
char input;
//volatile int intCnt = 0;

//freeboard model
FreeBoardModel model;
    6594:	8d e6       	ldi	r24, 0x6D	; 109
    6596:	90 e1       	ldi	r25, 0x10	; 16
    6598:	0e 94 7d 28 	call	0x50fa	; 0x50fa <_ZN14FreeBoardModelC1Ev>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    659c:	10 92 2f 10 	sts	0x102F, r1
    65a0:	10 92 2e 10 	sts	0x102E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    65a4:	88 ee       	ldi	r24, 0xE8	; 232
    65a6:	93 e0       	ldi	r25, 0x03	; 3
    65a8:	a0 e0       	ldi	r26, 0x00	; 0
    65aa:	b0 e0       	ldi	r27, 0x00	; 0
    65ac:	80 93 30 10 	sts	0x1030, r24
    65b0:	90 93 31 10 	sts	0x1031, r25
    65b4:	a0 93 32 10 	sts	0x1032, r26
    65b8:	b0 93 33 10 	sts	0x1033, r27
#include "FreeBoardModel.h"
#include "FreeBoardPLC.h"

class NmeaSerial: AltSoftSerial {
public:
	NmeaSerial(FreeBoardModel* model):model(model){};
    65bc:	85 e7       	ldi	r24, 0x75	; 117
    65be:	95 e0       	ldi	r25, 0x05	; 5
    65c0:	90 93 2d 10 	sts	0x102D, r25
    65c4:	80 93 2c 10 	sts	0x102C, r24
    65c8:	8d e6       	ldi	r24, 0x6D	; 109
    65ca:	90 e1       	ldi	r25, 0x10	; 16
    65cc:	90 93 39 10 	sts	0x1039, r25
    65d0:	80 93 38 10 	sts	0x1038, r24
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);

//NMEA ports
NMEA gpsSource(ALL);
    65d4:	60 e0       	ldi	r22, 0x00	; 0
    65d6:	70 e0       	ldi	r23, 0x00	; 0
    65d8:	83 ec       	ldi	r24, 0xC3	; 195
    65da:	9e e0       	ldi	r25, 0x0E	; 14
    65dc:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>
NMEA talker0(ALL);
    65e0:	60 e0       	ldi	r22, 0x00	; 0
    65e2:	70 e0       	ldi	r23, 0x00	; 0
    65e4:	8a e5       	ldi	r24, 0x5A	; 90
    65e6:	9d e0       	ldi	r25, 0x0D	; 13
    65e8:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>
NMEA talker2(ALL);
    65ec:	60 e0       	ldi	r22, 0x00	; 0
    65ee:	70 e0       	ldi	r23, 0x00	; 0
    65f0:	81 ef       	ldi	r24, 0xF1	; 241
    65f2:	9b e0       	ldi	r25, 0x0B	; 11
    65f4:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>
NMEA talker3(ALL);
    65f8:	60 e0       	ldi	r22, 0x00	; 0
    65fa:	70 e0       	ldi	r23, 0x00	; 0
    65fc:	88 e8       	ldi	r24, 0x88	; 136
    65fe:	9a e0       	ldi	r25, 0x0A	; 10
    6600:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>

//alarm
Alarm alarm(&model);
    6604:	6d e6       	ldi	r22, 0x6D	; 109
    6606:	70 e1       	ldi	r23, 0x10	; 16
    6608:	83 e8       	ldi	r24, 0x83	; 131
    660a:	9a e0       	ldi	r25, 0x0A	; 10
    660c:	0e 94 71 23 	call	0x46e2	; 0x46e2 <_ZN5AlarmC1EP14FreeBoardModel>

//wind
Wind wind(&model);
    6610:	6d e6       	ldi	r22, 0x6D	; 109
    6612:	70 e1       	ldi	r23, 0x10	; 16
    6614:	81 e8       	ldi	r24, 0x81	; 129
    6616:	9a e0       	ldi	r25, 0x0A	; 10
    6618:	0e 94 dc 37 	call	0x6fb8	; 0x6fb8 <_ZN4WindC1EP14FreeBoardModel>

//Gps
Gps gps(&gpsSource, &model);
    661c:	4d e6       	ldi	r20, 0x6D	; 109
    661e:	50 e1       	ldi	r21, 0x10	; 16
    6620:	63 ec       	ldi	r22, 0xC3	; 195
    6622:	7e e0       	ldi	r23, 0x0E	; 14
    6624:	8b e7       	ldi	r24, 0x7B	; 123
    6626:	9a e0       	ldi	r25, 0x0A	; 10
    6628:	0e 94 55 33 	call	0x66aa	; 0x66aa <_ZN3GpsC1EP4NMEAP14FreeBoardModel>

//Autopilot
Autopilot autopilot(&model);
    662c:	6d e6       	ldi	r22, 0x6D	; 109
    662e:	70 e1       	ldi	r23, 0x10	; 16
    6630:	81 e3       	ldi	r24, 0x31	; 49
    6632:	9a e0       	ldi	r25, 0x0A	; 10
    6634:	0e 94 d5 26 	call	0x4daa	; 0x4daa <_ZN9AutopilotC1EP14FreeBoardModel>

//Anchor
Anchor anchor(&model);
    6638:	6d e6       	ldi	r22, 0x6D	; 109
    663a:	70 e1       	ldi	r23, 0x10	; 16
    663c:	8d e2       	ldi	r24, 0x2D	; 45
    663e:	9a e0       	ldi	r25, 0x0A	; 10
    6640:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN6AnchorC1EP14FreeBoardModel>

Seatalk seatalk(&Serial2, &model);
    6644:	4d e6       	ldi	r20, 0x6D	; 109
    6646:	50 e1       	ldi	r21, 0x10	; 16
    6648:	68 e9       	ldi	r22, 0x98	; 152
    664a:	76 e0       	ldi	r23, 0x06	; 6
    664c:	83 e1       	ldi	r24, 0x13	; 19
    664e:	9a e0       	ldi	r25, 0x0A	; 10
    6650:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>

String inputSerial = ""; // a string to hold incoming data
    6654:	63 ef       	ldi	r22, 0xF3	; 243
    6656:	74 e0       	ldi	r23, 0x04	; 4
    6658:	8c e0       	ldi	r24, 0x0C	; 12
    665a:	9a e0       	ldi	r25, 0x0A	; 10
    665c:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <_ZN6StringC1EPKc>

00006660 <_GLOBAL__sub_D_execute>:
    6660:	8c e0       	ldi	r24, 0x0C	; 12
    6662:	9a e0       	ldi	r25, 0x0A	; 10
    6664:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN6StringD1Ev>

//Autopilot
Autopilot autopilot(&model);

//Anchor
Anchor anchor(&model);
    6668:	8d e2       	ldi	r24, 0x2D	; 45
    666a:	9a e0       	ldi	r25, 0x0A	; 10
    666c:	0e 94 c9 23 	call	0x4792	; 0x4792 <_ZN6AnchorD1Ev>

//Gps
Gps gps(&gpsSource, &model);

//Autopilot
Autopilot autopilot(&model);
    6670:	81 e3       	ldi	r24, 0x31	; 49
    6672:	9a e0       	ldi	r25, 0x0A	; 10
    6674:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <_ZN9AutopilotD1Ev>

//wind
Wind wind(&model);

//Gps
Gps gps(&gpsSource, &model);
    6678:	8b e7       	ldi	r24, 0x7B	; 123
    667a:	9a e0       	ldi	r25, 0x0A	; 10
    667c:	0e 94 48 33 	call	0x6690	; 0x6690 <_ZN3GpsD1Ev>
NMEA talker0(ALL);
NMEA talker2(ALL);
NMEA talker3(ALL);

//alarm
Alarm alarm(&model);
    6680:	83 e8       	ldi	r24, 0x83	; 131
    6682:	9a e0       	ldi	r25, 0x0A	; 10
    6684:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN5AlarmD1Ev>

//NMEA output - The arduino puts out TTL, NMEA is RS232. They are different V and amps. The +-5V levels may need inverting or you get
// garbage.
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);
    6688:	8c e2       	ldi	r24, 0x2C	; 44
    668a:	90 e1       	ldi	r25, 0x10	; 16
    668c:	0c 94 1b 37 	jmp	0x6e36	; 0x6e36 <_ZN10NmeaSerialD1Ev>

00006690 <_ZN3GpsD1Ev>:
 */
#include "Gps.h"
char gpsBuffer[40];
PString gpsStr(gpsBuffer, sizeof(gpsBuffer));

Gps::~Gps() {
    6690:	2d e4       	ldi	r18, 0x4D	; 77
    6692:	35 e0       	ldi	r19, 0x05	; 5
    6694:	fc 01       	movw	r30, r24
    6696:	31 83       	std	Z+1, r19	; 0x01
    6698:	20 83       	st	Z, r18
    669a:	08 95       	ret

0000669c <_ZN3GpsD0Ev>:
    669c:	2d e4       	ldi	r18, 0x4D	; 77
    669e:	35 e0       	ldi	r19, 0x05	; 5
    66a0:	fc 01       	movw	r30, r24
    66a2:	31 83       	std	Z+1, r19	; 0x01
    66a4:	20 83       	st	Z, r18
}
    66a6:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

000066aa <_ZN3GpsC1EP4NMEAP14FreeBoardModel>:
Gps::Gps(NMEA* gpsSource, FreeBoardModel* model) {
    66aa:	fc 01       	movw	r30, r24
    66ac:	8d e4       	ldi	r24, 0x4D	; 77
    66ae:	95 e0       	ldi	r25, 0x05	; 5
    66b0:	91 83       	std	Z+1, r25	; 0x01
    66b2:	80 83       	st	Z, r24

	this->model = model;
    66b4:	55 83       	std	Z+5, r21	; 0x05
    66b6:	44 83       	std	Z+4, r20	; 0x04
	this->gpsSource = gpsSource;
    66b8:	73 83       	std	Z+3, r23	; 0x03
    66ba:	62 83       	std	Z+2, r22	; 0x02
    66bc:	08 95       	ret

000066be <_ZN3Gps7testMsgEv>:
	//setupGps();
}

bool Gps::testMsg() {
    66be:	cf 92       	push	r12
    66c0:	df 92       	push	r13
    66c2:	ef 92       	push	r14
    66c4:	ff 92       	push	r15
    66c6:	cf 93       	push	r28
    66c8:	df 93       	push	r29
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    66ca:	c5 e6       	ldi	r28, 0x65	; 101
    66cc:	d0 e0       	ldi	r29, 0x00	; 0
    66ce:	0a c0       	rjmp	.+20     	; 0x66e4 <_ZN3Gps7testMsgEv+0x26>
		if (Serial1.available()) {
    66d0:	8a eb       	ldi	r24, 0xBA	; 186
    66d2:	96 e0       	ldi	r25, 0x06	; 6
    66d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    66d8:	89 2b       	or	r24, r25
    66da:	d1 f3       	breq	.-12     	; 0x66d0 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
    66dc:	8a eb       	ldi	r24, 0xBA	; 186
    66de:	96 e0       	ldi	r25, 0x06	; 6
    66e0:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    66e4:	21 97       	sbiw	r28, 0x01	; 1
}

bool Gps::testMsg() {
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    66e6:	a1 f7       	brne	.-24     	; 0x66d0 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
			x++;
		}
	}
	//5 secs
	unsigned long now = millis();
    66e8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    66ec:	6b 01       	movw	r12, r22
    66ee:	7c 01       	movw	r14, r24
	bool valid = true;
    66f0:	c1 e0       	ldi	r28, 0x01	; 1
	while (now + 5000 > millis() && valid) {
    66f2:	88 e8       	ldi	r24, 0x88	; 136
    66f4:	c8 0e       	add	r12, r24
    66f6:	83 e1       	ldi	r24, 0x13	; 19
    66f8:	d8 1e       	adc	r13, r24
    66fa:	e1 1c       	adc	r14, r1
    66fc:	f1 1c       	adc	r15, r1
    66fe:	09 c0       	rjmp	.+18     	; 0x6712 <_ZN3Gps7testMsgEv+0x54>
		if (Serial1.available()) {
			int c = Serial1.read();
    6700:	8a eb       	ldi	r24, 0xBA	; 186
    6702:	96 e0       	ldi	r25, 0x06	; 6
    6704:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
			//Serial.print(c);
			//Serial.print(",");
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
    6708:	c1 e0       	ldi	r28, 0x01	; 1
    670a:	81 38       	cpi	r24, 0x81	; 129
    670c:	91 05       	cpc	r25, r1
    670e:	0c f0       	brlt	.+2      	; 0x6712 <_ZN3Gps7testMsgEv+0x54>
    6710:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
    6712:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    6716:	6c 15       	cp	r22, r12
    6718:	7d 05       	cpc	r23, r13
    671a:	8e 05       	cpc	r24, r14
    671c:	9f 05       	cpc	r25, r15
    671e:	18 f4       	brcc	.+6      	; 0x6726 <_ZN3Gps7testMsgEv+0x68>
    6720:	c1 11       	cpse	r28, r1
    6722:	12 c0       	rjmp	.+36     	; 0x6748 <_ZN3Gps7testMsgEv+0x8a>
    6724:	09 c0       	rjmp	.+18     	; 0x6738 <_ZN3Gps7testMsgEv+0x7a>
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
		}
	}
	if (DEBUG) {
		if (valid)
    6726:	cc 23       	and	r28, r28
    6728:	39 f0       	breq	.+14     	; 0x6738 <_ZN3Gps7testMsgEv+0x7a>
			Serial.println("OK");
    672a:	66 e9       	ldi	r22, 0x96	; 150
    672c:	73 e0       	ldi	r23, 0x03	; 3
    672e:	8c ed       	ldi	r24, 0xDC	; 220
    6730:	96 e0       	ldi	r25, 0x06	; 6
    6732:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    6736:	0f c0       	rjmp	.+30     	; 0x6756 <_ZN3Gps7testMsgEv+0x98>
		else
			Serial.println("FAIL");
    6738:	69 e9       	ldi	r22, 0x99	; 153
    673a:	73 e0       	ldi	r23, 0x03	; 3
    673c:	8c ed       	ldi	r24, 0xDC	; 220
    673e:	96 e0       	ldi	r25, 0x06	; 6
    6740:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    6744:	c0 e0       	ldi	r28, 0x00	; 0
    6746:	07 c0       	rjmp	.+14     	; 0x6756 <_ZN3Gps7testMsgEv+0x98>
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
		if (Serial1.available()) {
    6748:	8a eb       	ldi	r24, 0xBA	; 186
    674a:	96 e0       	ldi	r25, 0x06	; 6
    674c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    6750:	89 2b       	or	r24, r25
    6752:	f9 f2       	breq	.-66     	; 0x6712 <_ZN3Gps7testMsgEv+0x54>
    6754:	d5 cf       	rjmp	.-86     	; 0x6700 <_ZN3Gps7testMsgEv+0x42>
			Serial.println("OK");
		else
			Serial.println("FAIL");
	}
	return valid;
}
    6756:	8c 2f       	mov	r24, r28
    6758:	df 91       	pop	r29
    675a:	cf 91       	pop	r28
    675c:	ff 90       	pop	r15
    675e:	ef 90       	pop	r14
    6760:	df 90       	pop	r13
    6762:	cf 90       	pop	r12
    6764:	08 95       	ret

00006766 <_ZN3Gps8autoBaudEv>:


int Gps::autoBaud() {
    6766:	cf 93       	push	r28
    6768:	df 93       	push	r29
    676a:	ec 01       	movw	r28, r24
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
    676c:	6e e9       	ldi	r22, 0x9E	; 158
    676e:	73 e0       	ldi	r23, 0x03	; 3
    6770:	8c ed       	ldi	r24, 0xDC	; 220
    6772:	96 e0       	ldi	r25, 0x06	; 6
    6774:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(4800);
    6778:	40 ec       	ldi	r20, 0xC0	; 192
    677a:	52 e1       	ldi	r21, 0x12	; 18
    677c:	60 e0       	ldi	r22, 0x00	; 0
    677e:	70 e0       	ldi	r23, 0x00	; 0
    6780:	8a eb       	ldi	r24, 0xBA	; 186
    6782:	96 e0       	ldi	r25, 0x06	; 6
    6784:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 4800;
    6788:	ce 01       	movw	r24, r28
    678a:	0e 94 5f 33 	call	0x66be	; 0x66be <_ZN3Gps7testMsgEv>
    678e:	81 11       	cpse	r24, r1
    6790:	66 c0       	rjmp	.+204    	; 0x685e <_ZN3Gps8autoBaudEv+0xf8>
	Serial1.end();
    6792:	8a eb       	ldi	r24, 0xBA	; 186
    6794:	96 e0       	ldi	r25, 0x06	; 6
    6796:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 9600..");
    679a:	65 eb       	ldi	r22, 0xB5	; 181
    679c:	73 e0       	ldi	r23, 0x03	; 3
    679e:	8c ed       	ldi	r24, 0xDC	; 220
    67a0:	96 e0       	ldi	r25, 0x06	; 6
    67a2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(9600);
    67a6:	40 e8       	ldi	r20, 0x80	; 128
    67a8:	55 e2       	ldi	r21, 0x25	; 37
    67aa:	60 e0       	ldi	r22, 0x00	; 0
    67ac:	70 e0       	ldi	r23, 0x00	; 0
    67ae:	8a eb       	ldi	r24, 0xBA	; 186
    67b0:	96 e0       	ldi	r25, 0x06	; 6
    67b2:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 9600;
    67b6:	ce 01       	movw	r24, r28
    67b8:	0e 94 5f 33 	call	0x66be	; 0x66be <_ZN3Gps7testMsgEv>
    67bc:	81 11       	cpse	r24, r1
    67be:	52 c0       	rjmp	.+164    	; 0x6864 <_ZN3Gps8autoBaudEv+0xfe>
	Serial1.end();
    67c0:	8a eb       	ldi	r24, 0xBA	; 186
    67c2:	96 e0       	ldi	r25, 0x06	; 6
    67c4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 19200..");
    67c8:	6c ec       	ldi	r22, 0xCC	; 204
    67ca:	73 e0       	ldi	r23, 0x03	; 3
    67cc:	8c ed       	ldi	r24, 0xDC	; 220
    67ce:	96 e0       	ldi	r25, 0x06	; 6
    67d0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(19200);
    67d4:	40 e0       	ldi	r20, 0x00	; 0
    67d6:	5b e4       	ldi	r21, 0x4B	; 75
    67d8:	60 e0       	ldi	r22, 0x00	; 0
    67da:	70 e0       	ldi	r23, 0x00	; 0
    67dc:	8a eb       	ldi	r24, 0xBA	; 186
    67de:	96 e0       	ldi	r25, 0x06	; 6
    67e0:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 19200;
    67e4:	ce 01       	movw	r24, r28
    67e6:	0e 94 5f 33 	call	0x66be	; 0x66be <_ZN3Gps7testMsgEv>
    67ea:	81 11       	cpse	r24, r1
    67ec:	3e c0       	rjmp	.+124    	; 0x686a <_ZN3Gps8autoBaudEv+0x104>
	Serial1.end();
    67ee:	8a eb       	ldi	r24, 0xBA	; 186
    67f0:	96 e0       	ldi	r25, 0x06	; 6
    67f2:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 38400..");
    67f6:	64 ee       	ldi	r22, 0xE4	; 228
    67f8:	73 e0       	ldi	r23, 0x03	; 3
    67fa:	8c ed       	ldi	r24, 0xDC	; 220
    67fc:	96 e0       	ldi	r25, 0x06	; 6
    67fe:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(38400);
    6802:	40 e0       	ldi	r20, 0x00	; 0
    6804:	56 e9       	ldi	r21, 0x96	; 150
    6806:	60 e0       	ldi	r22, 0x00	; 0
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	8a eb       	ldi	r24, 0xBA	; 186
    680c:	96 e0       	ldi	r25, 0x06	; 6
    680e:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 38400;
    6812:	ce 01       	movw	r24, r28
    6814:	0e 94 5f 33 	call	0x66be	; 0x66be <_ZN3Gps7testMsgEv>
    6818:	81 11       	cpse	r24, r1
    681a:	2a c0       	rjmp	.+84     	; 0x6870 <_ZN3Gps8autoBaudEv+0x10a>
	Serial1.end();
    681c:	8a eb       	ldi	r24, 0xBA	; 186
    681e:	96 e0       	ldi	r25, 0x06	; 6
    6820:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 57600..");
    6824:	6c ef       	ldi	r22, 0xFC	; 252
    6826:	73 e0       	ldi	r23, 0x03	; 3
    6828:	8c ed       	ldi	r24, 0xDC	; 220
    682a:	96 e0       	ldi	r25, 0x06	; 6
    682c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(57600);
    6830:	40 e0       	ldi	r20, 0x00	; 0
    6832:	51 ee       	ldi	r21, 0xE1	; 225
    6834:	60 e0       	ldi	r22, 0x00	; 0
    6836:	70 e0       	ldi	r23, 0x00	; 0
    6838:	8a eb       	ldi	r24, 0xBA	; 186
    683a:	96 e0       	ldi	r25, 0x06	; 6
    683c:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 57600;
    6840:	ce 01       	movw	r24, r28
    6842:	0e 94 5f 33 	call	0x66be	; 0x66be <_ZN3Gps7testMsgEv>
    6846:	81 11       	cpse	r24, r1
    6848:	16 c0       	rjmp	.+44     	; 0x6876 <_ZN3Gps8autoBaudEv+0x110>
	Serial1.end();
    684a:	8a eb       	ldi	r24, 0xBA	; 186
    684c:	96 e0       	ldi	r25, 0x06	; 6
    684e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   default to 4800..");
    6852:	64 e1       	ldi	r22, 0x14	; 20
    6854:	74 e0       	ldi	r23, 0x04	; 4
    6856:	8c ed       	ldi	r24, 0xDC	; 220
    6858:	96 e0       	ldi	r25, 0x06	; 6
    685a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
	Serial1.begin(4800);
	if (testMsg()) return 4800;
    685e:	20 ec       	ldi	r18, 0xC0	; 192
    6860:	32 e1       	ldi	r19, 0x12	; 18
    6862:	0b c0       	rjmp	.+22     	; 0x687a <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 9600..");
	Serial1.begin(9600);
	if (testMsg()) return 9600;
    6864:	20 e8       	ldi	r18, 0x80	; 128
    6866:	35 e2       	ldi	r19, 0x25	; 37
    6868:	08 c0       	rjmp	.+16     	; 0x687a <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 19200..");
	Serial1.begin(19200);
	if (testMsg()) return 19200;
    686a:	20 e0       	ldi	r18, 0x00	; 0
    686c:	3b e4       	ldi	r19, 0x4B	; 75
    686e:	05 c0       	rjmp	.+10     	; 0x687a <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 38400..");
	Serial1.begin(38400);
	if (testMsg()) return 38400;
    6870:	20 e0       	ldi	r18, 0x00	; 0
    6872:	36 e9       	ldi	r19, 0x96	; 150
    6874:	02 c0       	rjmp	.+4      	; 0x687a <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 57600..");
	Serial1.begin(57600);
	if (testMsg()) return 57600;
    6876:	20 e0       	ldi	r18, 0x00	; 0
    6878:	31 ee       	ldi	r19, 0xE1	; 225
	Serial1.end();
	if (DEBUG) Serial.println("   default to 4800..");
	return 4800;
}
    687a:	c9 01       	movw	r24, r18
    687c:	df 91       	pop	r29
    687e:	cf 91       	pop	r28
    6880:	08 95       	ret

00006882 <_ZN3Gps11getMetersToEffff>:
	Serial1.flush();
	Serial1.end();
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
}

float Gps::getMetersTo(float targetLat, float targetLon, float currentLat, float currentLon) {
    6882:	2f 92       	push	r2
    6884:	3f 92       	push	r3
    6886:	4f 92       	push	r4
    6888:	5f 92       	push	r5
    688a:	6f 92       	push	r6
    688c:	7f 92       	push	r7
    688e:	8f 92       	push	r8
    6890:	9f 92       	push	r9
    6892:	af 92       	push	r10
    6894:	bf 92       	push	r11
    6896:	cf 92       	push	r12
    6898:	df 92       	push	r13
    689a:	ef 92       	push	r14
    689c:	ff 92       	push	r15
    689e:	0f 93       	push	r16
    68a0:	1f 93       	push	r17
    68a2:	cf 93       	push	r28
    68a4:	df 93       	push	r29
    68a6:	cd b7       	in	r28, 0x3d	; 61
    68a8:	de b7       	in	r29, 0x3e	; 62
    68aa:	60 97       	sbiw	r28, 0x10	; 16
    68ac:	0f b6       	in	r0, 0x3f	; 63
    68ae:	f8 94       	cli
    68b0:	de bf       	out	0x3e, r29	; 62
    68b2:	0f be       	out	0x3f, r0	; 63
    68b4:	cd bf       	out	0x3d, r28	; 61
    68b6:	69 83       	std	Y+1, r22	; 0x01
    68b8:	7a 83       	std	Y+2, r23	; 0x02
    68ba:	8b 83       	std	Y+3, r24	; 0x03
    68bc:	9c 83       	std	Y+4, r25	; 0x04
    68be:	ca 01       	movw	r24, r20
    68c0:	b9 01       	movw	r22, r18
    68c2:	a6 01       	movw	r20, r12
    68c4:	95 01       	movw	r18, r10
	// returns distance in meters between two positions, both specified
	// as signed decimal-degrees latitude and longitude. Uses great-circle
	// distance computation for hypothised sphere of radius 6372795 meters.
	// Because Earth is no exact sphere, rounding errors may be upto 0.5%.
	float delta = radians(targetLon - currentLon);
    68c6:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
    68ca:	25 e3       	ldi	r18, 0x35	; 53
    68cc:	3a ef       	ldi	r19, 0xFA	; 250
    68ce:	4e e8       	ldi	r20, 0x8E	; 142
    68d0:	5c e3       	ldi	r21, 0x3C	; 60
    68d2:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    68d6:	6b 01       	movw	r12, r22
    68d8:	5c 01       	movw	r10, r24
	float sdlong = sin(delta);
    68da:	7d 2d       	mov	r23, r13
    68dc:	9b 2d       	mov	r25, r11
    68de:	0e 94 26 43 	call	0x864c	; 0x864c <sin>
    68e2:	2b 01       	movw	r4, r22
    68e4:	3c 01       	movw	r6, r24
	float cdlong = cos(delta);
    68e6:	6c 2d       	mov	r22, r12
    68e8:	7d 2d       	mov	r23, r13
    68ea:	8a 2d       	mov	r24, r10
    68ec:	9b 2d       	mov	r25, r11
    68ee:	0e 94 b9 40 	call	0x8172	; 0x8172 <cos>
    68f2:	6d 83       	std	Y+5, r22	; 0x05
    68f4:	7e 83       	std	Y+6, r23	; 0x06
    68f6:	8f 83       	std	Y+7, r24	; 0x07
    68f8:	98 87       	std	Y+8, r25	; 0x08
	targetLat = radians(targetLat);
    68fa:	25 e3       	ldi	r18, 0x35	; 53
    68fc:	3a ef       	ldi	r19, 0xFA	; 250
    68fe:	4e e8       	ldi	r20, 0x8E	; 142
    6900:	5c e3       	ldi	r21, 0x3C	; 60
    6902:	69 81       	ldd	r22, Y+1	; 0x01
    6904:	7a 81       	ldd	r23, Y+2	; 0x02
    6906:	8b 81       	ldd	r24, Y+3	; 0x03
    6908:	9c 81       	ldd	r25, Y+4	; 0x04
    690a:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    690e:	6b 01       	movw	r12, r22
    6910:	89 83       	std	Y+1, r24	; 0x01
    6912:	99 87       	std	Y+9, r25	; 0x09
	currentLat = radians(currentLat);
    6914:	25 e3       	ldi	r18, 0x35	; 53
    6916:	3a ef       	ldi	r19, 0xFA	; 250
    6918:	4e e8       	ldi	r20, 0x8E	; 142
    691a:	5c e3       	ldi	r21, 0x3C	; 60
    691c:	c8 01       	movw	r24, r16
    691e:	b7 01       	movw	r22, r14
    6920:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    6924:	16 2f       	mov	r17, r22
    6926:	07 2f       	mov	r16, r23
    6928:	38 2e       	mov	r3, r24
    692a:	29 2e       	mov	r2, r25
	float slat1 = sin(targetLat);
    692c:	39 81       	ldd	r19, Y+1	; 0x01
    692e:	29 85       	ldd	r18, Y+9	; 0x09
    6930:	6c 2d       	mov	r22, r12
    6932:	7d 2d       	mov	r23, r13
    6934:	83 2f       	mov	r24, r19
    6936:	92 2f       	mov	r25, r18
    6938:	0e 94 26 43 	call	0x864c	; 0x864c <sin>
    693c:	4b 01       	movw	r8, r22
    693e:	5c 01       	movw	r10, r24
	float clat1 = cos(targetLat);
    6940:	39 81       	ldd	r19, Y+1	; 0x01
    6942:	29 85       	ldd	r18, Y+9	; 0x09
    6944:	6c 2d       	mov	r22, r12
    6946:	7d 2d       	mov	r23, r13
    6948:	83 2f       	mov	r24, r19
    694a:	92 2f       	mov	r25, r18
    694c:	0e 94 b9 40 	call	0x8172	; 0x8172 <cos>
    6950:	69 83       	std	Y+1, r22	; 0x01
    6952:	7a 83       	std	Y+2, r23	; 0x02
    6954:	8b 83       	std	Y+3, r24	; 0x03
    6956:	9c 83       	std	Y+4, r25	; 0x04
	float slat2 = sin(currentLat);
    6958:	a8 01       	movw	r20, r16
    695a:	91 01       	movw	r18, r2
    695c:	65 2f       	mov	r22, r21
    695e:	74 2f       	mov	r23, r20
    6960:	83 2f       	mov	r24, r19
    6962:	92 2f       	mov	r25, r18
    6964:	0e 94 26 43 	call	0x864c	; 0x864c <sin>
    6968:	69 87       	std	Y+9, r22	; 0x09
    696a:	7a 87       	std	Y+10, r23	; 0x0a
    696c:	8b 87       	std	Y+11, r24	; 0x0b
    696e:	9c 87       	std	Y+12, r25	; 0x0c
	float clat2 = cos(currentLat);
    6970:	a8 01       	movw	r20, r16
    6972:	91 01       	movw	r18, r2
    6974:	65 2f       	mov	r22, r21
    6976:	74 2f       	mov	r23, r20
    6978:	83 2f       	mov	r24, r19
    697a:	92 2f       	mov	r25, r18
    697c:	0e 94 b9 40 	call	0x8172	; 0x8172 <cos>
    6980:	6b 01       	movw	r12, r22
    6982:	7c 01       	movw	r14, r24
	delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
    6984:	29 85       	ldd	r18, Y+9	; 0x09
    6986:	3a 85       	ldd	r19, Y+10	; 0x0a
    6988:	4b 85       	ldd	r20, Y+11	; 0x0b
    698a:	5c 85       	ldd	r21, Y+12	; 0x0c
    698c:	69 81       	ldd	r22, Y+1	; 0x01
    698e:	7a 81       	ldd	r23, Y+2	; 0x02
    6990:	8b 81       	ldd	r24, Y+3	; 0x03
    6992:	9c 81       	ldd	r25, Y+4	; 0x04
    6994:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    6998:	6d 87       	std	Y+13, r22	; 0x0d
    699a:	7e 87       	std	Y+14, r23	; 0x0e
    699c:	8f 87       	std	Y+15, r24	; 0x0f
    699e:	98 8b       	std	Y+16, r25	; 0x10
    69a0:	a7 01       	movw	r20, r14
    69a2:	96 01       	movw	r18, r12
    69a4:	c5 01       	movw	r24, r10
    69a6:	b4 01       	movw	r22, r8
    69a8:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    69ac:	2d 81       	ldd	r18, Y+5	; 0x05
    69ae:	3e 81       	ldd	r19, Y+6	; 0x06
    69b0:	4f 81       	ldd	r20, Y+7	; 0x07
    69b2:	58 85       	ldd	r21, Y+8	; 0x08
    69b4:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    69b8:	9b 01       	movw	r18, r22
    69ba:	ac 01       	movw	r20, r24
    69bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    69be:	7e 85       	ldd	r23, Y+14	; 0x0e
    69c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    69c2:	98 89       	ldd	r25, Y+16	; 0x10
    69c4:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <__subsf3>
	delta = sq(delta);
    69c8:	26 2f       	mov	r18, r22
    69ca:	37 2f       	mov	r19, r23
    69cc:	48 2f       	mov	r20, r24
    69ce:	59 2f       	mov	r21, r25
    69d0:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    69d4:	36 2e       	mov	r3, r22
    69d6:	27 2e       	mov	r2, r23
    69d8:	18 2f       	mov	r17, r24
    69da:	09 2f       	mov	r16, r25
	delta += sq(clat2 * sdlong);
    69dc:	a3 01       	movw	r20, r6
    69de:	92 01       	movw	r18, r4
    69e0:	c7 01       	movw	r24, r14
    69e2:	b6 01       	movw	r22, r12
    69e4:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    69e8:	26 2f       	mov	r18, r22
    69ea:	37 2f       	mov	r19, r23
    69ec:	48 2f       	mov	r20, r24
    69ee:	59 2f       	mov	r21, r25
    69f0:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    69f4:	9b 01       	movw	r18, r22
    69f6:	ac 01       	movw	r20, r24
    69f8:	d1 01       	movw	r26, r2
    69fa:	f8 01       	movw	r30, r16
    69fc:	6b 2f       	mov	r22, r27
    69fe:	7a 2f       	mov	r23, r26
    6a00:	8f 2f       	mov	r24, r31
    6a02:	9e 2f       	mov	r25, r30
    6a04:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
	delta = sqrt(delta);
    6a08:	0e 94 30 43 	call	0x8660	; 0x8660 <sqrt>
    6a0c:	2b 01       	movw	r4, r22
    6a0e:	3c 01       	movw	r6, r24
	float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
    6a10:	29 85       	ldd	r18, Y+9	; 0x09
    6a12:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a14:	4b 85       	ldd	r20, Y+11	; 0x0b
    6a16:	5c 85       	ldd	r21, Y+12	; 0x0c
    6a18:	c5 01       	movw	r24, r10
    6a1a:	b4 01       	movw	r22, r8
    6a1c:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    6a20:	4b 01       	movw	r8, r22
    6a22:	5c 01       	movw	r10, r24
    6a24:	a7 01       	movw	r20, r14
    6a26:	96 01       	movw	r18, r12
    6a28:	69 81       	ldd	r22, Y+1	; 0x01
    6a2a:	7a 81       	ldd	r23, Y+2	; 0x02
    6a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    6a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    6a30:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    6a34:	2d 81       	ldd	r18, Y+5	; 0x05
    6a36:	3e 81       	ldd	r19, Y+6	; 0x06
    6a38:	4f 81       	ldd	r20, Y+7	; 0x07
    6a3a:	58 85       	ldd	r21, Y+8	; 0x08
    6a3c:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    6a40:	9b 01       	movw	r18, r22
    6a42:	ac 01       	movw	r20, r24
    6a44:	c5 01       	movw	r24, r10
    6a46:	b4 01       	movw	r22, r8
    6a48:	0e 94 ef 3f 	call	0x7fde	; 0x7fde <__addsf3>
    6a4c:	9b 01       	movw	r18, r22
    6a4e:	ac 01       	movw	r20, r24
	delta = atan2(delta, denom);
    6a50:	c3 01       	movw	r24, r6
    6a52:	b2 01       	movw	r22, r4
    6a54:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atan2>
	return delta * 6372795 * MTR;
    6a58:	26 e7       	ldi	r18, 0x76	; 118
    6a5a:	3b e7       	ldi	r19, 0x7B	; 123
    6a5c:	42 ec       	ldi	r20, 0xC2	; 194
    6a5e:	5a e4       	ldi	r21, 0x4A	; 74
    6a60:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
}
    6a64:	60 96       	adiw	r28, 0x10	; 16
    6a66:	0f b6       	in	r0, 0x3f	; 63
    6a68:	f8 94       	cli
    6a6a:	de bf       	out	0x3e, r29	; 62
    6a6c:	0f be       	out	0x3f, r0	; 63
    6a6e:	cd bf       	out	0x3d, r28	; 61
    6a70:	df 91       	pop	r29
    6a72:	cf 91       	pop	r28
    6a74:	1f 91       	pop	r17
    6a76:	0f 91       	pop	r16
    6a78:	ff 90       	pop	r15
    6a7a:	ef 90       	pop	r14
    6a7c:	df 90       	pop	r13
    6a7e:	cf 90       	pop	r12
    6a80:	bf 90       	pop	r11
    6a82:	af 90       	pop	r10
    6a84:	9f 90       	pop	r9
    6a86:	8f 90       	pop	r8
    6a88:	7f 90       	pop	r7
    6a8a:	6f 90       	pop	r6
    6a8c:	5f 90       	pop	r5
    6a8e:	4f 90       	pop	r4
    6a90:	3f 90       	pop	r3
    6a92:	2f 90       	pop	r2
    6a94:	08 95       	ret

00006a96 <_ZN3Gps6decodeEh>:

bool Gps::decode(byte inByte) {
    6a96:	cf 93       	push	r28
    6a98:	df 93       	push	r29
    6a9a:	ec 01       	movw	r28, r24
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
    6a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6aa0:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA6decodeEc>
    6aa4:	61 e0       	ldi	r22, 0x01	; 1
    6aa6:	89 2b       	or	r24, r25
    6aa8:	09 f4       	brne	.+2      	; 0x6aac <_ZN3Gps6decodeEh+0x16>
    6aaa:	60 e0       	ldi	r22, 0x00	; 0
    6aac:	8c 81       	ldd	r24, Y+4	; 0x04
    6aae:	9d 81       	ldd	r25, Y+5	; 0x05
    6ab0:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_ZN14FreeBoardModel12setGpsDecodeEb>
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
    6ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    6ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    6ab8:	0e 94 a3 2c 	call	0x5946	; 0x5946 <_ZN14FreeBoardModel11isGpsDecodeEv>
    6abc:	88 23       	and	r24, r24
    6abe:	69 f1       	breq	.+90     	; 0x6b1a <_ZN3Gps6decodeEh+0x84>
		model->setGpsStatus(gpsSource->gprmc_status());
    6ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ac2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ac4:	0e 94 18 1c 	call	0x3830	; 0x3830 <_ZN4NMEA12gprmc_statusEv>
    6ac8:	68 2f       	mov	r22, r24
    6aca:	8c 81       	ldd	r24, Y+4	; 0x04
    6acc:	9d 81       	ldd	r25, Y+5	; 0x05
    6ace:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <_ZN14FreeBoardModel12setGpsStatusEc>
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
    6ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ad6:	0e 94 18 1c 	call	0x3830	; 0x3830 <_ZN4NMEA12gprmc_statusEv>
    6ada:	81 34       	cpi	r24, 0x41	; 65
    6adc:	f1 f4       	brne	.+60     	; 0x6b1a <_ZN3Gps6decodeEh+0x84>
    6ade:	60 e0       	ldi	r22, 0x00	; 0
    6ae0:	70 e0       	ldi	r23, 0x00	; 0
    6ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ae6:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN4NMEA4termEi>
    6aea:	fc 01       	movw	r30, r24
    6aec:	82 81       	ldd	r24, Z+2	; 0x02
    6aee:	82 35       	cpi	r24, 0x52	; 82
    6af0:	a1 f0       	breq	.+40     	; 0x6b1a <_ZN3Gps6decodeEh+0x84>
    6af2:	60 e0       	ldi	r22, 0x00	; 0
    6af4:	70 e0       	ldi	r23, 0x00	; 0
    6af6:	8a 81       	ldd	r24, Y+2	; 0x02
    6af8:	9b 81       	ldd	r25, Y+3	; 0x03
    6afa:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN4NMEA4termEi>
    6afe:	fc 01       	movw	r30, r24
    6b00:	83 81       	ldd	r24, Z+3	; 0x03
    6b02:	8d 34       	cpi	r24, 0x4D	; 77
    6b04:	51 f0       	breq	.+20     	; 0x6b1a <_ZN3Gps6decodeEh+0x84>
    6b06:	60 e0       	ldi	r22, 0x00	; 0
    6b08:	70 e0       	ldi	r23, 0x00	; 0
    6b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b0e:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN4NMEA4termEi>
    6b12:	fc 01       	movw	r30, r24
    6b14:	84 81       	ldd	r24, Z+4	; 0x04
    6b16:	83 34       	cpi	r24, 0x43	; 67
    6b18:	31 f4       	brne	.+12     	; 0x6b26 <_ZN3Gps6decodeEh+0x90>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b1c:	9d 81       	ldd	r25, Y+5	; 0x05
}
    6b1e:	df 91       	pop	r29
    6b20:	cf 91       	pop	r28
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6b22:	0c 94 a3 2c 	jmp	0x5946	; 0x5946 <_ZN14FreeBoardModel11isGpsDecodeEv>
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
			model->setGpsLastFix(millis());
    6b26:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    6b2a:	ab 01       	movw	r20, r22
    6b2c:	bc 01       	movw	r22, r24
    6b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b30:	9d 81       	ldd	r25, Y+5	; 0x05
    6b32:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <_ZN14FreeBoardModel13setGpsLastFixEm>
			model->setGpsCourse(gpsSource->gprmc_course());
    6b36:	8a 81       	ldd	r24, Y+2	; 0x02
    6b38:	9b 81       	ldd	r25, Y+3	; 0x03
    6b3a:	0e 94 43 1c 	call	0x3886	; 0x3886 <_ZN4NMEA12gprmc_courseEv>
    6b3e:	ab 01       	movw	r20, r22
    6b40:	bc 01       	movw	r22, r24
    6b42:	8c 81       	ldd	r24, Y+4	; 0x04
    6b44:	9d 81       	ldd	r25, Y+5	; 0x05
    6b46:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN14FreeBoardModel12setGpsCourseEf>
			model->setGpsLatitude(gpsSource->gprmc_latitude());
    6b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b4e:	0e 94 1b 1c 	call	0x3836	; 0x3836 <_ZN4NMEA14gprmc_latitudeEv>
    6b52:	ab 01       	movw	r20, r22
    6b54:	bc 01       	movw	r22, r24
    6b56:	8c 81       	ldd	r24, Y+4	; 0x04
    6b58:	9d 81       	ldd	r25, Y+5	; 0x05
    6b5a:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <_ZN14FreeBoardModel14setGpsLatitudeEf>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
    6b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b60:	9b 81       	ldd	r25, Y+3	; 0x03
    6b62:	0e 94 25 1c 	call	0x384a	; 0x384a <_ZN4NMEA15gprmc_longitudeEv>
    6b66:	ab 01       	movw	r20, r22
    6b68:	bc 01       	movw	r22, r24
    6b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    6b6e:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <_ZN14FreeBoardModel15setGpsLongitudeEf>
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
    6b72:	8c 81       	ldd	r24, Y+4	; 0x04
    6b74:	9d 81       	ldd	r25, Y+5	; 0x05
    6b76:	0e 94 5d 2c 	call	0x58ba	; 0x58ba <_ZN14FreeBoardModel15getGpsSpeedUnitEv>
    6b7a:	ab 01       	movw	r20, r22
    6b7c:	bc 01       	movw	r22, r24
    6b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b80:	9b 81       	ldd	r25, Y+3	; 0x03
    6b82:	0e 94 2f 1c 	call	0x385e	; 0x385e <_ZN4NMEA11gprmc_speedEf>
    6b86:	ab 01       	movw	r20, r22
    6b88:	bc 01       	movw	r22, r24
    6b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    6b8e:	0e 94 79 2d 	call	0x5af2	; 0x5af2 <_ZN14FreeBoardModel11setGpsSpeedEf>
			model->setGpsUtc(gpsSource->gprmc_utc());
    6b92:	8a 81       	ldd	r24, Y+2	; 0x02
    6b94:	9b 81       	ldd	r25, Y+3	; 0x03
    6b96:	0e 94 0e 1c 	call	0x381c	; 0x381c <_ZN4NMEA9gprmc_utcEv>
    6b9a:	ab 01       	movw	r20, r22
    6b9c:	bc 01       	movw	r22, r24
    6b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    6ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    6ba2:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <_ZN14FreeBoardModel9setGpsUtcEf>
    6ba6:	b9 cf       	rjmp	.-142    	; 0x6b1a <_ZN3Gps6decodeEh+0x84>

00006ba8 <_ZN3Gps12setupGpsImplEv>:
}
/*
 * setup implementations for various models of GPS.
 * Define the GPS in GPS.h
 */
void Gps::setupGpsImpl(){
    6ba8:	ef 92       	push	r14
    6baa:	ff 92       	push	r15
    6bac:	0f 93       	push	r16
    6bae:	1f 93       	push	r17
    6bb0:	cf 93       	push	r28
    6bb2:	df 93       	push	r29
    6bb4:	cd b7       	in	r28, 0x3d	; 61
    6bb6:	de b7       	in	r29, 0x3e	; 62
    6bb8:	6e 97       	sbiw	r28, 0x1e	; 30
    6bba:	0f b6       	in	r0, 0x3f	; 63
    6bbc:	f8 94       	cli
    6bbe:	de bf       	out	0x3e, r29	; 62
    6bc0:	0f be       	out	0x3f, r0	; 63
    6bc2:	cd bf       	out	0x3d, r28	; 61
    6bc4:	8c 01       	movw	r16, r24
	//setup based on GPS type - probably wants a more modular way if many GPS types appear
	if(GPS_EM_406A == model->getGpsModel()){
    6bc6:	fc 01       	movw	r30, r24
    6bc8:	84 81       	ldd	r24, Z+4	; 0x04
    6bca:	95 81       	ldd	r25, Z+5	; 0x05
    6bcc:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <_ZN14FreeBoardModel11getGpsModelEv>
    6bd0:	01 97       	sbiw	r24, 0x01	; 1
    6bd2:	09 f0       	breq	.+2      	; 0x6bd6 <_ZN3Gps12setupGpsImplEv+0x2e>
    6bd4:	8f c0       	rjmp	.+286    	; 0x6cf4 <_ZN3Gps12setupGpsImplEv+0x14c>
		//Serial1.begin(38400, 8, 1, 0); //gps
		//set debug on
		Serial1.println("$PSRF105,1*3E");
    6bd6:	60 e3       	ldi	r22, 0x30	; 48
    6bd8:	74 e0       	ldi	r23, 0x04	; 4
    6bda:	8a eb       	ldi	r24, 0xBA	; 186
    6bdc:	96 e0       	ldi	r25, 0x06	; 6
    6bde:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

		//set VTG off -  Vector track an Speed over the Ground
		Serial1.println("$PSRF103,05,00,00,01*21");
    6be2:	6e e3       	ldi	r22, 0x3E	; 62
    6be4:	74 e0       	ldi	r23, 0x04	; 4
    6be6:	8a eb       	ldi	r24, 0xBA	; 186
    6be8:	96 e0       	ldi	r25, 0x06	; 6
    6bea:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GLL off -  Lat/Lon data
		Serial1.println("$PSRF103,01,00,00,01*25");
    6bee:	66 e5       	ldi	r22, 0x56	; 86
    6bf0:	74 e0       	ldi	r23, 0x04	; 4
    6bf2:	8a eb       	ldi	r24, 0xBA	; 186
    6bf4:	96 e0       	ldi	r25, 0x06	; 6
    6bf6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GGA on, 5sec, constant -  Fix information
		Serial1.println("$PSRF103,00,00,05,01*21");
    6bfa:	6e e6       	ldi	r22, 0x6E	; 110
    6bfc:	74 e0       	ldi	r23, 0x04	; 4
    6bfe:	8a eb       	ldi	r24, 0xBA	; 186
    6c00:	96 e0       	ldi	r25, 0x06	; 6
    6c02:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GSA on, 5 sec, constant - Overall Satellite data
		Serial1.println("$PSRF103,02,00,05,01*23");
    6c06:	66 e8       	ldi	r22, 0x86	; 134
    6c08:	74 e0       	ldi	r23, 0x04	; 4
    6c0a:	8a eb       	ldi	r24, 0xBA	; 186
    6c0c:	96 e0       	ldi	r25, 0x06	; 6
    6c0e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GSV on, 20sec, constant -Detailed Satellite data
		Serial1.println("$PSRF103,03,00,20,01*25");
    6c12:	6e e9       	ldi	r22, 0x9E	; 158
    6c14:	74 e0       	ldi	r23, 0x04	; 4
    6c16:	8a eb       	ldi	r24, 0xBA	; 186
    6c18:	96 e0       	ldi	r25, 0x06	; 6
    6c1a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set RMC on, 1sec, constant, Recommended minimum info
		Serial1.println("$PSRF103,04,00,01,01*21");
    6c1e:	66 eb       	ldi	r22, 0xB6	; 182
    6c20:	74 e0       	ldi	r23, 0x04	; 4
    6c22:	8a eb       	ldi	r24, 0xBA	; 186
    6c24:	96 e0       	ldi	r25, 0x06	; 6
    6c26:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

		//debug off
		Serial1.println("$PSRF105,0*3F");
    6c2a:	6e ec       	ldi	r22, 0xCE	; 206
    6c2c:	74 e0       	ldi	r23, 0x04	; 4
    6c2e:	8a eb       	ldi	r24, 0xBA	; 186
    6c30:	96 e0       	ldi	r25, 0x06	; 6
    6c32:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//#define SIRF_BAUD_RATE_38400    "$PSRF100,1,38400,8,1,0*3D\r\n"
		//#define SIRF_BAUD_RATE_57600    "$PSRF100,1,57600,8,1,0*36\r\n"

		//$PSRF100,1,38400,8,1,0*3D\r\n
		char gpsSentence [20];
		Serial1.print("$PSRF100,1,");
    6c36:	6c ed       	ldi	r22, 0xDC	; 220
    6c38:	74 e0       	ldi	r23, 0x04	; 4
    6c3a:	8a eb       	ldi	r24, 0xBA	; 186
    6c3c:	96 e0       	ldi	r25, 0x06	; 6
    6c3e:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		Serial1.print(model->getSerialBaud1());
    6c42:	f8 01       	movw	r30, r16
    6c44:	84 81       	ldd	r24, Z+4	; 0x04
    6c46:	95 81       	ldd	r25, Z+5	; 0x05
    6c48:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6c4c:	4a e0       	ldi	r20, 0x0A	; 10
    6c4e:	50 e0       	ldi	r21, 0x00	; 0
    6c50:	bc 01       	movw	r22, r24
    6c52:	8a eb       	ldi	r24, 0xBA	; 186
    6c54:	96 e0       	ldi	r25, 0x06	; 6
    6c56:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
		Serial.print(",8,1,0*3D\r\n");
    6c5a:	68 ee       	ldi	r22, 0xE8	; 232
    6c5c:	74 e0       	ldi	r23, 0x04	; 4
    6c5e:	8c ed       	ldi	r24, 0xDC	; 220
    6c60:	96 e0       	ldi	r25, 0x06	; 6
    6c62:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
    6c66:	18 8e       	std	Y+24, r1	; 0x18
    6c68:	1f 8a       	std	Y+23, r1	; 0x17
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6c6a:	88 e0       	ldi	r24, 0x08	; 8
    6c6c:	92 e0       	ldi	r25, 0x02	; 2
    6c6e:	9e 8b       	std	Y+22, r25	; 0x16
    6c70:	8d 8b       	std	Y+21, r24	; 0x15
    6c72:	ee 24       	eor	r14, r14
    6c74:	e3 94       	inc	r14
    6c76:	f1 2c       	mov	r15, r1
    6c78:	ec 0e       	add	r14, r28
    6c7a:	fd 1e       	adc	r15, r29
    6c7c:	fa 8e       	std	Y+26, r15	; 0x1a
    6c7e:	e9 8e       	std	Y+25, r14	; 0x19
    6c80:	84 e1       	ldi	r24, 0x14	; 20
    6c82:	90 e0       	ldi	r25, 0x00	; 0
    6c84:	9e 8f       	std	Y+30, r25	; 0x1e
    6c86:	8d 8f       	std	Y+29, r24	; 0x1d
  { begin(); }
    6c88:	ce 01       	movw	r24, r28
    6c8a:	45 96       	adiw	r24, 0x15	; 21
    6c8c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>
		PString str(gpsSentence, sizeof(gpsSentence));
		str.print("$PSRF100,1,");
    6c90:	6c ed       	ldi	r22, 0xDC	; 220
    6c92:	74 e0       	ldi	r23, 0x04	; 4
    6c94:	ce 01       	movw	r24, r28
    6c96:	45 96       	adiw	r24, 0x15	; 21
    6c98:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		str.print(model->getSerialBaud1());
    6c9c:	f8 01       	movw	r30, r16
    6c9e:	84 81       	ldd	r24, Z+4	; 0x04
    6ca0:	95 81       	ldd	r25, Z+5	; 0x05
    6ca2:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6ca6:	4a e0       	ldi	r20, 0x0A	; 10
    6ca8:	50 e0       	ldi	r21, 0x00	; 0
    6caa:	bc 01       	movw	r22, r24
    6cac:	ce 01       	movw	r24, r28
    6cae:	45 96       	adiw	r24, 0x15	; 21
    6cb0:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
		str.print(",8,1,0*");
    6cb4:	64 ef       	ldi	r22, 0xF4	; 244
    6cb6:	74 e0       	ldi	r23, 0x04	; 4
    6cb8:	ce 01       	movw	r24, r28
    6cba:	45 96       	adiw	r24, 0x15	; 21
    6cbc:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		//calculate the checksum
		byte cs = getChecksum(gpsSentence); //clear any old checksum
    6cc0:	c7 01       	movw	r24, r14
    6cc2:	0e 94 b5 32 	call	0x656a	; 0x656a <_Z11getChecksumPc>
    6cc6:	f8 2e       	mov	r15, r24
		//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
		if (cs < 0x10) str.print('0');
    6cc8:	ff e0       	ldi	r31, 0x0F	; 15
    6cca:	f8 17       	cp	r31, r24
    6ccc:	28 f0       	brcs	.+10     	; 0x6cd8 <_ZN3Gps12setupGpsImplEv+0x130>
    6cce:	60 e3       	ldi	r22, 0x30	; 48
    6cd0:	ce 01       	movw	r24, r28
    6cd2:	45 96       	adiw	r24, 0x15	; 21
    6cd4:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6cd8:	40 e1       	ldi	r20, 0x10	; 16
    6cda:	50 e0       	ldi	r21, 0x00	; 0
    6cdc:	6f 2d       	mov	r22, r15
    6cde:	ce 01       	movw	r24, r28
    6ce0:	45 96       	adiw	r24, 0x15	; 21
    6ce2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN5Print5printEhi>
		Serial.println(gpsSentence);
    6ce6:	be 01       	movw	r22, r28
    6ce8:	6f 5f       	subi	r22, 0xFF	; 255
    6cea:	7f 4f       	sbci	r23, 0xFF	; 255
    6cec:	8c ed       	ldi	r24, 0xDC	; 220
    6cee:	96 e0       	ldi	r25, 0x06	; 6
    6cf0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	}
	if(GPS_MTEK_3329 == model->getGpsModel()){
    6cf4:	f8 01       	movw	r30, r16
    6cf6:	84 81       	ldd	r24, Z+4	; 0x04
    6cf8:	95 81       	ldd	r25, Z+5	; 0x05
    6cfa:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <_ZN14FreeBoardModel11getGpsModelEv>
    6cfe:	02 97       	sbiw	r24, 0x02	; 2
    6d00:	09 f0       	breq	.+2      	; 0x6d04 <_ZN3Gps12setupGpsImplEv+0x15c>
    6d02:	52 c0       	rjmp	.+164    	; 0x6da8 <_ZN3Gps12setupGpsImplEv+0x200>

		//setting update rate to 1Hz
		Serial1.println("$PMTK220,1000*1F");
    6d04:	6c ef       	ldi	r22, 0xFC	; 252
    6d06:	74 e0       	ldi	r23, 0x04	; 4
    6d08:	8a eb       	ldi	r24, 0xBA	; 186
    6d0a:	96 e0       	ldi	r25, 0x06	; 6
    6d0c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//setting the NMEA Output to get RMC, GGA, GSA & GSV.
		Serial1.println("$PMTK314,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0*28");
    6d10:	6d e0       	ldi	r22, 0x0D	; 13
    6d12:	75 e0       	ldi	r23, 0x05	; 5
    6d14:	8a eb       	ldi	r24, 0xBA	; 186
    6d16:	96 e0       	ldi	r25, 0x06	; 6
    6d18:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    6d1c:	18 8e       	std	Y+24, r1	; 0x18
    6d1e:	1f 8a       	std	Y+23, r1	; 0x17
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6d20:	88 e0       	ldi	r24, 0x08	; 8
    6d22:	92 e0       	ldi	r25, 0x02	; 2
    6d24:	9e 8b       	std	Y+22, r25	; 0x16
    6d26:	8d 8b       	std	Y+21, r24	; 0x15
    6d28:	ee 24       	eor	r14, r14
    6d2a:	e3 94       	inc	r14
    6d2c:	f1 2c       	mov	r15, r1
    6d2e:	ec 0e       	add	r14, r28
    6d30:	fd 1e       	adc	r15, r29
    6d32:	fa 8e       	std	Y+26, r15	; 0x1a
    6d34:	e9 8e       	std	Y+25, r14	; 0x19
    6d36:	84 e1       	ldi	r24, 0x14	; 20
    6d38:	90 e0       	ldi	r25, 0x00	; 0
    6d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    6d3c:	8d 8f       	std	Y+29, r24	; 0x1d
  { begin(); }
    6d3e:	ce 01       	movw	r24, r28
    6d40:	45 96       	adiw	r24, 0x15	; 21
    6d42:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>
		You can also set the GPS to any desired baud rate speed by changing the value inside the string and generate a new checksum here: http://www.hhhh.org/wiml/proj/nmeaxor.html
		 */

		char gpsSentence [20];
		PString str(gpsSentence, sizeof(gpsSentence));
		str.print("$PMTK251,");
    6d46:	6f e3       	ldi	r22, 0x3F	; 63
    6d48:	75 e0       	ldi	r23, 0x05	; 5
    6d4a:	ce 01       	movw	r24, r28
    6d4c:	45 96       	adiw	r24, 0x15	; 21
    6d4e:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		str.print(model->getSerialBaud1());
    6d52:	f8 01       	movw	r30, r16
    6d54:	84 81       	ldd	r24, Z+4	; 0x04
    6d56:	95 81       	ldd	r25, Z+5	; 0x05
    6d58:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6d5c:	4a e0       	ldi	r20, 0x0A	; 10
    6d5e:	50 e0       	ldi	r21, 0x00	; 0
    6d60:	bc 01       	movw	r22, r24
    6d62:	ce 01       	movw	r24, r28
    6d64:	45 96       	adiw	r24, 0x15	; 21
    6d66:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
		str.print("*");
    6d6a:	6a ef       	ldi	r22, 0xFA	; 250
    6d6c:	74 e0       	ldi	r23, 0x04	; 4
    6d6e:	ce 01       	movw	r24, r28
    6d70:	45 96       	adiw	r24, 0x15	; 21
    6d72:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		//calculate the checksum
		byte cs = getChecksum(gpsSentence); //clear any old checksum
    6d76:	c7 01       	movw	r24, r14
    6d78:	0e 94 b5 32 	call	0x656a	; 0x656a <_Z11getChecksumPc>
    6d7c:	18 2f       	mov	r17, r24
		//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
		if (cs < 0x10) str.print('0');
    6d7e:	80 31       	cpi	r24, 0x10	; 16
    6d80:	28 f4       	brcc	.+10     	; 0x6d8c <_ZN3Gps12setupGpsImplEv+0x1e4>
    6d82:	60 e3       	ldi	r22, 0x30	; 48
    6d84:	ce 01       	movw	r24, r28
    6d86:	45 96       	adiw	r24, 0x15	; 21
    6d88:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6d8c:	40 e1       	ldi	r20, 0x10	; 16
    6d8e:	50 e0       	ldi	r21, 0x00	; 0
    6d90:	61 2f       	mov	r22, r17
    6d92:	ce 01       	movw	r24, r28
    6d94:	45 96       	adiw	r24, 0x15	; 21
    6d96:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN5Print5printEhi>
		Serial.println(gpsSentence);
    6d9a:	be 01       	movw	r22, r28
    6d9c:	6f 5f       	subi	r22, 0xFF	; 255
    6d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    6da0:	8c ed       	ldi	r24, 0xDC	; 220
    6da2:	96 e0       	ldi	r25, 0x06	; 6
    6da4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>


	}
}
    6da8:	6e 96       	adiw	r28, 0x1e	; 30
    6daa:	0f b6       	in	r0, 0x3f	; 63
    6dac:	f8 94       	cli
    6dae:	de bf       	out	0x3e, r29	; 62
    6db0:	0f be       	out	0x3f, r0	; 63
    6db2:	cd bf       	out	0x3d, r28	; 61
    6db4:	df 91       	pop	r29
    6db6:	cf 91       	pop	r28
    6db8:	1f 91       	pop	r17
    6dba:	0f 91       	pop	r16
    6dbc:	ff 90       	pop	r15
    6dbe:	ef 90       	pop	r14
    6dc0:	08 95       	ret

00006dc2 <_ZN3Gps8setupGpsEv>:
//	return gpsDecode;
//}
/*
 Set baud rate and various message frequencies.
 */
void Gps::setupGps() {
    6dc2:	cf 93       	push	r28
    6dc4:	df 93       	push	r29
    6dc6:	ec 01       	movw	r28, r24
	 6 MSS (If internal beacon is supported)
	 7 Not defined
	 8 ZDA (if 1PPS output is supported)
	 9 Not defined
	 */
	autoBaud();
    6dc8:	0e 94 b3 33 	call	0x6766	; 0x6766 <_ZN3Gps8autoBaudEv>

	setupGpsImpl();
    6dcc:	ce 01       	movw	r24, r28
    6dce:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <_ZN3Gps12setupGpsImplEv>
	//now flush and restart
	Serial1.flush();
    6dd2:	8a eb       	ldi	r24, 0xBA	; 186
    6dd4:	96 e0       	ldi	r25, 0x06	; 6
    6dd6:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN14HardwareSerial5flushEv>
	Serial1.end();
    6dda:	8a eb       	ldi	r24, 0xBA	; 186
    6ddc:	96 e0       	ldi	r25, 0x06	; 6
    6dde:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
    6de2:	8c 81       	ldd	r24, Y+4	; 0x04
    6de4:	9d 81       	ldd	r25, Y+5	; 0x05
    6de6:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6dea:	ac 01       	movw	r20, r24
    6dec:	66 27       	eor	r22, r22
    6dee:	57 fd       	sbrc	r21, 7
    6df0:	60 95       	com	r22
    6df2:	76 2f       	mov	r23, r22
    6df4:	26 e0       	ldi	r18, 0x06	; 6
    6df6:	8a eb       	ldi	r24, 0xBA	; 186
    6df8:	96 e0       	ldi	r25, 0x06	; 6
}
    6dfa:	df 91       	pop	r29
    6dfc:	cf 91       	pop	r28

	setupGpsImpl();
	//now flush and restart
	Serial1.flush();
	Serial1.end();
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
    6dfe:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>

00006e02 <_GLOBAL__sub_I_gpsBuffer>:
    6e02:	10 92 1a 11 	sts	0x111A, r1
    6e06:	10 92 19 11 	sts	0x1119, r1
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6e0a:	88 e0       	ldi	r24, 0x08	; 8
    6e0c:	92 e0       	ldi	r25, 0x02	; 2
    6e0e:	90 93 18 11 	sts	0x1118, r25
    6e12:	80 93 17 11 	sts	0x1117, r24
    6e16:	81 e2       	ldi	r24, 0x21	; 33
    6e18:	91 e1       	ldi	r25, 0x11	; 17
    6e1a:	90 93 1c 11 	sts	0x111C, r25
    6e1e:	80 93 1b 11 	sts	0x111B, r24
    6e22:	88 e2       	ldi	r24, 0x28	; 40
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	90 93 20 11 	sts	0x1120, r25
    6e2a:	80 93 1f 11 	sts	0x111F, r24
  { begin(); }
    6e2e:	87 e1       	ldi	r24, 0x17	; 23
    6e30:	91 e1       	ldi	r25, 0x11	; 17
    6e32:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>

00006e36 <_ZN10NmeaSerialD1Ev>:

class AltSoftSerial : public Stream
{
public:
	AltSoftSerial() { }
	~AltSoftSerial() { end(); }
    6e36:	28 e1       	ldi	r18, 0x18	; 24
    6e38:	32 e0       	ldi	r19, 0x02	; 2
    6e3a:	fc 01       	movw	r30, r24
    6e3c:	31 83       	std	Z+1, r19	; 0x01
    6e3e:	20 83       	st	Z, r18
    6e40:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <_ZN13AltSoftSerial3endEv>

00006e44 <_ZN10NmeaSerialD0Ev>:
 *      Author: robert
 */

#include "NmeaSerial.h"

NmeaSerial::~NmeaSerial() {
    6e44:	cf 93       	push	r28
    6e46:	df 93       	push	r29
    6e48:	ec 01       	movw	r28, r24
    6e4a:	88 e1       	ldi	r24, 0x18	; 24
    6e4c:	92 e0       	ldi	r25, 0x02	; 2
    6e4e:	99 83       	std	Y+1, r25	; 0x01
    6e50:	88 83       	st	Y, r24
    6e52:	0e 94 50 23 	call	0x46a0	; 0x46a0 <_ZN13AltSoftSerial3endEv>

}
    6e56:	ce 01       	movw	r24, r28
    6e58:	df 91       	pop	r29
    6e5a:	cf 91       	pop	r28
    6e5c:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

00006e60 <_ZN10NmeaSerial5beginEl>:
void NmeaSerial::begin(long speed) {
	//initialise the nmea output
	//pinMode(nmeaRxPin, INPUT);
	//pinMode(nmeaTxPin, OUTPUT);
	AltSoftSerial::begin(speed);
    6e60:	9a 01       	movw	r18, r20
    6e62:	ab 01       	movw	r20, r22
	static void begin(uint32_t baud) { init((F_CPU + baud / 2) / baud); }
    6e64:	ca 01       	movw	r24, r20
    6e66:	b9 01       	movw	r22, r18
    6e68:	96 95       	lsr	r25
    6e6a:	87 95       	ror	r24
    6e6c:	77 95       	ror	r23
    6e6e:	67 95       	ror	r22
    6e70:	7c 5d       	subi	r23, 0xDC	; 220
    6e72:	8b 40       	sbci	r24, 0x0B	; 11
    6e74:	9f 4f       	sbci	r25, 0xFF	; 255
    6e76:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    6e7a:	ca 01       	movw	r24, r20
    6e7c:	b9 01       	movw	r22, r18
    6e7e:	0c 94 36 21 	jmp	0x426c	; 0x426c <_ZN13AltSoftSerial4initEm>

00006e82 <_ZN10NmeaSerial9printNmeaEPc>:

void NmeaSerial::printNmea(char* sentence) {
	//sentence can be up to 80 chars
	//make it as perfect as possible, as the Raymarine C70 is very touchy
	// noInterrupts();
	println(sentence);
    6e82:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

00006e86 <_ZN10NmeaSerial13printWindNmeaEv>:
 * 4. Wind Speed Units, K/M/N
 * 5. Status, A = Data Valid
 * 6. Checksum
 *
 */
void NmeaSerial::printWindNmea() {
    6e86:	cf 92       	push	r12
    6e88:	df 92       	push	r13
    6e8a:	ef 92       	push	r14
    6e8c:	ff 92       	push	r15
    6e8e:	0f 93       	push	r16
    6e90:	1f 93       	push	r17
    6e92:	cf 93       	push	r28
    6e94:	df 93       	push	r29
    6e96:	cd b7       	in	r28, 0x3d	; 61
    6e98:	de b7       	in	r29, 0x3e	; 62
    6e9a:	2a 97       	sbiw	r28, 0x0a	; 10
    6e9c:	0f b6       	in	r0, 0x3f	; 63
    6e9e:	f8 94       	cli
    6ea0:	de bf       	out	0x3e, r29	; 62
    6ea2:	0f be       	out	0x3f, r0	; 63
    6ea4:	cd bf       	out	0x3d, r28	; 61
    6ea6:	8c 01       	movw	r16, r24
	//Assemble a sentence of the various parts so that we can calculate the proper checksum

	PString str(windSentence, sizeof(windSentence));
    6ea8:	7c 01       	movw	r14, r24
    6eaa:	8e e0       	ldi	r24, 0x0E	; 14
    6eac:	e8 0e       	add	r14, r24
    6eae:	f1 1c       	adc	r15, r1
    6eb0:	1c 82       	std	Y+4, r1	; 0x04
    6eb2:	1b 82       	std	Y+3, r1	; 0x03
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6eb4:	88 e0       	ldi	r24, 0x08	; 8
    6eb6:	92 e0       	ldi	r25, 0x02	; 2
    6eb8:	9a 83       	std	Y+2, r25	; 0x02
    6eba:	89 83       	std	Y+1, r24	; 0x01
    6ebc:	fe 82       	std	Y+6, r15	; 0x06
    6ebe:	ed 82       	std	Y+5, r14	; 0x05
    6ec0:	8e e1       	ldi	r24, 0x1E	; 30
    6ec2:	90 e0       	ldi	r25, 0x00	; 0
    6ec4:	9a 87       	std	Y+10, r25	; 0x0a
    6ec6:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    6ec8:	ce 01       	movw	r24, r28
    6eca:	01 96       	adiw	r24, 0x01	; 1
    6ecc:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>
	str.print("$WIMWV,");
    6ed0:	61 e5       	ldi	r22, 0x51	; 81
    6ed2:	75 e0       	ldi	r23, 0x05	; 5
    6ed4:	ce 01       	movw	r24, r28
    6ed6:	01 96       	adiw	r24, 0x01	; 1
    6ed8:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	str.print(model->getWindApparentDir());
    6edc:	f8 01       	movw	r30, r16
    6ede:	84 85       	ldd	r24, Z+12	; 0x0c
    6ee0:	95 85       	ldd	r25, Z+13	; 0x0d
    6ee2:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <_ZN14FreeBoardModel18getWindApparentDirEv>
    6ee6:	4a e0       	ldi	r20, 0x0A	; 10
    6ee8:	50 e0       	ldi	r21, 0x00	; 0
    6eea:	bc 01       	movw	r22, r24
    6eec:	ce 01       	movw	r24, r28
    6eee:	01 96       	adiw	r24, 0x01	; 1
    6ef0:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	str.print(".0,R,");
    6ef4:	69 e5       	ldi	r22, 0x59	; 89
    6ef6:	75 e0       	ldi	r23, 0x05	; 5
    6ef8:	ce 01       	movw	r24, r28
    6efa:	01 96       	adiw	r24, 0x01	; 1
    6efc:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	str.print(model->getWindAverage());
    6f00:	f8 01       	movw	r30, r16
    6f02:	84 85       	ldd	r24, Z+12	; 0x0c
    6f04:	95 85       	ldd	r25, Z+13	; 0x0d
    6f06:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN14FreeBoardModel14getWindAverageEv>
    6f0a:	ab 01       	movw	r20, r22
    6f0c:	bc 01       	movw	r22, r24
    6f0e:	22 e0       	ldi	r18, 0x02	; 2
    6f10:	30 e0       	ldi	r19, 0x00	; 0
    6f12:	ce 01       	movw	r24, r28
    6f14:	01 96       	adiw	r24, 0x01	; 1
    6f16:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	str.print(",N,A*");
    6f1a:	6f e5       	ldi	r22, 0x5F	; 95
    6f1c:	75 e0       	ldi	r23, 0x05	; 5
    6f1e:	ce 01       	movw	r24, r28
    6f20:	01 96       	adiw	r24, 0x01	; 1
    6f22:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	//calculate the checksum

	cs = getChecksum(windSentence); //clear any old checksum
    6f26:	c7 01       	movw	r24, r14
    6f28:	0e 94 b5 32 	call	0x656a	; 0x656a <_Z11getChecksumPc>
    6f2c:	68 01       	movw	r12, r16
    6f2e:	f0 e4       	ldi	r31, 0x40	; 64
    6f30:	cf 0e       	add	r12, r31
    6f32:	d1 1c       	adc	r13, r1
    6f34:	f6 01       	movw	r30, r12
    6f36:	80 83       	st	Z, r24
	//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
	if (cs < 0x10) str.print('0');
    6f38:	80 31       	cpi	r24, 0x10	; 16
    6f3a:	28 f4       	brcc	.+10     	; 0x6f46 <_ZN10NmeaSerial13printWindNmeaEv+0xc0>
    6f3c:	60 e3       	ldi	r22, 0x30	; 48
    6f3e:	ce 01       	movw	r24, r28
    6f40:	01 96       	adiw	r24, 0x01	; 1
    6f42:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
	str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6f46:	40 e1       	ldi	r20, 0x10	; 16
    6f48:	50 e0       	ldi	r21, 0x00	; 0
    6f4a:	f6 01       	movw	r30, r12
    6f4c:	60 81       	ld	r22, Z
    6f4e:	ce 01       	movw	r24, r28
    6f50:	01 96       	adiw	r24, 0x01	; 1
    6f52:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN5Print5printEhi>
	Serial.println(windSentence);
    6f56:	b7 01       	movw	r22, r14
    6f58:	8c ed       	ldi	r24, 0xDC	; 220
    6f5a:	96 e0       	ldi	r25, 0x06	; 6
    6f5c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	printNmea(windSentence);
    6f60:	b7 01       	movw	r22, r14
    6f62:	c8 01       	movw	r24, r16
    6f64:	0e 94 41 37 	call	0x6e82	; 0x6e82 <_ZN10NmeaSerial9printNmeaEPc>

}
    6f68:	2a 96       	adiw	r28, 0x0a	; 10
    6f6a:	0f b6       	in	r0, 0x3f	; 63
    6f6c:	f8 94       	cli
    6f6e:	de bf       	out	0x3e, r29	; 62
    6f70:	0f be       	out	0x3f, r0	; 63
    6f72:	cd bf       	out	0x3d, r28	; 61
    6f74:	df 91       	pop	r29
    6f76:	cf 91       	pop	r28
    6f78:	1f 91       	pop	r17
    6f7a:	0f 91       	pop	r16
    6f7c:	ff 90       	pop	r15
    6f7e:	ef 90       	pop	r14
    6f80:	df 90       	pop	r13
    6f82:	cf 90       	pop	r12
    6f84:	08 95       	ret

00006f86 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>:

 */

#include "Seatalk.h"

	Seatalk::Seatalk( HardwareSerial* serial, FreeBoardModel* model) {
    6f86:	fc 01       	movw	r30, r24
	this->model=model;
    6f88:	57 8b       	std	Z+23, r21	; 0x17
    6f8a:	46 8b       	std	Z+22, r20	; 0x16
	this->serial=serial;
    6f8c:	71 8f       	std	Z+25, r23	; 0x19
    6f8e:	60 8f       	std	Z+24, r22	; 0x18
	seaTalkPos = 0;
    6f90:	11 82       	std	Z+1, r1	; 0x01
    6f92:	10 82       	st	Z, r1
    6f94:	08 95       	ret

00006f96 <_ZN7Seatalk18processSeaTalkByteEh>:
	// Send 36  00  01      Cancel MOB (Man Over Board) condition
	serial->write9(0x36, true);
	serial->write9(0x00, false);
	serial->write9(0x01, false);
}
void Seatalk::processSeaTalkByte(byte inByte) {
    6f96:	fc 01       	movw	r30, r24
		processSeatalk(seatalkStream);
		seaTalkPos = 0;
		// Serial.print("Command:");
		inByte = inByte - 256;
	}
	seatalkStream[seaTalkPos] = inByte;
    6f98:	a0 81       	ld	r26, Z
    6f9a:	b1 81       	ldd	r27, Z+1	; 0x01
    6f9c:	a8 0f       	add	r26, r24
    6f9e:	b9 1f       	adc	r27, r25
    6fa0:	12 96       	adiw	r26, 0x02	; 2
    6fa2:	6c 93       	st	X, r22
	if (seaTalkPos < 19)
    6fa4:	80 81       	ld	r24, Z
    6fa6:	91 81       	ldd	r25, Z+1	; 0x01
    6fa8:	43 97       	sbiw	r24, 0x13	; 19
    6faa:	2c f4       	brge	.+10     	; 0x6fb6 <_ZN7Seatalk18processSeaTalkByteEh+0x20>
		seaTalkPos++;
    6fac:	80 81       	ld	r24, Z
    6fae:	91 81       	ldd	r25, Z+1	; 0x01
    6fb0:	01 96       	adiw	r24, 0x01	; 1
    6fb2:	91 83       	std	Z+1, r25	; 0x01
    6fb4:	80 83       	st	Z, r24
    6fb6:	08 95       	ret

00006fb8 <_ZN4WindC1EP14FreeBoardModel>:
		57318, 57864, 58392, 58902, 59395, 59869, 60325, 60763, 61182, 61583, 61965, 62327, 62671, 62996, 63302, 63588, 63855, 64103, 64331, 64539, 64728,
		64897, 65047, 65176, 65286, 65375, 65445, 65495, 65525, 65535, };

AverageList<val> dirList = AverageList<val>(dirStorage, MAX_NUMBER_OF_READINGS);

Wind::Wind(FreeBoardModel* model) {
    6fb8:	cf 93       	push	r28
    6fba:	df 93       	push	r29
    6fbc:	eb 01       	movw	r28, r22
	this->model = model;
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	71 83       	std	Z+1, r23	; 0x01
    6fc2:	60 83       	st	Z, r22
	//initialise the wind interrupt
	windSpeedMicros = micros();
    6fc4:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    6fc8:	60 93 86 11 	sts	0x1186, r22
    6fcc:	70 93 87 11 	sts	0x1187, r23
    6fd0:	80 93 88 11 	sts	0x1188, r24
    6fd4:	90 93 89 11 	sts	0x1189, r25
	windSpeedMicrosLast = windSpeedMicros;
    6fd8:	40 91 86 11 	lds	r20, 0x1186
    6fdc:	50 91 87 11 	lds	r21, 0x1187
    6fe0:	60 91 88 11 	lds	r22, 0x1188
    6fe4:	70 91 89 11 	lds	r23, 0x1189
    6fe8:	40 93 82 11 	sts	0x1182, r20
    6fec:	50 93 83 11 	sts	0x1183, r21
    6ff0:	60 93 84 11 	sts	0x1184, r22
    6ff4:	70 93 85 11 	sts	0x1185, r23
	windDirDur = 0;
    6ff8:	10 92 72 11 	sts	0x1172, r1
    6ffc:	10 92 73 11 	sts	0x1173, r1
    7000:	10 92 74 11 	sts	0x1174, r1
    7004:	10 92 75 11 	sts	0x1175, r1
	windSpeedDur = 0;
    7008:	10 92 76 11 	sts	0x1176, r1
    700c:	10 92 77 11 	sts	0x1177, r1
    7010:	10 92 78 11 	sts	0x1178, r1
    7014:	10 92 79 11 	sts	0x1179, r1
	windSpeedFlag = true;
    7018:	81 e0       	ldi	r24, 0x01	; 1
    701a:	80 93 59 11 	sts	0x1159, r24
	windDirFlag = true;
    701e:	80 93 58 11 	sts	0x1158, r24
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
			currentSize = 0; 
    7022:	10 92 4c 11 	sts	0x114C, r1
			currentIndex = 0;
    7026:	10 92 4d 11 	sts	0x114D, r1
			for (byte i=0; i<size; i++){ values[i]=0; }
    702a:	80 91 49 11 	lds	r24, 0x1149
    702e:	90 91 4a 11 	lds	r25, 0x114A
    7032:	20 e0       	ldi	r18, 0x00	; 0
    7034:	09 c0       	rjmp	.+18     	; 0x7048 <_ZN4WindC1EP14FreeBoardModel+0x90>
    7036:	fc 01       	movw	r30, r24
    7038:	32 e0       	ldi	r19, 0x02	; 2
    703a:	23 9f       	mul	r18, r19
    703c:	e0 0d       	add	r30, r0
    703e:	f1 1d       	adc	r31, r1
    7040:	11 24       	eor	r1, r1
    7042:	11 82       	std	Z+1, r1	; 0x01
    7044:	10 82       	st	Z, r1
    7046:	2f 5f       	subi	r18, 0xFF	; 255
    7048:	30 91 4b 11 	lds	r19, 0x114B
    704c:	23 17       	cp	r18, r19
    704e:	98 f3       	brcs	.-26     	; 0x7036 <_ZN4WindC1EP14FreeBoardModel+0x7e>
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
    7050:	ce 01       	movw	r24, r28
    7052:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    7056:	84 36       	cpi	r24, 0x64	; 100
    7058:	91 05       	cpc	r25, r1
    705a:	3c f0       	brlt	.+14     	; 0x706a <_ZN4WindC1EP14FreeBoardModel+0xb2>
		model->setWindAlarmSpeed(99);
    705c:	63 e6       	ldi	r22, 0x63	; 99
    705e:	70 e0       	ldi	r23, 0x00	; 0
    7060:	ce 01       	movw	r24, r28
	}
}
    7062:	df 91       	pop	r29
    7064:	cf 91       	pop	r28
	windDirFlag = true;
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
		model->setWindAlarmSpeed(99);
    7066:	0c 94 a5 2d 	jmp	0x5b4a	; 0x5b4a <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
	}
}
    706a:	df 91       	pop	r29
    706c:	cf 91       	pop	r28
    706e:	08 95       	ret

00007070 <_ZN4Wind8isinLongEl>:

//routines for fast sin and cos

long Wind::isinLong(long x) {
    7070:	cf 92       	push	r12
    7072:	df 92       	push	r13
    7074:	ef 92       	push	r14
    7076:	ff 92       	push	r15
    7078:	0f 93       	push	r16
    707a:	1f 93       	push	r17
    707c:	cf 93       	push	r28
    707e:	cb 01       	movw	r24, r22
    7080:	ba 01       	movw	r22, r20
	boolean pos = true; // positive - keeps an eye on the sign.
	if (x < 0) {
    7082:	97 ff       	sbrs	r25, 7
    7084:	09 c0       	rjmp	.+18     	; 0x7098 <_ZN4Wind8isinLongEl+0x28>
		x = -x;
    7086:	90 95       	com	r25
    7088:	80 95       	com	r24
    708a:	70 95       	com	r23
    708c:	61 95       	neg	r22
    708e:	7f 4f       	sbci	r23, 0xFF	; 255
    7090:	8f 4f       	sbci	r24, 0xFF	; 255
    7092:	9f 4f       	sbci	r25, 0xFF	; 255
		pos = !pos;
    7094:	c0 e0       	ldi	r28, 0x00	; 0
    7096:	01 c0       	rjmp	.+2      	; 0x709a <_ZN4Wind8isinLongEl+0x2a>
}

//routines for fast sin and cos

long Wind::isinLong(long x) {
	boolean pos = true; // positive - keeps an eye on the sign.
    7098:	c1 e0       	ldi	r28, 0x01	; 1
	if (x < 0) {
		x = -x;
		pos = !pos;
	}
	if (x >= 360) x %= 360;
    709a:	68 36       	cpi	r22, 0x68	; 104
    709c:	21 e0       	ldi	r18, 0x01	; 1
    709e:	72 07       	cpc	r23, r18
    70a0:	81 05       	cpc	r24, r1
    70a2:	91 05       	cpc	r25, r1
    70a4:	34 f0       	brlt	.+12     	; 0x70b2 <_ZN4Wind8isinLongEl+0x42>
    70a6:	28 e6       	ldi	r18, 0x68	; 104
    70a8:	31 e0       	ldi	r19, 0x01	; 1
    70aa:	40 e0       	ldi	r20, 0x00	; 0
    70ac:	50 e0       	ldi	r21, 0x00	; 0
    70ae:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <__divmodsi4>
	if (x > 180) {
    70b2:	65 3b       	cpi	r22, 0xB5	; 181
    70b4:	71 05       	cpc	r23, r1
    70b6:	81 05       	cpc	r24, r1
    70b8:	91 05       	cpc	r25, r1
    70ba:	34 f0       	brlt	.+12     	; 0x70c8 <_ZN4Wind8isinLongEl+0x58>
		x -= 180;
    70bc:	64 5b       	subi	r22, 0xB4	; 180
    70be:	71 09       	sbc	r23, r1
    70c0:	81 09       	sbc	r24, r1
    70c2:	91 09       	sbc	r25, r1
    70c4:	21 e0       	ldi	r18, 0x01	; 1
    70c6:	c2 27       	eor	r28, r18
		pos = !pos;
	}
	if (x > 90) x = 180 - x;
    70c8:	6b 35       	cpi	r22, 0x5B	; 91
    70ca:	71 05       	cpc	r23, r1
    70cc:	81 05       	cpc	r24, r1
    70ce:	91 05       	cpc	r25, r1
    70d0:	64 f0       	brlt	.+24     	; 0x70ea <_ZN4Wind8isinLongEl+0x7a>
    70d2:	04 eb       	ldi	r16, 0xB4	; 180
    70d4:	10 e0       	ldi	r17, 0x00	; 0
    70d6:	20 e0       	ldi	r18, 0x00	; 0
    70d8:	30 e0       	ldi	r19, 0x00	; 0
    70da:	68 01       	movw	r12, r16
    70dc:	79 01       	movw	r14, r18
    70de:	c6 1a       	sub	r12, r22
    70e0:	d7 0a       	sbc	r13, r23
    70e2:	e8 0a       	sbc	r14, r24
    70e4:	f9 0a       	sbc	r15, r25
    70e6:	c7 01       	movw	r24, r14
    70e8:	b6 01       	movw	r22, r12

	if (pos) return isinTable16[x]; // = /65535.0
    70ea:	fb 01       	movw	r30, r22
    70ec:	ee 0f       	add	r30, r30
    70ee:	ff 1f       	adc	r31, r31
    70f0:	ef 55       	subi	r30, 0x5F	; 95
    70f2:	fa 4f       	sbci	r31, 0xFA	; 250
    70f4:	00 81       	ld	r16, Z
    70f6:	11 81       	ldd	r17, Z+1	; 0x01
    70f8:	c1 11       	cpse	r28, r1
    70fa:	03 c0       	rjmp	.+6      	; 0x7102 <_ZN4Wind8isinLongEl+0x92>
	return 0 - isinTable16[x];
    70fc:	11 95       	neg	r17
    70fe:	01 95       	neg	r16
    7100:	11 09       	sbc	r17, r1
    7102:	20 e0       	ldi	r18, 0x00	; 0
    7104:	30 e0       	ldi	r19, 0x00	; 0
}
    7106:	b8 01       	movw	r22, r16
    7108:	c9 01       	movw	r24, r18
    710a:	cf 91       	pop	r28
    710c:	1f 91       	pop	r17
    710e:	0f 91       	pop	r16
    7110:	ff 90       	pop	r15
    7112:	ef 90       	pop	r14
    7114:	df 90       	pop	r13
    7116:	cf 90       	pop	r12
    7118:	08 95       	ret

0000711a <_ZN4Wind8icosLongEl>:
float Wind::isin(long x) {
	return isinLong(x) * 0.0000152590219;
}

long Wind::icosLong(long x) {
	return isinLong(x + 90);
    711a:	46 5a       	subi	r20, 0xA6	; 166
    711c:	5f 4f       	sbci	r21, 0xFF	; 255
    711e:	6f 4f       	sbci	r22, 0xFF	; 255
    7120:	7f 4f       	sbci	r23, 0xFF	; 255
    7122:	0c 94 38 38 	jmp	0x7070	; 0x7070 <_ZN4Wind8isinLongEl>

00007126 <_ZN4Wind20getRotationalAverageEv>:

/*
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
    7126:	4f 92       	push	r4
    7128:	5f 92       	push	r5
    712a:	6f 92       	push	r6
    712c:	7f 92       	push	r7
    712e:	8f 92       	push	r8
    7130:	9f 92       	push	r9
    7132:	af 92       	push	r10
    7134:	bf 92       	push	r11
    7136:	cf 92       	push	r12
    7138:	df 92       	push	r13
    713a:	ef 92       	push	r14
    713c:	ff 92       	push	r15
    713e:	cf 93       	push	r28
    7140:	df 93       	push	r29
    7142:	3c 01       	movw	r6, r24
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    7144:	40 90 4c 11 	lds	r4, 0x114C
    7148:	c0 91 49 11 	lds	r28, 0x1149
    714c:	d0 91 4a 11 	lds	r29, 0x114A
int Wind::getRotationalAverage() {
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
    7150:	51 2c       	mov	r5, r1
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
	long x =0;
	long y = 0;
    7152:	81 2c       	mov	r8, r1
    7154:	91 2c       	mov	r9, r1
    7156:	54 01       	movw	r10, r8
/*
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
	long x =0;
    7158:	c1 2c       	mov	r12, r1
    715a:	d1 2c       	mov	r13, r1
    715c:	76 01       	movw	r14, r12
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    715e:	19 c0       	rjmp	.+50     	; 0x7192 <_ZN4Wind20getRotationalAverageEv+0x6c>
			return false;
		}
		//return the current index
		byte getCurrentIndex() { return currentIndex; }
		byte getCurrentSize() { return currentSize; }
		datatype getValue(byte x) { return values[x]; }
    7160:	88 81       	ld	r24, Y
    7162:	99 81       	ldd	r25, Y+1	; 0x01
		x += icosLong(dirList.getValue(i));
    7164:	ac 01       	movw	r20, r24
    7166:	60 e0       	ldi	r22, 0x00	; 0
    7168:	70 e0       	ldi	r23, 0x00	; 0
    716a:	c3 01       	movw	r24, r6
    716c:	0e 94 8d 38 	call	0x711a	; 0x711a <_ZN4Wind8icosLongEl>
    7170:	c6 0e       	add	r12, r22
    7172:	d7 1e       	adc	r13, r23
    7174:	e8 1e       	adc	r14, r24
    7176:	f9 1e       	adc	r15, r25
    7178:	89 91       	ld	r24, Y+
    717a:	99 91       	ld	r25, Y+
		y += isinLong(dirList.getValue(i));
    717c:	ac 01       	movw	r20, r24
    717e:	60 e0       	ldi	r22, 0x00	; 0
    7180:	70 e0       	ldi	r23, 0x00	; 0
    7182:	c3 01       	movw	r24, r6
    7184:	0e 94 38 38 	call	0x7070	; 0x7070 <_ZN4Wind8isinLongEl>
    7188:	86 0e       	add	r8, r22
    718a:	97 1e       	adc	r9, r23
    718c:	a8 1e       	adc	r10, r24
    718e:	b9 1e       	adc	r11, r25
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    7190:	53 94       	inc	r5
    7192:	54 10       	cpse	r5, r4
    7194:	e5 cf       	rjmp	.-54     	; 0x7160 <_ZN4Wind20getRotationalAverageEv+0x3a>
		y += isinLong(dirList.getValue(i));
		//Serial.print("DEBUG:angle=");
		//Serial.println(dirList.getValue(i));
	}
	//TODO:watch out for zeros
	if (x == 0l && y == 0l) {
    7196:	c1 14       	cp	r12, r1
    7198:	d1 04       	cpc	r13, r1
    719a:	e1 04       	cpc	r14, r1
    719c:	f1 04       	cpc	r15, r1
    719e:	29 f4       	brne	.+10     	; 0x71aa <_ZN4Wind20getRotationalAverageEv+0x84>
    71a0:	81 14       	cp	r8, r1
    71a2:	91 04       	cpc	r9, r1
    71a4:	a1 04       	cpc	r10, r1
    71a6:	b1 04       	cpc	r11, r1
    71a8:	99 f1       	breq	.+102    	; 0x7210 <_ZN4Wind20getRotationalAverageEv+0xea>
		return 0l;
	}
	xf = (x* 0.0000152590219) / i;
    71aa:	64 2d       	mov	r22, r4
    71ac:	70 e0       	ldi	r23, 0x00	; 0
    71ae:	80 e0       	ldi	r24, 0x00	; 0
    71b0:	90 e0       	ldi	r25, 0x00	; 0
    71b2:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    71b6:	2b 01       	movw	r4, r22
    71b8:	3c 01       	movw	r6, r24
    71ba:	c7 01       	movw	r24, r14
    71bc:	b6 01       	movw	r22, r12
    71be:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    71c2:	20 e8       	ldi	r18, 0x80	; 128
    71c4:	30 e0       	ldi	r19, 0x00	; 0
    71c6:	40 e8       	ldi	r20, 0x80	; 128
    71c8:	57 e3       	ldi	r21, 0x37	; 55
    71ca:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    71ce:	a3 01       	movw	r20, r6
    71d0:	92 01       	movw	r18, r4
    71d2:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    71d6:	6b 01       	movw	r12, r22
    71d8:	7c 01       	movw	r14, r24
	yf = (y* 0.0000152590219) / i;
    71da:	c5 01       	movw	r24, r10
    71dc:	b4 01       	movw	r22, r8
    71de:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    71e2:	20 e8       	ldi	r18, 0x80	; 128
    71e4:	30 e0       	ldi	r19, 0x00	; 0
    71e6:	40 e8       	ldi	r20, 0x80	; 128
    71e8:	57 e3       	ldi	r21, 0x37	; 55
    71ea:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    71ee:	a3 01       	movw	r20, r6
    71f0:	92 01       	movw	r18, r4
    71f2:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
	//Serial.print(", cos=");
	//Serial.print(xf);
	//Serial.print("sin=");
	//Serial.println(yf);

	return degrees(atan2(yf, xf));
    71f6:	a7 01       	movw	r20, r14
    71f8:	96 01       	movw	r18, r12
    71fa:	0e 94 62 40 	call	0x80c4	; 0x80c4 <atan2>
    71fe:	21 ee       	ldi	r18, 0xE1	; 225
    7200:	3e e2       	ldi	r19, 0x2E	; 46
    7202:	45 e6       	ldi	r20, 0x65	; 101
    7204:	52 e4       	ldi	r21, 0x42	; 66
    7206:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    720a:	0e 94 24 41 	call	0x8248	; 0x8248 <__fixsfsi>
    720e:	02 c0       	rjmp	.+4      	; 0x7214 <_ZN4Wind20getRotationalAverageEv+0xee>
		//Serial.print("DEBUG:angle=");
		//Serial.println(dirList.getValue(i));
	}
	//TODO:watch out for zeros
	if (x == 0l && y == 0l) {
		return 0l;
    7210:	60 e0       	ldi	r22, 0x00	; 0
    7212:	70 e0       	ldi	r23, 0x00	; 0
	//Serial.print("sin=");
	//Serial.println(yf);

	return degrees(atan2(yf, xf));

}
    7214:	cb 01       	movw	r24, r22
    7216:	df 91       	pop	r29
    7218:	cf 91       	pop	r28
    721a:	ff 90       	pop	r15
    721c:	ef 90       	pop	r14
    721e:	df 90       	pop	r13
    7220:	cf 90       	pop	r12
    7222:	bf 90       	pop	r11
    7224:	af 90       	pop	r10
    7226:	9f 90       	pop	r9
    7228:	8f 90       	pop	r8
    722a:	7f 90       	pop	r7
    722c:	6f 90       	pop	r6
    722e:	5f 90       	pop	r5
    7230:	4f 90       	pop	r4
    7232:	08 95       	ret

00007234 <_ZN4Wind17readWindDataSpeedEv>:

/* NMEA Wind routines and alarm
 */
void Wind::readWindDataSpeed() {
    7234:	0f 93       	push	r16
    7236:	1f 93       	push	r17
	//fastest rps = 15ms - avoid bounce
	if ((millis() - lastSpeedPulse) > 15) {
    7238:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    723c:	00 91 92 11 	lds	r16, 0x1192
    7240:	10 91 93 11 	lds	r17, 0x1193
    7244:	20 91 94 11 	lds	r18, 0x1194
    7248:	30 91 95 11 	lds	r19, 0x1195
    724c:	60 1b       	sub	r22, r16
    724e:	71 0b       	sbc	r23, r17
    7250:	82 0b       	sbc	r24, r18
    7252:	93 0b       	sbc	r25, r19
    7254:	60 31       	cpi	r22, 0x10	; 16
    7256:	71 05       	cpc	r23, r1
    7258:	81 05       	cpc	r24, r1
    725a:	91 05       	cpc	r25, r1
    725c:	70 f1       	brcs	.+92     	; 0x72ba <_ZN4Wind17readWindDataSpeedEv+0x86>
		if (windSpeedFlag) {
    725e:	80 91 59 11 	lds	r24, 0x1159
    7262:	88 23       	and	r24, r24
    7264:	e9 f0       	breq	.+58     	; 0x72a0 <_ZN4Wind17readWindDataSpeedEv+0x6c>
			//called by speed pin interrupt
			windSpeedMicrosLast = windSpeedMicros;
    7266:	80 91 86 11 	lds	r24, 0x1186
    726a:	90 91 87 11 	lds	r25, 0x1187
    726e:	a0 91 88 11 	lds	r26, 0x1188
    7272:	b0 91 89 11 	lds	r27, 0x1189
    7276:	80 93 82 11 	sts	0x1182, r24
    727a:	90 93 83 11 	sts	0x1183, r25
    727e:	a0 93 84 11 	sts	0x1184, r26
    7282:	b0 93 85 11 	sts	0x1185, r27
			windSpeedMicros = micros();
    7286:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    728a:	60 93 86 11 	sts	0x1186, r22
    728e:	70 93 87 11 	sts	0x1187, r23
    7292:	80 93 88 11 	sts	0x1188, r24
    7296:	90 93 89 11 	sts	0x1189, r25
			windSpeedFlag = false;
    729a:	10 92 59 11 	sts	0x1159, r1
    729e:	03 c0       	rjmp	.+6      	; 0x72a6 <_ZN4Wind17readWindDataSpeedEv+0x72>
		} else {
			windSpeedFlag = true;
    72a0:	81 e0       	ldi	r24, 0x01	; 1
    72a2:	80 93 59 11 	sts	0x1159, r24
		}
		lastSpeedPulse = millis();
    72a6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    72aa:	60 93 92 11 	sts	0x1192, r22
    72ae:	70 93 93 11 	sts	0x1193, r23
    72b2:	80 93 94 11 	sts	0x1194, r24
    72b6:	90 93 95 11 	sts	0x1195, r25
	}
}
    72ba:	1f 91       	pop	r17
    72bc:	0f 91       	pop	r16
    72be:	08 95       	ret

000072c0 <_ZN4Wind15readWindDataDirEv>:

void Wind::readWindDataDir() {
    72c0:	0f 93       	push	r16
    72c2:	1f 93       	push	r17
	if((millis() - lastDirPulse) > 15) {
    72c4:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    72c8:	00 91 8e 11 	lds	r16, 0x118E
    72cc:	10 91 8f 11 	lds	r17, 0x118F
    72d0:	20 91 90 11 	lds	r18, 0x1190
    72d4:	30 91 91 11 	lds	r19, 0x1191
    72d8:	60 1b       	sub	r22, r16
    72da:	71 0b       	sbc	r23, r17
    72dc:	82 0b       	sbc	r24, r18
    72de:	93 0b       	sbc	r25, r19
    72e0:	60 31       	cpi	r22, 0x10	; 16
    72e2:	71 05       	cpc	r23, r1
    72e4:	81 05       	cpc	r24, r1
    72e6:	91 05       	cpc	r25, r1
    72e8:	70 f1       	brcs	.+92     	; 0x7346 <_ZN4Wind15readWindDataDirEv+0x86>
		if (windDirFlag) {
    72ea:	80 91 58 11 	lds	r24, 0x1158
    72ee:	88 23       	and	r24, r24
    72f0:	e9 f0       	breq	.+58     	; 0x732c <_ZN4Wind15readWindDataDirEv+0x6c>
			windDirMicrosLast = windDirMicros;
    72f2:	80 91 7e 11 	lds	r24, 0x117E
    72f6:	90 91 7f 11 	lds	r25, 0x117F
    72fa:	a0 91 80 11 	lds	r26, 0x1180
    72fe:	b0 91 81 11 	lds	r27, 0x1181
    7302:	80 93 7a 11 	sts	0x117A, r24
    7306:	90 93 7b 11 	sts	0x117B, r25
    730a:	a0 93 7c 11 	sts	0x117C, r26
    730e:	b0 93 7d 11 	sts	0x117D, r27
			windDirMicros = micros();
    7312:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    7316:	60 93 7e 11 	sts	0x117E, r22
    731a:	70 93 7f 11 	sts	0x117F, r23
    731e:	80 93 80 11 	sts	0x1180, r24
    7322:	90 93 81 11 	sts	0x1181, r25
			windDirFlag = false;
    7326:	10 92 58 11 	sts	0x1158, r1
    732a:	03 c0       	rjmp	.+6      	; 0x7332 <_ZN4Wind15readWindDataDirEv+0x72>
		} else {
			windDirFlag = true;
    732c:	81 e0       	ldi	r24, 0x01	; 1
    732e:	80 93 58 11 	sts	0x1158, r24
		}
		lastDirPulse=millis();
    7332:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7336:	60 93 8e 11 	sts	0x118E, r22
    733a:	70 93 8f 11 	sts	0x118F, r23
    733e:	80 93 90 11 	sts	0x1190, r24
    7342:	90 93 91 11 	sts	0x1191, r25
	}
}
    7346:	1f 91       	pop	r17
    7348:	0f 91       	pop	r16
    734a:	08 95       	ret

0000734c <_ZN4Wind19calcWindSpeedAndDirEv>:

/*
 * The anemometer turns up to 60rps at 140knots - so min 16ms/16000us per turn
 * Mostly much lower :-)
 */
void Wind::calcWindSpeedAndDir() {
    734c:	4f 92       	push	r4
    734e:	5f 92       	push	r5
    7350:	6f 92       	push	r6
    7352:	7f 92       	push	r7
    7354:	8f 92       	push	r8
    7356:	9f 92       	push	r9
    7358:	af 92       	push	r10
    735a:	bf 92       	push	r11
    735c:	cf 92       	push	r12
    735e:	df 92       	push	r13
    7360:	ef 92       	push	r14
    7362:	ff 92       	push	r15
//grab data
// an interrupt could fire in here
	noInterrupts();
    7364:	f8 94       	cli
	wsTempLast = windSpeedMicrosLast;
    7366:	80 91 82 11 	lds	r24, 0x1182
    736a:	90 91 83 11 	lds	r25, 0x1183
    736e:	a0 91 84 11 	lds	r26, 0x1184
    7372:	b0 91 85 11 	lds	r27, 0x1185
    7376:	80 93 6e 11 	sts	0x116E, r24
    737a:	90 93 6f 11 	sts	0x116F, r25
    737e:	a0 93 70 11 	sts	0x1170, r26
    7382:	b0 93 71 11 	sts	0x1171, r27
	wsTemp = windSpeedMicros;
    7386:	80 91 86 11 	lds	r24, 0x1186
    738a:	90 91 87 11 	lds	r25, 0x1187
    738e:	a0 91 88 11 	lds	r26, 0x1188
    7392:	b0 91 89 11 	lds	r27, 0x1189
    7396:	80 93 6a 11 	sts	0x116A, r24
    739a:	90 93 6b 11 	sts	0x116B, r25
    739e:	a0 93 6c 11 	sts	0x116C, r26
    73a2:	b0 93 6d 11 	sts	0x116D, r27
	wdTemp = windDirMicros;
    73a6:	80 91 7e 11 	lds	r24, 0x117E
    73aa:	90 91 7f 11 	lds	r25, 0x117F
    73ae:	a0 91 80 11 	lds	r26, 0x1180
    73b2:	b0 91 81 11 	lds	r27, 0x1181
    73b6:	80 93 5e 11 	sts	0x115E, r24
    73ba:	90 93 5f 11 	sts	0x115F, r25
    73be:	a0 93 60 11 	sts	0x1160, r26
    73c2:	b0 93 61 11 	sts	0x1161, r27
	interrupts();
    73c6:	78 94       	sei
	Serial.println(wsTemp);
	*/
//interrupts();
//micros resets every 50 min,
// avoid 0, bad data, rollover and too fast (bounce? <15ms)
	if (wsTempLast >= wsTemp || wsTemp - wsTempLast < 15000ul) return;
    73c8:	80 91 6e 11 	lds	r24, 0x116E
    73cc:	90 91 6f 11 	lds	r25, 0x116F
    73d0:	a0 91 70 11 	lds	r26, 0x1170
    73d4:	b0 91 71 11 	lds	r27, 0x1171
    73d8:	40 91 6a 11 	lds	r20, 0x116A
    73dc:	50 91 6b 11 	lds	r21, 0x116B
    73e0:	60 91 6c 11 	lds	r22, 0x116C
    73e4:	70 91 6d 11 	lds	r23, 0x116D
    73e8:	84 17       	cp	r24, r20
    73ea:	95 07       	cpc	r25, r21
    73ec:	a6 07       	cpc	r26, r22
    73ee:	b7 07       	cpc	r27, r23
    73f0:	08 f0       	brcs	.+2      	; 0x73f4 <_ZN4Wind19calcWindSpeedAndDirEv+0xa8>
    73f2:	3a c2       	rjmp	.+1140   	; 0x7868 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>
    73f4:	9a 01       	movw	r18, r20
    73f6:	ab 01       	movw	r20, r22
    73f8:	28 1b       	sub	r18, r24
    73fa:	39 0b       	sbc	r19, r25
    73fc:	4a 0b       	sbc	r20, r26
    73fe:	5b 0b       	sbc	r21, r27
    7400:	28 39       	cpi	r18, 0x98	; 152
    7402:	8a e3       	ldi	r24, 0x3A	; 58
    7404:	38 07       	cpc	r19, r24
    7406:	41 05       	cpc	r20, r1
    7408:	51 05       	cpc	r21, r1
    740a:	08 f4       	brcc	.+2      	; 0x740e <_ZN4Wind19calcWindSpeedAndDirEv+0xc2>
    740c:	2d c2       	rjmp	.+1114   	; 0x7868 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>

//speed in micros
	wsNow = wsTemp - wsTempLast;
    740e:	20 93 66 11 	sts	0x1166, r18
    7412:	30 93 67 11 	sts	0x1167, r19
    7416:	40 93 68 11 	sts	0x1168, r20
    741a:	50 93 69 11 	sts	0x1169, r21
	if (windSpeedDur == 0) windSpeedDur = wsNow;
    741e:	80 91 76 11 	lds	r24, 0x1176
    7422:	90 91 77 11 	lds	r25, 0x1177
    7426:	a0 91 78 11 	lds	r26, 0x1178
    742a:	b0 91 79 11 	lds	r27, 0x1179
    742e:	89 2b       	or	r24, r25
    7430:	8a 2b       	or	r24, r26
    7432:	8b 2b       	or	r24, r27
    7434:	41 f4       	brne	.+16     	; 0x7446 <_ZN4Wind19calcWindSpeedAndDirEv+0xfa>
    7436:	20 93 76 11 	sts	0x1176, r18
    743a:	30 93 77 11 	sts	0x1177, r19
    743e:	40 93 78 11 	sts	0x1178, r20
    7442:	50 93 79 11 	sts	0x1179, r21
	wsDiff = (wsNow * 100ul) / windSpeedDur;
    7446:	c0 90 76 11 	lds	r12, 0x1176
    744a:	d0 90 77 11 	lds	r13, 0x1177
    744e:	e0 90 78 11 	lds	r14, 0x1178
    7452:	f0 90 79 11 	lds	r15, 0x1179
    7456:	a4 e6       	ldi	r26, 0x64	; 100
    7458:	b0 e0       	ldi	r27, 0x00	; 0
    745a:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    745e:	a7 01       	movw	r20, r14
    7460:	96 01       	movw	r18, r12
    7462:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    7466:	20 93 62 11 	sts	0x1162, r18
    746a:	30 93 63 11 	sts	0x1163, r19
    746e:	40 93 64 11 	sts	0x1164, r20
    7472:	50 93 65 11 	sts	0x1165, r21
	Serial.print("wsNow=");
    7476:	65 e8       	ldi	r22, 0x85	; 133
    7478:	75 e0       	ldi	r23, 0x05	; 5
    747a:	8c ed       	ldi	r24, 0xDC	; 220
    747c:	96 e0       	ldi	r25, 0x06	; 6
    747e:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	Serial.print(wsNow);
    7482:	40 91 66 11 	lds	r20, 0x1166
    7486:	50 91 67 11 	lds	r21, 0x1167
    748a:	60 91 68 11 	lds	r22, 0x1168
    748e:	70 91 69 11 	lds	r23, 0x1169
    7492:	2a e0       	ldi	r18, 0x0A	; 10
    7494:	30 e0       	ldi	r19, 0x00	; 0
    7496:	8c ed       	ldi	r24, 0xDC	; 220
    7498:	96 e0       	ldi	r25, 0x06	; 6
    749a:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5Print5printEmi>
	Serial.print(",wsDiff=");
    749e:	6c e8       	ldi	r22, 0x8C	; 140
    74a0:	75 e0       	ldi	r23, 0x05	; 5
    74a2:	8c ed       	ldi	r24, 0xDC	; 220
    74a4:	96 e0       	ldi	r25, 0x06	; 6
    74a6:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	Serial.println(wsDiff);
    74aa:	40 91 62 11 	lds	r20, 0x1162
    74ae:	50 91 63 11 	lds	r21, 0x1163
    74b2:	60 91 64 11 	lds	r22, 0x1164
    74b6:	70 91 65 11 	lds	r23, 0x1165
    74ba:	2a e0       	ldi	r18, 0x0A	; 10
    74bc:	30 e0       	ldi	r19, 0x00	; 0
    74be:	8c ed       	ldi	r24, 0xDC	; 220
    74c0:	96 e0       	ldi	r25, 0x06	; 6
    74c2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN5Print7printlnEmi>
//can only change 10% per rev
	if (wsDiff < 90ul) {
    74c6:	80 91 62 11 	lds	r24, 0x1162
    74ca:	90 91 63 11 	lds	r25, 0x1163
    74ce:	a0 91 64 11 	lds	r26, 0x1164
    74d2:	b0 91 65 11 	lds	r27, 0x1165
    74d6:	8a 35       	cpi	r24, 0x5A	; 90
    74d8:	91 05       	cpc	r25, r1
    74da:	a1 05       	cpc	r26, r1
    74dc:	b1 05       	cpc	r27, r1
    74de:	58 f4       	brcc	.+22     	; 0x74f6 <_ZN4Wind19calcWindSpeedAndDirEv+0x1aa>
		windSpeedDur = (windSpeedDur * 9ul) / 10ul;
    74e0:	20 91 76 11 	lds	r18, 0x1176
    74e4:	30 91 77 11 	lds	r19, 0x1177
    74e8:	40 91 78 11 	lds	r20, 0x1178
    74ec:	50 91 79 11 	lds	r21, 0x1179
    74f0:	a9 e0       	ldi	r26, 0x09	; 9
    74f2:	b0 e0       	ldi	r27, 0x00	; 0
    74f4:	0f c0       	rjmp	.+30     	; 0x7514 <_ZN4Wind19calcWindSpeedAndDirEv+0x1c8>
	} else if (wsDiff > 110ul) {
    74f6:	8f 36       	cpi	r24, 0x6F	; 111
    74f8:	91 05       	cpc	r25, r1
    74fa:	a1 05       	cpc	r26, r1
    74fc:	b1 05       	cpc	r27, r1
    74fe:	d8 f0       	brcs	.+54     	; 0x7536 <_ZN4Wind19calcWindSpeedAndDirEv+0x1ea>
		windSpeedDur = (windSpeedDur * 11ul) / 10ul;
    7500:	20 91 76 11 	lds	r18, 0x1176
    7504:	30 91 77 11 	lds	r19, 0x1177
    7508:	40 91 78 11 	lds	r20, 0x1178
    750c:	50 91 79 11 	lds	r21, 0x1179
    7510:	ab e0       	ldi	r26, 0x0B	; 11
    7512:	b0 e0       	ldi	r27, 0x00	; 0
    7514:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7518:	2a e0       	ldi	r18, 0x0A	; 10
    751a:	30 e0       	ldi	r19, 0x00	; 0
    751c:	40 e0       	ldi	r20, 0x00	; 0
    751e:	50 e0       	ldi	r21, 0x00	; 0
    7520:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    7524:	20 93 76 11 	sts	0x1176, r18
    7528:	30 93 77 11 	sts	0x1177, r19
    752c:	40 93 78 11 	sts	0x1178, r20
    7530:	50 93 79 11 	sts	0x1179, r21
    7534:	51 c0       	rjmp	.+162    	; 0x75d8 <_ZN4Wind19calcWindSpeedAndDirEv+0x28c>
	} else {
		//running average, to avoid random errors, adjust by speed
		if (wsNow < 250000) {
    7536:	c0 90 66 11 	lds	r12, 0x1166
    753a:	d0 90 67 11 	lds	r13, 0x1167
    753e:	e0 90 68 11 	lds	r14, 0x1168
    7542:	f0 90 69 11 	lds	r15, 0x1169
			windSpeedDur = ((10ul * windSpeedDur) + wsNow) / 11ul;
    7546:	20 91 76 11 	lds	r18, 0x1176
    754a:	30 91 77 11 	lds	r19, 0x1177
    754e:	40 91 78 11 	lds	r20, 0x1178
    7552:	50 91 79 11 	lds	r21, 0x1179
		windSpeedDur = (windSpeedDur * 9ul) / 10ul;
	} else if (wsDiff > 110ul) {
		windSpeedDur = (windSpeedDur * 11ul) / 10ul;
	} else {
		//running average, to avoid random errors, adjust by speed
		if (wsNow < 250000) {
    7556:	80 e9       	ldi	r24, 0x90	; 144
    7558:	c8 16       	cp	r12, r24
    755a:	80 ed       	ldi	r24, 0xD0	; 208
    755c:	d8 06       	cpc	r13, r24
    755e:	83 e0       	ldi	r24, 0x03	; 3
    7560:	e8 06       	cpc	r14, r24
    7562:	f1 04       	cpc	r15, r1
    7564:	68 f4       	brcc	.+26     	; 0x7580 <_ZN4Wind19calcWindSpeedAndDirEv+0x234>
			windSpeedDur = ((10ul * windSpeedDur) + wsNow) / 11ul;
    7566:	aa e0       	ldi	r26, 0x0A	; 10
    7568:	b0 e0       	ldi	r27, 0x00	; 0
    756a:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    756e:	6c 0d       	add	r22, r12
    7570:	7d 1d       	adc	r23, r13
    7572:	8e 1d       	adc	r24, r14
    7574:	9f 1d       	adc	r25, r15
    7576:	2b e0       	ldi	r18, 0x0B	; 11
    7578:	30 e0       	ldi	r19, 0x00	; 0
    757a:	40 e0       	ldi	r20, 0x00	; 0
    757c:	50 e0       	ldi	r21, 0x00	; 0
    757e:	d0 cf       	rjmp	.-96     	; 0x7520 <_ZN4Wind19calcWindSpeedAndDirEv+0x1d4>
		} else if (wsNow < 500000) {
    7580:	80 e2       	ldi	r24, 0x20	; 32
    7582:	c8 16       	cp	r12, r24
    7584:	81 ea       	ldi	r24, 0xA1	; 161
    7586:	d8 06       	cpc	r13, r24
    7588:	87 e0       	ldi	r24, 0x07	; 7
    758a:	e8 06       	cpc	r14, r24
    758c:	f1 04       	cpc	r15, r1
    758e:	68 f4       	brcc	.+26     	; 0x75aa <_ZN4Wind19calcWindSpeedAndDirEv+0x25e>
			windSpeedDur = ((6ul * windSpeedDur) + wsNow) / 7ul;
    7590:	a6 e0       	ldi	r26, 0x06	; 6
    7592:	b0 e0       	ldi	r27, 0x00	; 0
    7594:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7598:	6c 0d       	add	r22, r12
    759a:	7d 1d       	adc	r23, r13
    759c:	8e 1d       	adc	r24, r14
    759e:	9f 1d       	adc	r25, r15
    75a0:	27 e0       	ldi	r18, 0x07	; 7
    75a2:	30 e0       	ldi	r19, 0x00	; 0
    75a4:	40 e0       	ldi	r20, 0x00	; 0
    75a6:	50 e0       	ldi	r21, 0x00	; 0
    75a8:	bb cf       	rjmp	.-138    	; 0x7520 <_ZN4Wind19calcWindSpeedAndDirEv+0x1d4>
		} else {
			windSpeedDur = ((3ul * windSpeedDur) + wsNow) / 4ul;
    75aa:	a3 e0       	ldi	r26, 0x03	; 3
    75ac:	b0 e0       	ldi	r27, 0x00	; 0
    75ae:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    75b2:	6c 0d       	add	r22, r12
    75b4:	7d 1d       	adc	r23, r13
    75b6:	8e 1d       	adc	r24, r14
    75b8:	9f 1d       	adc	r25, r15
    75ba:	32 e0       	ldi	r19, 0x02	; 2
    75bc:	96 95       	lsr	r25
    75be:	87 95       	ror	r24
    75c0:	77 95       	ror	r23
    75c2:	67 95       	ror	r22
    75c4:	3a 95       	dec	r19
    75c6:	d1 f7       	brne	.-12     	; 0x75bc <_ZN4Wind19calcWindSpeedAndDirEv+0x270>
    75c8:	60 93 76 11 	sts	0x1176, r22
    75cc:	70 93 77 11 	sts	0x1177, r23
    75d0:	80 93 78 11 	sts	0x1178, r24
    75d4:	90 93 79 11 	sts	0x1179, r25
	//	Serial.println(windSpeedDur);
//direction
//FROM ULTIMETER:
//AT 130 KNTS ABOUT 46US PER DEGREE OF ROTATION
//WE CAN USE  360*182041/1000 = 65535 INT ROLLOVER TO GIVE US DIR AVERAGING
	if (wdTemp > wsTemp) {
    75d8:	80 91 5e 11 	lds	r24, 0x115E
    75dc:	90 91 5f 11 	lds	r25, 0x115F
    75e0:	a0 91 60 11 	lds	r26, 0x1160
    75e4:	b0 91 61 11 	lds	r27, 0x1161
    75e8:	40 91 6a 11 	lds	r20, 0x116A
    75ec:	50 91 6b 11 	lds	r21, 0x116B
    75f0:	60 91 6c 11 	lds	r22, 0x116C
    75f4:	70 91 6d 11 	lds	r23, 0x116D
    75f8:	48 17       	cp	r20, r24
    75fa:	59 07       	cpc	r21, r25
    75fc:	6a 07       	cpc	r22, r26
    75fe:	7b 07       	cpc	r23, r27
    7600:	08 f4       	brcc	.+2      	; 0x7604 <_ZN4Wind19calcWindSpeedAndDirEv+0x2b8>
    7602:	08 c0       	rjmp	.+16     	; 0x7614 <_ZN4Wind19calcWindSpeedAndDirEv+0x2c8>
		wdTemp = wdTemp - wsTemp;
	} else {
		wdTemp = wdTemp - wsTempLast;
    7604:	40 91 6e 11 	lds	r20, 0x116E
    7608:	50 91 6f 11 	lds	r21, 0x116F
    760c:	60 91 70 11 	lds	r22, 0x1170
    7610:	70 91 71 11 	lds	r23, 0x1171
    7614:	84 1b       	sub	r24, r20
    7616:	95 0b       	sbc	r25, r21
    7618:	a6 0b       	sbc	r26, r22
    761a:	b7 0b       	sbc	r27, r23
    761c:	80 93 5e 11 	sts	0x115E, r24
    7620:	90 93 5f 11 	sts	0x115F, r25
    7624:	a0 93 60 11 	sts	0x1160, r26
    7628:	b0 93 61 11 	sts	0x1161, r27
	}
	//Serial.print("wdTemp=");
	//		Serial.print(wdTemp);
	if (wdTemp > 50 && wdTemp<wsNow) {
    762c:	c0 90 5e 11 	lds	r12, 0x115E
    7630:	d0 90 5f 11 	lds	r13, 0x115F
    7634:	e0 90 60 11 	lds	r14, 0x1160
    7638:	f0 90 61 11 	lds	r15, 0x1161
    763c:	83 e3       	ldi	r24, 0x33	; 51
    763e:	c8 16       	cp	r12, r24
    7640:	d1 04       	cpc	r13, r1
    7642:	e1 04       	cpc	r14, r1
    7644:	f1 04       	cpc	r15, r1
    7646:	08 f4       	brcc	.+2      	; 0x764a <_ZN4Wind19calcWindSpeedAndDirEv+0x2fe>
    7648:	0f c1       	rjmp	.+542    	; 0x7868 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>
    764a:	40 90 66 11 	lds	r4, 0x1166
    764e:	50 90 67 11 	lds	r5, 0x1167
    7652:	60 90 68 11 	lds	r6, 0x1168
    7656:	70 90 69 11 	lds	r7, 0x1169
    765a:	c4 14       	cp	r12, r4
    765c:	d5 04       	cpc	r13, r5
    765e:	e6 04       	cpc	r14, r6
    7660:	f7 04       	cpc	r15, r7
    7662:	08 f0       	brcs	.+2      	; 0x7666 <_ZN4Wind19calcWindSpeedAndDirEv+0x31a>
    7664:	01 c1       	rjmp	.+514    	; 0x7868 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>
		if (wdAvg == 0) wdAvg = wdTemp;
    7666:	80 91 5a 11 	lds	r24, 0x115A
    766a:	90 91 5b 11 	lds	r25, 0x115B
    766e:	a0 91 5c 11 	lds	r26, 0x115C
    7672:	b0 91 5d 11 	lds	r27, 0x115D
    7676:	89 2b       	or	r24, r25
    7678:	8a 2b       	or	r24, r26
    767a:	8b 2b       	or	r24, r27
    767c:	41 f4       	brne	.+16     	; 0x768e <_ZN4Wind19calcWindSpeedAndDirEv+0x342>
    767e:	c0 92 5a 11 	sts	0x115A, r12
    7682:	d0 92 5b 11 	sts	0x115B, r13
    7686:	e0 92 5c 11 	sts	0x115C, r14
    768a:	f0 92 5d 11 	sts	0x115D, r15
		wsDiff = (wdTemp * 100ul) / wdAvg;
    768e:	80 90 5a 11 	lds	r8, 0x115A
    7692:	90 90 5b 11 	lds	r9, 0x115B
    7696:	a0 90 5c 11 	lds	r10, 0x115C
    769a:	b0 90 5d 11 	lds	r11, 0x115D
    769e:	a4 e6       	ldi	r26, 0x64	; 100
    76a0:	b0 e0       	ldi	r27, 0x00	; 0
    76a2:	a7 01       	movw	r20, r14
    76a4:	96 01       	movw	r18, r12
    76a6:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    76aa:	a5 01       	movw	r20, r10
    76ac:	94 01       	movw	r18, r8
    76ae:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    76b2:	20 93 62 11 	sts	0x1162, r18
    76b6:	30 93 63 11 	sts	0x1163, r19
    76ba:	40 93 64 11 	sts	0x1164, r20
    76be:	50 93 65 11 	sts	0x1165, r21
		if (wsDiff < 90ul) {
    76c2:	2a 35       	cpi	r18, 0x5A	; 90
    76c4:	31 05       	cpc	r19, r1
    76c6:	41 05       	cpc	r20, r1
    76c8:	51 05       	cpc	r21, r1
    76ca:	18 f4       	brcc	.+6      	; 0x76d2 <_ZN4Wind19calcWindSpeedAndDirEv+0x386>
			wdAvg = (wdAvg * 9ul) / 10ul;
    76cc:	a9 e0       	ldi	r26, 0x09	; 9
    76ce:	b0 e0       	ldi	r27, 0x00	; 0
    76d0:	07 c0       	rjmp	.+14     	; 0x76e0 <_ZN4Wind19calcWindSpeedAndDirEv+0x394>
		} else if (wsDiff > 110ul) {
    76d2:	2f 36       	cpi	r18, 0x6F	; 111
    76d4:	31 05       	cpc	r19, r1
    76d6:	41 05       	cpc	r20, r1
    76d8:	51 05       	cpc	r21, r1
    76da:	a8 f0       	brcs	.+42     	; 0x7706 <_ZN4Wind19calcWindSpeedAndDirEv+0x3ba>
			wdAvg = (wdAvg * 11ul) / 10ul;
    76dc:	ab e0       	ldi	r26, 0x0B	; 11
    76de:	b0 e0       	ldi	r27, 0x00	; 0
    76e0:	a5 01       	movw	r20, r10
    76e2:	94 01       	movw	r18, r8
    76e4:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    76e8:	2a e0       	ldi	r18, 0x0A	; 10
    76ea:	30 e0       	ldi	r19, 0x00	; 0
    76ec:	40 e0       	ldi	r20, 0x00	; 0
    76ee:	50 e0       	ldi	r21, 0x00	; 0
    76f0:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    76f4:	20 93 5a 11 	sts	0x115A, r18
    76f8:	30 93 5b 11 	sts	0x115B, r19
    76fc:	40 93 5c 11 	sts	0x115C, r20
    7700:	50 93 5d 11 	sts	0x115D, r21
    7704:	47 c0       	rjmp	.+142    	; 0x7794 <_ZN4Wind19calcWindSpeedAndDirEv+0x448>
		} else {
			//average
			if (wsNow < 250000) {
    7706:	80 e9       	ldi	r24, 0x90	; 144
    7708:	48 16       	cp	r4, r24
    770a:	80 ed       	ldi	r24, 0xD0	; 208
    770c:	58 06       	cpc	r5, r24
    770e:	83 e0       	ldi	r24, 0x03	; 3
    7710:	68 06       	cpc	r6, r24
    7712:	71 04       	cpc	r7, r1
    7714:	78 f4       	brcc	.+30     	; 0x7734 <_ZN4Wind19calcWindSpeedAndDirEv+0x3e8>
				wdAvg = ((10ul * wdAvg) + wdTemp) / 11ul;
    7716:	aa e0       	ldi	r26, 0x0A	; 10
    7718:	b0 e0       	ldi	r27, 0x00	; 0
    771a:	a5 01       	movw	r20, r10
    771c:	94 01       	movw	r18, r8
    771e:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7722:	6c 0d       	add	r22, r12
    7724:	7d 1d       	adc	r23, r13
    7726:	8e 1d       	adc	r24, r14
    7728:	9f 1d       	adc	r25, r15
    772a:	2b e0       	ldi	r18, 0x0B	; 11
    772c:	30 e0       	ldi	r19, 0x00	; 0
    772e:	40 e0       	ldi	r20, 0x00	; 0
    7730:	50 e0       	ldi	r21, 0x00	; 0
    7732:	de cf       	rjmp	.-68     	; 0x76f0 <_ZN4Wind19calcWindSpeedAndDirEv+0x3a4>
			} else if (wsNow < 500000) {
    7734:	80 e2       	ldi	r24, 0x20	; 32
    7736:	48 16       	cp	r4, r24
    7738:	81 ea       	ldi	r24, 0xA1	; 161
    773a:	58 06       	cpc	r5, r24
    773c:	87 e0       	ldi	r24, 0x07	; 7
    773e:	68 06       	cpc	r6, r24
    7740:	71 04       	cpc	r7, r1
    7742:	78 f4       	brcc	.+30     	; 0x7762 <_ZN4Wind19calcWindSpeedAndDirEv+0x416>
				wdAvg = ((6ul * wdAvg) + wdTemp) / 7ul;
    7744:	a6 e0       	ldi	r26, 0x06	; 6
    7746:	b0 e0       	ldi	r27, 0x00	; 0
    7748:	a5 01       	movw	r20, r10
    774a:	94 01       	movw	r18, r8
    774c:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7750:	6c 0d       	add	r22, r12
    7752:	7d 1d       	adc	r23, r13
    7754:	8e 1d       	adc	r24, r14
    7756:	9f 1d       	adc	r25, r15
    7758:	27 e0       	ldi	r18, 0x07	; 7
    775a:	30 e0       	ldi	r19, 0x00	; 0
    775c:	40 e0       	ldi	r20, 0x00	; 0
    775e:	50 e0       	ldi	r21, 0x00	; 0
    7760:	c7 cf       	rjmp	.-114    	; 0x76f0 <_ZN4Wind19calcWindSpeedAndDirEv+0x3a4>
			} else {
				wdAvg = ((3ul * wdAvg) + wdTemp) / 4ul;
    7762:	a3 e0       	ldi	r26, 0x03	; 3
    7764:	b0 e0       	ldi	r27, 0x00	; 0
    7766:	a5 01       	movw	r20, r10
    7768:	94 01       	movw	r18, r8
    776a:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    776e:	6c 0d       	add	r22, r12
    7770:	7d 1d       	adc	r23, r13
    7772:	8e 1d       	adc	r24, r14
    7774:	9f 1d       	adc	r25, r15
    7776:	22 e0       	ldi	r18, 0x02	; 2
    7778:	96 95       	lsr	r25
    777a:	87 95       	ror	r24
    777c:	77 95       	ror	r23
    777e:	67 95       	ror	r22
    7780:	2a 95       	dec	r18
    7782:	d1 f7       	brne	.-12     	; 0x7778 <_ZN4Wind19calcWindSpeedAndDirEv+0x42c>
    7784:	60 93 5a 11 	sts	0x115A, r22
    7788:	70 93 5b 11 	sts	0x115B, r23
    778c:	80 93 5c 11 	sts	0x115C, r24
    7790:	90 93 5d 11 	sts	0x115D, r25
			}
		}
		//convert to degrees

		windDirDur = (wdAvg * 360ul) / windSpeedDur;
    7794:	c0 90 76 11 	lds	r12, 0x1176
    7798:	d0 90 77 11 	lds	r13, 0x1177
    779c:	e0 90 78 11 	lds	r14, 0x1178
    77a0:	f0 90 79 11 	lds	r15, 0x1179
    77a4:	20 91 5a 11 	lds	r18, 0x115A
    77a8:	30 91 5b 11 	lds	r19, 0x115B
    77ac:	40 91 5c 11 	lds	r20, 0x115C
    77b0:	50 91 5d 11 	lds	r21, 0x115D
    77b4:	a8 e6       	ldi	r26, 0x68	; 104
    77b6:	b1 e0       	ldi	r27, 0x01	; 1
    77b8:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    77bc:	a7 01       	movw	r20, r14
    77be:	96 01       	movw	r18, r12
    77c0:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    77c4:	20 93 72 11 	sts	0x1172, r18
    77c8:	30 93 73 11 	sts	0x1173, r19
    77cc:	40 93 74 11 	sts	0x1174, r20
    77d0:	50 93 75 11 	sts	0x1175, r21
	/*	Serial.print(", wdAvg=");
		Serial.println(wdAvg);*/
		Serial.print(", wdDirDir=");
    77d4:	65 e9       	ldi	r22, 0x95	; 149
    77d6:	75 e0       	ldi	r23, 0x05	; 5
    77d8:	8c ed       	ldi	r24, 0xDC	; 220
    77da:	96 e0       	ldi	r25, 0x06	; 6
    77dc:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		Serial.println(windDirDur);
    77e0:	40 91 72 11 	lds	r20, 0x1172
    77e4:	50 91 73 11 	lds	r21, 0x1173
    77e8:	60 91 74 11 	lds	r22, 0x1174
    77ec:	70 91 75 11 	lds	r23, 0x1175
    77f0:	2a e0       	ldi	r18, 0x0A	; 10
    77f2:	30 e0       	ldi	r19, 0x00	; 0
    77f4:	8c ed       	ldi	r24, 0xDC	; 220
    77f6:	96 e0       	ldi	r25, 0x06	; 6
    77f8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN5Print7printlnEmi>
		dirList.addValue(windDirDur);
    77fc:	c0 90 72 11 	lds	r12, 0x1172
    7800:	d0 90 73 11 	lds	r13, 0x1173
    7804:	e0 90 74 11 	lds	r14, 0x1174
    7808:	f0 90 75 11 	lds	r15, 0x1175

		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
    780c:	80 91 4d 11 	lds	r24, 0x114D
    7810:	8f 5f       	subi	r24, 0xFF	; 255
    7812:	80 93 4d 11 	sts	0x114D, r24
			if (currentSize<size){
    7816:	40 91 4c 11 	lds	r20, 0x114C
    781a:	60 91 4b 11 	lds	r22, 0x114B
    781e:	20 91 49 11 	lds	r18, 0x1149
    7822:	30 91 4a 11 	lds	r19, 0x114A
    7826:	46 17       	cp	r20, r22
    7828:	98 f4       	brcc	.+38     	; 0x7850 <_ZN4Wind19calcWindSpeedAndDirEv+0x504>
				values[currentSize++] = value;
    782a:	f9 01       	movw	r30, r18
    782c:	82 e0       	ldi	r24, 0x02	; 2
    782e:	48 9f       	mul	r20, r24
    7830:	e0 0d       	add	r30, r0
    7832:	f1 1d       	adc	r31, r1
    7834:	11 24       	eor	r1, r1
    7836:	d1 82       	std	Z+1, r13	; 0x01
    7838:	c0 82       	st	Z, r12
    783a:	64 2f       	mov	r22, r20
    783c:	6f 5f       	subi	r22, 0xFF	; 255
    783e:	60 93 4c 11 	sts	0x114C, r22
				currentIndex = currentIndex % currentSize;
    7842:	80 91 4d 11 	lds	r24, 0x114D
    7846:	0e 94 a8 43 	call	0x8750	; 0x8750 <__udivmodqi4>
    784a:	90 93 4d 11 	sts	0x114D, r25
    784e:	0c c0       	rjmp	.+24     	; 0x7868 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>
			}else{
				currentIndex = currentIndex % size;
    7850:	0e 94 a8 43 	call	0x8750	; 0x8750 <__udivmodqi4>
    7854:	90 93 4d 11 	sts	0x114D, r25
				values[currentIndex] = value; 
    7858:	f9 01       	movw	r30, r18
    785a:	82 e0       	ldi	r24, 0x02	; 2
    785c:	98 9f       	mul	r25, r24
    785e:	e0 0d       	add	r30, r0
    7860:	f1 1d       	adc	r31, r1
    7862:	11 24       	eor	r1, r1
    7864:	d1 82       	std	Z+1, r13	; 0x01
    7866:	c0 82       	st	Z, r12

	}

}
    7868:	ff 90       	pop	r15
    786a:	ef 90       	pop	r14
    786c:	df 90       	pop	r13
    786e:	cf 90       	pop	r12
    7870:	bf 90       	pop	r11
    7872:	af 90       	pop	r10
    7874:	9f 90       	pop	r9
    7876:	8f 90       	pop	r8
    7878:	7f 90       	pop	r7
    787a:	6f 90       	pop	r6
    787c:	5f 90       	pop	r5
    787e:	4f 90       	pop	r4
    7880:	08 95       	ret

00007882 <_ZN4Wind12calcWindDataEv>:

/*
 * Calculates wind data. Direction is apparent, 0-360 deg off the bow, clockwise, in degrees.
 */
void Wind::calcWindData() {
    7882:	4f 92       	push	r4
    7884:	5f 92       	push	r5
    7886:	6f 92       	push	r6
    7888:	7f 92       	push	r7
    788a:	8f 92       	push	r8
    788c:	9f 92       	push	r9
    788e:	af 92       	push	r10
    7890:	bf 92       	push	r11
    7892:	cf 92       	push	r12
    7894:	df 92       	push	r13
    7896:	ef 92       	push	r14
    7898:	ff 92       	push	r15
    789a:	0f 93       	push	r16
    789c:	1f 93       	push	r17
    789e:	cf 93       	push	r28
    78a0:	df 93       	push	r29
    78a2:	00 d0       	rcall	.+0      	; 0x78a4 <_ZN4Wind12calcWindDataEv+0x22>
    78a4:	00 d0       	rcall	.+0      	; 0x78a6 <_ZN4Wind12calcWindDataEv+0x24>
    78a6:	cd b7       	in	r28, 0x3d	; 61
    78a8:	de b7       	in	r29, 0x3e	; 62
    78aa:	8c 01       	movw	r16, r24

//fix rollover
	if (millis() < lastSpeedPulse) lastSpeedPulse = millis();
    78ac:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    78b0:	c0 90 92 11 	lds	r12, 0x1192
    78b4:	d0 90 93 11 	lds	r13, 0x1193
    78b8:	e0 90 94 11 	lds	r14, 0x1194
    78bc:	f0 90 95 11 	lds	r15, 0x1195
    78c0:	6c 15       	cp	r22, r12
    78c2:	7d 05       	cpc	r23, r13
    78c4:	8e 05       	cpc	r24, r14
    78c6:	9f 05       	cpc	r25, r15
    78c8:	50 f4       	brcc	.+20     	; 0x78de <_ZN4Wind12calcWindDataEv+0x5c>
    78ca:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    78ce:	60 93 92 11 	sts	0x1192, r22
    78d2:	70 93 93 11 	sts	0x1193, r23
    78d6:	80 93 94 11 	sts	0x1194, r24
    78da:	90 93 95 11 	sts	0x1195, r25
	if (millis() < lastDirPulse) lastDirPulse = millis();
    78de:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    78e2:	c0 90 8e 11 	lds	r12, 0x118E
    78e6:	d0 90 8f 11 	lds	r13, 0x118F
    78ea:	e0 90 90 11 	lds	r14, 0x1190
    78ee:	f0 90 91 11 	lds	r15, 0x1191
    78f2:	6c 15       	cp	r22, r12
    78f4:	7d 05       	cpc	r23, r13
    78f6:	8e 05       	cpc	r24, r14
    78f8:	9f 05       	cpc	r25, r15
    78fa:	50 f4       	brcc	.+20     	; 0x7910 <_ZN4Wind12calcWindDataEv+0x8e>
    78fc:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7900:	60 93 8e 11 	sts	0x118E, r22
    7904:	70 93 8f 11 	sts	0x118F, r23
    7908:	80 93 90 11 	sts	0x1190, r24
    790c:	90 93 91 11 	sts	0x1191, r25

	model->setWindLastUpdate(millis());
    7910:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7914:	ab 01       	movw	r20, r22
    7916:	bc 01       	movw	r22, r24
    7918:	d8 01       	movw	r26, r16
    791a:	8d 91       	ld	r24, X+
    791c:	9c 91       	ld	r25, X
    791e:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <_ZN14FreeBoardModel17setWindLastUpdateEm>

//convert to windAverage
	if (millis() - lastSpeedPulse > 3000) {
    7922:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7926:	c0 90 92 11 	lds	r12, 0x1192
    792a:	d0 90 93 11 	lds	r13, 0x1193
    792e:	e0 90 94 11 	lds	r14, 0x1194
    7932:	f0 90 95 11 	lds	r15, 0x1195
    7936:	6c 19       	sub	r22, r12
    7938:	7d 09       	sbc	r23, r13
    793a:	8e 09       	sbc	r24, r14
    793c:	9f 09       	sbc	r25, r15
    793e:	69 3b       	cpi	r22, 0xB9	; 185
    7940:	7b 40       	sbci	r23, 0x0B	; 11
    7942:	81 05       	cpc	r24, r1
    7944:	91 05       	cpc	r25, r1
    7946:	e0 f0       	brcs	.+56     	; 0x7980 <_ZN4Wind12calcWindDataEv+0xfe>
		//no rotation, no wind
		model->setWindAverage(0);
    7948:	40 e0       	ldi	r20, 0x00	; 0
    794a:	50 e0       	ldi	r21, 0x00	; 0
    794c:	ba 01       	movw	r22, r20
    794e:	f8 01       	movw	r30, r16
    7950:	80 81       	ld	r24, Z
    7952:	91 81       	ldd	r25, Z+1	; 0x01
		if (dir < 0) {
			dir = 360 + dir;
		}
		model->setWindApparentDir(dir);
	}
}
    7954:	0f 90       	pop	r0
    7956:	0f 90       	pop	r0
    7958:	0f 90       	pop	r0
    795a:	0f 90       	pop	r0
    795c:	df 91       	pop	r29
    795e:	cf 91       	pop	r28
    7960:	1f 91       	pop	r17
    7962:	0f 91       	pop	r16
    7964:	ff 90       	pop	r15
    7966:	ef 90       	pop	r14
    7968:	df 90       	pop	r13
    796a:	cf 90       	pop	r12
    796c:	bf 90       	pop	r11
    796e:	af 90       	pop	r10
    7970:	9f 90       	pop	r9
    7972:	8f 90       	pop	r8
    7974:	7f 90       	pop	r7
    7976:	6f 90       	pop	r6
    7978:	5f 90       	pop	r5
    797a:	4f 90       	pop	r4
	model->setWindLastUpdate(millis());

//convert to windAverage
	if (millis() - lastSpeedPulse > 3000) {
		//no rotation, no wind
		model->setWindAverage(0);
    797c:	0c 94 b7 2d 	jmp	0x5b6e	; 0x5b6e <_ZN14FreeBoardModel14setWindAverageEf>
		//Serial.println("Wind speed reset");
	} else {
		//windSpeedDur is type long -  max sensor value = 3000000 micros
		if (windSpeedDur > 0) {
    7980:	80 91 76 11 	lds	r24, 0x1176
    7984:	90 91 77 11 	lds	r25, 0x1177
    7988:	a0 91 78 11 	lds	r26, 0x1178
    798c:	b0 91 79 11 	lds	r27, 0x1179
    7990:	89 2b       	or	r24, r25
    7992:	8a 2b       	or	r24, r26
    7994:	8b 2b       	or	r24, r27
    7996:	09 f4       	brne	.+2      	; 0x799a <_ZN4Wind12calcWindDataEv+0x118>
    7998:	4b c1       	rjmp	.+662    	; 0x7c30 <_ZN4Wind12calcWindDataEv+0x3ae>
			// arduino long = -2,147,483,648 to 2,147,483,647
			//1000 millis = 1 rps - this is 1000 x rps (for int arithmetic) range 333 - 33333
			windSpeedRps = 100000000 / windSpeedDur;
    799a:	20 91 76 11 	lds	r18, 0x1176
    799e:	30 91 77 11 	lds	r19, 0x1177
    79a2:	40 91 78 11 	lds	r20, 0x1178
    79a6:	50 91 79 11 	lds	r21, 0x1179
    79aa:	60 e0       	ldi	r22, 0x00	; 0
    79ac:	71 ee       	ldi	r23, 0xE1	; 225
    79ae:	85 ef       	ldi	r24, 0xF5	; 245
    79b0:	95 e0       	ldi	r25, 0x05	; 5
    79b2:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    79b6:	20 93 8a 11 	sts	0x118A, r18
    79ba:	30 93 8b 11 	sts	0x118B, r19
    79be:	40 93 8c 11 	sts	0x118C, r20
    79c2:	50 93 8d 11 	sts	0x118D, r21
			//NOTE:converted multipliers to KNTS
			//need to avoid div/0 errors
			if (windSpeedRps < 323) {
    79c6:	40 91 8a 11 	lds	r20, 0x118A
    79ca:	50 91 8b 11 	lds	r21, 0x118B
    79ce:	60 91 8c 11 	lds	r22, 0x118C
    79d2:	70 91 8d 11 	lds	r23, 0x118D
    79d6:	d8 01       	movw	r26, r16
    79d8:	ed 91       	ld	r30, X+
    79da:	fc 91       	ld	r31, X
    79dc:	43 34       	cpi	r20, 0x43	; 67
    79de:	51 40       	sbci	r21, 0x01	; 1
    79e0:	61 05       	cpc	r22, r1
    79e2:	71 05       	cpc	r23, r1
    79e4:	0c f0       	brlt	.+2      	; 0x79e8 <_ZN4Wind12calcWindDataEv+0x166>
    79e6:	6a c0       	rjmp	.+212    	; 0x7abc <_ZN4Wind12calcWindDataEv+0x23a>
				//need extra accuracy here, zero is very unlikely
				windSpeedRps = windSpeedRps * 10;
    79e8:	20 91 8a 11 	lds	r18, 0x118A
    79ec:	30 91 8b 11 	lds	r19, 0x118B
    79f0:	40 91 8c 11 	lds	r20, 0x118C
    79f4:	50 91 8d 11 	lds	r21, 0x118D
    79f8:	aa e0       	ldi	r26, 0x0A	; 10
    79fa:	b0 e0       	ldi	r27, 0x00	; 0
    79fc:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7a00:	60 93 8a 11 	sts	0x118A, r22
    7a04:	70 93 8b 11 	sts	0x118B, r23
    7a08:	80 93 8c 11 	sts	0x118C, r24
    7a0c:	90 93 8d 11 	sts	0x118D, r25
				model->setWindAverage(((((windSpeedRps * windSpeedRps) / -105) + ((25476 * windSpeedRps) / 100) - 12260)) / model->getWindFactor() * 10);
    7a10:	20 91 8a 11 	lds	r18, 0x118A
    7a14:	30 91 8b 11 	lds	r19, 0x118B
    7a18:	40 91 8c 11 	lds	r20, 0x118C
    7a1c:	50 91 8d 11 	lds	r21, 0x118D
    7a20:	c0 90 8a 11 	lds	r12, 0x118A
    7a24:	d0 90 8b 11 	lds	r13, 0x118B
    7a28:	e0 90 8c 11 	lds	r14, 0x118C
    7a2c:	f0 90 8d 11 	lds	r15, 0x118D
    7a30:	40 90 8a 11 	lds	r4, 0x118A
    7a34:	50 90 8b 11 	lds	r5, 0x118B
    7a38:	60 90 8c 11 	lds	r6, 0x118C
    7a3c:	70 90 8d 11 	lds	r7, 0x118D
    7a40:	cf 01       	movw	r24, r30
    7a42:	29 83       	std	Y+1, r18	; 0x01
    7a44:	3a 83       	std	Y+2, r19	; 0x02
    7a46:	4b 83       	std	Y+3, r20	; 0x03
    7a48:	5c 83       	std	Y+4, r21	; 0x04
    7a4a:	0e 94 8c 2c 	call	0x5918	; 0x5918 <_ZN14FreeBoardModel13getWindFactorEv>
    7a4e:	4b 01       	movw	r8, r22
    7a50:	5c 01       	movw	r10, r24
    7a52:	29 81       	ldd	r18, Y+1	; 0x01
    7a54:	3a 81       	ldd	r19, Y+2	; 0x02
    7a56:	4b 81       	ldd	r20, Y+3	; 0x03
    7a58:	5c 81       	ldd	r21, Y+4	; 0x04
    7a5a:	c7 01       	movw	r24, r14
    7a5c:	b6 01       	movw	r22, r12
    7a5e:	0e 94 98 43 	call	0x8730	; 0x8730 <__mulsi3>
    7a62:	27 e9       	ldi	r18, 0x97	; 151
    7a64:	3f ef       	ldi	r19, 0xFF	; 255
    7a66:	4f ef       	ldi	r20, 0xFF	; 255
    7a68:	5f ef       	ldi	r21, 0xFF	; 255
    7a6a:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <__divmodsi4>
    7a6e:	69 01       	movw	r12, r18
    7a70:	7a 01       	movw	r14, r20
    7a72:	a4 e8       	ldi	r26, 0x84	; 132
    7a74:	b3 e6       	ldi	r27, 0x63	; 99
    7a76:	a3 01       	movw	r20, r6
    7a78:	92 01       	movw	r18, r4
    7a7a:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7a7e:	24 e6       	ldi	r18, 0x64	; 100
    7a80:	30 e0       	ldi	r19, 0x00	; 0
    7a82:	40 e0       	ldi	r20, 0x00	; 0
    7a84:	50 e0       	ldi	r21, 0x00	; 0
    7a86:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <__divmodsi4>
    7a8a:	c2 0e       	add	r12, r18
    7a8c:	d3 1e       	adc	r13, r19
    7a8e:	e4 1e       	adc	r14, r20
    7a90:	f5 1e       	adc	r15, r21
    7a92:	e4 ee       	ldi	r30, 0xE4	; 228
    7a94:	ce 1a       	sub	r12, r30
    7a96:	ef e2       	ldi	r30, 0x2F	; 47
    7a98:	de 0a       	sbc	r13, r30
    7a9a:	e1 08       	sbc	r14, r1
    7a9c:	f1 08       	sbc	r15, r1
    7a9e:	c7 01       	movw	r24, r14
    7aa0:	b6 01       	movw	r22, r12
    7aa2:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    7aa6:	a5 01       	movw	r20, r10
    7aa8:	94 01       	movw	r18, r8
    7aaa:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    7aae:	20 e0       	ldi	r18, 0x00	; 0
    7ab0:	30 e0       	ldi	r19, 0x00	; 0
    7ab2:	40 e2       	ldi	r20, 0x20	; 32
    7ab4:	51 e4       	ldi	r21, 0x41	; 65
    7ab6:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    7aba:	5d c0       	rjmp	.+186    	; 0x7b76 <_ZN4Wind12calcWindDataEv+0x2f4>
			} else if (windSpeedRps < 5436) {
    7abc:	80 91 8a 11 	lds	r24, 0x118A
    7ac0:	90 91 8b 11 	lds	r25, 0x118B
    7ac4:	a0 91 8c 11 	lds	r26, 0x118C
    7ac8:	b0 91 8d 11 	lds	r27, 0x118D
    7acc:	8c 33       	cpi	r24, 0x3C	; 60
    7ace:	95 41       	sbci	r25, 0x15	; 21
    7ad0:	a1 05       	cpc	r26, r1
    7ad2:	b1 05       	cpc	r27, r1
    7ad4:	0c f0       	brlt	.+2      	; 0x7ad8 <_ZN4Wind12calcWindDataEv+0x256>
    7ad6:	55 c0       	rjmp	.+170    	; 0x7b82 <_ZN4Wind12calcWindDataEv+0x300>
				//rps2 = min 10426441, max 30,864,197, cant get div/0 here?
				model->setWindAverage((((windSpeedRps * windSpeedRps) / 2222) + ((19099 * windSpeedRps) / 100) + 9638) / model->getWindFactor());
    7ad8:	20 91 8a 11 	lds	r18, 0x118A
    7adc:	30 91 8b 11 	lds	r19, 0x118B
    7ae0:	40 91 8c 11 	lds	r20, 0x118C
    7ae4:	50 91 8d 11 	lds	r21, 0x118D
    7ae8:	c0 90 8a 11 	lds	r12, 0x118A
    7aec:	d0 90 8b 11 	lds	r13, 0x118B
    7af0:	e0 90 8c 11 	lds	r14, 0x118C
    7af4:	f0 90 8d 11 	lds	r15, 0x118D
    7af8:	40 90 8a 11 	lds	r4, 0x118A
    7afc:	50 90 8b 11 	lds	r5, 0x118B
    7b00:	60 90 8c 11 	lds	r6, 0x118C
    7b04:	70 90 8d 11 	lds	r7, 0x118D
    7b08:	cf 01       	movw	r24, r30
    7b0a:	29 83       	std	Y+1, r18	; 0x01
    7b0c:	3a 83       	std	Y+2, r19	; 0x02
    7b0e:	4b 83       	std	Y+3, r20	; 0x03
    7b10:	5c 83       	std	Y+4, r21	; 0x04
    7b12:	0e 94 8c 2c 	call	0x5918	; 0x5918 <_ZN14FreeBoardModel13getWindFactorEv>
    7b16:	4b 01       	movw	r8, r22
    7b18:	5c 01       	movw	r10, r24
    7b1a:	29 81       	ldd	r18, Y+1	; 0x01
    7b1c:	3a 81       	ldd	r19, Y+2	; 0x02
    7b1e:	4b 81       	ldd	r20, Y+3	; 0x03
    7b20:	5c 81       	ldd	r21, Y+4	; 0x04
    7b22:	c7 01       	movw	r24, r14
    7b24:	b6 01       	movw	r22, r12
    7b26:	0e 94 98 43 	call	0x8730	; 0x8730 <__mulsi3>
    7b2a:	2e ea       	ldi	r18, 0xAE	; 174
    7b2c:	38 e0       	ldi	r19, 0x08	; 8
    7b2e:	40 e0       	ldi	r20, 0x00	; 0
    7b30:	50 e0       	ldi	r21, 0x00	; 0
    7b32:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <__divmodsi4>
    7b36:	69 01       	movw	r12, r18
    7b38:	7a 01       	movw	r14, r20
    7b3a:	ab e9       	ldi	r26, 0x9B	; 155
    7b3c:	ba e4       	ldi	r27, 0x4A	; 74
    7b3e:	a3 01       	movw	r20, r6
    7b40:	92 01       	movw	r18, r4
    7b42:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7b46:	24 e6       	ldi	r18, 0x64	; 100
    7b48:	30 e0       	ldi	r19, 0x00	; 0
    7b4a:	40 e0       	ldi	r20, 0x00	; 0
    7b4c:	50 e0       	ldi	r21, 0x00	; 0
    7b4e:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <__divmodsi4>
    7b52:	c2 0e       	add	r12, r18
    7b54:	d3 1e       	adc	r13, r19
    7b56:	e4 1e       	adc	r14, r20
    7b58:	f5 1e       	adc	r15, r21
    7b5a:	86 ea       	ldi	r24, 0xA6	; 166
    7b5c:	c8 0e       	add	r12, r24
    7b5e:	85 e2       	ldi	r24, 0x25	; 37
    7b60:	d8 1e       	adc	r13, r24
    7b62:	e1 1c       	adc	r14, r1
    7b64:	f1 1c       	adc	r15, r1
    7b66:	c7 01       	movw	r24, r14
    7b68:	b6 01       	movw	r22, r12
    7b6a:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    7b6e:	a5 01       	movw	r20, r10
    7b70:	94 01       	movw	r18, r8
    7b72:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    7b76:	ab 01       	movw	r20, r22
    7b78:	bc 01       	movw	r22, r24
    7b7a:	d8 01       	movw	r26, r16
    7b7c:	8d 91       	ld	r24, X+
    7b7e:	9c 91       	ld	r25, X
    7b80:	55 c0       	rjmp	.+170    	; 0x7c2c <_ZN4Wind12calcWindDataEv+0x3aa>
			} else {
				model->setWindAverage(((((windSpeedRps * windSpeedRps) / 1042) * 100) - (8314700 * windSpeedRps) + 2866500) / model->getWindFactor());
    7b82:	20 91 8a 11 	lds	r18, 0x118A
    7b86:	30 91 8b 11 	lds	r19, 0x118B
    7b8a:	40 91 8c 11 	lds	r20, 0x118C
    7b8e:	50 91 8d 11 	lds	r21, 0x118D
    7b92:	c0 90 8a 11 	lds	r12, 0x118A
    7b96:	d0 90 8b 11 	lds	r13, 0x118B
    7b9a:	e0 90 8c 11 	lds	r14, 0x118C
    7b9e:	f0 90 8d 11 	lds	r15, 0x118D
    7ba2:	40 90 8a 11 	lds	r4, 0x118A
    7ba6:	50 90 8b 11 	lds	r5, 0x118B
    7baa:	60 90 8c 11 	lds	r6, 0x118C
    7bae:	70 90 8d 11 	lds	r7, 0x118D
    7bb2:	cf 01       	movw	r24, r30
    7bb4:	29 83       	std	Y+1, r18	; 0x01
    7bb6:	3a 83       	std	Y+2, r19	; 0x02
    7bb8:	4b 83       	std	Y+3, r20	; 0x03
    7bba:	5c 83       	std	Y+4, r21	; 0x04
    7bbc:	0e 94 8c 2c 	call	0x5918	; 0x5918 <_ZN14FreeBoardModel13getWindFactorEv>
    7bc0:	4b 01       	movw	r8, r22
    7bc2:	5c 01       	movw	r10, r24
    7bc4:	29 81       	ldd	r18, Y+1	; 0x01
    7bc6:	3a 81       	ldd	r19, Y+2	; 0x02
    7bc8:	4b 81       	ldd	r20, Y+3	; 0x03
    7bca:	5c 81       	ldd	r21, Y+4	; 0x04
    7bcc:	c7 01       	movw	r24, r14
    7bce:	b6 01       	movw	r22, r12
    7bd0:	0e 94 98 43 	call	0x8730	; 0x8730 <__mulsi3>
    7bd4:	22 e1       	ldi	r18, 0x12	; 18
    7bd6:	34 e0       	ldi	r19, 0x04	; 4
    7bd8:	40 e0       	ldi	r20, 0x00	; 0
    7bda:	50 e0       	ldi	r21, 0x00	; 0
    7bdc:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <__divmodsi4>
    7be0:	a4 e6       	ldi	r26, 0x64	; 100
    7be2:	b0 e0       	ldi	r27, 0x00	; 0
    7be4:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    7be8:	6b 01       	movw	r12, r22
    7bea:	7c 01       	movw	r14, r24
    7bec:	a3 01       	movw	r20, r6
    7bee:	92 01       	movw	r18, r4
    7bf0:	64 eb       	ldi	r22, 0xB4	; 180
    7bf2:	70 e2       	ldi	r23, 0x20	; 32
    7bf4:	81 e8       	ldi	r24, 0x81	; 129
    7bf6:	9f ef       	ldi	r25, 0xFF	; 255
    7bf8:	0e 94 98 43 	call	0x8730	; 0x8730 <__mulsi3>
    7bfc:	c6 0e       	add	r12, r22
    7bfe:	d7 1e       	adc	r13, r23
    7c00:	e8 1e       	adc	r14, r24
    7c02:	f9 1e       	adc	r15, r25
    7c04:	b4 e4       	ldi	r27, 0x44	; 68
    7c06:	cb 0e       	add	r12, r27
    7c08:	bd eb       	ldi	r27, 0xBD	; 189
    7c0a:	db 1e       	adc	r13, r27
    7c0c:	bb e2       	ldi	r27, 0x2B	; 43
    7c0e:	eb 1e       	adc	r14, r27
    7c10:	f1 1c       	adc	r15, r1
    7c12:	c7 01       	movw	r24, r14
    7c14:	b6 01       	movw	r22, r12
    7c16:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    7c1a:	a5 01       	movw	r20, r10
    7c1c:	94 01       	movw	r18, r8
    7c1e:	0e 94 bc 40 	call	0x8178	; 0x8178 <__divsf3>
    7c22:	ab 01       	movw	r20, r22
    7c24:	bc 01       	movw	r22, r24
    7c26:	f8 01       	movw	r30, r16
    7c28:	80 81       	ld	r24, Z
    7c2a:	91 81       	ldd	r25, Z+1	; 0x01
    7c2c:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <_ZN14FreeBoardModel14setWindAverageEf>
			}
		}
		//update gusts
		if (model->getWindAverage() > model->getWindMax()) model->setWindMax(model->getWindAverage());
    7c30:	d8 01       	movw	r26, r16
    7c32:	8d 91       	ld	r24, X+
    7c34:	9c 91       	ld	r25, X
    7c36:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN14FreeBoardModel14getWindAverageEv>
    7c3a:	6b 01       	movw	r12, r22
    7c3c:	7c 01       	movw	r14, r24
    7c3e:	f8 01       	movw	r30, r16
    7c40:	80 81       	ld	r24, Z
    7c42:	91 81       	ldd	r25, Z+1	; 0x01
    7c44:	0e 94 98 2c 	call	0x5930	; 0x5930 <_ZN14FreeBoardModel10getWindMaxEv>
    7c48:	bc 01       	movw	r22, r24
    7c4a:	88 27       	eor	r24, r24
    7c4c:	77 fd       	sbrc	r23, 7
    7c4e:	80 95       	com	r24
    7c50:	98 2f       	mov	r25, r24
    7c52:	0e 94 57 41 	call	0x82ae	; 0x82ae <__floatsisf>
    7c56:	9b 01       	movw	r18, r22
    7c58:	ac 01       	movw	r20, r24
    7c5a:	c7 01       	movw	r24, r14
    7c5c:	b6 01       	movw	r22, r12
    7c5e:	0e 94 b8 42 	call	0x8570	; 0x8570 <__gesf2>
    7c62:	18 16       	cp	r1, r24
    7c64:	64 f4       	brge	.+24     	; 0x7c7e <_ZN4Wind12calcWindDataEv+0x3fc>
    7c66:	d8 01       	movw	r26, r16
    7c68:	8d 91       	ld	r24, X+
    7c6a:	9c 91       	ld	r25, X
    7c6c:	0e 94 80 2c 	call	0x5900	; 0x5900 <_ZN14FreeBoardModel14getWindAverageEv>
    7c70:	0e 94 24 41 	call	0x8248	; 0x8248 <__fixsfsi>
    7c74:	f8 01       	movw	r30, r16
    7c76:	80 81       	ld	r24, Z
    7c78:	91 81       	ldd	r25, Z+1	; 0x01
    7c7a:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <_ZN14FreeBoardModel10setWindMaxEi>

		// calc direction, degrees clockwise
		//should round to int, min 1
		int dir = (int) getRotationalAverage();
    7c7e:	c8 01       	movw	r24, r16
    7c80:	0e 94 93 38 	call	0x7126	; 0x7126 <_ZN4Wind20getRotationalAverageEv>
    7c84:	7c 01       	movw	r14, r24
		//limit to +-360, after adjust zero
		//C = A – B * (A / B)
		dir = (dir + model->getWindZeroOffset()); // %360;
    7c86:	d8 01       	movw	r26, r16
    7c88:	8d 91       	ld	r24, X+
    7c8a:	9c 91       	ld	r25, X
    7c8c:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <_ZN14FreeBoardModel17getWindZeroOffsetEv>
    7c90:	8e 0d       	add	r24, r14
    7c92:	9f 1d       	adc	r25, r15
		if (dir != 0) {
    7c94:	00 97       	sbiw	r24, 0x00	; 0
    7c96:	41 f0       	breq	.+16     	; 0x7ca8 <_ZN4Wind12calcWindDataEv+0x426>
			dir = dir - 360 * (dir / 360);
    7c98:	68 e6       	ldi	r22, 0x68	; 104
    7c9a:	71 e0       	ldi	r23, 0x01	; 1
    7c9c:	0e 94 b4 43 	call	0x8768	; 0x8768 <__divmodhi4>
		}
		//if minus, then reverse to +ve
		if (dir < 0) {
    7ca0:	97 ff       	sbrs	r25, 7
    7ca2:	02 c0       	rjmp	.+4      	; 0x7ca8 <_ZN4Wind12calcWindDataEv+0x426>
			dir = 360 + dir;
    7ca4:	88 59       	subi	r24, 0x98	; 152
    7ca6:	9e 4f       	sbci	r25, 0xFE	; 254
		}
		model->setWindApparentDir(dir);
    7ca8:	bc 01       	movw	r22, r24
    7caa:	f8 01       	movw	r30, r16
    7cac:	80 81       	ld	r24, Z
    7cae:	91 81       	ldd	r25, Z+1	; 0x01
	}
}
    7cb0:	0f 90       	pop	r0
    7cb2:	0f 90       	pop	r0
    7cb4:	0f 90       	pop	r0
    7cb6:	0f 90       	pop	r0
    7cb8:	df 91       	pop	r29
    7cba:	cf 91       	pop	r28
    7cbc:	1f 91       	pop	r17
    7cbe:	0f 91       	pop	r16
    7cc0:	ff 90       	pop	r15
    7cc2:	ef 90       	pop	r14
    7cc4:	df 90       	pop	r13
    7cc6:	cf 90       	pop	r12
    7cc8:	bf 90       	pop	r11
    7cca:	af 90       	pop	r10
    7ccc:	9f 90       	pop	r9
    7cce:	8f 90       	pop	r8
    7cd0:	7f 90       	pop	r7
    7cd2:	6f 90       	pop	r6
    7cd4:	5f 90       	pop	r5
    7cd6:	4f 90       	pop	r4
		}
		//if minus, then reverse to +ve
		if (dir < 0) {
			dir = 360 + dir;
		}
		model->setWindApparentDir(dir);
    7cd8:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <_ZN14FreeBoardModel18setWindApparentDirEi>

00007cdc <_GLOBAL__sub_I_lastSpeedPulse>:

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    7cdc:	8e e4       	ldi	r24, 0x4E	; 78
    7cde:	91 e1       	ldi	r25, 0x11	; 17
    7ce0:	90 93 4a 11 	sts	0x114A, r25
    7ce4:	80 93 49 11 	sts	0x1149, r24
    7ce8:	85 e0       	ldi	r24, 0x05	; 5
    7cea:	80 93 4b 11 	sts	0x114B, r24
			currentSize = 0; 
    7cee:	10 92 4c 11 	sts	0x114C, r1
			currentIndex = 0; 
    7cf2:	10 92 4d 11 	sts	0x114D, r1
    7cf6:	08 95       	ret

00007cf8 <_Z10store_charhP11ring_buffer>:
    7cf8:	fb 01       	movw	r30, r22
    7cfa:	e0 5c       	subi	r30, 0xC0	; 192
    7cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    7cfe:	20 81       	ld	r18, Z
    7d00:	31 81       	ldd	r19, Z+1	; 0x01
    7d02:	2f 5f       	subi	r18, 0xFF	; 255
    7d04:	3f 4f       	sbci	r19, 0xFF	; 255
    7d06:	2f 73       	andi	r18, 0x3F	; 63
    7d08:	33 27       	eor	r19, r19
    7d0a:	db 01       	movw	r26, r22
    7d0c:	ae 5b       	subi	r26, 0xBE	; 190
    7d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    7d10:	4d 91       	ld	r20, X+
    7d12:	5c 91       	ld	r21, X
    7d14:	24 17       	cp	r18, r20
    7d16:	35 07       	cpc	r19, r21
    7d18:	39 f0       	breq	.+14     	; 0x7d28 <_Z10store_charhP11ring_buffer+0x30>
    7d1a:	a0 81       	ld	r26, Z
    7d1c:	b1 81       	ldd	r27, Z+1	; 0x01
    7d1e:	a6 0f       	add	r26, r22
    7d20:	b7 1f       	adc	r27, r23
    7d22:	8c 93       	st	X, r24
    7d24:	31 83       	std	Z+1, r19	; 0x01
    7d26:	20 83       	st	Z, r18
    7d28:	08 95       	ret

00007d2a <_GLOBAL__sub_I_rx_buffer>:
    7d2a:	cf 93       	push	r28
    7d2c:	10 92 df 06 	sts	0x06DF, r1
    7d30:	10 92 de 06 	sts	0x06DE, r1
    7d34:	88 ee       	ldi	r24, 0xE8	; 232
    7d36:	93 e0       	ldi	r25, 0x03	; 3
    7d38:	a0 e0       	ldi	r26, 0x00	; 0
    7d3a:	b0 e0       	ldi	r27, 0x00	; 0
    7d3c:	80 93 e0 06 	sts	0x06E0, r24
    7d40:	90 93 e1 06 	sts	0x06E1, r25
    7d44:	a0 93 e2 06 	sts	0x06E2, r26
    7d48:	b0 93 e3 06 	sts	0x06E3, r27
    7d4c:	2b e5       	ldi	r18, 0x5B	; 91
    7d4e:	36 e0       	ldi	r19, 0x06	; 6
    7d50:	30 93 dd 06 	sts	0x06DD, r19
    7d54:	20 93 dc 06 	sts	0x06DC, r18
    7d58:	4a ed       	ldi	r20, 0xDA	; 218
    7d5a:	58 e0       	ldi	r21, 0x08	; 8
    7d5c:	50 93 e9 06 	sts	0x06E9, r21
    7d60:	40 93 e8 06 	sts	0x06E8, r20
    7d64:	46 e9       	ldi	r20, 0x96	; 150
    7d66:	58 e0       	ldi	r21, 0x08	; 8
    7d68:	50 93 eb 06 	sts	0x06EB, r21
    7d6c:	40 93 ea 06 	sts	0x06EA, r20
    7d70:	45 ec       	ldi	r20, 0xC5	; 197
    7d72:	50 e0       	ldi	r21, 0x00	; 0
    7d74:	50 93 ed 06 	sts	0x06ED, r21
    7d78:	40 93 ec 06 	sts	0x06EC, r20
    7d7c:	44 ec       	ldi	r20, 0xC4	; 196
    7d7e:	50 e0       	ldi	r21, 0x00	; 0
    7d80:	50 93 ef 06 	sts	0x06EF, r21
    7d84:	40 93 ee 06 	sts	0x06EE, r20
    7d88:	40 ec       	ldi	r20, 0xC0	; 192
    7d8a:	50 e0       	ldi	r21, 0x00	; 0
    7d8c:	50 93 f1 06 	sts	0x06F1, r21
    7d90:	40 93 f0 06 	sts	0x06F0, r20
    7d94:	41 ec       	ldi	r20, 0xC1	; 193
    7d96:	50 e0       	ldi	r21, 0x00	; 0
    7d98:	50 93 f3 06 	sts	0x06F3, r21
    7d9c:	40 93 f2 06 	sts	0x06F2, r20
    7da0:	42 ec       	ldi	r20, 0xC2	; 194
    7da2:	50 e0       	ldi	r21, 0x00	; 0
    7da4:	50 93 f5 06 	sts	0x06F5, r21
    7da8:	40 93 f4 06 	sts	0x06F4, r20
    7dac:	46 ec       	ldi	r20, 0xC6	; 198
    7dae:	50 e0       	ldi	r21, 0x00	; 0
    7db0:	50 93 f7 06 	sts	0x06F7, r21
    7db4:	40 93 f6 06 	sts	0x06F6, r20
    7db8:	c4 e0       	ldi	r28, 0x04	; 4
    7dba:	c0 93 f8 06 	sts	0x06F8, r28
    7dbe:	f3 e0       	ldi	r31, 0x03	; 3
    7dc0:	f0 93 f9 06 	sts	0x06F9, r31
    7dc4:	e7 e0       	ldi	r30, 0x07	; 7
    7dc6:	e0 93 fa 06 	sts	0x06FA, r30
    7dca:	75 e0       	ldi	r23, 0x05	; 5
    7dcc:	70 93 fb 06 	sts	0x06FB, r23
    7dd0:	61 e0       	ldi	r22, 0x01	; 1
    7dd2:	60 93 fc 06 	sts	0x06FC, r22
    7dd6:	10 92 bd 06 	sts	0x06BD, r1
    7dda:	10 92 bc 06 	sts	0x06BC, r1
    7dde:	80 93 be 06 	sts	0x06BE, r24
    7de2:	90 93 bf 06 	sts	0x06BF, r25
    7de6:	a0 93 c0 06 	sts	0x06C0, r26
    7dea:	b0 93 c1 06 	sts	0x06C1, r27
    7dee:	30 93 bb 06 	sts	0x06BB, r19
    7df2:	20 93 ba 06 	sts	0x06BA, r18
    7df6:	42 e5       	ldi	r20, 0x52	; 82
    7df8:	58 e0       	ldi	r21, 0x08	; 8
    7dfa:	50 93 c7 06 	sts	0x06C7, r21
    7dfe:	40 93 c6 06 	sts	0x06C6, r20
    7e02:	4e e0       	ldi	r20, 0x0E	; 14
    7e04:	58 e0       	ldi	r21, 0x08	; 8
    7e06:	50 93 c9 06 	sts	0x06C9, r21
    7e0a:	40 93 c8 06 	sts	0x06C8, r20
    7e0e:	4d ec       	ldi	r20, 0xCD	; 205
    7e10:	50 e0       	ldi	r21, 0x00	; 0
    7e12:	50 93 cb 06 	sts	0x06CB, r21
    7e16:	40 93 ca 06 	sts	0x06CA, r20
    7e1a:	4c ec       	ldi	r20, 0xCC	; 204
    7e1c:	50 e0       	ldi	r21, 0x00	; 0
    7e1e:	50 93 cd 06 	sts	0x06CD, r21
    7e22:	40 93 cc 06 	sts	0x06CC, r20
    7e26:	48 ec       	ldi	r20, 0xC8	; 200
    7e28:	50 e0       	ldi	r21, 0x00	; 0
    7e2a:	50 93 cf 06 	sts	0x06CF, r21
    7e2e:	40 93 ce 06 	sts	0x06CE, r20
    7e32:	49 ec       	ldi	r20, 0xC9	; 201
    7e34:	50 e0       	ldi	r21, 0x00	; 0
    7e36:	50 93 d1 06 	sts	0x06D1, r21
    7e3a:	40 93 d0 06 	sts	0x06D0, r20
    7e3e:	4a ec       	ldi	r20, 0xCA	; 202
    7e40:	50 e0       	ldi	r21, 0x00	; 0
    7e42:	50 93 d3 06 	sts	0x06D3, r21
    7e46:	40 93 d2 06 	sts	0x06D2, r20
    7e4a:	4e ec       	ldi	r20, 0xCE	; 206
    7e4c:	50 e0       	ldi	r21, 0x00	; 0
    7e4e:	50 93 d5 06 	sts	0x06D5, r21
    7e52:	40 93 d4 06 	sts	0x06D4, r20
    7e56:	c0 93 d6 06 	sts	0x06D6, r28
    7e5a:	f0 93 d7 06 	sts	0x06D7, r31
    7e5e:	e0 93 d8 06 	sts	0x06D8, r30
    7e62:	70 93 d9 06 	sts	0x06D9, r23
    7e66:	60 93 da 06 	sts	0x06DA, r22
    7e6a:	10 92 9b 06 	sts	0x069B, r1
    7e6e:	10 92 9a 06 	sts	0x069A, r1
    7e72:	80 93 9c 06 	sts	0x069C, r24
    7e76:	90 93 9d 06 	sts	0x069D, r25
    7e7a:	a0 93 9e 06 	sts	0x069E, r26
    7e7e:	b0 93 9f 06 	sts	0x069F, r27
    7e82:	30 93 99 06 	sts	0x0699, r19
    7e86:	20 93 98 06 	sts	0x0698, r18
    7e8a:	4a ec       	ldi	r20, 0xCA	; 202
    7e8c:	57 e0       	ldi	r21, 0x07	; 7
    7e8e:	50 93 a5 06 	sts	0x06A5, r21
    7e92:	40 93 a4 06 	sts	0x06A4, r20
    7e96:	46 e8       	ldi	r20, 0x86	; 134
    7e98:	57 e0       	ldi	r21, 0x07	; 7
    7e9a:	50 93 a7 06 	sts	0x06A7, r21
    7e9e:	40 93 a6 06 	sts	0x06A6, r20
    7ea2:	45 ed       	ldi	r20, 0xD5	; 213
    7ea4:	50 e0       	ldi	r21, 0x00	; 0
    7ea6:	50 93 a9 06 	sts	0x06A9, r21
    7eaa:	40 93 a8 06 	sts	0x06A8, r20
    7eae:	44 ed       	ldi	r20, 0xD4	; 212
    7eb0:	50 e0       	ldi	r21, 0x00	; 0
    7eb2:	50 93 ab 06 	sts	0x06AB, r21
    7eb6:	40 93 aa 06 	sts	0x06AA, r20
    7eba:	40 ed       	ldi	r20, 0xD0	; 208
    7ebc:	50 e0       	ldi	r21, 0x00	; 0
    7ebe:	50 93 ad 06 	sts	0x06AD, r21
    7ec2:	40 93 ac 06 	sts	0x06AC, r20
    7ec6:	41 ed       	ldi	r20, 0xD1	; 209
    7ec8:	50 e0       	ldi	r21, 0x00	; 0
    7eca:	50 93 af 06 	sts	0x06AF, r21
    7ece:	40 93 ae 06 	sts	0x06AE, r20
    7ed2:	42 ed       	ldi	r20, 0xD2	; 210
    7ed4:	50 e0       	ldi	r21, 0x00	; 0
    7ed6:	50 93 b1 06 	sts	0x06B1, r21
    7eda:	40 93 b0 06 	sts	0x06B0, r20
    7ede:	46 ed       	ldi	r20, 0xD6	; 214
    7ee0:	50 e0       	ldi	r21, 0x00	; 0
    7ee2:	50 93 b3 06 	sts	0x06B3, r21
    7ee6:	40 93 b2 06 	sts	0x06B2, r20
    7eea:	c0 93 b4 06 	sts	0x06B4, r28
    7eee:	f0 93 b5 06 	sts	0x06B5, r31
    7ef2:	e0 93 b6 06 	sts	0x06B6, r30
    7ef6:	70 93 b7 06 	sts	0x06B7, r23
    7efa:	60 93 b8 06 	sts	0x06B8, r22
    7efe:	10 92 79 06 	sts	0x0679, r1
    7f02:	10 92 78 06 	sts	0x0678, r1
    7f06:	80 93 7a 06 	sts	0x067A, r24
    7f0a:	90 93 7b 06 	sts	0x067B, r25
    7f0e:	a0 93 7c 06 	sts	0x067C, r26
    7f12:	b0 93 7d 06 	sts	0x067D, r27
    7f16:	30 93 77 06 	sts	0x0677, r19
    7f1a:	20 93 76 06 	sts	0x0676, r18
    7f1e:	82 e4       	ldi	r24, 0x42	; 66
    7f20:	97 e0       	ldi	r25, 0x07	; 7
    7f22:	90 93 83 06 	sts	0x0683, r25
    7f26:	80 93 82 06 	sts	0x0682, r24
    7f2a:	8e ef       	ldi	r24, 0xFE	; 254
    7f2c:	96 e0       	ldi	r25, 0x06	; 6
    7f2e:	90 93 85 06 	sts	0x0685, r25
    7f32:	80 93 84 06 	sts	0x0684, r24
    7f36:	85 e3       	ldi	r24, 0x35	; 53
    7f38:	91 e0       	ldi	r25, 0x01	; 1
    7f3a:	90 93 87 06 	sts	0x0687, r25
    7f3e:	80 93 86 06 	sts	0x0686, r24
    7f42:	84 e3       	ldi	r24, 0x34	; 52
    7f44:	91 e0       	ldi	r25, 0x01	; 1
    7f46:	90 93 89 06 	sts	0x0689, r25
    7f4a:	80 93 88 06 	sts	0x0688, r24
    7f4e:	80 e3       	ldi	r24, 0x30	; 48
    7f50:	91 e0       	ldi	r25, 0x01	; 1
    7f52:	90 93 8b 06 	sts	0x068B, r25
    7f56:	80 93 8a 06 	sts	0x068A, r24
    7f5a:	81 e3       	ldi	r24, 0x31	; 49
    7f5c:	91 e0       	ldi	r25, 0x01	; 1
    7f5e:	90 93 8d 06 	sts	0x068D, r25
    7f62:	80 93 8c 06 	sts	0x068C, r24
    7f66:	82 e3       	ldi	r24, 0x32	; 50
    7f68:	91 e0       	ldi	r25, 0x01	; 1
    7f6a:	90 93 8f 06 	sts	0x068F, r25
    7f6e:	80 93 8e 06 	sts	0x068E, r24
    7f72:	86 e3       	ldi	r24, 0x36	; 54
    7f74:	91 e0       	ldi	r25, 0x01	; 1
    7f76:	90 93 91 06 	sts	0x0691, r25
    7f7a:	80 93 90 06 	sts	0x0690, r24
    7f7e:	c0 93 92 06 	sts	0x0692, r28
    7f82:	f0 93 93 06 	sts	0x0693, r31
    7f86:	e0 93 94 06 	sts	0x0694, r30
    7f8a:	70 93 95 06 	sts	0x0695, r23
    7f8e:	60 93 96 06 	sts	0x0696, r22
    7f92:	cf 91       	pop	r28
    7f94:	08 95       	ret

00007f96 <_ZN5Print5writeEPKc>:
    7f96:	61 15       	cp	r22, r1
    7f98:	71 05       	cpc	r23, r1
    7f9a:	81 f0       	breq	.+32     	; 0x7fbc <_ZN5Print5writeEPKc+0x26>
    7f9c:	db 01       	movw	r26, r22
    7f9e:	0d 90       	ld	r0, X+
    7fa0:	00 20       	and	r0, r0
    7fa2:	e9 f7       	brne	.-6      	; 0x7f9e <_ZN5Print5writeEPKc+0x8>
    7fa4:	ad 01       	movw	r20, r26
    7fa6:	41 50       	subi	r20, 0x01	; 1
    7fa8:	51 09       	sbc	r21, r1
    7faa:	46 1b       	sub	r20, r22
    7fac:	57 0b       	sbc	r21, r23
    7fae:	dc 01       	movw	r26, r24
    7fb0:	ed 91       	ld	r30, X+
    7fb2:	fc 91       	ld	r31, X
    7fb4:	02 80       	ldd	r0, Z+2	; 0x02
    7fb6:	f3 81       	ldd	r31, Z+3	; 0x03
    7fb8:	e0 2d       	mov	r30, r0
    7fba:	09 94       	ijmp
    7fbc:	80 e0       	ldi	r24, 0x00	; 0
    7fbe:	90 e0       	ldi	r25, 0x00	; 0
    7fc0:	08 95       	ret

00007fc2 <main>:
    7fc2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <init>
    7fc6:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <setup>
    7fca:	c7 e3       	ldi	r28, 0x37	; 55
    7fcc:	d3 e0       	ldi	r29, 0x03	; 3
    7fce:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <loop>
    7fd2:	20 97       	sbiw	r28, 0x00	; 0
    7fd4:	e1 f3       	breq	.-8      	; 0x7fce <main+0xc>
    7fd6:	0e 94 37 03 	call	0x66e	; 0x66e <_Z14serialEventRunv>
    7fda:	f9 cf       	rjmp	.-14     	; 0x7fce <main+0xc>

00007fdc <__subsf3>:
    7fdc:	50 58       	subi	r21, 0x80	; 128

00007fde <__addsf3>:
    7fde:	bb 27       	eor	r27, r27
    7fe0:	aa 27       	eor	r26, r26
    7fe2:	0e d0       	rcall	.+28     	; 0x8000 <__addsf3x>
    7fe4:	63 c2       	rjmp	.+1222   	; 0x84ac <__fp_round>
    7fe6:	2c d2       	rcall	.+1112   	; 0x8440 <__fp_pscA>
    7fe8:	30 f0       	brcs	.+12     	; 0x7ff6 <__addsf3+0x18>
    7fea:	31 d2       	rcall	.+1122   	; 0x844e <__fp_pscB>
    7fec:	20 f0       	brcs	.+8      	; 0x7ff6 <__addsf3+0x18>
    7fee:	31 f4       	brne	.+12     	; 0x7ffc <__addsf3+0x1e>
    7ff0:	9f 3f       	cpi	r25, 0xFF	; 255
    7ff2:	11 f4       	brne	.+4      	; 0x7ff8 <__addsf3+0x1a>
    7ff4:	1e f4       	brtc	.+6      	; 0x7ffc <__addsf3+0x1e>
    7ff6:	fc c1       	rjmp	.+1016   	; 0x83f0 <__fp_nan>
    7ff8:	0e f4       	brtc	.+2      	; 0x7ffc <__addsf3+0x1e>
    7ffa:	e0 95       	com	r30
    7ffc:	e7 fb       	bst	r30, 7
    7ffe:	c9 c1       	rjmp	.+914    	; 0x8392 <__fp_inf>

00008000 <__addsf3x>:
    8000:	e9 2f       	mov	r30, r25
    8002:	76 d2       	rcall	.+1260   	; 0x84f0 <__fp_split3>
    8004:	80 f3       	brcs	.-32     	; 0x7fe6 <__addsf3+0x8>
    8006:	ba 17       	cp	r27, r26
    8008:	62 07       	cpc	r22, r18
    800a:	73 07       	cpc	r23, r19
    800c:	84 07       	cpc	r24, r20
    800e:	95 07       	cpc	r25, r21
    8010:	18 f0       	brcs	.+6      	; 0x8018 <__addsf3x+0x18>
    8012:	71 f4       	brne	.+28     	; 0x8030 <__addsf3x+0x30>
    8014:	9e f5       	brtc	.+102    	; 0x807c <__addsf3x+0x7c>
    8016:	a5 c2       	rjmp	.+1354   	; 0x8562 <__fp_zero>
    8018:	0e f4       	brtc	.+2      	; 0x801c <__addsf3x+0x1c>
    801a:	e0 95       	com	r30
    801c:	0b 2e       	mov	r0, r27
    801e:	ba 2f       	mov	r27, r26
    8020:	a0 2d       	mov	r26, r0
    8022:	0b 01       	movw	r0, r22
    8024:	b9 01       	movw	r22, r18
    8026:	90 01       	movw	r18, r0
    8028:	0c 01       	movw	r0, r24
    802a:	ca 01       	movw	r24, r20
    802c:	a0 01       	movw	r20, r0
    802e:	11 24       	eor	r1, r1
    8030:	ff 27       	eor	r31, r31
    8032:	59 1b       	sub	r21, r25
    8034:	99 f0       	breq	.+38     	; 0x805c <__addsf3x+0x5c>
    8036:	59 3f       	cpi	r21, 0xF9	; 249
    8038:	50 f4       	brcc	.+20     	; 0x804e <__addsf3x+0x4e>
    803a:	50 3e       	cpi	r21, 0xE0	; 224
    803c:	68 f1       	brcs	.+90     	; 0x8098 <__addsf3x+0x98>
    803e:	1a 16       	cp	r1, r26
    8040:	f0 40       	sbci	r31, 0x00	; 0
    8042:	a2 2f       	mov	r26, r18
    8044:	23 2f       	mov	r18, r19
    8046:	34 2f       	mov	r19, r20
    8048:	44 27       	eor	r20, r20
    804a:	58 5f       	subi	r21, 0xF8	; 248
    804c:	f3 cf       	rjmp	.-26     	; 0x8034 <__addsf3x+0x34>
    804e:	46 95       	lsr	r20
    8050:	37 95       	ror	r19
    8052:	27 95       	ror	r18
    8054:	a7 95       	ror	r26
    8056:	f0 40       	sbci	r31, 0x00	; 0
    8058:	53 95       	inc	r21
    805a:	c9 f7       	brne	.-14     	; 0x804e <__addsf3x+0x4e>
    805c:	7e f4       	brtc	.+30     	; 0x807c <__addsf3x+0x7c>
    805e:	1f 16       	cp	r1, r31
    8060:	ba 0b       	sbc	r27, r26
    8062:	62 0b       	sbc	r22, r18
    8064:	73 0b       	sbc	r23, r19
    8066:	84 0b       	sbc	r24, r20
    8068:	ba f0       	brmi	.+46     	; 0x8098 <__addsf3x+0x98>
    806a:	91 50       	subi	r25, 0x01	; 1
    806c:	a1 f0       	breq	.+40     	; 0x8096 <__addsf3x+0x96>
    806e:	ff 0f       	add	r31, r31
    8070:	bb 1f       	adc	r27, r27
    8072:	66 1f       	adc	r22, r22
    8074:	77 1f       	adc	r23, r23
    8076:	88 1f       	adc	r24, r24
    8078:	c2 f7       	brpl	.-16     	; 0x806a <__addsf3x+0x6a>
    807a:	0e c0       	rjmp	.+28     	; 0x8098 <__addsf3x+0x98>
    807c:	ba 0f       	add	r27, r26
    807e:	62 1f       	adc	r22, r18
    8080:	73 1f       	adc	r23, r19
    8082:	84 1f       	adc	r24, r20
    8084:	48 f4       	brcc	.+18     	; 0x8098 <__addsf3x+0x98>
    8086:	87 95       	ror	r24
    8088:	77 95       	ror	r23
    808a:	67 95       	ror	r22
    808c:	b7 95       	ror	r27
    808e:	f7 95       	ror	r31
    8090:	9e 3f       	cpi	r25, 0xFE	; 254
    8092:	08 f0       	brcs	.+2      	; 0x8096 <__addsf3x+0x96>
    8094:	b3 cf       	rjmp	.-154    	; 0x7ffc <__addsf3+0x1e>
    8096:	93 95       	inc	r25
    8098:	88 0f       	add	r24, r24
    809a:	08 f0       	brcs	.+2      	; 0x809e <__addsf3x+0x9e>
    809c:	99 27       	eor	r25, r25
    809e:	ee 0f       	add	r30, r30
    80a0:	97 95       	ror	r25
    80a2:	87 95       	ror	r24
    80a4:	08 95       	ret
    80a6:	cc d1       	rcall	.+920    	; 0x8440 <__fp_pscA>
    80a8:	58 f0       	brcs	.+22     	; 0x80c0 <__addsf3x+0xc0>
    80aa:	80 e8       	ldi	r24, 0x80	; 128
    80ac:	91 e0       	ldi	r25, 0x01	; 1
    80ae:	09 f4       	brne	.+2      	; 0x80b2 <__addsf3x+0xb2>
    80b0:	9e ef       	ldi	r25, 0xFE	; 254
    80b2:	cd d1       	rcall	.+922    	; 0x844e <__fp_pscB>
    80b4:	28 f0       	brcs	.+10     	; 0x80c0 <__addsf3x+0xc0>
    80b6:	40 e8       	ldi	r20, 0x80	; 128
    80b8:	51 e0       	ldi	r21, 0x01	; 1
    80ba:	59 f4       	brne	.+22     	; 0x80d2 <atan2+0xe>
    80bc:	5e ef       	ldi	r21, 0xFE	; 254
    80be:	09 c0       	rjmp	.+18     	; 0x80d2 <atan2+0xe>
    80c0:	97 c1       	rjmp	.+814    	; 0x83f0 <__fp_nan>
    80c2:	4f c2       	rjmp	.+1182   	; 0x8562 <__fp_zero>

000080c4 <atan2>:
    80c4:	e9 2f       	mov	r30, r25
    80c6:	e0 78       	andi	r30, 0x80	; 128
    80c8:	13 d2       	rcall	.+1062   	; 0x84f0 <__fp_split3>
    80ca:	68 f3       	brcs	.-38     	; 0x80a6 <__addsf3x+0xa6>
    80cc:	09 2e       	mov	r0, r25
    80ce:	05 2a       	or	r0, r21
    80d0:	c1 f3       	breq	.-16     	; 0x80c2 <__addsf3x+0xc2>
    80d2:	26 17       	cp	r18, r22
    80d4:	37 07       	cpc	r19, r23
    80d6:	48 07       	cpc	r20, r24
    80d8:	59 07       	cpc	r21, r25
    80da:	38 f0       	brcs	.+14     	; 0x80ea <atan2+0x26>
    80dc:	0e 2e       	mov	r0, r30
    80de:	07 f8       	bld	r0, 7
    80e0:	e0 25       	eor	r30, r0
    80e2:	69 f0       	breq	.+26     	; 0x80fe <atan2+0x3a>
    80e4:	e0 25       	eor	r30, r0
    80e6:	e0 64       	ori	r30, 0x40	; 64
    80e8:	0a c0       	rjmp	.+20     	; 0x80fe <atan2+0x3a>
    80ea:	ef 63       	ori	r30, 0x3F	; 63
    80ec:	07 f8       	bld	r0, 7
    80ee:	00 94       	com	r0
    80f0:	07 fa       	bst	r0, 7
    80f2:	db 01       	movw	r26, r22
    80f4:	b9 01       	movw	r22, r18
    80f6:	9d 01       	movw	r18, r26
    80f8:	dc 01       	movw	r26, r24
    80fa:	ca 01       	movw	r24, r20
    80fc:	ad 01       	movw	r20, r26
    80fe:	ef 93       	push	r30
    8100:	4a d0       	rcall	.+148    	; 0x8196 <__divsf3_pse>
    8102:	d4 d1       	rcall	.+936    	; 0x84ac <__fp_round>
    8104:	0a d0       	rcall	.+20     	; 0x811a <atan>
    8106:	5f 91       	pop	r21
    8108:	55 23       	and	r21, r21
    810a:	31 f0       	breq	.+12     	; 0x8118 <atan2+0x54>
    810c:	2b ed       	ldi	r18, 0xDB	; 219
    810e:	3f e0       	ldi	r19, 0x0F	; 15
    8110:	49 e4       	ldi	r20, 0x49	; 73
    8112:	50 fd       	sbrc	r21, 0
    8114:	49 ec       	ldi	r20, 0xC9	; 201
    8116:	63 cf       	rjmp	.-314    	; 0x7fde <__addsf3>
    8118:	08 95       	ret

0000811a <atan>:
    811a:	df 93       	push	r29
    811c:	dd 27       	eor	r29, r29
    811e:	b9 2f       	mov	r27, r25
    8120:	bf 77       	andi	r27, 0x7F	; 127
    8122:	40 e8       	ldi	r20, 0x80	; 128
    8124:	5f e3       	ldi	r21, 0x3F	; 63
    8126:	16 16       	cp	r1, r22
    8128:	17 06       	cpc	r1, r23
    812a:	48 07       	cpc	r20, r24
    812c:	5b 07       	cpc	r21, r27
    812e:	10 f4       	brcc	.+4      	; 0x8134 <atan+0x1a>
    8130:	d9 2f       	mov	r29, r25
    8132:	22 d2       	rcall	.+1092   	; 0x8578 <inverse>
    8134:	9f 93       	push	r25
    8136:	8f 93       	push	r24
    8138:	7f 93       	push	r23
    813a:	6f 93       	push	r22
    813c:	cf d2       	rcall	.+1438   	; 0x86dc <square>
    813e:	e4 ee       	ldi	r30, 0xE4	; 228
    8140:	f0 e0       	ldi	r31, 0x00	; 0
    8142:	59 d1       	rcall	.+690    	; 0x83f6 <__fp_powser>
    8144:	b3 d1       	rcall	.+870    	; 0x84ac <__fp_round>
    8146:	2f 91       	pop	r18
    8148:	3f 91       	pop	r19
    814a:	4f 91       	pop	r20
    814c:	5f 91       	pop	r21
    814e:	27 d2       	rcall	.+1102   	; 0x859e <__mulsf3x>
    8150:	dd 23       	and	r29, r29
    8152:	49 f0       	breq	.+18     	; 0x8166 <atan+0x4c>
    8154:	90 58       	subi	r25, 0x80	; 128
    8156:	a2 ea       	ldi	r26, 0xA2	; 162
    8158:	2a ed       	ldi	r18, 0xDA	; 218
    815a:	3f e0       	ldi	r19, 0x0F	; 15
    815c:	49 ec       	ldi	r20, 0xC9	; 201
    815e:	5f e3       	ldi	r21, 0x3F	; 63
    8160:	d0 78       	andi	r29, 0x80	; 128
    8162:	5d 27       	eor	r21, r29
    8164:	4d df       	rcall	.-358    	; 0x8000 <__addsf3x>
    8166:	df 91       	pop	r29
    8168:	a1 c1       	rjmp	.+834    	; 0x84ac <__fp_round>

0000816a <__cmpsf2>:
    816a:	ef d0       	rcall	.+478    	; 0x834a <__fp_cmp>
    816c:	08 f4       	brcc	.+2      	; 0x8170 <__cmpsf2+0x6>
    816e:	81 e0       	ldi	r24, 0x01	; 1
    8170:	08 95       	ret

00008172 <cos>:
    8172:	75 d1       	rcall	.+746    	; 0x845e <__fp_rempio2>
    8174:	e3 95       	inc	r30
    8176:	ab c1       	rjmp	.+854    	; 0x84ce <__fp_sinus>

00008178 <__divsf3>:
    8178:	0c d0       	rcall	.+24     	; 0x8192 <__divsf3x>
    817a:	98 c1       	rjmp	.+816    	; 0x84ac <__fp_round>
    817c:	68 d1       	rcall	.+720    	; 0x844e <__fp_pscB>
    817e:	40 f0       	brcs	.+16     	; 0x8190 <__divsf3+0x18>
    8180:	5f d1       	rcall	.+702    	; 0x8440 <__fp_pscA>
    8182:	30 f0       	brcs	.+12     	; 0x8190 <__divsf3+0x18>
    8184:	21 f4       	brne	.+8      	; 0x818e <__divsf3+0x16>
    8186:	5f 3f       	cpi	r21, 0xFF	; 255
    8188:	19 f0       	breq	.+6      	; 0x8190 <__divsf3+0x18>
    818a:	03 c1       	rjmp	.+518    	; 0x8392 <__fp_inf>
    818c:	51 11       	cpse	r21, r1
    818e:	ea c1       	rjmp	.+980    	; 0x8564 <__fp_szero>
    8190:	2f c1       	rjmp	.+606    	; 0x83f0 <__fp_nan>

00008192 <__divsf3x>:
    8192:	ae d1       	rcall	.+860    	; 0x84f0 <__fp_split3>
    8194:	98 f3       	brcs	.-26     	; 0x817c <__divsf3+0x4>

00008196 <__divsf3_pse>:
    8196:	99 23       	and	r25, r25
    8198:	c9 f3       	breq	.-14     	; 0x818c <__divsf3+0x14>
    819a:	55 23       	and	r21, r21
    819c:	b1 f3       	breq	.-20     	; 0x818a <__divsf3+0x12>
    819e:	95 1b       	sub	r25, r21
    81a0:	55 0b       	sbc	r21, r21
    81a2:	bb 27       	eor	r27, r27
    81a4:	aa 27       	eor	r26, r26
    81a6:	62 17       	cp	r22, r18
    81a8:	73 07       	cpc	r23, r19
    81aa:	84 07       	cpc	r24, r20
    81ac:	38 f0       	brcs	.+14     	; 0x81bc <__divsf3_pse+0x26>
    81ae:	9f 5f       	subi	r25, 0xFF	; 255
    81b0:	5f 4f       	sbci	r21, 0xFF	; 255
    81b2:	22 0f       	add	r18, r18
    81b4:	33 1f       	adc	r19, r19
    81b6:	44 1f       	adc	r20, r20
    81b8:	aa 1f       	adc	r26, r26
    81ba:	a9 f3       	breq	.-22     	; 0x81a6 <__divsf3_pse+0x10>
    81bc:	33 d0       	rcall	.+102    	; 0x8224 <__divsf3_pse+0x8e>
    81be:	0e 2e       	mov	r0, r30
    81c0:	3a f0       	brmi	.+14     	; 0x81d0 <__divsf3_pse+0x3a>
    81c2:	e0 e8       	ldi	r30, 0x80	; 128
    81c4:	30 d0       	rcall	.+96     	; 0x8226 <__divsf3_pse+0x90>
    81c6:	91 50       	subi	r25, 0x01	; 1
    81c8:	50 40       	sbci	r21, 0x00	; 0
    81ca:	e6 95       	lsr	r30
    81cc:	00 1c       	adc	r0, r0
    81ce:	ca f7       	brpl	.-14     	; 0x81c2 <__divsf3_pse+0x2c>
    81d0:	29 d0       	rcall	.+82     	; 0x8224 <__divsf3_pse+0x8e>
    81d2:	fe 2f       	mov	r31, r30
    81d4:	27 d0       	rcall	.+78     	; 0x8224 <__divsf3_pse+0x8e>
    81d6:	66 0f       	add	r22, r22
    81d8:	77 1f       	adc	r23, r23
    81da:	88 1f       	adc	r24, r24
    81dc:	bb 1f       	adc	r27, r27
    81de:	26 17       	cp	r18, r22
    81e0:	37 07       	cpc	r19, r23
    81e2:	48 07       	cpc	r20, r24
    81e4:	ab 07       	cpc	r26, r27
    81e6:	b0 e8       	ldi	r27, 0x80	; 128
    81e8:	09 f0       	breq	.+2      	; 0x81ec <__divsf3_pse+0x56>
    81ea:	bb 0b       	sbc	r27, r27
    81ec:	80 2d       	mov	r24, r0
    81ee:	bf 01       	movw	r22, r30
    81f0:	ff 27       	eor	r31, r31
    81f2:	93 58       	subi	r25, 0x83	; 131
    81f4:	5f 4f       	sbci	r21, 0xFF	; 255
    81f6:	2a f0       	brmi	.+10     	; 0x8202 <__divsf3_pse+0x6c>
    81f8:	9e 3f       	cpi	r25, 0xFE	; 254
    81fa:	51 05       	cpc	r21, r1
    81fc:	68 f0       	brcs	.+26     	; 0x8218 <__divsf3_pse+0x82>
    81fe:	c9 c0       	rjmp	.+402    	; 0x8392 <__fp_inf>
    8200:	b1 c1       	rjmp	.+866    	; 0x8564 <__fp_szero>
    8202:	5f 3f       	cpi	r21, 0xFF	; 255
    8204:	ec f3       	brlt	.-6      	; 0x8200 <__divsf3_pse+0x6a>
    8206:	98 3e       	cpi	r25, 0xE8	; 232
    8208:	dc f3       	brlt	.-10     	; 0x8200 <__divsf3_pse+0x6a>
    820a:	86 95       	lsr	r24
    820c:	77 95       	ror	r23
    820e:	67 95       	ror	r22
    8210:	b7 95       	ror	r27
    8212:	f7 95       	ror	r31
    8214:	9f 5f       	subi	r25, 0xFF	; 255
    8216:	c9 f7       	brne	.-14     	; 0x820a <__divsf3_pse+0x74>
    8218:	88 0f       	add	r24, r24
    821a:	91 1d       	adc	r25, r1
    821c:	96 95       	lsr	r25
    821e:	87 95       	ror	r24
    8220:	97 f9       	bld	r25, 7
    8222:	08 95       	ret
    8224:	e1 e0       	ldi	r30, 0x01	; 1
    8226:	66 0f       	add	r22, r22
    8228:	77 1f       	adc	r23, r23
    822a:	88 1f       	adc	r24, r24
    822c:	bb 1f       	adc	r27, r27
    822e:	62 17       	cp	r22, r18
    8230:	73 07       	cpc	r23, r19
    8232:	84 07       	cpc	r24, r20
    8234:	ba 07       	cpc	r27, r26
    8236:	20 f0       	brcs	.+8      	; 0x8240 <__divsf3_pse+0xaa>
    8238:	62 1b       	sub	r22, r18
    823a:	73 0b       	sbc	r23, r19
    823c:	84 0b       	sbc	r24, r20
    823e:	ba 0b       	sbc	r27, r26
    8240:	ee 1f       	adc	r30, r30
    8242:	88 f7       	brcc	.-30     	; 0x8226 <__divsf3_pse+0x90>
    8244:	e0 95       	com	r30
    8246:	08 95       	ret

00008248 <__fixsfsi>:
    8248:	04 d0       	rcall	.+8      	; 0x8252 <__fixunssfsi>
    824a:	68 94       	set
    824c:	b1 11       	cpse	r27, r1
    824e:	8a c1       	rjmp	.+788    	; 0x8564 <__fp_szero>
    8250:	08 95       	ret

00008252 <__fixunssfsi>:
    8252:	56 d1       	rcall	.+684    	; 0x8500 <__fp_splitA>
    8254:	88 f0       	brcs	.+34     	; 0x8278 <__fixunssfsi+0x26>
    8256:	9f 57       	subi	r25, 0x7F	; 127
    8258:	90 f0       	brcs	.+36     	; 0x827e <__fixunssfsi+0x2c>
    825a:	b9 2f       	mov	r27, r25
    825c:	99 27       	eor	r25, r25
    825e:	b7 51       	subi	r27, 0x17	; 23
    8260:	a0 f0       	brcs	.+40     	; 0x828a <__fixunssfsi+0x38>
    8262:	d1 f0       	breq	.+52     	; 0x8298 <__fixunssfsi+0x46>
    8264:	66 0f       	add	r22, r22
    8266:	77 1f       	adc	r23, r23
    8268:	88 1f       	adc	r24, r24
    826a:	99 1f       	adc	r25, r25
    826c:	1a f0       	brmi	.+6      	; 0x8274 <__fixunssfsi+0x22>
    826e:	ba 95       	dec	r27
    8270:	c9 f7       	brne	.-14     	; 0x8264 <__fixunssfsi+0x12>
    8272:	12 c0       	rjmp	.+36     	; 0x8298 <__fixunssfsi+0x46>
    8274:	b1 30       	cpi	r27, 0x01	; 1
    8276:	81 f0       	breq	.+32     	; 0x8298 <__fixunssfsi+0x46>
    8278:	74 d1       	rcall	.+744    	; 0x8562 <__fp_zero>
    827a:	b1 e0       	ldi	r27, 0x01	; 1
    827c:	08 95       	ret
    827e:	71 c1       	rjmp	.+738    	; 0x8562 <__fp_zero>
    8280:	67 2f       	mov	r22, r23
    8282:	78 2f       	mov	r23, r24
    8284:	88 27       	eor	r24, r24
    8286:	b8 5f       	subi	r27, 0xF8	; 248
    8288:	39 f0       	breq	.+14     	; 0x8298 <__fixunssfsi+0x46>
    828a:	b9 3f       	cpi	r27, 0xF9	; 249
    828c:	cc f3       	brlt	.-14     	; 0x8280 <__fixunssfsi+0x2e>
    828e:	86 95       	lsr	r24
    8290:	77 95       	ror	r23
    8292:	67 95       	ror	r22
    8294:	b3 95       	inc	r27
    8296:	d9 f7       	brne	.-10     	; 0x828e <__fixunssfsi+0x3c>
    8298:	3e f4       	brtc	.+14     	; 0x82a8 <__fixunssfsi+0x56>
    829a:	90 95       	com	r25
    829c:	80 95       	com	r24
    829e:	70 95       	com	r23
    82a0:	61 95       	neg	r22
    82a2:	7f 4f       	sbci	r23, 0xFF	; 255
    82a4:	8f 4f       	sbci	r24, 0xFF	; 255
    82a6:	9f 4f       	sbci	r25, 0xFF	; 255
    82a8:	08 95       	ret

000082aa <__floatunsisf>:
    82aa:	e8 94       	clt
    82ac:	09 c0       	rjmp	.+18     	; 0x82c0 <__floatsisf+0x12>

000082ae <__floatsisf>:
    82ae:	97 fb       	bst	r25, 7
    82b0:	3e f4       	brtc	.+14     	; 0x82c0 <__floatsisf+0x12>
    82b2:	90 95       	com	r25
    82b4:	80 95       	com	r24
    82b6:	70 95       	com	r23
    82b8:	61 95       	neg	r22
    82ba:	7f 4f       	sbci	r23, 0xFF	; 255
    82bc:	8f 4f       	sbci	r24, 0xFF	; 255
    82be:	9f 4f       	sbci	r25, 0xFF	; 255
    82c0:	99 23       	and	r25, r25
    82c2:	a9 f0       	breq	.+42     	; 0x82ee <__floatsisf+0x40>
    82c4:	f9 2f       	mov	r31, r25
    82c6:	96 e9       	ldi	r25, 0x96	; 150
    82c8:	bb 27       	eor	r27, r27
    82ca:	93 95       	inc	r25
    82cc:	f6 95       	lsr	r31
    82ce:	87 95       	ror	r24
    82d0:	77 95       	ror	r23
    82d2:	67 95       	ror	r22
    82d4:	b7 95       	ror	r27
    82d6:	f1 11       	cpse	r31, r1
    82d8:	f8 cf       	rjmp	.-16     	; 0x82ca <__floatsisf+0x1c>
    82da:	fa f4       	brpl	.+62     	; 0x831a <__floatsisf+0x6c>
    82dc:	bb 0f       	add	r27, r27
    82de:	11 f4       	brne	.+4      	; 0x82e4 <__floatsisf+0x36>
    82e0:	60 ff       	sbrs	r22, 0
    82e2:	1b c0       	rjmp	.+54     	; 0x831a <__floatsisf+0x6c>
    82e4:	6f 5f       	subi	r22, 0xFF	; 255
    82e6:	7f 4f       	sbci	r23, 0xFF	; 255
    82e8:	8f 4f       	sbci	r24, 0xFF	; 255
    82ea:	9f 4f       	sbci	r25, 0xFF	; 255
    82ec:	16 c0       	rjmp	.+44     	; 0x831a <__floatsisf+0x6c>
    82ee:	88 23       	and	r24, r24
    82f0:	11 f0       	breq	.+4      	; 0x82f6 <__floatsisf+0x48>
    82f2:	96 e9       	ldi	r25, 0x96	; 150
    82f4:	11 c0       	rjmp	.+34     	; 0x8318 <__floatsisf+0x6a>
    82f6:	77 23       	and	r23, r23
    82f8:	21 f0       	breq	.+8      	; 0x8302 <__floatsisf+0x54>
    82fa:	9e e8       	ldi	r25, 0x8E	; 142
    82fc:	87 2f       	mov	r24, r23
    82fe:	76 2f       	mov	r23, r22
    8300:	05 c0       	rjmp	.+10     	; 0x830c <__floatsisf+0x5e>
    8302:	66 23       	and	r22, r22
    8304:	71 f0       	breq	.+28     	; 0x8322 <__floatsisf+0x74>
    8306:	96 e8       	ldi	r25, 0x86	; 134
    8308:	86 2f       	mov	r24, r22
    830a:	70 e0       	ldi	r23, 0x00	; 0
    830c:	60 e0       	ldi	r22, 0x00	; 0
    830e:	2a f0       	brmi	.+10     	; 0x831a <__floatsisf+0x6c>
    8310:	9a 95       	dec	r25
    8312:	66 0f       	add	r22, r22
    8314:	77 1f       	adc	r23, r23
    8316:	88 1f       	adc	r24, r24
    8318:	da f7       	brpl	.-10     	; 0x8310 <__floatsisf+0x62>
    831a:	88 0f       	add	r24, r24
    831c:	96 95       	lsr	r25
    831e:	87 95       	ror	r24
    8320:	97 f9       	bld	r25, 7
    8322:	08 95       	ret

00008324 <floor>:
    8324:	07 d1       	rcall	.+526    	; 0x8534 <__fp_trunc>
    8326:	80 f0       	brcs	.+32     	; 0x8348 <floor+0x24>
    8328:	9f 37       	cpi	r25, 0x7F	; 127
    832a:	40 f4       	brcc	.+16     	; 0x833c <floor+0x18>
    832c:	91 11       	cpse	r25, r1
    832e:	0e f0       	brts	.+2      	; 0x8332 <floor+0xe>
    8330:	19 c1       	rjmp	.+562    	; 0x8564 <__fp_szero>
    8332:	60 e0       	ldi	r22, 0x00	; 0
    8334:	70 e0       	ldi	r23, 0x00	; 0
    8336:	80 e8       	ldi	r24, 0x80	; 128
    8338:	9f eb       	ldi	r25, 0xBF	; 191
    833a:	08 95       	ret
    833c:	26 f4       	brtc	.+8      	; 0x8346 <floor+0x22>
    833e:	1b 16       	cp	r1, r27
    8340:	61 1d       	adc	r22, r1
    8342:	71 1d       	adc	r23, r1
    8344:	81 1d       	adc	r24, r1
    8346:	2b c0       	rjmp	.+86     	; 0x839e <__fp_mintl>
    8348:	45 c0       	rjmp	.+138    	; 0x83d4 <__fp_mpack>

0000834a <__fp_cmp>:
    834a:	99 0f       	add	r25, r25
    834c:	00 08       	sbc	r0, r0
    834e:	55 0f       	add	r21, r21
    8350:	aa 0b       	sbc	r26, r26
    8352:	e0 e8       	ldi	r30, 0x80	; 128
    8354:	fe ef       	ldi	r31, 0xFE	; 254
    8356:	16 16       	cp	r1, r22
    8358:	17 06       	cpc	r1, r23
    835a:	e8 07       	cpc	r30, r24
    835c:	f9 07       	cpc	r31, r25
    835e:	c0 f0       	brcs	.+48     	; 0x8390 <__fp_cmp+0x46>
    8360:	12 16       	cp	r1, r18
    8362:	13 06       	cpc	r1, r19
    8364:	e4 07       	cpc	r30, r20
    8366:	f5 07       	cpc	r31, r21
    8368:	98 f0       	brcs	.+38     	; 0x8390 <__fp_cmp+0x46>
    836a:	62 1b       	sub	r22, r18
    836c:	73 0b       	sbc	r23, r19
    836e:	84 0b       	sbc	r24, r20
    8370:	95 0b       	sbc	r25, r21
    8372:	39 f4       	brne	.+14     	; 0x8382 <__fp_cmp+0x38>
    8374:	0a 26       	eor	r0, r26
    8376:	61 f0       	breq	.+24     	; 0x8390 <__fp_cmp+0x46>
    8378:	23 2b       	or	r18, r19
    837a:	24 2b       	or	r18, r20
    837c:	25 2b       	or	r18, r21
    837e:	21 f4       	brne	.+8      	; 0x8388 <__fp_cmp+0x3e>
    8380:	08 95       	ret
    8382:	0a 26       	eor	r0, r26
    8384:	09 f4       	brne	.+2      	; 0x8388 <__fp_cmp+0x3e>
    8386:	a1 40       	sbci	r26, 0x01	; 1
    8388:	a6 95       	lsr	r26
    838a:	8f ef       	ldi	r24, 0xFF	; 255
    838c:	81 1d       	adc	r24, r1
    838e:	81 1d       	adc	r24, r1
    8390:	08 95       	ret

00008392 <__fp_inf>:
    8392:	97 f9       	bld	r25, 7
    8394:	9f 67       	ori	r25, 0x7F	; 127
    8396:	80 e8       	ldi	r24, 0x80	; 128
    8398:	70 e0       	ldi	r23, 0x00	; 0
    839a:	60 e0       	ldi	r22, 0x00	; 0
    839c:	08 95       	ret

0000839e <__fp_mintl>:
    839e:	88 23       	and	r24, r24
    83a0:	71 f4       	brne	.+28     	; 0x83be <__fp_mintl+0x20>
    83a2:	77 23       	and	r23, r23
    83a4:	21 f0       	breq	.+8      	; 0x83ae <__fp_mintl+0x10>
    83a6:	98 50       	subi	r25, 0x08	; 8
    83a8:	87 2b       	or	r24, r23
    83aa:	76 2f       	mov	r23, r22
    83ac:	07 c0       	rjmp	.+14     	; 0x83bc <__fp_mintl+0x1e>
    83ae:	66 23       	and	r22, r22
    83b0:	11 f4       	brne	.+4      	; 0x83b6 <__fp_mintl+0x18>
    83b2:	99 27       	eor	r25, r25
    83b4:	0d c0       	rjmp	.+26     	; 0x83d0 <__fp_mintl+0x32>
    83b6:	90 51       	subi	r25, 0x10	; 16
    83b8:	86 2b       	or	r24, r22
    83ba:	70 e0       	ldi	r23, 0x00	; 0
    83bc:	60 e0       	ldi	r22, 0x00	; 0
    83be:	2a f0       	brmi	.+10     	; 0x83ca <__fp_mintl+0x2c>
    83c0:	9a 95       	dec	r25
    83c2:	66 0f       	add	r22, r22
    83c4:	77 1f       	adc	r23, r23
    83c6:	88 1f       	adc	r24, r24
    83c8:	da f7       	brpl	.-10     	; 0x83c0 <__fp_mintl+0x22>
    83ca:	88 0f       	add	r24, r24
    83cc:	96 95       	lsr	r25
    83ce:	87 95       	ror	r24
    83d0:	97 f9       	bld	r25, 7
    83d2:	08 95       	ret

000083d4 <__fp_mpack>:
    83d4:	9f 3f       	cpi	r25, 0xFF	; 255
    83d6:	31 f0       	breq	.+12     	; 0x83e4 <__fp_mpack_finite+0xc>

000083d8 <__fp_mpack_finite>:
    83d8:	91 50       	subi	r25, 0x01	; 1
    83da:	20 f4       	brcc	.+8      	; 0x83e4 <__fp_mpack_finite+0xc>
    83dc:	87 95       	ror	r24
    83de:	77 95       	ror	r23
    83e0:	67 95       	ror	r22
    83e2:	b7 95       	ror	r27
    83e4:	88 0f       	add	r24, r24
    83e6:	91 1d       	adc	r25, r1
    83e8:	96 95       	lsr	r25
    83ea:	87 95       	ror	r24
    83ec:	97 f9       	bld	r25, 7
    83ee:	08 95       	ret

000083f0 <__fp_nan>:
    83f0:	9f ef       	ldi	r25, 0xFF	; 255
    83f2:	80 ec       	ldi	r24, 0xC0	; 192
    83f4:	08 95       	ret

000083f6 <__fp_powser>:
    83f6:	df 93       	push	r29
    83f8:	cf 93       	push	r28
    83fa:	1f 93       	push	r17
    83fc:	0f 93       	push	r16
    83fe:	ff 92       	push	r15
    8400:	ef 92       	push	r14
    8402:	df 92       	push	r13
    8404:	7b 01       	movw	r14, r22
    8406:	8c 01       	movw	r16, r24
    8408:	68 94       	set
    840a:	05 c0       	rjmp	.+10     	; 0x8416 <__fp_powser+0x20>
    840c:	da 2e       	mov	r13, r26
    840e:	ef 01       	movw	r28, r30
    8410:	c6 d0       	rcall	.+396    	; 0x859e <__mulsf3x>
    8412:	fe 01       	movw	r30, r28
    8414:	e8 94       	clt
    8416:	a5 91       	lpm	r26, Z+
    8418:	25 91       	lpm	r18, Z+
    841a:	35 91       	lpm	r19, Z+
    841c:	45 91       	lpm	r20, Z+
    841e:	55 91       	lpm	r21, Z+
    8420:	ae f3       	brts	.-22     	; 0x840c <__fp_powser+0x16>
    8422:	ef 01       	movw	r28, r30
    8424:	ed dd       	rcall	.-1062   	; 0x8000 <__addsf3x>
    8426:	fe 01       	movw	r30, r28
    8428:	97 01       	movw	r18, r14
    842a:	a8 01       	movw	r20, r16
    842c:	da 94       	dec	r13
    842e:	79 f7       	brne	.-34     	; 0x840e <__fp_powser+0x18>
    8430:	df 90       	pop	r13
    8432:	ef 90       	pop	r14
    8434:	ff 90       	pop	r15
    8436:	0f 91       	pop	r16
    8438:	1f 91       	pop	r17
    843a:	cf 91       	pop	r28
    843c:	df 91       	pop	r29
    843e:	08 95       	ret

00008440 <__fp_pscA>:
    8440:	00 24       	eor	r0, r0
    8442:	0a 94       	dec	r0
    8444:	16 16       	cp	r1, r22
    8446:	17 06       	cpc	r1, r23
    8448:	18 06       	cpc	r1, r24
    844a:	09 06       	cpc	r0, r25
    844c:	08 95       	ret

0000844e <__fp_pscB>:
    844e:	00 24       	eor	r0, r0
    8450:	0a 94       	dec	r0
    8452:	12 16       	cp	r1, r18
    8454:	13 06       	cpc	r1, r19
    8456:	14 06       	cpc	r1, r20
    8458:	05 06       	cpc	r0, r21
    845a:	08 95       	ret
    845c:	c9 cf       	rjmp	.-110    	; 0x83f0 <__fp_nan>

0000845e <__fp_rempio2>:
    845e:	50 d0       	rcall	.+160    	; 0x8500 <__fp_splitA>
    8460:	e8 f3       	brcs	.-6      	; 0x845c <__fp_pscB+0xe>
    8462:	e8 94       	clt
    8464:	e0 e0       	ldi	r30, 0x00	; 0
    8466:	bb 27       	eor	r27, r27
    8468:	9f 57       	subi	r25, 0x7F	; 127
    846a:	f0 f0       	brcs	.+60     	; 0x84a8 <__fp_rempio2+0x4a>
    846c:	2a ed       	ldi	r18, 0xDA	; 218
    846e:	3f e0       	ldi	r19, 0x0F	; 15
    8470:	49 ec       	ldi	r20, 0xC9	; 201
    8472:	06 c0       	rjmp	.+12     	; 0x8480 <__fp_rempio2+0x22>
    8474:	ee 0f       	add	r30, r30
    8476:	bb 0f       	add	r27, r27
    8478:	66 1f       	adc	r22, r22
    847a:	77 1f       	adc	r23, r23
    847c:	88 1f       	adc	r24, r24
    847e:	28 f0       	brcs	.+10     	; 0x848a <__fp_rempio2+0x2c>
    8480:	b2 3a       	cpi	r27, 0xA2	; 162
    8482:	62 07       	cpc	r22, r18
    8484:	73 07       	cpc	r23, r19
    8486:	84 07       	cpc	r24, r20
    8488:	28 f0       	brcs	.+10     	; 0x8494 <__fp_rempio2+0x36>
    848a:	b2 5a       	subi	r27, 0xA2	; 162
    848c:	62 0b       	sbc	r22, r18
    848e:	73 0b       	sbc	r23, r19
    8490:	84 0b       	sbc	r24, r20
    8492:	e3 95       	inc	r30
    8494:	9a 95       	dec	r25
    8496:	72 f7       	brpl	.-36     	; 0x8474 <__fp_rempio2+0x16>
    8498:	80 38       	cpi	r24, 0x80	; 128
    849a:	30 f4       	brcc	.+12     	; 0x84a8 <__fp_rempio2+0x4a>
    849c:	9a 95       	dec	r25
    849e:	bb 0f       	add	r27, r27
    84a0:	66 1f       	adc	r22, r22
    84a2:	77 1f       	adc	r23, r23
    84a4:	88 1f       	adc	r24, r24
    84a6:	d2 f7       	brpl	.-12     	; 0x849c <__fp_rempio2+0x3e>
    84a8:	90 48       	sbci	r25, 0x80	; 128
    84aa:	96 cf       	rjmp	.-212    	; 0x83d8 <__fp_mpack_finite>

000084ac <__fp_round>:
    84ac:	09 2e       	mov	r0, r25
    84ae:	03 94       	inc	r0
    84b0:	00 0c       	add	r0, r0
    84b2:	11 f4       	brne	.+4      	; 0x84b8 <__fp_round+0xc>
    84b4:	88 23       	and	r24, r24
    84b6:	52 f0       	brmi	.+20     	; 0x84cc <__fp_round+0x20>
    84b8:	bb 0f       	add	r27, r27
    84ba:	40 f4       	brcc	.+16     	; 0x84cc <__fp_round+0x20>
    84bc:	bf 2b       	or	r27, r31
    84be:	11 f4       	brne	.+4      	; 0x84c4 <__fp_round+0x18>
    84c0:	60 ff       	sbrs	r22, 0
    84c2:	04 c0       	rjmp	.+8      	; 0x84cc <__fp_round+0x20>
    84c4:	6f 5f       	subi	r22, 0xFF	; 255
    84c6:	7f 4f       	sbci	r23, 0xFF	; 255
    84c8:	8f 4f       	sbci	r24, 0xFF	; 255
    84ca:	9f 4f       	sbci	r25, 0xFF	; 255
    84cc:	08 95       	ret

000084ce <__fp_sinus>:
    84ce:	ef 93       	push	r30
    84d0:	e0 ff       	sbrs	r30, 0
    84d2:	06 c0       	rjmp	.+12     	; 0x84e0 <__fp_sinus+0x12>
    84d4:	a2 ea       	ldi	r26, 0xA2	; 162
    84d6:	2a ed       	ldi	r18, 0xDA	; 218
    84d8:	3f e0       	ldi	r19, 0x0F	; 15
    84da:	49 ec       	ldi	r20, 0xC9	; 201
    84dc:	5f eb       	ldi	r21, 0xBF	; 191
    84de:	90 dd       	rcall	.-1248   	; 0x8000 <__addsf3x>
    84e0:	e5 df       	rcall	.-54     	; 0x84ac <__fp_round>
    84e2:	0f 90       	pop	r0
    84e4:	03 94       	inc	r0
    84e6:	01 fc       	sbrc	r0, 1
    84e8:	90 58       	subi	r25, 0x80	; 128
    84ea:	e1 e1       	ldi	r30, 0x11	; 17
    84ec:	f1 e0       	ldi	r31, 0x01	; 1
    84ee:	04 c1       	rjmp	.+520    	; 0x86f8 <__fp_powsodd>

000084f0 <__fp_split3>:
    84f0:	57 fd       	sbrc	r21, 7
    84f2:	90 58       	subi	r25, 0x80	; 128
    84f4:	44 0f       	add	r20, r20
    84f6:	55 1f       	adc	r21, r21
    84f8:	59 f0       	breq	.+22     	; 0x8510 <__fp_splitA+0x10>
    84fa:	5f 3f       	cpi	r21, 0xFF	; 255
    84fc:	71 f0       	breq	.+28     	; 0x851a <__fp_splitA+0x1a>
    84fe:	47 95       	ror	r20

00008500 <__fp_splitA>:
    8500:	88 0f       	add	r24, r24
    8502:	97 fb       	bst	r25, 7
    8504:	99 1f       	adc	r25, r25
    8506:	61 f0       	breq	.+24     	; 0x8520 <__fp_splitA+0x20>
    8508:	9f 3f       	cpi	r25, 0xFF	; 255
    850a:	79 f0       	breq	.+30     	; 0x852a <__fp_splitA+0x2a>
    850c:	87 95       	ror	r24
    850e:	08 95       	ret
    8510:	12 16       	cp	r1, r18
    8512:	13 06       	cpc	r1, r19
    8514:	14 06       	cpc	r1, r20
    8516:	55 1f       	adc	r21, r21
    8518:	f2 cf       	rjmp	.-28     	; 0x84fe <__fp_split3+0xe>
    851a:	46 95       	lsr	r20
    851c:	f1 df       	rcall	.-30     	; 0x8500 <__fp_splitA>
    851e:	08 c0       	rjmp	.+16     	; 0x8530 <__fp_splitA+0x30>
    8520:	16 16       	cp	r1, r22
    8522:	17 06       	cpc	r1, r23
    8524:	18 06       	cpc	r1, r24
    8526:	99 1f       	adc	r25, r25
    8528:	f1 cf       	rjmp	.-30     	; 0x850c <__fp_splitA+0xc>
    852a:	86 95       	lsr	r24
    852c:	71 05       	cpc	r23, r1
    852e:	61 05       	cpc	r22, r1
    8530:	08 94       	sec
    8532:	08 95       	ret

00008534 <__fp_trunc>:
    8534:	e5 df       	rcall	.-54     	; 0x8500 <__fp_splitA>
    8536:	a0 f0       	brcs	.+40     	; 0x8560 <__fp_trunc+0x2c>
    8538:	be e7       	ldi	r27, 0x7E	; 126
    853a:	b9 17       	cp	r27, r25
    853c:	88 f4       	brcc	.+34     	; 0x8560 <__fp_trunc+0x2c>
    853e:	bb 27       	eor	r27, r27
    8540:	9f 38       	cpi	r25, 0x8F	; 143
    8542:	60 f4       	brcc	.+24     	; 0x855c <__fp_trunc+0x28>
    8544:	16 16       	cp	r1, r22
    8546:	b1 1d       	adc	r27, r1
    8548:	67 2f       	mov	r22, r23
    854a:	78 2f       	mov	r23, r24
    854c:	88 27       	eor	r24, r24
    854e:	98 5f       	subi	r25, 0xF8	; 248
    8550:	f7 cf       	rjmp	.-18     	; 0x8540 <__fp_trunc+0xc>
    8552:	86 95       	lsr	r24
    8554:	77 95       	ror	r23
    8556:	67 95       	ror	r22
    8558:	b1 1d       	adc	r27, r1
    855a:	93 95       	inc	r25
    855c:	96 39       	cpi	r25, 0x96	; 150
    855e:	c8 f3       	brcs	.-14     	; 0x8552 <__fp_trunc+0x1e>
    8560:	08 95       	ret

00008562 <__fp_zero>:
    8562:	e8 94       	clt

00008564 <__fp_szero>:
    8564:	bb 27       	eor	r27, r27
    8566:	66 27       	eor	r22, r22
    8568:	77 27       	eor	r23, r23
    856a:	cb 01       	movw	r24, r22
    856c:	97 f9       	bld	r25, 7
    856e:	08 95       	ret

00008570 <__gesf2>:
    8570:	ec de       	rcall	.-552    	; 0x834a <__fp_cmp>
    8572:	08 f4       	brcc	.+2      	; 0x8576 <__gesf2+0x6>
    8574:	8f ef       	ldi	r24, 0xFF	; 255
    8576:	08 95       	ret

00008578 <inverse>:
    8578:	9b 01       	movw	r18, r22
    857a:	ac 01       	movw	r20, r24
    857c:	60 e0       	ldi	r22, 0x00	; 0
    857e:	70 e0       	ldi	r23, 0x00	; 0
    8580:	80 e8       	ldi	r24, 0x80	; 128
    8582:	9f e3       	ldi	r25, 0x3F	; 63
    8584:	f9 cd       	rjmp	.-1038   	; 0x8178 <__divsf3>

00008586 <__mulsf3>:
    8586:	0b d0       	rcall	.+22     	; 0x859e <__mulsf3x>
    8588:	91 cf       	rjmp	.-222    	; 0x84ac <__fp_round>
    858a:	5a df       	rcall	.-332    	; 0x8440 <__fp_pscA>
    858c:	28 f0       	brcs	.+10     	; 0x8598 <__mulsf3+0x12>
    858e:	5f df       	rcall	.-322    	; 0x844e <__fp_pscB>
    8590:	18 f0       	brcs	.+6      	; 0x8598 <__mulsf3+0x12>
    8592:	95 23       	and	r25, r21
    8594:	09 f0       	breq	.+2      	; 0x8598 <__mulsf3+0x12>
    8596:	fd ce       	rjmp	.-518    	; 0x8392 <__fp_inf>
    8598:	2b cf       	rjmp	.-426    	; 0x83f0 <__fp_nan>
    859a:	11 24       	eor	r1, r1
    859c:	e3 cf       	rjmp	.-58     	; 0x8564 <__fp_szero>

0000859e <__mulsf3x>:
    859e:	a8 df       	rcall	.-176    	; 0x84f0 <__fp_split3>
    85a0:	a0 f3       	brcs	.-24     	; 0x858a <__mulsf3+0x4>

000085a2 <__mulsf3_pse>:
    85a2:	95 9f       	mul	r25, r21
    85a4:	d1 f3       	breq	.-12     	; 0x859a <__mulsf3+0x14>
    85a6:	95 0f       	add	r25, r21
    85a8:	50 e0       	ldi	r21, 0x00	; 0
    85aa:	55 1f       	adc	r21, r21
    85ac:	62 9f       	mul	r22, r18
    85ae:	f0 01       	movw	r30, r0
    85b0:	72 9f       	mul	r23, r18
    85b2:	bb 27       	eor	r27, r27
    85b4:	f0 0d       	add	r31, r0
    85b6:	b1 1d       	adc	r27, r1
    85b8:	63 9f       	mul	r22, r19
    85ba:	aa 27       	eor	r26, r26
    85bc:	f0 0d       	add	r31, r0
    85be:	b1 1d       	adc	r27, r1
    85c0:	aa 1f       	adc	r26, r26
    85c2:	64 9f       	mul	r22, r20
    85c4:	66 27       	eor	r22, r22
    85c6:	b0 0d       	add	r27, r0
    85c8:	a1 1d       	adc	r26, r1
    85ca:	66 1f       	adc	r22, r22
    85cc:	82 9f       	mul	r24, r18
    85ce:	22 27       	eor	r18, r18
    85d0:	b0 0d       	add	r27, r0
    85d2:	a1 1d       	adc	r26, r1
    85d4:	62 1f       	adc	r22, r18
    85d6:	73 9f       	mul	r23, r19
    85d8:	b0 0d       	add	r27, r0
    85da:	a1 1d       	adc	r26, r1
    85dc:	62 1f       	adc	r22, r18
    85de:	83 9f       	mul	r24, r19
    85e0:	a0 0d       	add	r26, r0
    85e2:	61 1d       	adc	r22, r1
    85e4:	22 1f       	adc	r18, r18
    85e6:	74 9f       	mul	r23, r20
    85e8:	33 27       	eor	r19, r19
    85ea:	a0 0d       	add	r26, r0
    85ec:	61 1d       	adc	r22, r1
    85ee:	23 1f       	adc	r18, r19
    85f0:	84 9f       	mul	r24, r20
    85f2:	60 0d       	add	r22, r0
    85f4:	21 1d       	adc	r18, r1
    85f6:	82 2f       	mov	r24, r18
    85f8:	76 2f       	mov	r23, r22
    85fa:	6a 2f       	mov	r22, r26
    85fc:	11 24       	eor	r1, r1
    85fe:	9f 57       	subi	r25, 0x7F	; 127
    8600:	50 40       	sbci	r21, 0x00	; 0
    8602:	8a f0       	brmi	.+34     	; 0x8626 <__mulsf3_pse+0x84>
    8604:	e1 f0       	breq	.+56     	; 0x863e <__mulsf3_pse+0x9c>
    8606:	88 23       	and	r24, r24
    8608:	4a f0       	brmi	.+18     	; 0x861c <__mulsf3_pse+0x7a>
    860a:	ee 0f       	add	r30, r30
    860c:	ff 1f       	adc	r31, r31
    860e:	bb 1f       	adc	r27, r27
    8610:	66 1f       	adc	r22, r22
    8612:	77 1f       	adc	r23, r23
    8614:	88 1f       	adc	r24, r24
    8616:	91 50       	subi	r25, 0x01	; 1
    8618:	50 40       	sbci	r21, 0x00	; 0
    861a:	a9 f7       	brne	.-22     	; 0x8606 <__mulsf3_pse+0x64>
    861c:	9e 3f       	cpi	r25, 0xFE	; 254
    861e:	51 05       	cpc	r21, r1
    8620:	70 f0       	brcs	.+28     	; 0x863e <__mulsf3_pse+0x9c>
    8622:	b7 ce       	rjmp	.-658    	; 0x8392 <__fp_inf>
    8624:	9f cf       	rjmp	.-194    	; 0x8564 <__fp_szero>
    8626:	5f 3f       	cpi	r21, 0xFF	; 255
    8628:	ec f3       	brlt	.-6      	; 0x8624 <__mulsf3_pse+0x82>
    862a:	98 3e       	cpi	r25, 0xE8	; 232
    862c:	dc f3       	brlt	.-10     	; 0x8624 <__mulsf3_pse+0x82>
    862e:	86 95       	lsr	r24
    8630:	77 95       	ror	r23
    8632:	67 95       	ror	r22
    8634:	b7 95       	ror	r27
    8636:	f7 95       	ror	r31
    8638:	e7 95       	ror	r30
    863a:	9f 5f       	subi	r25, 0xFF	; 255
    863c:	c1 f7       	brne	.-16     	; 0x862e <__mulsf3_pse+0x8c>
    863e:	fe 2b       	or	r31, r30
    8640:	88 0f       	add	r24, r24
    8642:	91 1d       	adc	r25, r1
    8644:	96 95       	lsr	r25
    8646:	87 95       	ror	r24
    8648:	97 f9       	bld	r25, 7
    864a:	08 95       	ret

0000864c <sin>:
    864c:	9f 93       	push	r25
    864e:	07 df       	rcall	.-498    	; 0x845e <__fp_rempio2>
    8650:	0f 90       	pop	r0
    8652:	07 fc       	sbrc	r0, 7
    8654:	ee 5f       	subi	r30, 0xFE	; 254
    8656:	3b cf       	rjmp	.-394    	; 0x84ce <__fp_sinus>
    8658:	11 f4       	brne	.+4      	; 0x865e <sin+0x12>
    865a:	0e f4       	brtc	.+2      	; 0x865e <sin+0x12>
    865c:	c9 ce       	rjmp	.-622    	; 0x83f0 <__fp_nan>
    865e:	ba ce       	rjmp	.-652    	; 0x83d4 <__fp_mpack>

00008660 <sqrt>:
    8660:	4f df       	rcall	.-354    	; 0x8500 <__fp_splitA>
    8662:	d0 f3       	brcs	.-12     	; 0x8658 <sin+0xc>
    8664:	99 23       	and	r25, r25
    8666:	d9 f3       	breq	.-10     	; 0x865e <sin+0x12>
    8668:	ce f3       	brts	.-14     	; 0x865c <sin+0x10>
    866a:	9f 57       	subi	r25, 0x7F	; 127
    866c:	55 0b       	sbc	r21, r21
    866e:	87 ff       	sbrs	r24, 7
    8670:	3c d0       	rcall	.+120    	; 0x86ea <__fp_norm2>
    8672:	00 24       	eor	r0, r0
    8674:	a0 e6       	ldi	r26, 0x60	; 96
    8676:	40 ea       	ldi	r20, 0xA0	; 160
    8678:	90 01       	movw	r18, r0
    867a:	80 58       	subi	r24, 0x80	; 128
    867c:	56 95       	lsr	r21
    867e:	97 95       	ror	r25
    8680:	28 f4       	brcc	.+10     	; 0x868c <sqrt+0x2c>
    8682:	80 5c       	subi	r24, 0xC0	; 192
    8684:	66 0f       	add	r22, r22
    8686:	77 1f       	adc	r23, r23
    8688:	88 1f       	adc	r24, r24
    868a:	20 f0       	brcs	.+8      	; 0x8694 <sqrt+0x34>
    868c:	26 17       	cp	r18, r22
    868e:	37 07       	cpc	r19, r23
    8690:	48 07       	cpc	r20, r24
    8692:	30 f4       	brcc	.+12     	; 0x86a0 <sqrt+0x40>
    8694:	62 1b       	sub	r22, r18
    8696:	73 0b       	sbc	r23, r19
    8698:	84 0b       	sbc	r24, r20
    869a:	20 29       	or	r18, r0
    869c:	31 29       	or	r19, r1
    869e:	4a 2b       	or	r20, r26
    86a0:	a6 95       	lsr	r26
    86a2:	17 94       	ror	r1
    86a4:	07 94       	ror	r0
    86a6:	20 25       	eor	r18, r0
    86a8:	31 25       	eor	r19, r1
    86aa:	4a 27       	eor	r20, r26
    86ac:	58 f7       	brcc	.-42     	; 0x8684 <sqrt+0x24>
    86ae:	66 0f       	add	r22, r22
    86b0:	77 1f       	adc	r23, r23
    86b2:	88 1f       	adc	r24, r24
    86b4:	20 f0       	brcs	.+8      	; 0x86be <sqrt+0x5e>
    86b6:	26 17       	cp	r18, r22
    86b8:	37 07       	cpc	r19, r23
    86ba:	48 07       	cpc	r20, r24
    86bc:	30 f4       	brcc	.+12     	; 0x86ca <sqrt+0x6a>
    86be:	62 0b       	sbc	r22, r18
    86c0:	73 0b       	sbc	r23, r19
    86c2:	84 0b       	sbc	r24, r20
    86c4:	20 0d       	add	r18, r0
    86c6:	31 1d       	adc	r19, r1
    86c8:	41 1d       	adc	r20, r1
    86ca:	a0 95       	com	r26
    86cc:	81 f7       	brne	.-32     	; 0x86ae <sqrt+0x4e>
    86ce:	b9 01       	movw	r22, r18
    86d0:	84 2f       	mov	r24, r20
    86d2:	91 58       	subi	r25, 0x81	; 129
    86d4:	88 0f       	add	r24, r24
    86d6:	96 95       	lsr	r25
    86d8:	87 95       	ror	r24
    86da:	08 95       	ret

000086dc <square>:
    86dc:	9b 01       	movw	r18, r22
    86de:	ac 01       	movw	r20, r24
    86e0:	52 cf       	rjmp	.-348    	; 0x8586 <__mulsf3>

000086e2 <__unordsf2>:
    86e2:	33 de       	rcall	.-922    	; 0x834a <__fp_cmp>
    86e4:	88 0b       	sbc	r24, r24
    86e6:	99 0b       	sbc	r25, r25
    86e8:	08 95       	ret

000086ea <__fp_norm2>:
    86ea:	91 50       	subi	r25, 0x01	; 1
    86ec:	50 40       	sbci	r21, 0x00	; 0
    86ee:	66 0f       	add	r22, r22
    86f0:	77 1f       	adc	r23, r23
    86f2:	88 1f       	adc	r24, r24
    86f4:	d2 f7       	brpl	.-12     	; 0x86ea <__fp_norm2>
    86f6:	08 95       	ret

000086f8 <__fp_powsodd>:
    86f8:	9f 93       	push	r25
    86fa:	8f 93       	push	r24
    86fc:	7f 93       	push	r23
    86fe:	6f 93       	push	r22
    8700:	ff 93       	push	r31
    8702:	ef 93       	push	r30
    8704:	9b 01       	movw	r18, r22
    8706:	ac 01       	movw	r20, r24
    8708:	3e df       	rcall	.-388    	; 0x8586 <__mulsf3>
    870a:	ef 91       	pop	r30
    870c:	ff 91       	pop	r31
    870e:	73 de       	rcall	.-794    	; 0x83f6 <__fp_powser>
    8710:	2f 91       	pop	r18
    8712:	3f 91       	pop	r19
    8714:	4f 91       	pop	r20
    8716:	5f 91       	pop	r21
    8718:	36 cf       	rjmp	.-404    	; 0x8586 <__mulsf3>

0000871a <__muluhisi3>:
    871a:	0e 94 06 44 	call	0x880c	; 0x880c <__umulhisi3>
    871e:	a5 9f       	mul	r26, r21
    8720:	90 0d       	add	r25, r0
    8722:	b4 9f       	mul	r27, r20
    8724:	90 0d       	add	r25, r0
    8726:	a4 9f       	mul	r26, r20
    8728:	80 0d       	add	r24, r0
    872a:	91 1d       	adc	r25, r1
    872c:	11 24       	eor	r1, r1
    872e:	08 95       	ret

00008730 <__mulsi3>:
    8730:	db 01       	movw	r26, r22
    8732:	8f 93       	push	r24
    8734:	9f 93       	push	r25
    8736:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    873a:	bf 91       	pop	r27
    873c:	af 91       	pop	r26
    873e:	a2 9f       	mul	r26, r18
    8740:	80 0d       	add	r24, r0
    8742:	91 1d       	adc	r25, r1
    8744:	a3 9f       	mul	r26, r19
    8746:	90 0d       	add	r25, r0
    8748:	b2 9f       	mul	r27, r18
    874a:	90 0d       	add	r25, r0
    874c:	11 24       	eor	r1, r1
    874e:	08 95       	ret

00008750 <__udivmodqi4>:
    8750:	99 1b       	sub	r25, r25
    8752:	79 e0       	ldi	r23, 0x09	; 9
    8754:	04 c0       	rjmp	.+8      	; 0x875e <__udivmodqi4_ep>

00008756 <__udivmodqi4_loop>:
    8756:	99 1f       	adc	r25, r25
    8758:	96 17       	cp	r25, r22
    875a:	08 f0       	brcs	.+2      	; 0x875e <__udivmodqi4_ep>
    875c:	96 1b       	sub	r25, r22

0000875e <__udivmodqi4_ep>:
    875e:	88 1f       	adc	r24, r24
    8760:	7a 95       	dec	r23
    8762:	c9 f7       	brne	.-14     	; 0x8756 <__udivmodqi4_loop>
    8764:	80 95       	com	r24
    8766:	08 95       	ret

00008768 <__divmodhi4>:
    8768:	97 fb       	bst	r25, 7
    876a:	07 2e       	mov	r0, r23
    876c:	16 f4       	brtc	.+4      	; 0x8772 <__divmodhi4+0xa>
    876e:	00 94       	com	r0
    8770:	07 d0       	rcall	.+14     	; 0x8780 <__divmodhi4_neg1>
    8772:	77 fd       	sbrc	r23, 7
    8774:	09 d0       	rcall	.+18     	; 0x8788 <__divmodhi4_neg2>
    8776:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodhi4>
    877a:	07 fc       	sbrc	r0, 7
    877c:	05 d0       	rcall	.+10     	; 0x8788 <__divmodhi4_neg2>
    877e:	3e f4       	brtc	.+14     	; 0x878e <__divmodhi4_exit>

00008780 <__divmodhi4_neg1>:
    8780:	90 95       	com	r25
    8782:	81 95       	neg	r24
    8784:	9f 4f       	sbci	r25, 0xFF	; 255
    8786:	08 95       	ret

00008788 <__divmodhi4_neg2>:
    8788:	70 95       	com	r23
    878a:	61 95       	neg	r22
    878c:	7f 4f       	sbci	r23, 0xFF	; 255

0000878e <__divmodhi4_exit>:
    878e:	08 95       	ret

00008790 <__udivmodsi4>:
    8790:	a1 e2       	ldi	r26, 0x21	; 33
    8792:	1a 2e       	mov	r1, r26
    8794:	aa 1b       	sub	r26, r26
    8796:	bb 1b       	sub	r27, r27
    8798:	fd 01       	movw	r30, r26
    879a:	0d c0       	rjmp	.+26     	; 0x87b6 <__udivmodsi4_ep>

0000879c <__udivmodsi4_loop>:
    879c:	aa 1f       	adc	r26, r26
    879e:	bb 1f       	adc	r27, r27
    87a0:	ee 1f       	adc	r30, r30
    87a2:	ff 1f       	adc	r31, r31
    87a4:	a2 17       	cp	r26, r18
    87a6:	b3 07       	cpc	r27, r19
    87a8:	e4 07       	cpc	r30, r20
    87aa:	f5 07       	cpc	r31, r21
    87ac:	20 f0       	brcs	.+8      	; 0x87b6 <__udivmodsi4_ep>
    87ae:	a2 1b       	sub	r26, r18
    87b0:	b3 0b       	sbc	r27, r19
    87b2:	e4 0b       	sbc	r30, r20
    87b4:	f5 0b       	sbc	r31, r21

000087b6 <__udivmodsi4_ep>:
    87b6:	66 1f       	adc	r22, r22
    87b8:	77 1f       	adc	r23, r23
    87ba:	88 1f       	adc	r24, r24
    87bc:	99 1f       	adc	r25, r25
    87be:	1a 94       	dec	r1
    87c0:	69 f7       	brne	.-38     	; 0x879c <__udivmodsi4_loop>
    87c2:	60 95       	com	r22
    87c4:	70 95       	com	r23
    87c6:	80 95       	com	r24
    87c8:	90 95       	com	r25
    87ca:	9b 01       	movw	r18, r22
    87cc:	ac 01       	movw	r20, r24
    87ce:	bd 01       	movw	r22, r26
    87d0:	cf 01       	movw	r24, r30
    87d2:	08 95       	ret

000087d4 <__divmodsi4>:
    87d4:	05 2e       	mov	r0, r21
    87d6:	97 fb       	bst	r25, 7
    87d8:	16 f4       	brtc	.+4      	; 0x87de <__divmodsi4+0xa>
    87da:	00 94       	com	r0
    87dc:	07 d0       	rcall	.+14     	; 0x87ec <__divmodsi4_neg1>
    87de:	57 fd       	sbrc	r21, 7
    87e0:	0d d0       	rcall	.+26     	; 0x87fc <__divmodsi4_neg2>
    87e2:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    87e6:	07 fc       	sbrc	r0, 7
    87e8:	09 d0       	rcall	.+18     	; 0x87fc <__divmodsi4_neg2>
    87ea:	7e f4       	brtc	.+30     	; 0x880a <__divmodsi4_exit>

000087ec <__divmodsi4_neg1>:
    87ec:	90 95       	com	r25
    87ee:	80 95       	com	r24
    87f0:	70 95       	com	r23
    87f2:	61 95       	neg	r22
    87f4:	7f 4f       	sbci	r23, 0xFF	; 255
    87f6:	8f 4f       	sbci	r24, 0xFF	; 255
    87f8:	9f 4f       	sbci	r25, 0xFF	; 255
    87fa:	08 95       	ret

000087fc <__divmodsi4_neg2>:
    87fc:	50 95       	com	r21
    87fe:	40 95       	com	r20
    8800:	30 95       	com	r19
    8802:	21 95       	neg	r18
    8804:	3f 4f       	sbci	r19, 0xFF	; 255
    8806:	4f 4f       	sbci	r20, 0xFF	; 255
    8808:	5f 4f       	sbci	r21, 0xFF	; 255

0000880a <__divmodsi4_exit>:
    880a:	08 95       	ret

0000880c <__umulhisi3>:
    880c:	a2 9f       	mul	r26, r18
    880e:	b0 01       	movw	r22, r0
    8810:	b3 9f       	mul	r27, r19
    8812:	c0 01       	movw	r24, r0
    8814:	a3 9f       	mul	r26, r19
    8816:	01 d0       	rcall	.+2      	; 0x881a <__umulhisi3+0xe>
    8818:	b2 9f       	mul	r27, r18
    881a:	70 0d       	add	r23, r0
    881c:	81 1d       	adc	r24, r1
    881e:	11 24       	eor	r1, r1
    8820:	91 1d       	adc	r25, r1
    8822:	08 95       	ret

00008824 <__udivmodhi4>:
    8824:	aa 1b       	sub	r26, r26
    8826:	bb 1b       	sub	r27, r27
    8828:	51 e1       	ldi	r21, 0x11	; 17
    882a:	07 c0       	rjmp	.+14     	; 0x883a <__udivmodhi4_ep>

0000882c <__udivmodhi4_loop>:
    882c:	aa 1f       	adc	r26, r26
    882e:	bb 1f       	adc	r27, r27
    8830:	a6 17       	cp	r26, r22
    8832:	b7 07       	cpc	r27, r23
    8834:	10 f0       	brcs	.+4      	; 0x883a <__udivmodhi4_ep>
    8836:	a6 1b       	sub	r26, r22
    8838:	b7 0b       	sbc	r27, r23

0000883a <__udivmodhi4_ep>:
    883a:	88 1f       	adc	r24, r24
    883c:	99 1f       	adc	r25, r25
    883e:	5a 95       	dec	r21
    8840:	a9 f7       	brne	.-22     	; 0x882c <__udivmodhi4_loop>
    8842:	80 95       	com	r24
    8844:	90 95       	com	r25
    8846:	bc 01       	movw	r22, r24
    8848:	cd 01       	movw	r24, r26
    884a:	08 95       	ret

0000884c <__tablejump_elpm__>:
    884c:	07 90       	elpm	r0, Z+
    884e:	f6 91       	elpm	r31, Z+
    8850:	e0 2d       	mov	r30, r0
    8852:	09 94       	ijmp

00008854 <atof>:
    8854:	66 27       	eor	r22, r22
    8856:	77 27       	eor	r23, r23
    8858:	0c 94 f1 45 	jmp	0x8be2	; 0x8be2 <strtod>

0000885c <atoi>:
    885c:	fc 01       	movw	r30, r24
    885e:	88 27       	eor	r24, r24
    8860:	99 27       	eor	r25, r25
    8862:	e8 94       	clt
    8864:	21 91       	ld	r18, Z+
    8866:	20 32       	cpi	r18, 0x20	; 32
    8868:	e9 f3       	breq	.-6      	; 0x8864 <atoi+0x8>
    886a:	29 30       	cpi	r18, 0x09	; 9
    886c:	10 f0       	brcs	.+4      	; 0x8872 <atoi+0x16>
    886e:	2e 30       	cpi	r18, 0x0E	; 14
    8870:	c8 f3       	brcs	.-14     	; 0x8864 <atoi+0x8>
    8872:	2b 32       	cpi	r18, 0x2B	; 43
    8874:	41 f0       	breq	.+16     	; 0x8886 <atoi+0x2a>
    8876:	2d 32       	cpi	r18, 0x2D	; 45
    8878:	39 f4       	brne	.+14     	; 0x8888 <atoi+0x2c>
    887a:	68 94       	set
    887c:	04 c0       	rjmp	.+8      	; 0x8886 <atoi+0x2a>
    887e:	0e 94 98 45 	call	0x8b30	; 0x8b30 <__mulhi_const_10>
    8882:	82 0f       	add	r24, r18
    8884:	91 1d       	adc	r25, r1
    8886:	21 91       	ld	r18, Z+
    8888:	20 53       	subi	r18, 0x30	; 48
    888a:	2a 30       	cpi	r18, 0x0A	; 10
    888c:	c0 f3       	brcs	.-16     	; 0x887e <atoi+0x22>
    888e:	1e f4       	brtc	.+6      	; 0x8896 <atoi+0x3a>
    8890:	90 95       	com	r25
    8892:	81 95       	neg	r24
    8894:	9f 4f       	sbci	r25, 0xFF	; 255
    8896:	08 95       	ret

00008898 <atol>:
    8898:	1f 93       	push	r17
    889a:	fc 01       	movw	r30, r24
    889c:	99 27       	eor	r25, r25
    889e:	88 27       	eor	r24, r24
    88a0:	bc 01       	movw	r22, r24
    88a2:	e8 94       	clt
    88a4:	11 91       	ld	r17, Z+
    88a6:	10 32       	cpi	r17, 0x20	; 32
    88a8:	e9 f3       	breq	.-6      	; 0x88a4 <atol+0xc>
    88aa:	19 30       	cpi	r17, 0x09	; 9
    88ac:	10 f0       	brcs	.+4      	; 0x88b2 <atol+0x1a>
    88ae:	1e 30       	cpi	r17, 0x0E	; 14
    88b0:	c8 f3       	brcs	.-14     	; 0x88a4 <atol+0xc>
    88b2:	1b 32       	cpi	r17, 0x2B	; 43
    88b4:	51 f0       	breq	.+20     	; 0x88ca <atol+0x32>
    88b6:	1d 32       	cpi	r17, 0x2D	; 45
    88b8:	49 f4       	brne	.+18     	; 0x88cc <atol+0x34>
    88ba:	68 94       	set
    88bc:	06 c0       	rjmp	.+12     	; 0x88ca <atol+0x32>
    88be:	0e 94 83 45 	call	0x8b06	; 0x8b06 <__mulsi_const_10>
    88c2:	61 0f       	add	r22, r17
    88c4:	71 1d       	adc	r23, r1
    88c6:	81 1d       	adc	r24, r1
    88c8:	91 1d       	adc	r25, r1
    88ca:	11 91       	ld	r17, Z+
    88cc:	10 53       	subi	r17, 0x30	; 48
    88ce:	1a 30       	cpi	r17, 0x0A	; 10
    88d0:	b0 f3       	brcs	.-20     	; 0x88be <atol+0x26>
    88d2:	3e f4       	brtc	.+14     	; 0x88e2 <atol+0x4a>
    88d4:	90 95       	com	r25
    88d6:	80 95       	com	r24
    88d8:	70 95       	com	r23
    88da:	61 95       	neg	r22
    88dc:	7f 4f       	sbci	r23, 0xFF	; 255
    88de:	8f 4f       	sbci	r24, 0xFF	; 255
    88e0:	9f 4f       	sbci	r25, 0xFF	; 255
    88e2:	1f 91       	pop	r17
    88e4:	08 95       	ret

000088e6 <isspace>:
    88e6:	91 11       	cpse	r25, r1
    88e8:	e1 c2       	rjmp	.+1474   	; 0x8eac <__ctype_isfalse>
    88ea:	80 32       	cpi	r24, 0x20	; 32
    88ec:	19 f0       	breq	.+6      	; 0x88f4 <isspace+0xe>
    88ee:	89 50       	subi	r24, 0x09	; 9
    88f0:	85 50       	subi	r24, 0x05	; 5
    88f2:	d0 f7       	brcc	.-12     	; 0x88e8 <isspace+0x2>
    88f4:	08 95       	ret

000088f6 <tolower>:
    88f6:	91 11       	cpse	r25, r1
    88f8:	08 95       	ret
    88fa:	81 54       	subi	r24, 0x41	; 65
    88fc:	8a 51       	subi	r24, 0x1A	; 26
    88fe:	08 f4       	brcc	.+2      	; 0x8902 <tolower+0xc>
    8900:	80 5e       	subi	r24, 0xE0	; 224
    8902:	85 5a       	subi	r24, 0xA5	; 165
    8904:	08 95       	ret

00008906 <toupper>:
    8906:	91 11       	cpse	r25, r1
    8908:	08 95       	ret
    890a:	81 56       	subi	r24, 0x61	; 97
    890c:	8a 51       	subi	r24, 0x1A	; 26
    890e:	08 f4       	brcc	.+2      	; 0x8912 <toupper+0xc>
    8910:	80 52       	subi	r24, 0x20	; 32
    8912:	85 58       	subi	r24, 0x85	; 133
    8914:	08 95       	ret

00008916 <strtok>:
    8916:	48 e3       	ldi	r20, 0x38	; 56
    8918:	59 e0       	ldi	r21, 0x09	; 9
    891a:	0c 94 07 45 	jmp	0x8a0e	; 0x8a0e <strtok_r>

0000891e <memcpy>:
    891e:	fb 01       	movw	r30, r22
    8920:	dc 01       	movw	r26, r24
    8922:	02 c0       	rjmp	.+4      	; 0x8928 <memcpy+0xa>
    8924:	01 90       	ld	r0, Z+
    8926:	0d 92       	st	X+, r0
    8928:	41 50       	subi	r20, 0x01	; 1
    892a:	50 40       	sbci	r21, 0x00	; 0
    892c:	d8 f7       	brcc	.-10     	; 0x8924 <memcpy+0x6>
    892e:	08 95       	ret

00008930 <memmove>:
    8930:	68 17       	cp	r22, r24
    8932:	79 07       	cpc	r23, r25
    8934:	68 f4       	brcc	.+26     	; 0x8950 <memmove+0x20>
    8936:	fb 01       	movw	r30, r22
    8938:	dc 01       	movw	r26, r24
    893a:	e4 0f       	add	r30, r20
    893c:	f5 1f       	adc	r31, r21
    893e:	a4 0f       	add	r26, r20
    8940:	b5 1f       	adc	r27, r21
    8942:	02 c0       	rjmp	.+4      	; 0x8948 <memmove+0x18>
    8944:	02 90       	ld	r0, -Z
    8946:	0e 92       	st	-X, r0
    8948:	41 50       	subi	r20, 0x01	; 1
    894a:	50 40       	sbci	r21, 0x00	; 0
    894c:	d8 f7       	brcc	.-10     	; 0x8944 <memmove+0x14>
    894e:	08 95       	ret
    8950:	0c 94 8f 44 	jmp	0x891e	; 0x891e <memcpy>

00008954 <strchr>:
    8954:	fc 01       	movw	r30, r24
    8956:	81 91       	ld	r24, Z+
    8958:	86 17       	cp	r24, r22
    895a:	21 f0       	breq	.+8      	; 0x8964 <strchr+0x10>
    895c:	88 23       	and	r24, r24
    895e:	d9 f7       	brne	.-10     	; 0x8956 <strchr+0x2>
    8960:	99 27       	eor	r25, r25
    8962:	08 95       	ret
    8964:	31 97       	sbiw	r30, 0x01	; 1
    8966:	cf 01       	movw	r24, r30
    8968:	08 95       	ret

0000896a <strcmp>:
    896a:	fb 01       	movw	r30, r22
    896c:	dc 01       	movw	r26, r24
    896e:	8d 91       	ld	r24, X+
    8970:	01 90       	ld	r0, Z+
    8972:	80 19       	sub	r24, r0
    8974:	01 10       	cpse	r0, r1
    8976:	d9 f3       	breq	.-10     	; 0x896e <strcmp+0x4>
    8978:	99 0b       	sbc	r25, r25
    897a:	08 95       	ret

0000897c <strcpy>:
    897c:	fb 01       	movw	r30, r22
    897e:	dc 01       	movw	r26, r24
    8980:	01 90       	ld	r0, Z+
    8982:	0d 92       	st	X+, r0
    8984:	00 20       	and	r0, r0
    8986:	e1 f7       	brne	.-8      	; 0x8980 <strcpy+0x4>
    8988:	08 95       	ret

0000898a <strncmp>:
    898a:	fb 01       	movw	r30, r22
    898c:	dc 01       	movw	r26, r24
    898e:	41 50       	subi	r20, 0x01	; 1
    8990:	50 40       	sbci	r21, 0x00	; 0
    8992:	30 f0       	brcs	.+12     	; 0x89a0 <strncmp+0x16>
    8994:	8d 91       	ld	r24, X+
    8996:	01 90       	ld	r0, Z+
    8998:	80 19       	sub	r24, r0
    899a:	19 f4       	brne	.+6      	; 0x89a2 <strncmp+0x18>
    899c:	00 20       	and	r0, r0
    899e:	b9 f7       	brne	.-18     	; 0x898e <strncmp+0x4>
    89a0:	88 1b       	sub	r24, r24
    89a2:	99 0b       	sbc	r25, r25
    89a4:	08 95       	ret

000089a6 <strncpy>:
    89a6:	fb 01       	movw	r30, r22
    89a8:	dc 01       	movw	r26, r24
    89aa:	41 50       	subi	r20, 0x01	; 1
    89ac:	50 40       	sbci	r21, 0x00	; 0
    89ae:	48 f0       	brcs	.+18     	; 0x89c2 <strncpy+0x1c>
    89b0:	01 90       	ld	r0, Z+
    89b2:	0d 92       	st	X+, r0
    89b4:	00 20       	and	r0, r0
    89b6:	c9 f7       	brne	.-14     	; 0x89aa <strncpy+0x4>
    89b8:	01 c0       	rjmp	.+2      	; 0x89bc <strncpy+0x16>
    89ba:	1d 92       	st	X+, r1
    89bc:	41 50       	subi	r20, 0x01	; 1
    89be:	50 40       	sbci	r21, 0x00	; 0
    89c0:	e0 f7       	brcc	.-8      	; 0x89ba <strncpy+0x14>
    89c2:	08 95       	ret

000089c4 <strrchr>:
    89c4:	fc 01       	movw	r30, r24
    89c6:	81 e0       	ldi	r24, 0x01	; 1
    89c8:	90 e0       	ldi	r25, 0x00	; 0
    89ca:	01 90       	ld	r0, Z+
    89cc:	06 16       	cp	r0, r22
    89ce:	09 f4       	brne	.+2      	; 0x89d2 <strrchr+0xe>
    89d0:	cf 01       	movw	r24, r30
    89d2:	00 20       	and	r0, r0
    89d4:	d1 f7       	brne	.-12     	; 0x89ca <strrchr+0x6>
    89d6:	01 97       	sbiw	r24, 0x01	; 1
    89d8:	08 95       	ret

000089da <strstr>:
    89da:	fb 01       	movw	r30, r22
    89dc:	51 91       	ld	r21, Z+
    89de:	55 23       	and	r21, r21
    89e0:	a9 f0       	breq	.+42     	; 0x8a0c <strstr+0x32>
    89e2:	bf 01       	movw	r22, r30
    89e4:	dc 01       	movw	r26, r24
    89e6:	4d 91       	ld	r20, X+
    89e8:	45 17       	cp	r20, r21
    89ea:	41 11       	cpse	r20, r1
    89ec:	e1 f7       	brne	.-8      	; 0x89e6 <strstr+0xc>
    89ee:	59 f4       	brne	.+22     	; 0x8a06 <strstr+0x2c>
    89f0:	cd 01       	movw	r24, r26
    89f2:	01 90       	ld	r0, Z+
    89f4:	00 20       	and	r0, r0
    89f6:	49 f0       	breq	.+18     	; 0x8a0a <strstr+0x30>
    89f8:	4d 91       	ld	r20, X+
    89fa:	40 15       	cp	r20, r0
    89fc:	41 11       	cpse	r20, r1
    89fe:	c9 f3       	breq	.-14     	; 0x89f2 <strstr+0x18>
    8a00:	fb 01       	movw	r30, r22
    8a02:	41 11       	cpse	r20, r1
    8a04:	ef cf       	rjmp	.-34     	; 0x89e4 <strstr+0xa>
    8a06:	81 e0       	ldi	r24, 0x01	; 1
    8a08:	90 e0       	ldi	r25, 0x00	; 0
    8a0a:	01 97       	sbiw	r24, 0x01	; 1
    8a0c:	08 95       	ret

00008a0e <strtok_r>:
    8a0e:	fa 01       	movw	r30, r20
    8a10:	a1 91       	ld	r26, Z+
    8a12:	b0 81       	ld	r27, Z
    8a14:	00 97       	sbiw	r24, 0x00	; 0
    8a16:	19 f4       	brne	.+6      	; 0x8a1e <strtok_r+0x10>
    8a18:	10 97       	sbiw	r26, 0x00	; 0
    8a1a:	e1 f0       	breq	.+56     	; 0x8a54 <strtok_r+0x46>
    8a1c:	cd 01       	movw	r24, r26
    8a1e:	dc 01       	movw	r26, r24
    8a20:	cd 01       	movw	r24, r26
    8a22:	0d 90       	ld	r0, X+
    8a24:	00 20       	and	r0, r0
    8a26:	11 f4       	brne	.+4      	; 0x8a2c <strtok_r+0x1e>
    8a28:	c0 01       	movw	r24, r0
    8a2a:	13 c0       	rjmp	.+38     	; 0x8a52 <strtok_r+0x44>
    8a2c:	fb 01       	movw	r30, r22
    8a2e:	21 91       	ld	r18, Z+
    8a30:	22 23       	and	r18, r18
    8a32:	19 f0       	breq	.+6      	; 0x8a3a <strtok_r+0x2c>
    8a34:	20 15       	cp	r18, r0
    8a36:	d9 f7       	brne	.-10     	; 0x8a2e <strtok_r+0x20>
    8a38:	f3 cf       	rjmp	.-26     	; 0x8a20 <strtok_r+0x12>
    8a3a:	fb 01       	movw	r30, r22
    8a3c:	21 91       	ld	r18, Z+
    8a3e:	20 15       	cp	r18, r0
    8a40:	19 f4       	brne	.+6      	; 0x8a48 <strtok_r+0x3a>
    8a42:	1e 92       	st	-X, r1
    8a44:	11 96       	adiw	r26, 0x01	; 1
    8a46:	06 c0       	rjmp	.+12     	; 0x8a54 <strtok_r+0x46>
    8a48:	22 23       	and	r18, r18
    8a4a:	c1 f7       	brne	.-16     	; 0x8a3c <strtok_r+0x2e>
    8a4c:	0d 90       	ld	r0, X+
    8a4e:	00 20       	and	r0, r0
    8a50:	a1 f7       	brne	.-24     	; 0x8a3a <strtok_r+0x2c>
    8a52:	d0 01       	movw	r26, r0
    8a54:	fa 01       	movw	r30, r20
    8a56:	a1 93       	st	Z+, r26
    8a58:	b0 83       	st	Z, r27
    8a5a:	08 95       	ret

00008a5c <itoa>:
    8a5c:	fb 01       	movw	r30, r22
    8a5e:	9f 01       	movw	r18, r30
    8a60:	e8 94       	clt
    8a62:	42 30       	cpi	r20, 0x02	; 2
    8a64:	c4 f0       	brlt	.+48     	; 0x8a96 <itoa+0x3a>
    8a66:	45 32       	cpi	r20, 0x25	; 37
    8a68:	b4 f4       	brge	.+44     	; 0x8a96 <itoa+0x3a>
    8a6a:	4a 30       	cpi	r20, 0x0A	; 10
    8a6c:	29 f4       	brne	.+10     	; 0x8a78 <itoa+0x1c>
    8a6e:	97 fb       	bst	r25, 7
    8a70:	1e f4       	brtc	.+6      	; 0x8a78 <itoa+0x1c>
    8a72:	90 95       	com	r25
    8a74:	81 95       	neg	r24
    8a76:	9f 4f       	sbci	r25, 0xFF	; 255
    8a78:	64 2f       	mov	r22, r20
    8a7a:	77 27       	eor	r23, r23
    8a7c:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodhi4>
    8a80:	80 5d       	subi	r24, 0xD0	; 208
    8a82:	8a 33       	cpi	r24, 0x3A	; 58
    8a84:	0c f0       	brlt	.+2      	; 0x8a88 <itoa+0x2c>
    8a86:	89 5d       	subi	r24, 0xD9	; 217
    8a88:	81 93       	st	Z+, r24
    8a8a:	cb 01       	movw	r24, r22
    8a8c:	00 97       	sbiw	r24, 0x00	; 0
    8a8e:	a1 f7       	brne	.-24     	; 0x8a78 <itoa+0x1c>
    8a90:	16 f4       	brtc	.+4      	; 0x8a96 <itoa+0x3a>
    8a92:	5d e2       	ldi	r21, 0x2D	; 45
    8a94:	51 93       	st	Z+, r21
    8a96:	10 82       	st	Z, r1
    8a98:	c9 01       	movw	r24, r18
    8a9a:	0c 94 71 47 	jmp	0x8ee2	; 0x8ee2 <strrev>

00008a9e <ltoa>:
    8a9e:	fa 01       	movw	r30, r20
    8aa0:	cf 93       	push	r28
    8aa2:	ff 93       	push	r31
    8aa4:	ef 93       	push	r30
    8aa6:	22 30       	cpi	r18, 0x02	; 2
    8aa8:	44 f1       	brlt	.+80     	; 0x8afa <ltoa+0x5c>
    8aaa:	25 32       	cpi	r18, 0x25	; 37
    8aac:	34 f5       	brge	.+76     	; 0x8afa <ltoa+0x5c>
    8aae:	c2 2f       	mov	r28, r18
    8ab0:	e8 94       	clt
    8ab2:	ca 30       	cpi	r28, 0x0A	; 10
    8ab4:	49 f4       	brne	.+18     	; 0x8ac8 <ltoa+0x2a>
    8ab6:	97 fb       	bst	r25, 7
    8ab8:	3e f4       	brtc	.+14     	; 0x8ac8 <ltoa+0x2a>
    8aba:	90 95       	com	r25
    8abc:	80 95       	com	r24
    8abe:	70 95       	com	r23
    8ac0:	61 95       	neg	r22
    8ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    8ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    8ac8:	2c 2f       	mov	r18, r28
    8aca:	33 27       	eor	r19, r19
    8acc:	44 27       	eor	r20, r20
    8ace:	55 27       	eor	r21, r21
    8ad0:	ff 93       	push	r31
    8ad2:	ef 93       	push	r30
    8ad4:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    8ad8:	ef 91       	pop	r30
    8ada:	ff 91       	pop	r31
    8adc:	60 5d       	subi	r22, 0xD0	; 208
    8ade:	6a 33       	cpi	r22, 0x3A	; 58
    8ae0:	0c f0       	brlt	.+2      	; 0x8ae4 <ltoa+0x46>
    8ae2:	69 5d       	subi	r22, 0xD9	; 217
    8ae4:	61 93       	st	Z+, r22
    8ae6:	b9 01       	movw	r22, r18
    8ae8:	ca 01       	movw	r24, r20
    8aea:	60 50       	subi	r22, 0x00	; 0
    8aec:	70 40       	sbci	r23, 0x00	; 0
    8aee:	80 40       	sbci	r24, 0x00	; 0
    8af0:	90 40       	sbci	r25, 0x00	; 0
    8af2:	51 f7       	brne	.-44     	; 0x8ac8 <ltoa+0x2a>
    8af4:	16 f4       	brtc	.+4      	; 0x8afa <ltoa+0x5c>
    8af6:	cd e2       	ldi	r28, 0x2D	; 45
    8af8:	c1 93       	st	Z+, r28
    8afa:	10 82       	st	Z, r1
    8afc:	8f 91       	pop	r24
    8afe:	9f 91       	pop	r25
    8b00:	cf 91       	pop	r28
    8b02:	0c 94 71 47 	jmp	0x8ee2	; 0x8ee2 <strrev>

00008b06 <__mulsi_const_10>:
    8b06:	59 2f       	mov	r21, r25
    8b08:	48 2f       	mov	r20, r24
    8b0a:	37 2f       	mov	r19, r23
    8b0c:	26 2f       	mov	r18, r22
    8b0e:	66 0f       	add	r22, r22
    8b10:	77 1f       	adc	r23, r23
    8b12:	88 1f       	adc	r24, r24
    8b14:	99 1f       	adc	r25, r25
    8b16:	66 0f       	add	r22, r22
    8b18:	77 1f       	adc	r23, r23
    8b1a:	88 1f       	adc	r24, r24
    8b1c:	99 1f       	adc	r25, r25
    8b1e:	62 0f       	add	r22, r18
    8b20:	73 1f       	adc	r23, r19
    8b22:	84 1f       	adc	r24, r20
    8b24:	95 1f       	adc	r25, r21
    8b26:	66 0f       	add	r22, r22
    8b28:	77 1f       	adc	r23, r23
    8b2a:	88 1f       	adc	r24, r24
    8b2c:	99 1f       	adc	r25, r25
    8b2e:	08 95       	ret

00008b30 <__mulhi_const_10>:
    8b30:	7a e0       	ldi	r23, 0x0A	; 10
    8b32:	97 9f       	mul	r25, r23
    8b34:	90 2d       	mov	r25, r0
    8b36:	87 9f       	mul	r24, r23
    8b38:	80 2d       	mov	r24, r0
    8b3a:	91 0d       	add	r25, r1
    8b3c:	11 24       	eor	r1, r1
    8b3e:	08 95       	ret

00008b40 <ultoa>:
    8b40:	fa 01       	movw	r30, r20
    8b42:	cf 93       	push	r28
    8b44:	ff 93       	push	r31
    8b46:	ef 93       	push	r30
    8b48:	22 30       	cpi	r18, 0x02	; 2
    8b4a:	cc f0       	brlt	.+50     	; 0x8b7e <ultoa+0x3e>
    8b4c:	25 32       	cpi	r18, 0x25	; 37
    8b4e:	bc f4       	brge	.+46     	; 0x8b7e <ultoa+0x3e>
    8b50:	c2 2f       	mov	r28, r18
    8b52:	2c 2f       	mov	r18, r28
    8b54:	33 27       	eor	r19, r19
    8b56:	44 27       	eor	r20, r20
    8b58:	55 27       	eor	r21, r21
    8b5a:	ff 93       	push	r31
    8b5c:	ef 93       	push	r30
    8b5e:	0e 94 c8 43 	call	0x8790	; 0x8790 <__udivmodsi4>
    8b62:	ef 91       	pop	r30
    8b64:	ff 91       	pop	r31
    8b66:	60 5d       	subi	r22, 0xD0	; 208
    8b68:	6a 33       	cpi	r22, 0x3A	; 58
    8b6a:	0c f0       	brlt	.+2      	; 0x8b6e <ultoa+0x2e>
    8b6c:	69 5d       	subi	r22, 0xD9	; 217
    8b6e:	61 93       	st	Z+, r22
    8b70:	b9 01       	movw	r22, r18
    8b72:	ca 01       	movw	r24, r20
    8b74:	60 50       	subi	r22, 0x00	; 0
    8b76:	70 40       	sbci	r23, 0x00	; 0
    8b78:	80 40       	sbci	r24, 0x00	; 0
    8b7a:	90 40       	sbci	r25, 0x00	; 0
    8b7c:	51 f7       	brne	.-44     	; 0x8b52 <ultoa+0x12>
    8b7e:	10 82       	st	Z, r1
    8b80:	8f 91       	pop	r24
    8b82:	9f 91       	pop	r25
    8b84:	cf 91       	pop	r28
    8b86:	0c 94 71 47 	jmp	0x8ee2	; 0x8ee2 <strrev>

00008b8a <utoa>:
    8b8a:	fb 01       	movw	r30, r22
    8b8c:	9f 01       	movw	r18, r30
    8b8e:	42 30       	cpi	r20, 0x02	; 2
    8b90:	74 f0       	brlt	.+28     	; 0x8bae <utoa+0x24>
    8b92:	45 32       	cpi	r20, 0x25	; 37
    8b94:	64 f4       	brge	.+24     	; 0x8bae <utoa+0x24>
    8b96:	64 2f       	mov	r22, r20
    8b98:	77 27       	eor	r23, r23
    8b9a:	0e 94 12 44 	call	0x8824	; 0x8824 <__udivmodhi4>
    8b9e:	80 5d       	subi	r24, 0xD0	; 208
    8ba0:	8a 33       	cpi	r24, 0x3A	; 58
    8ba2:	0c f0       	brlt	.+2      	; 0x8ba6 <utoa+0x1c>
    8ba4:	89 5d       	subi	r24, 0xD9	; 217
    8ba6:	81 93       	st	Z+, r24
    8ba8:	cb 01       	movw	r24, r22
    8baa:	00 97       	sbiw	r24, 0x00	; 0
    8bac:	a1 f7       	brne	.-24     	; 0x8b96 <utoa+0xc>
    8bae:	10 82       	st	Z, r1
    8bb0:	c9 01       	movw	r24, r18
    8bb2:	0c 94 71 47 	jmp	0x8ee2	; 0x8ee2 <strrev>

00008bb6 <__eerd_byte_m1280>:
    8bb6:	f9 99       	sbic	0x1f, 1	; 31
    8bb8:	fe cf       	rjmp	.-4      	; 0x8bb6 <__eerd_byte_m1280>
    8bba:	92 bd       	out	0x22, r25	; 34
    8bbc:	81 bd       	out	0x21, r24	; 33
    8bbe:	f8 9a       	sbi	0x1f, 0	; 31
    8bc0:	99 27       	eor	r25, r25
    8bc2:	80 b5       	in	r24, 0x20	; 32
    8bc4:	08 95       	ret

00008bc6 <__eewr_byte_m1280>:
    8bc6:	26 2f       	mov	r18, r22

00008bc8 <__eewr_r18_m1280>:
    8bc8:	f9 99       	sbic	0x1f, 1	; 31
    8bca:	fe cf       	rjmp	.-4      	; 0x8bc8 <__eewr_r18_m1280>
    8bcc:	1f ba       	out	0x1f, r1	; 31
    8bce:	92 bd       	out	0x22, r25	; 34
    8bd0:	81 bd       	out	0x21, r24	; 33
    8bd2:	20 bd       	out	0x20, r18	; 32
    8bd4:	0f b6       	in	r0, 0x3f	; 63
    8bd6:	f8 94       	cli
    8bd8:	fa 9a       	sbi	0x1f, 2	; 31
    8bda:	f9 9a       	sbi	0x1f, 1	; 31
    8bdc:	0f be       	out	0x3f, r0	; 63
    8bde:	01 96       	adiw	r24, 0x01	; 1
    8be0:	08 95       	ret

00008be2 <strtod>:
    8be2:	8f 92       	push	r8
    8be4:	9f 92       	push	r9
    8be6:	af 92       	push	r10
    8be8:	bf 92       	push	r11
    8bea:	cf 92       	push	r12
    8bec:	df 92       	push	r13
    8bee:	ef 92       	push	r14
    8bf0:	ff 92       	push	r15
    8bf2:	0f 93       	push	r16
    8bf4:	1f 93       	push	r17
    8bf6:	cf 93       	push	r28
    8bf8:	df 93       	push	r29
    8bfa:	8b 01       	movw	r16, r22
    8bfc:	61 15       	cp	r22, r1
    8bfe:	71 05       	cpc	r23, r1
    8c00:	19 f0       	breq	.+6      	; 0x8c08 <strtod+0x26>
    8c02:	fb 01       	movw	r30, r22
    8c04:	80 83       	st	Z, r24
    8c06:	91 83       	std	Z+1, r25	; 0x01
    8c08:	7c 01       	movw	r14, r24
    8c0a:	f7 01       	movw	r30, r14
    8c0c:	c1 90       	ld	r12, Z+
    8c0e:	7f 01       	movw	r14, r30
    8c10:	ef 01       	movw	r28, r30
    8c12:	8c 2d       	mov	r24, r12
    8c14:	90 e0       	ldi	r25, 0x00	; 0
    8c16:	0e 94 73 44 	call	0x88e6	; 0x88e6 <isspace>
    8c1a:	89 2b       	or	r24, r25
    8c1c:	b1 f7       	brne	.-20     	; 0x8c0a <strtod+0x28>
    8c1e:	fd e2       	ldi	r31, 0x2D	; 45
    8c20:	cf 12       	cpse	r12, r31
    8c22:	04 c0       	rjmp	.+8      	; 0x8c2c <strtod+0x4a>
    8c24:	c9 90       	ld	r12, Y+
    8c26:	dd 24       	eor	r13, r13
    8c28:	d3 94       	inc	r13
    8c2a:	05 c0       	rjmp	.+10     	; 0x8c36 <strtod+0x54>
    8c2c:	2b e2       	ldi	r18, 0x2B	; 43
    8c2e:	c2 12       	cpse	r12, r18
    8c30:	01 c0       	rjmp	.+2      	; 0x8c34 <strtod+0x52>
    8c32:	c9 90       	ld	r12, Y+
    8c34:	d1 2c       	mov	r13, r1
    8c36:	7e 01       	movw	r14, r28
    8c38:	41 e0       	ldi	r20, 0x01	; 1
    8c3a:	e4 1a       	sub	r14, r20
    8c3c:	f1 08       	sbc	r15, r1
    8c3e:	43 e0       	ldi	r20, 0x03	; 3
    8c40:	50 e0       	ldi	r21, 0x00	; 0
    8c42:	6f e4       	ldi	r22, 0x4F	; 79
    8c44:	72 e0       	ldi	r23, 0x02	; 2
    8c46:	c7 01       	movw	r24, r14
    8c48:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <strncasecmp_P>
    8c4c:	89 2b       	or	r24, r25
    8c4e:	e9 f4       	brne	.+58     	; 0x8c8a <strtod+0xa8>
    8c50:	7e 01       	movw	r14, r28
    8c52:	82 e0       	ldi	r24, 0x02	; 2
    8c54:	e8 0e       	add	r14, r24
    8c56:	f1 1c       	adc	r15, r1
    8c58:	45 e0       	ldi	r20, 0x05	; 5
    8c5a:	50 e0       	ldi	r21, 0x00	; 0
    8c5c:	62 e5       	ldi	r22, 0x52	; 82
    8c5e:	72 e0       	ldi	r23, 0x02	; 2
    8c60:	c7 01       	movw	r24, r14
    8c62:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <strncasecmp_P>
    8c66:	89 2b       	or	r24, r25
    8c68:	21 f4       	brne	.+8      	; 0x8c72 <strtod+0x90>
    8c6a:	7e 01       	movw	r14, r28
    8c6c:	e7 e0       	ldi	r30, 0x07	; 7
    8c6e:	ee 0e       	add	r14, r30
    8c70:	f1 1c       	adc	r15, r1
    8c72:	01 15       	cp	r16, r1
    8c74:	11 05       	cpc	r17, r1
    8c76:	19 f0       	breq	.+6      	; 0x8c7e <strtod+0x9c>
    8c78:	f8 01       	movw	r30, r16
    8c7a:	f1 82       	std	Z+1, r15	; 0x01
    8c7c:	e0 82       	st	Z, r14
    8c7e:	10 e0       	ldi	r17, 0x00	; 0
    8c80:	d0 e0       	ldi	r29, 0x00	; 0
    8c82:	c0 e8       	ldi	r28, 0x80	; 128
    8c84:	d1 10       	cpse	r13, r1
    8c86:	fb c0       	rjmp	.+502    	; 0x8e7e <strtod+0x29c>
    8c88:	ff c0       	rjmp	.+510    	; 0x8e88 <strtod+0x2a6>
    8c8a:	43 e0       	ldi	r20, 0x03	; 3
    8c8c:	50 e0       	ldi	r21, 0x00	; 0
    8c8e:	67 e5       	ldi	r22, 0x57	; 87
    8c90:	72 e0       	ldi	r23, 0x02	; 2
    8c92:	c7 01       	movw	r24, r14
    8c94:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <strncasecmp_P>
    8c98:	89 2b       	or	r24, r25
    8c9a:	49 f4       	brne	.+18     	; 0x8cae <strtod+0xcc>
    8c9c:	01 15       	cp	r16, r1
    8c9e:	11 05       	cpc	r17, r1
    8ca0:	09 f4       	brne	.+2      	; 0x8ca4 <strtod+0xc2>
    8ca2:	ef c0       	rjmp	.+478    	; 0x8e82 <strtod+0x2a0>
    8ca4:	22 96       	adiw	r28, 0x02	; 2
    8ca6:	f8 01       	movw	r30, r16
    8ca8:	d1 83       	std	Z+1, r29	; 0x01
    8caa:	c0 83       	st	Z, r28
    8cac:	ea c0       	rjmp	.+468    	; 0x8e82 <strtod+0x2a0>
    8cae:	60 e0       	ldi	r22, 0x00	; 0
    8cb0:	70 e0       	ldi	r23, 0x00	; 0
    8cb2:	cb 01       	movw	r24, r22
    8cb4:	e1 2c       	mov	r14, r1
    8cb6:	f1 2c       	mov	r15, r1
    8cb8:	ec 2d       	mov	r30, r12
    8cba:	e0 53       	subi	r30, 0x30	; 48
    8cbc:	ea 30       	cpi	r30, 0x0A	; 10
    8cbe:	48 f5       	brcc	.+82     	; 0x8d12 <strtod+0x130>
    8cc0:	fd 2d       	mov	r31, r13
    8cc2:	f2 60       	ori	r31, 0x02	; 2
    8cc4:	2d 2d       	mov	r18, r13
    8cc6:	28 70       	andi	r18, 0x08	; 8
    8cc8:	d2 fe       	sbrs	r13, 2
    8cca:	06 c0       	rjmp	.+12     	; 0x8cd8 <strtod+0xf6>
    8ccc:	21 11       	cpse	r18, r1
    8cce:	27 c0       	rjmp	.+78     	; 0x8d1e <strtod+0x13c>
    8cd0:	2f ef       	ldi	r18, 0xFF	; 255
    8cd2:	e2 1a       	sub	r14, r18
    8cd4:	f2 0a       	sbc	r15, r18
    8cd6:	23 c0       	rjmp	.+70     	; 0x8d1e <strtod+0x13c>
    8cd8:	22 23       	and	r18, r18
    8cda:	19 f0       	breq	.+6      	; 0x8ce2 <strtod+0x100>
    8cdc:	41 e0       	ldi	r20, 0x01	; 1
    8cde:	e4 1a       	sub	r14, r20
    8ce0:	f1 08       	sbc	r15, r1
    8ce2:	a5 e0       	ldi	r26, 0x05	; 5
    8ce4:	b0 e0       	ldi	r27, 0x00	; 0
    8ce6:	9b 01       	movw	r18, r22
    8ce8:	ac 01       	movw	r20, r24
    8cea:	0e 94 8d 43 	call	0x871a	; 0x871a <__muluhisi3>
    8cee:	66 0f       	add	r22, r22
    8cf0:	77 1f       	adc	r23, r23
    8cf2:	88 1f       	adc	r24, r24
    8cf4:	99 1f       	adc	r25, r25
    8cf6:	6e 0f       	add	r22, r30
    8cf8:	71 1d       	adc	r23, r1
    8cfa:	81 1d       	adc	r24, r1
    8cfc:	91 1d       	adc	r25, r1
    8cfe:	68 39       	cpi	r22, 0x98	; 152
    8d00:	e9 e9       	ldi	r30, 0x99	; 153
    8d02:	7e 07       	cpc	r23, r30
    8d04:	8e 07       	cpc	r24, r30
    8d06:	e9 e1       	ldi	r30, 0x19	; 25
    8d08:	9e 07       	cpc	r25, r30
    8d0a:	48 f0       	brcs	.+18     	; 0x8d1e <strtod+0x13c>
    8d0c:	fd 2d       	mov	r31, r13
    8d0e:	f6 60       	ori	r31, 0x06	; 6
    8d10:	06 c0       	rjmp	.+12     	; 0x8d1e <strtod+0x13c>
    8d12:	ee 3f       	cpi	r30, 0xFE	; 254
    8d14:	39 f4       	brne	.+14     	; 0x8d24 <strtod+0x142>
    8d16:	d3 fc       	sbrc	r13, 3
    8d18:	3d c0       	rjmp	.+122    	; 0x8d94 <strtod+0x1b2>
    8d1a:	fd 2d       	mov	r31, r13
    8d1c:	f8 60       	ori	r31, 0x08	; 8
    8d1e:	c9 90       	ld	r12, Y+
    8d20:	df 2e       	mov	r13, r31
    8d22:	ca cf       	rjmp	.-108    	; 0x8cb8 <strtod+0xd6>
    8d24:	e5 33       	cpi	r30, 0x35	; 53
    8d26:	11 f0       	breq	.+4      	; 0x8d2c <strtod+0x14a>
    8d28:	e5 31       	cpi	r30, 0x15	; 21
    8d2a:	a1 f5       	brne	.+104    	; 0x8d94 <strtod+0x1b2>
    8d2c:	a8 81       	ld	r26, Y
    8d2e:	ad 32       	cpi	r26, 0x2D	; 45
    8d30:	19 f4       	brne	.+6      	; 0x8d38 <strtod+0x156>
    8d32:	f0 e1       	ldi	r31, 0x10	; 16
    8d34:	df 2a       	or	r13, r31
    8d36:	06 c0       	rjmp	.+12     	; 0x8d44 <strtod+0x162>
    8d38:	ab 32       	cpi	r26, 0x2B	; 43
    8d3a:	21 f0       	breq	.+8      	; 0x8d44 <strtod+0x162>
    8d3c:	21 96       	adiw	r28, 0x01	; 1
    8d3e:	21 e0       	ldi	r18, 0x01	; 1
    8d40:	30 e0       	ldi	r19, 0x00	; 0
    8d42:	04 c0       	rjmp	.+8      	; 0x8d4c <strtod+0x16a>
    8d44:	a9 81       	ldd	r26, Y+1	; 0x01
    8d46:	22 96       	adiw	r28, 0x02	; 2
    8d48:	22 e0       	ldi	r18, 0x02	; 2
    8d4a:	30 e0       	ldi	r19, 0x00	; 0
    8d4c:	a0 53       	subi	r26, 0x30	; 48
    8d4e:	aa 30       	cpi	r26, 0x0A	; 10
    8d50:	18 f0       	brcs	.+6      	; 0x8d58 <strtod+0x176>
    8d52:	c2 1b       	sub	r28, r18
    8d54:	d3 0b       	sbc	r29, r19
    8d56:	1e c0       	rjmp	.+60     	; 0x8d94 <strtod+0x1b2>
    8d58:	fe 01       	movw	r30, r28
    8d5a:	20 e0       	ldi	r18, 0x00	; 0
    8d5c:	30 e0       	ldi	r19, 0x00	; 0
    8d5e:	20 38       	cpi	r18, 0x80	; 128
    8d60:	4c e0       	ldi	r20, 0x0C	; 12
    8d62:	34 07       	cpc	r19, r20
    8d64:	5c f4       	brge	.+22     	; 0x8d7c <strtod+0x19a>
    8d66:	a9 01       	movw	r20, r18
    8d68:	44 0f       	add	r20, r20
    8d6a:	55 1f       	adc	r21, r21
    8d6c:	44 0f       	add	r20, r20
    8d6e:	55 1f       	adc	r21, r21
    8d70:	24 0f       	add	r18, r20
    8d72:	35 1f       	adc	r19, r21
    8d74:	22 0f       	add	r18, r18
    8d76:	33 1f       	adc	r19, r19
    8d78:	2a 0f       	add	r18, r26
    8d7a:	31 1d       	adc	r19, r1
    8d7c:	a1 91       	ld	r26, Z+
    8d7e:	a0 53       	subi	r26, 0x30	; 48
    8d80:	ef 01       	movw	r28, r30
    8d82:	aa 30       	cpi	r26, 0x0A	; 10
    8d84:	60 f3       	brcs	.-40     	; 0x8d5e <strtod+0x17c>
    8d86:	d4 fe       	sbrs	r13, 4
    8d88:	03 c0       	rjmp	.+6      	; 0x8d90 <strtod+0x1ae>
    8d8a:	31 95       	neg	r19
    8d8c:	21 95       	neg	r18
    8d8e:	31 09       	sbc	r19, r1
    8d90:	e2 0e       	add	r14, r18
    8d92:	f3 1e       	adc	r15, r19
    8d94:	d1 fe       	sbrs	r13, 1
    8d96:	07 c0       	rjmp	.+14     	; 0x8da6 <strtod+0x1c4>
    8d98:	01 15       	cp	r16, r1
    8d9a:	11 05       	cpc	r17, r1
    8d9c:	21 f0       	breq	.+8      	; 0x8da6 <strtod+0x1c4>
    8d9e:	21 97       	sbiw	r28, 0x01	; 1
    8da0:	f8 01       	movw	r30, r16
    8da2:	d1 83       	std	Z+1, r29	; 0x01
    8da4:	c0 83       	st	Z, r28
    8da6:	0e 94 55 41 	call	0x82aa	; 0x82aa <__floatunsisf>
    8daa:	2d 2d       	mov	r18, r13
    8dac:	23 70       	andi	r18, 0x03	; 3
    8dae:	23 30       	cpi	r18, 0x03	; 3
    8db0:	29 f0       	breq	.+10     	; 0x8dbc <strtod+0x1da>
    8db2:	16 2f       	mov	r17, r22
    8db4:	d7 2f       	mov	r29, r23
    8db6:	c8 2f       	mov	r28, r24
    8db8:	09 2f       	mov	r16, r25
    8dba:	07 c0       	rjmp	.+14     	; 0x8dca <strtod+0x1e8>
    8dbc:	dc 01       	movw	r26, r24
    8dbe:	cb 01       	movw	r24, r22
    8dc0:	b0 58       	subi	r27, 0x80	; 128
    8dc2:	18 2f       	mov	r17, r24
    8dc4:	d9 2f       	mov	r29, r25
    8dc6:	ca 2f       	mov	r28, r26
    8dc8:	0b 2f       	mov	r16, r27
    8dca:	20 e0       	ldi	r18, 0x00	; 0
    8dcc:	30 e0       	ldi	r19, 0x00	; 0
    8dce:	a9 01       	movw	r20, r18
    8dd0:	61 2f       	mov	r22, r17
    8dd2:	7d 2f       	mov	r23, r29
    8dd4:	8c 2f       	mov	r24, r28
    8dd6:	90 2f       	mov	r25, r16
    8dd8:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    8ddc:	88 23       	and	r24, r24
    8dde:	09 f4       	brne	.+2      	; 0x8de2 <strtod+0x200>
    8de0:	54 c0       	rjmp	.+168    	; 0x8e8a <strtod+0x2a8>
    8de2:	f7 fe       	sbrs	r15, 7
    8de4:	08 c0       	rjmp	.+16     	; 0x8df6 <strtod+0x214>
    8de6:	f1 94       	neg	r15
    8de8:	e1 94       	neg	r14
    8dea:	f1 08       	sbc	r15, r1
    8dec:	36 e8       	ldi	r19, 0x86	; 134
    8dee:	c3 2e       	mov	r12, r19
    8df0:	32 e0       	ldi	r19, 0x02	; 2
    8df2:	d3 2e       	mov	r13, r19
    8df4:	04 c0       	rjmp	.+8      	; 0x8dfe <strtod+0x21c>
    8df6:	2e e6       	ldi	r18, 0x6E	; 110
    8df8:	c2 2e       	mov	r12, r18
    8dfa:	22 e0       	ldi	r18, 0x02	; 2
    8dfc:	d2 2e       	mov	r13, r18
    8dfe:	46 01       	movw	r8, r12
    8e00:	f8 e1       	ldi	r31, 0x18	; 24
    8e02:	8f 1a       	sub	r8, r31
    8e04:	91 08       	sbc	r9, r1
    8e06:	90 e2       	ldi	r25, 0x20	; 32
    8e08:	a9 2e       	mov	r10, r25
    8e0a:	b1 2c       	mov	r11, r1
    8e0c:	15 c0       	rjmp	.+42     	; 0x8e38 <strtod+0x256>
    8e0e:	f6 01       	movw	r30, r12
    8e10:	45 91       	lpm	r20, Z+
    8e12:	55 91       	lpm	r21, Z+
    8e14:	65 91       	lpm	r22, Z+
    8e16:	74 91       	lpm	r23, Z+
    8e18:	24 2f       	mov	r18, r20
    8e1a:	35 2f       	mov	r19, r21
    8e1c:	46 2f       	mov	r20, r22
    8e1e:	57 2f       	mov	r21, r23
    8e20:	61 2f       	mov	r22, r17
    8e22:	7d 2f       	mov	r23, r29
    8e24:	8c 2f       	mov	r24, r28
    8e26:	90 2f       	mov	r25, r16
    8e28:	0e 94 c3 42 	call	0x8586	; 0x8586 <__mulsf3>
    8e2c:	16 2f       	mov	r17, r22
    8e2e:	d7 2f       	mov	r29, r23
    8e30:	c8 2f       	mov	r28, r24
    8e32:	09 2f       	mov	r16, r25
    8e34:	ea 18       	sub	r14, r10
    8e36:	fb 08       	sbc	r15, r11
    8e38:	ea 14       	cp	r14, r10
    8e3a:	fb 04       	cpc	r15, r11
    8e3c:	44 f7       	brge	.-48     	; 0x8e0e <strtod+0x22c>
    8e3e:	24 e0       	ldi	r18, 0x04	; 4
    8e40:	c2 1a       	sub	r12, r18
    8e42:	d1 08       	sbc	r13, r1
    8e44:	b5 94       	asr	r11
    8e46:	a7 94       	ror	r10
    8e48:	c8 14       	cp	r12, r8
    8e4a:	d9 04       	cpc	r13, r9
    8e4c:	a9 f7       	brne	.-22     	; 0x8e38 <strtod+0x256>
    8e4e:	61 2f       	mov	r22, r17
    8e50:	7d 2f       	mov	r23, r29
    8e52:	8c 2f       	mov	r24, r28
    8e54:	90 2f       	mov	r25, r16
    8e56:	28 2f       	mov	r18, r24
    8e58:	22 0f       	add	r18, r18
    8e5a:	29 2f       	mov	r18, r25
    8e5c:	22 1f       	adc	r18, r18
    8e5e:	2f 3f       	cpi	r18, 0xFF	; 255
    8e60:	39 f0       	breq	.+14     	; 0x8e70 <strtod+0x28e>
    8e62:	20 e0       	ldi	r18, 0x00	; 0
    8e64:	30 e0       	ldi	r19, 0x00	; 0
    8e66:	a9 01       	movw	r20, r18
    8e68:	0e 94 b5 40 	call	0x816a	; 0x816a <__cmpsf2>
    8e6c:	81 11       	cpse	r24, r1
    8e6e:	0d c0       	rjmp	.+26     	; 0x8e8a <strtod+0x2a8>
    8e70:	82 e2       	ldi	r24, 0x22	; 34
    8e72:	90 e0       	ldi	r25, 0x00	; 0
    8e74:	90 93 99 11 	sts	0x1199, r25
    8e78:	80 93 98 11 	sts	0x1198, r24
    8e7c:	06 c0       	rjmp	.+12     	; 0x8e8a <strtod+0x2a8>
    8e7e:	0f ef       	ldi	r16, 0xFF	; 255
    8e80:	04 c0       	rjmp	.+8      	; 0x8e8a <strtod+0x2a8>
    8e82:	10 e0       	ldi	r17, 0x00	; 0
    8e84:	d0 e0       	ldi	r29, 0x00	; 0
    8e86:	c0 ec       	ldi	r28, 0xC0	; 192
    8e88:	0f e7       	ldi	r16, 0x7F	; 127
    8e8a:	61 2f       	mov	r22, r17
    8e8c:	7d 2f       	mov	r23, r29
    8e8e:	8c 2f       	mov	r24, r28
    8e90:	90 2f       	mov	r25, r16
    8e92:	df 91       	pop	r29
    8e94:	cf 91       	pop	r28
    8e96:	1f 91       	pop	r17
    8e98:	0f 91       	pop	r16
    8e9a:	ff 90       	pop	r15
    8e9c:	ef 90       	pop	r14
    8e9e:	df 90       	pop	r13
    8ea0:	cf 90       	pop	r12
    8ea2:	bf 90       	pop	r11
    8ea4:	af 90       	pop	r10
    8ea6:	9f 90       	pop	r9
    8ea8:	8f 90       	pop	r8
    8eaa:	08 95       	ret

00008eac <__ctype_isfalse>:
    8eac:	99 27       	eor	r25, r25
    8eae:	88 27       	eor	r24, r24

00008eb0 <__ctype_istrue>:
    8eb0:	08 95       	ret

00008eb2 <strncasecmp_P>:
    8eb2:	fb 01       	movw	r30, r22
    8eb4:	dc 01       	movw	r26, r24
    8eb6:	41 50       	subi	r20, 0x01	; 1
    8eb8:	50 40       	sbci	r21, 0x00	; 0
    8eba:	88 f0       	brcs	.+34     	; 0x8ede <strncasecmp_P+0x2c>
    8ebc:	8d 91       	ld	r24, X+
    8ebe:	81 34       	cpi	r24, 0x41	; 65
    8ec0:	1c f0       	brlt	.+6      	; 0x8ec8 <strncasecmp_P+0x16>
    8ec2:	8b 35       	cpi	r24, 0x5B	; 91
    8ec4:	0c f4       	brge	.+2      	; 0x8ec8 <strncasecmp_P+0x16>
    8ec6:	80 5e       	subi	r24, 0xE0	; 224
    8ec8:	65 91       	lpm	r22, Z+
    8eca:	61 34       	cpi	r22, 0x41	; 65
    8ecc:	1c f0       	brlt	.+6      	; 0x8ed4 <strncasecmp_P+0x22>
    8ece:	6b 35       	cpi	r22, 0x5B	; 91
    8ed0:	0c f4       	brge	.+2      	; 0x8ed4 <strncasecmp_P+0x22>
    8ed2:	60 5e       	subi	r22, 0xE0	; 224
    8ed4:	86 1b       	sub	r24, r22
    8ed6:	61 11       	cpse	r22, r1
    8ed8:	71 f3       	breq	.-36     	; 0x8eb6 <strncasecmp_P+0x4>
    8eda:	99 0b       	sbc	r25, r25
    8edc:	08 95       	ret
    8ede:	88 1b       	sub	r24, r24
    8ee0:	fc cf       	rjmp	.-8      	; 0x8eda <strncasecmp_P+0x28>

00008ee2 <strrev>:
    8ee2:	dc 01       	movw	r26, r24
    8ee4:	fc 01       	movw	r30, r24
    8ee6:	67 2f       	mov	r22, r23
    8ee8:	71 91       	ld	r23, Z+
    8eea:	77 23       	and	r23, r23
    8eec:	e1 f7       	brne	.-8      	; 0x8ee6 <strrev+0x4>
    8eee:	32 97       	sbiw	r30, 0x02	; 2
    8ef0:	04 c0       	rjmp	.+8      	; 0x8efa <strrev+0x18>
    8ef2:	7c 91       	ld	r23, X
    8ef4:	6d 93       	st	X+, r22
    8ef6:	70 83       	st	Z, r23
    8ef8:	62 91       	ld	r22, -Z
    8efa:	ae 17       	cp	r26, r30
    8efc:	bf 07       	cpc	r27, r31
    8efe:	c8 f3       	brcs	.-14     	; 0x8ef2 <strrev+0x10>
    8f00:	08 95       	ret

00008f02 <__do_global_dtors>:
    8f02:	12 e0       	ldi	r17, 0x02	; 2
    8f04:	c2 e9       	ldi	r28, 0x92	; 146
    8f06:	d2 e0       	ldi	r29, 0x02	; 2
    8f08:	00 e0       	ldi	r16, 0x00	; 0
    8f0a:	06 c0       	rjmp	.+12     	; 0x8f18 <__do_global_dtors+0x16>
    8f0c:	22 97       	sbiw	r28, 0x02	; 2
    8f0e:	01 09       	sbc	r16, r1
    8f10:	fe 01       	movw	r30, r28
    8f12:	0b bf       	out	0x3b, r16	; 59
    8f14:	0e 94 26 44 	call	0x884c	; 0x884c <__tablejump_elpm__>
    8f18:	c4 39       	cpi	r28, 0x94	; 148
    8f1a:	d1 07       	cpc	r29, r17
    8f1c:	80 e0       	ldi	r24, 0x00	; 0
    8f1e:	08 07       	cpc	r16, r24
    8f20:	a9 f7       	brne	.-22     	; 0x8f0c <__do_global_dtors+0xa>
    8f22:	f8 94       	cli

00008f24 <__stop_program>:
    8f24:	ff cf       	rjmp	.-2      	; 0x8f24 <__stop_program>
