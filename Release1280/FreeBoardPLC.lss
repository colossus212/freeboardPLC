
FreeBoardPLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000045e  00800200  000091d2  00009266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000091d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b2c  0080065e  0080065e  000096c4  2**0
                  ALLOC
  3 .stab         00013c74  00000000  00000000  000096c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001e9ae  00000000  00000000  0001d338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0003bce6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__dtors_end>
       4:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_1>
       8:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_2>
       c:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_3>
      10:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__vector_4>
      14:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_5>
      18:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__vector_6>
      1c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__vector_7>
      20:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__vector_8>
      24:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      28:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      2c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      30:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      34:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      38:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      3c:	0c 94 c8 20 	jmp	0x4190	; 0x4190 <__vector_15>
      40:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      44:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      48:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      4c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      50:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      54:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      58:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      5c:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__vector_23>
      60:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      64:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__vector_25>
      68:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_26>
      6c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      70:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      74:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      78:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      7c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      80:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      84:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      88:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      8c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      90:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_36>
      94:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_37>
      98:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      9c:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      a0:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      a4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      a8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      ac:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      b0:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      b4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      b8:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <__vector_46>
      bc:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__vector_47>
      c0:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__vector_48>
      c4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      c8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      cc:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_51>
      d0:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_52>
      d4:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      d8:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_54>
      dc:	0c 94 18 04 	jmp	0x830	; 0x830 <__vector_55>
      e0:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

0000012f <digital_pin_to_timer_PGM>:
     12f:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     15b:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000175 <digital_pin_to_bit_mask_PGM>:
     175:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     185:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     195:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b5:	04 08 10 20 40 80                                   ... @.

000001bb <digital_pin_to_port_PGM>:
     1bb:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1cb:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1db:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1eb:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1fb:	0b 0b 0b 0b 0b 0b                                   ......

00000201 <port_to_input_PGM>:
     201:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     211:	00 01 00 00 03 01 06 01 09 01                       ..........

0000021b <port_to_output_PGM>:
     21b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     22b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000235 <port_to_mode_PGM>:
     235:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     245:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000024f <pstr_inf>:
     24f:	49 4e 46                                            INF

00000252 <pstr_inity>:
     252:	49 4e 49 54 59                                      INITY

00000257 <pstr_nan>:
     257:	4e 41 4e                                            NAN

0000025a <pwr_p10>:
     25a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     26a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000272 <pwr_m10>:
     272:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     282:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028a <__ctors_start>:
     28a:	b4 33       	cpi	r27, 0x34	; 52
     28c:	02 38       	cpi	r16, 0x82	; 130
     28e:	c4 3f       	cpi	r28, 0xF4	; 244
     290:	eb 3f       	cpi	r30, 0xFB	; 251

00000292 <__ctors_end>:
     292:	1a 34       	cpi	r17, 0x4A	; 74

00000294 <__dtors_end>:
     294:	11 24       	eor	r1, r1
     296:	1f be       	out	0x3f, r1	; 63
     298:	cf ef       	ldi	r28, 0xFF	; 255
     29a:	d1 e2       	ldi	r29, 0x21	; 33
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	cd bf       	out	0x3d, r28	; 61

000002a0 <__do_copy_data>:
     2a0:	16 e0       	ldi	r17, 0x06	; 6
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b2 e0       	ldi	r27, 0x02	; 2
     2a6:	e2 ed       	ldi	r30, 0xD2	; 210
     2a8:	f1 e9       	ldi	r31, 0x91	; 145
     2aa:	00 e0       	ldi	r16, 0x00	; 0
     2ac:	0b bf       	out	0x3b, r16	; 59
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__do_copy_data+0x14>
     2b0:	07 90       	elpm	r0, Z+
     2b2:	0d 92       	st	X+, r0
     2b4:	ae 35       	cpi	r26, 0x5E	; 94
     2b6:	b1 07       	cpc	r27, r17
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <__do_copy_data+0x10>

000002ba <__do_clear_bss>:
     2ba:	11 e1       	ldi	r17, 0x11	; 17
     2bc:	ae e5       	ldi	r26, 0x5E	; 94
     2be:	b6 e0       	ldi	r27, 0x06	; 6
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <.do_clear_bss_start>

000002c2 <.do_clear_bss_loop>:
     2c2:	1d 92       	st	X+, r1

000002c4 <.do_clear_bss_start>:
     2c4:	aa 38       	cpi	r26, 0x8A	; 138
     2c6:	b1 07       	cpc	r27, r17
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <.do_clear_bss_loop>

000002ca <__do_global_ctors>:
     2ca:	12 e0       	ldi	r17, 0x02	; 2
     2cc:	c2 e9       	ldi	r28, 0x92	; 146
     2ce:	d2 e0       	ldi	r29, 0x02	; 2
     2d0:	00 e0       	ldi	r16, 0x00	; 0
     2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <__do_global_ctors+0x16>
     2d4:	22 97       	sbiw	r28, 0x02	; 2
     2d6:	01 09       	sbc	r16, r1
     2d8:	fe 01       	movw	r30, r28
     2da:	0b bf       	out	0x3b, r16	; 59
     2dc:	0e 94 7c 45 	call	0x8af8	; 0x8af8 <__tablejump_elpm__>
     2e0:	ca 38       	cpi	r28, 0x8A	; 138
     2e2:	d1 07       	cpc	r29, r17
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	08 07       	cpc	r16, r24
     2e8:	a9 f7       	brne	.-22     	; 0x2d4 <__do_global_ctors+0xa>
     2ea:	0e 94 37 41 	call	0x826e	; 0x826e <main>
     2ee:	0c 94 d7 48 	jmp	0x91ae	; 0x91ae <__do_global_dtors>

000002f2 <__bad_interrupt>:
     2f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002f6 <_ZN14HardwareSerial9availableEv>:
     2f6:	fc 01       	movw	r30, r24
     2f8:	84 85       	ldd	r24, Z+12	; 0x0c
     2fa:	95 85       	ldd	r25, Z+13	; 0x0d
     2fc:	fc 01       	movw	r30, r24
     2fe:	e0 5c       	subi	r30, 0xC0	; 192
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	20 81       	ld	r18, Z
     304:	31 81       	ldd	r19, Z+1	; 0x01
     306:	fc 01       	movw	r30, r24
     308:	ee 5b       	subi	r30, 0xBE	; 190
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	28 1b       	sub	r18, r24
     312:	39 0b       	sbc	r19, r25
     314:	2f 73       	andi	r18, 0x3F	; 63
     316:	33 27       	eor	r19, r19
     318:	c9 01       	movw	r24, r18
     31a:	08 95       	ret

0000031c <_ZN14HardwareSerial4peekEv>:
     31c:	fc 01       	movw	r30, r24
     31e:	84 85       	ldd	r24, Z+12	; 0x0c
     320:	95 85       	ldd	r25, Z+13	; 0x0d
     322:	fc 01       	movw	r30, r24
     324:	e0 5c       	subi	r30, 0xC0	; 192
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	40 81       	ld	r20, Z
     32a:	51 81       	ldd	r21, Z+1	; 0x01
     32c:	fc 01       	movw	r30, r24
     32e:	ee 5b       	subi	r30, 0xBE	; 190
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	42 17       	cp	r20, r18
     338:	53 07       	cpc	r21, r19
     33a:	41 f0       	breq	.+16     	; 0x34c <_ZN14HardwareSerial4peekEv+0x30>
     33c:	01 90       	ld	r0, Z+
     33e:	f0 81       	ld	r31, Z
     340:	e0 2d       	mov	r30, r0
     342:	e8 0f       	add	r30, r24
     344:	f9 1f       	adc	r31, r25
     346:	20 81       	ld	r18, Z
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	02 c0       	rjmp	.+4      	; 0x350 <_ZN14HardwareSerial4peekEv+0x34>
     34c:	2f ef       	ldi	r18, 0xFF	; 255
     34e:	3f ef       	ldi	r19, 0xFF	; 255
     350:	c9 01       	movw	r24, r18
     352:	08 95       	ret

00000354 <_ZN14HardwareSerial4readEv>:
     354:	fc 01       	movw	r30, r24
     356:	84 85       	ldd	r24, Z+12	; 0x0c
     358:	95 85       	ldd	r25, Z+13	; 0x0d
     35a:	fc 01       	movw	r30, r24
     35c:	e0 5c       	subi	r30, 0xC0	; 192
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	40 81       	ld	r20, Z
     362:	51 81       	ldd	r21, Z+1	; 0x01
     364:	fc 01       	movw	r30, r24
     366:	ee 5b       	subi	r30, 0xBE	; 190
     368:	ff 4f       	sbci	r31, 0xFF	; 255
     36a:	20 81       	ld	r18, Z
     36c:	31 81       	ldd	r19, Z+1	; 0x01
     36e:	42 17       	cp	r20, r18
     370:	53 07       	cpc	r21, r19
     372:	71 f0       	breq	.+28     	; 0x390 <_ZN14HardwareSerial4readEv+0x3c>
     374:	a0 81       	ld	r26, Z
     376:	b1 81       	ldd	r27, Z+1	; 0x01
     378:	a8 0f       	add	r26, r24
     37a:	b9 1f       	adc	r27, r25
     37c:	2c 91       	ld	r18, X
     37e:	80 81       	ld	r24, Z
     380:	91 81       	ldd	r25, Z+1	; 0x01
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	8f 73       	andi	r24, 0x3F	; 63
     386:	99 27       	eor	r25, r25
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <_ZN14HardwareSerial4readEv+0x40>
     390:	2f ef       	ldi	r18, 0xFF	; 255
     392:	3f ef       	ldi	r19, 0xFF	; 255
     394:	c9 01       	movw	r24, r18
     396:	08 95       	ret

00000398 <_ZN14HardwareSerial5flushEv>:
     398:	fc 01       	movw	r30, r24
     39a:	81 a1       	ldd	r24, Z+33	; 0x21
     39c:	88 23       	and	r24, r24
     39e:	29 f0       	breq	.+10     	; 0x3aa <_ZN14HardwareSerial5flushEv+0x12>
     3a0:	a4 89       	ldd	r26, Z+20	; 0x14
     3a2:	b5 89       	ldd	r27, Z+21	; 0x15
     3a4:	8c 91       	ld	r24, X
     3a6:	86 ff       	sbrs	r24, 6
     3a8:	fb cf       	rjmp	.-10     	; 0x3a0 <_ZN14HardwareSerial5flushEv+0x8>
     3aa:	11 a2       	std	Z+33, r1	; 0x21
     3ac:	08 95       	ret

000003ae <_ZN14HardwareSerial5writeEh>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	fc 01       	movw	r30, r24
     3b4:	26 85       	ldd	r18, Z+14	; 0x0e
     3b6:	37 85       	ldd	r19, Z+15	; 0x0f
     3b8:	d9 01       	movw	r26, r18
     3ba:	a0 5c       	subi	r26, 0xC0	; 192
     3bc:	bf 4f       	sbci	r27, 0xFF	; 255
     3be:	8d 91       	ld	r24, X+
     3c0:	9c 91       	ld	r25, X
     3c2:	11 97       	sbiw	r26, 0x01	; 1
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	8f 73       	andi	r24, 0x3F	; 63
     3c8:	99 27       	eor	r25, r25
     3ca:	e9 01       	movw	r28, r18
     3cc:	ce 5b       	subi	r28, 0xBE	; 190
     3ce:	df 4f       	sbci	r29, 0xFF	; 255
     3d0:	48 81       	ld	r20, Y
     3d2:	59 81       	ldd	r21, Y+1	; 0x01
     3d4:	84 17       	cp	r24, r20
     3d6:	95 07       	cpc	r25, r21
     3d8:	d9 f3       	breq	.-10     	; 0x3d0 <_ZN14HardwareSerial5writeEh+0x22>
     3da:	0d 90       	ld	r0, X+
     3dc:	bc 91       	ld	r27, X
     3de:	a0 2d       	mov	r26, r0
     3e0:	a2 0f       	add	r26, r18
     3e2:	b3 1f       	adc	r27, r19
     3e4:	6c 93       	st	X, r22
     3e6:	a6 85       	ldd	r26, Z+14	; 0x0e
     3e8:	b7 85       	ldd	r27, Z+15	; 0x0f
     3ea:	a0 5c       	subi	r26, 0xC0	; 192
     3ec:	bf 4f       	sbci	r27, 0xFF	; 255
     3ee:	11 96       	adiw	r26, 0x01	; 1
     3f0:	9c 93       	st	X, r25
     3f2:	8e 93       	st	-X, r24
     3f4:	a6 89       	ldd	r26, Z+22	; 0x16
     3f6:	b7 89       	ldd	r27, Z+23	; 0x17
     3f8:	2c 91       	ld	r18, X
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	07 8c       	ldd	r0, Z+31	; 0x1f
     400:	02 c0       	rjmp	.+4      	; 0x406 <_ZN14HardwareSerial5writeEh+0x58>
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	0a 94       	dec	r0
     408:	e2 f7       	brpl	.-8      	; 0x402 <_ZN14HardwareSerial5writeEh+0x54>
     40a:	28 2b       	or	r18, r24
     40c:	2c 93       	st	X, r18
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	81 a3       	std	Z+33, r24	; 0x21
     412:	04 88       	ldd	r0, Z+20	; 0x14
     414:	f5 89       	ldd	r31, Z+21	; 0x15
     416:	e0 2d       	mov	r30, r0
     418:	80 81       	ld	r24, Z
     41a:	80 64       	ori	r24, 0x40	; 64
     41c:	80 83       	st	Z, r24
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <_ZN14HardwareSerial6write9Ehb>:
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	fc 01       	movw	r30, r24
     436:	26 85       	ldd	r18, Z+14	; 0x0e
     438:	37 85       	ldd	r19, Z+15	; 0x0f
     43a:	d9 01       	movw	r26, r18
     43c:	a0 5c       	subi	r26, 0xC0	; 192
     43e:	bf 4f       	sbci	r27, 0xFF	; 255
     440:	8d 91       	ld	r24, X+
     442:	9c 91       	ld	r25, X
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	8f 73       	andi	r24, 0x3F	; 63
     44a:	99 27       	eor	r25, r25
     44c:	89 01       	movw	r16, r18
     44e:	0e 5b       	subi	r16, 0xBE	; 190
     450:	1f 4f       	sbci	r17, 0xFF	; 255
     452:	e8 01       	movw	r28, r16
     454:	e8 80       	ld	r14, Y
     456:	f9 80       	ldd	r15, Y+1	; 0x01
     458:	8e 15       	cp	r24, r14
     45a:	9f 05       	cpc	r25, r15
     45c:	d1 f3       	breq	.-12     	; 0x452 <_ZN14HardwareSerial6write9Ehb+0x2a>
     45e:	0d 90       	ld	r0, X+
     460:	bc 91       	ld	r27, X
     462:	a0 2d       	mov	r26, r0
     464:	a2 0f       	add	r26, r18
     466:	b3 1f       	adc	r27, r19
     468:	6c 93       	st	X, r22
     46a:	a6 85       	ldd	r26, Z+14	; 0x0e
     46c:	b7 85       	ldd	r27, Z+15	; 0x0f
     46e:	a0 5c       	subi	r26, 0xC0	; 192
     470:	bf 4f       	sbci	r27, 0xFF	; 255
     472:	11 96       	adiw	r26, 0x01	; 1
     474:	9c 93       	st	X, r25
     476:	8e 93       	st	-X, r24
     478:	a6 89       	ldd	r26, Z+22	; 0x16
     47a:	b7 89       	ldd	r27, Z+23	; 0x17
     47c:	8c 91       	ld	r24, X
     47e:	44 23       	and	r20, r20
     480:	11 f0       	breq	.+4      	; 0x486 <_ZN14HardwareSerial6write9Ehb+0x5e>
     482:	81 60       	ori	r24, 0x01	; 1
     484:	01 c0       	rjmp	.+2      	; 0x488 <_ZN14HardwareSerial6write9Ehb+0x60>
     486:	8e 7f       	andi	r24, 0xFE	; 254
     488:	8c 93       	st	X, r24
     48a:	a6 89       	ldd	r26, Z+22	; 0x16
     48c:	b7 89       	ldd	r27, Z+23	; 0x17
     48e:	2c 91       	ld	r18, X
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	07 8c       	ldd	r0, Z+31	; 0x1f
     496:	02 c0       	rjmp	.+4      	; 0x49c <_ZN14HardwareSerial6write9Ehb+0x74>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	0a 94       	dec	r0
     49e:	e2 f7       	brpl	.-8      	; 0x498 <_ZN14HardwareSerial6write9Ehb+0x70>
     4a0:	28 2b       	or	r18, r24
     4a2:	2c 93       	st	X, r18
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	81 a3       	std	Z+33, r24	; 0x21
     4a8:	04 88       	ldd	r0, Z+20	; 0x14
     4aa:	f5 89       	ldd	r31, Z+21	; 0x15
     4ac:	e0 2d       	mov	r30, r0
     4ae:	80 81       	ld	r24, Z
     4b0:	80 64       	ori	r24, 0x40	; 64
     4b2:	80 83       	st	Z, r24
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	08 95       	ret
     4c6:	08 95       	ret

000004c8 <__vector_25>:
     4c8:	1f 92       	push	r1
     4ca:	0f 92       	push	r0
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	0f 92       	push	r0
     4d0:	11 24       	eor	r1, r1
     4d2:	0b b6       	in	r0, 0x3b	; 59
     4d4:	0f 92       	push	r0
     4d6:	1b be       	out	0x3b, r1	; 59
     4d8:	2f 93       	push	r18
     4da:	3f 93       	push	r19
     4dc:	4f 93       	push	r20
     4de:	5f 93       	push	r21
     4e0:	6f 93       	push	r22
     4e2:	7f 93       	push	r23
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	af 93       	push	r26
     4ea:	bf 93       	push	r27
     4ec:	ef 93       	push	r30
     4ee:	ff 93       	push	r31
     4f0:	80 91 c0 00 	lds	r24, 0x00C0
     4f4:	82 fd       	sbrc	r24, 2
     4f6:	07 c0       	rjmp	.+14     	; 0x506 <__vector_25+0x3e>
     4f8:	80 91 c6 00 	lds	r24, 0x00C6
     4fc:	62 ec       	ldi	r22, 0xC2	; 194
     4fe:	78 e0       	ldi	r23, 0x08	; 8
     500:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_Z10store_charhP11ring_buffer>
     504:	02 c0       	rjmp	.+4      	; 0x50a <__vector_25+0x42>
     506:	80 91 c6 00 	lds	r24, 0x00C6
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	0f 90       	pop	r0
     524:	0b be       	out	0x3b, r0	; 59
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti
     530:	08 95       	ret

00000532 <__vector_36>:
     532:	1f 92       	push	r1
     534:	0f 92       	push	r0
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	0f 92       	push	r0
     53a:	11 24       	eor	r1, r1
     53c:	0b b6       	in	r0, 0x3b	; 59
     53e:	0f 92       	push	r0
     540:	1b be       	out	0x3b, r1	; 59
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
     55a:	80 91 c8 00 	lds	r24, 0x00C8
     55e:	82 fd       	sbrc	r24, 2
     560:	07 c0       	rjmp	.+14     	; 0x570 <__vector_36+0x3e>
     562:	80 91 ce 00 	lds	r24, 0x00CE
     566:	6a e3       	ldi	r22, 0x3A	; 58
     568:	78 e0       	ldi	r23, 0x08	; 8
     56a:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_Z10store_charhP11ring_buffer>
     56e:	02 c0       	rjmp	.+4      	; 0x574 <__vector_36+0x42>
     570:	80 91 ce 00 	lds	r24, 0x00CE
     574:	ff 91       	pop	r31
     576:	ef 91       	pop	r30
     578:	bf 91       	pop	r27
     57a:	af 91       	pop	r26
     57c:	9f 91       	pop	r25
     57e:	8f 91       	pop	r24
     580:	7f 91       	pop	r23
     582:	6f 91       	pop	r22
     584:	5f 91       	pop	r21
     586:	4f 91       	pop	r20
     588:	3f 91       	pop	r19
     58a:	2f 91       	pop	r18
     58c:	0f 90       	pop	r0
     58e:	0b be       	out	0x3b, r0	; 59
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti
     59a:	08 95       	ret

0000059c <__vector_51>:
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	0b b6       	in	r0, 0x3b	; 59
     5a8:	0f 92       	push	r0
     5aa:	1b be       	out	0x3b, r1	; 59
     5ac:	2f 93       	push	r18
     5ae:	3f 93       	push	r19
     5b0:	4f 93       	push	r20
     5b2:	5f 93       	push	r21
     5b4:	6f 93       	push	r22
     5b6:	7f 93       	push	r23
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	af 93       	push	r26
     5be:	bf 93       	push	r27
     5c0:	ef 93       	push	r30
     5c2:	ff 93       	push	r31
     5c4:	80 91 d0 00 	lds	r24, 0x00D0
     5c8:	82 fd       	sbrc	r24, 2
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <__vector_51+0x3e>
     5cc:	80 91 d6 00 	lds	r24, 0x00D6
     5d0:	62 eb       	ldi	r22, 0xB2	; 178
     5d2:	77 e0       	ldi	r23, 0x07	; 7
     5d4:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_Z10store_charhP11ring_buffer>
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_51+0x42>
     5da:	80 91 d6 00 	lds	r24, 0x00D6
     5de:	ff 91       	pop	r31
     5e0:	ef 91       	pop	r30
     5e2:	bf 91       	pop	r27
     5e4:	af 91       	pop	r26
     5e6:	9f 91       	pop	r25
     5e8:	8f 91       	pop	r24
     5ea:	7f 91       	pop	r23
     5ec:	6f 91       	pop	r22
     5ee:	5f 91       	pop	r21
     5f0:	4f 91       	pop	r20
     5f2:	3f 91       	pop	r19
     5f4:	2f 91       	pop	r18
     5f6:	0f 90       	pop	r0
     5f8:	0b be       	out	0x3b, r0	; 59
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti
     604:	08 95       	ret

00000606 <__vector_54>:
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	1b be       	out	0x3b, r1	; 59
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	ef 93       	push	r30
     62c:	ff 93       	push	r31
     62e:	80 91 30 01 	lds	r24, 0x0130
     632:	82 fd       	sbrc	r24, 2
     634:	07 c0       	rjmp	.+14     	; 0x644 <__vector_54+0x3e>
     636:	80 91 36 01 	lds	r24, 0x0136
     63a:	6a e2       	ldi	r22, 0x2A	; 42
     63c:	77 e0       	ldi	r23, 0x07	; 7
     63e:	0e 94 d2 3f 	call	0x7fa4	; 0x7fa4 <_Z10store_charhP11ring_buffer>
     642:	02 c0       	rjmp	.+4      	; 0x648 <__vector_54+0x42>
     644:	80 91 36 01 	lds	r24, 0x0136
     648:	ff 91       	pop	r31
     64a:	ef 91       	pop	r30
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	0f 90       	pop	r0
     662:	0b be       	out	0x3b, r0	; 59
     664:	0f 90       	pop	r0
     666:	0f be       	out	0x3f, r0	; 63
     668:	0f 90       	pop	r0
     66a:	1f 90       	pop	r1
     66c:	18 95       	reti

0000066e <_Z14serialEventRunv>:
     66e:	84 ec       	ldi	r24, 0xC4	; 196
     670:	96 e0       	ldi	r25, 0x06	; 6
     672:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     676:	89 2b       	or	r24, r25
     678:	11 f0       	breq	.+4      	; 0x67e <_Z14serialEventRunv+0x10>
     67a:	0e 94 45 33 	call	0x668a	; 0x668a <_Z11serialEventv>
     67e:	82 ea       	ldi	r24, 0xA2	; 162
     680:	96 e0       	ldi	r25, 0x06	; 6
     682:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     686:	89 2b       	or	r24, r25
     688:	11 f0       	breq	.+4      	; 0x68e <_Z14serialEventRunv+0x20>
     68a:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <_Z12serialEvent1v>
     68e:	80 e8       	ldi	r24, 0x80	; 128
     690:	96 e0       	ldi	r25, 0x06	; 6
     692:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     696:	89 2b       	or	r24, r25
     698:	11 f0       	breq	.+4      	; 0x69e <_Z14serialEventRunv+0x30>
     69a:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <_Z12serialEvent2v>
     69e:	8e e5       	ldi	r24, 0x5E	; 94
     6a0:	96 e0       	ldi	r25, 0x06	; 6
     6a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
     6a6:	89 2b       	or	r24, r25
     6a8:	11 f0       	breq	.+4      	; 0x6ae <_Z14serialEventRunv+0x40>
     6aa:	0c 94 22 30 	jmp	0x6044	; 0x6044 <_Z12serialEvent3v>
     6ae:	08 95       	ret

000006b0 <__vector_26>:
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	0b b6       	in	r0, 0x3b	; 59
     6bc:	0f 92       	push	r0
     6be:	1b be       	out	0x3b, r1	; 59
     6c0:	2f 93       	push	r18
     6c2:	3f 93       	push	r19
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
     6cc:	20 91 be 08 	lds	r18, 0x08BE
     6d0:	30 91 bf 08 	lds	r19, 0x08BF
     6d4:	80 91 c0 08 	lds	r24, 0x08C0
     6d8:	90 91 c1 08 	lds	r25, 0x08C1
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	31 f4       	brne	.+12     	; 0x6ee <__vector_26+0x3e>
     6e2:	80 91 c1 00 	lds	r24, 0x00C1
     6e6:	8f 7d       	andi	r24, 0xDF	; 223
     6e8:	80 93 c1 00 	sts	0x00C1, r24
     6ec:	14 c0       	rjmp	.+40     	; 0x716 <__vector_26+0x66>
     6ee:	e0 91 c0 08 	lds	r30, 0x08C0
     6f2:	f0 91 c1 08 	lds	r31, 0x08C1
     6f6:	e2 58       	subi	r30, 0x82	; 130
     6f8:	f7 4f       	sbci	r31, 0xF7	; 247
     6fa:	20 81       	ld	r18, Z
     6fc:	80 91 c0 08 	lds	r24, 0x08C0
     700:	90 91 c1 08 	lds	r25, 0x08C1
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	8f 73       	andi	r24, 0x3F	; 63
     708:	99 27       	eor	r25, r25
     70a:	90 93 c1 08 	sts	0x08C1, r25
     70e:	80 93 c0 08 	sts	0x08C0, r24
     712:	20 93 c6 00 	sts	0x00C6, r18
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0b be       	out	0x3b, r0	; 59
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <__vector_37>:
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	0b b6       	in	r0, 0x3b	; 59
     73c:	0f 92       	push	r0
     73e:	1b be       	out	0x3b, r1	; 59
     740:	2f 93       	push	r18
     742:	3f 93       	push	r19
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	ef 93       	push	r30
     74a:	ff 93       	push	r31
     74c:	20 91 36 08 	lds	r18, 0x0836
     750:	30 91 37 08 	lds	r19, 0x0837
     754:	80 91 38 08 	lds	r24, 0x0838
     758:	90 91 39 08 	lds	r25, 0x0839
     75c:	28 17       	cp	r18, r24
     75e:	39 07       	cpc	r19, r25
     760:	31 f4       	brne	.+12     	; 0x76e <__vector_37+0x3e>
     762:	80 91 c9 00 	lds	r24, 0x00C9
     766:	8f 7d       	andi	r24, 0xDF	; 223
     768:	80 93 c9 00 	sts	0x00C9, r24
     76c:	14 c0       	rjmp	.+40     	; 0x796 <__vector_37+0x66>
     76e:	e0 91 38 08 	lds	r30, 0x0838
     772:	f0 91 39 08 	lds	r31, 0x0839
     776:	ea 50       	subi	r30, 0x0A	; 10
     778:	f8 4f       	sbci	r31, 0xF8	; 248
     77a:	20 81       	ld	r18, Z
     77c:	80 91 38 08 	lds	r24, 0x0838
     780:	90 91 39 08 	lds	r25, 0x0839
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	8f 73       	andi	r24, 0x3F	; 63
     788:	99 27       	eor	r25, r25
     78a:	90 93 39 08 	sts	0x0839, r25
     78e:	80 93 38 08 	sts	0x0838, r24
     792:	20 93 ce 00 	sts	0x00CE, r18
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	9f 91       	pop	r25
     79c:	8f 91       	pop	r24
     79e:	3f 91       	pop	r19
     7a0:	2f 91       	pop	r18
     7a2:	0f 90       	pop	r0
     7a4:	0b be       	out	0x3b, r0	; 59
     7a6:	0f 90       	pop	r0
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	0f 90       	pop	r0
     7ac:	1f 90       	pop	r1
     7ae:	18 95       	reti

000007b0 <__vector_52>:
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	1b be       	out	0x3b, r1	; 59
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
     7cc:	20 91 ae 07 	lds	r18, 0x07AE
     7d0:	30 91 af 07 	lds	r19, 0x07AF
     7d4:	80 91 b0 07 	lds	r24, 0x07B0
     7d8:	90 91 b1 07 	lds	r25, 0x07B1
     7dc:	28 17       	cp	r18, r24
     7de:	39 07       	cpc	r19, r25
     7e0:	31 f4       	brne	.+12     	; 0x7ee <__vector_52+0x3e>
     7e2:	80 91 d1 00 	lds	r24, 0x00D1
     7e6:	8f 7d       	andi	r24, 0xDF	; 223
     7e8:	80 93 d1 00 	sts	0x00D1, r24
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <__vector_52+0x66>
     7ee:	e0 91 b0 07 	lds	r30, 0x07B0
     7f2:	f0 91 b1 07 	lds	r31, 0x07B1
     7f6:	e2 59       	subi	r30, 0x92	; 146
     7f8:	f8 4f       	sbci	r31, 0xF8	; 248
     7fa:	20 81       	ld	r18, Z
     7fc:	80 91 b0 07 	lds	r24, 0x07B0
     800:	90 91 b1 07 	lds	r25, 0x07B1
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	8f 73       	andi	r24, 0x3F	; 63
     808:	99 27       	eor	r25, r25
     80a:	90 93 b1 07 	sts	0x07B1, r25
     80e:	80 93 b0 07 	sts	0x07B0, r24
     812:	20 93 d6 00 	sts	0x00D6, r18
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0b be       	out	0x3b, r0	; 59
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <__vector_55>:
     830:	1f 92       	push	r1
     832:	0f 92       	push	r0
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	0f 92       	push	r0
     838:	11 24       	eor	r1, r1
     83a:	0b b6       	in	r0, 0x3b	; 59
     83c:	0f 92       	push	r0
     83e:	1b be       	out	0x3b, r1	; 59
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31
     84c:	20 91 26 07 	lds	r18, 0x0726
     850:	30 91 27 07 	lds	r19, 0x0727
     854:	80 91 28 07 	lds	r24, 0x0728
     858:	90 91 29 07 	lds	r25, 0x0729
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	31 f4       	brne	.+12     	; 0x86e <__vector_55+0x3e>
     862:	80 91 31 01 	lds	r24, 0x0131
     866:	8f 7d       	andi	r24, 0xDF	; 223
     868:	80 93 31 01 	sts	0x0131, r24
     86c:	14 c0       	rjmp	.+40     	; 0x896 <__vector_55+0x66>
     86e:	e0 91 28 07 	lds	r30, 0x0728
     872:	f0 91 29 07 	lds	r31, 0x0729
     876:	ea 51       	subi	r30, 0x1A	; 26
     878:	f9 4f       	sbci	r31, 0xF9	; 249
     87a:	20 81       	ld	r18, Z
     87c:	80 91 28 07 	lds	r24, 0x0728
     880:	90 91 29 07 	lds	r25, 0x0729
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	8f 73       	andi	r24, 0x3F	; 63
     888:	99 27       	eor	r25, r25
     88a:	90 93 29 07 	sts	0x0729, r25
     88e:	80 93 28 07 	sts	0x0728, r24
     892:	20 93 36 01 	sts	0x0136, r18
     896:	ff 91       	pop	r31
     898:	ef 91       	pop	r30
     89a:	9f 91       	pop	r25
     89c:	8f 91       	pop	r24
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0b be       	out	0x3b, r0	; 59
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
     8b0:	4f 92       	push	r4
     8b2:	5f 92       	push	r5
     8b4:	6f 92       	push	r6
     8b6:	7f 92       	push	r7
     8b8:	8f 92       	push	r8
     8ba:	9f 92       	push	r9
     8bc:	af 92       	push	r10
     8be:	bf 92       	push	r11
     8c0:	cf 92       	push	r12
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	fc 01       	movw	r30, r24
     8d6:	13 82       	std	Z+3, r1	; 0x03
     8d8:	12 82       	std	Z+2, r1	; 0x02
     8da:	88 ee       	ldi	r24, 0xE8	; 232
     8dc:	48 2e       	mov	r4, r24
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	58 2e       	mov	r5, r24
     8e2:	61 2c       	mov	r6, r1
     8e4:	71 2c       	mov	r7, r1
     8e6:	44 82       	std	Z+4, r4	; 0x04
     8e8:	55 82       	std	Z+5, r5	; 0x05
     8ea:	66 82       	std	Z+6, r6	; 0x06
     8ec:	77 82       	std	Z+7, r7	; 0x07
     8ee:	84 e4       	ldi	r24, 0x44	; 68
     8f0:	96 e0       	ldi	r25, 0x06	; 6
     8f2:	91 83       	std	Z+1, r25	; 0x01
     8f4:	80 83       	st	Z, r24
     8f6:	75 87       	std	Z+13, r23	; 0x0d
     8f8:	64 87       	std	Z+12, r22	; 0x0c
     8fa:	57 87       	std	Z+15, r21	; 0x0f
     8fc:	46 87       	std	Z+14, r20	; 0x0e
     8fe:	31 8b       	std	Z+17, r19	; 0x11
     900:	20 8b       	std	Z+16, r18	; 0x10
     902:	13 8b       	std	Z+19, r17	; 0x13
     904:	02 8b       	std	Z+18, r16	; 0x12
     906:	f5 8a       	std	Z+21, r15	; 0x15
     908:	e4 8a       	std	Z+20, r14	; 0x14
     90a:	d7 8a       	std	Z+23, r13	; 0x17
     90c:	c6 8a       	std	Z+22, r12	; 0x16
     90e:	b1 8e       	std	Z+25, r11	; 0x19
     910:	a0 8e       	std	Z+24, r10	; 0x18
     912:	93 8e       	std	Z+27, r9	; 0x1b
     914:	82 8e       	std	Z+26, r8	; 0x1a
     916:	8b 89       	ldd	r24, Y+19	; 0x13
     918:	84 8f       	std	Z+28, r24	; 0x1c
     91a:	8c 89       	ldd	r24, Y+20	; 0x14
     91c:	85 8f       	std	Z+29, r24	; 0x1d
     91e:	8d 89       	ldd	r24, Y+21	; 0x15
     920:	86 8f       	std	Z+30, r24	; 0x1e
     922:	8e 89       	ldd	r24, Y+22	; 0x16
     924:	87 8f       	std	Z+31, r24	; 0x1f
     926:	8f 89       	ldd	r24, Y+23	; 0x17
     928:	80 a3       	std	Z+32, r24	; 0x20
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	1f 91       	pop	r17
     930:	0f 91       	pop	r16
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	bf 90       	pop	r11
     93c:	af 90       	pop	r10
     93e:	9f 90       	pop	r9
     940:	8f 90       	pop	r8
     942:	7f 90       	pop	r7
     944:	6f 90       	pop	r6
     946:	5f 90       	pop	r5
     948:	4f 90       	pop	r4
     94a:	08 95       	ret

0000094c <_ZN14HardwareSerial5beginEm>:
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
     95a:	6a 01       	movw	r12, r20
     95c:	7b 01       	movw	r14, r22
     95e:	41 15       	cp	r20, r1
     960:	81 ee       	ldi	r24, 0xE1	; 225
     962:	58 07       	cpc	r21, r24
     964:	61 05       	cpc	r22, r1
     966:	71 05       	cpc	r23, r1
     968:	f9 f0       	breq	.+62     	; 0x9a8 <_ZN14HardwareSerial5beginEm+0x5c>
     96a:	ec 89       	ldd	r30, Y+20	; 0x14
     96c:	fd 89       	ldd	r31, Y+21	; 0x15
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	08 a0       	ldd	r0, Y+32	; 0x20
     974:	02 c0       	rjmp	.+4      	; 0x97a <_ZN14HardwareSerial5beginEm+0x2e>
     976:	88 0f       	add	r24, r24
     978:	99 1f       	adc	r25, r25
     97a:	0a 94       	dec	r0
     97c:	e2 f7       	brpl	.-8      	; 0x976 <_ZN14HardwareSerial5beginEm+0x2a>
     97e:	80 83       	st	Z, r24
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	79 e0       	ldi	r23, 0x09	; 9
     984:	8d e3       	ldi	r24, 0x3D	; 61
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a7 01       	movw	r20, r14
     98a:	96 01       	movw	r18, r12
     98c:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
     990:	21 50       	subi	r18, 0x01	; 1
     992:	31 09       	sbc	r19, r1
     994:	41 09       	sbc	r20, r1
     996:	51 09       	sbc	r21, r1
     998:	56 95       	lsr	r21
     99a:	47 95       	ror	r20
     99c:	37 95       	ror	r19
     99e:	27 95       	ror	r18
     9a0:	21 15       	cp	r18, r1
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	38 07       	cpc	r19, r24
     9a6:	98 f0       	brcs	.+38     	; 0x9ce <_ZN14HardwareSerial5beginEm+0x82>
     9a8:	ec 89       	ldd	r30, Y+20	; 0x14
     9aa:	fd 89       	ldd	r31, Y+21	; 0x15
     9ac:	10 82       	st	Z, r1
     9ae:	60 e8       	ldi	r22, 0x80	; 128
     9b0:	74 e8       	ldi	r23, 0x84	; 132
     9b2:	8e e1       	ldi	r24, 0x1E	; 30
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a7 01       	movw	r20, r14
     9b8:	96 01       	movw	r18, r12
     9ba:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
     9be:	21 50       	subi	r18, 0x01	; 1
     9c0:	31 09       	sbc	r19, r1
     9c2:	41 09       	sbc	r20, r1
     9c4:	51 09       	sbc	r21, r1
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	e8 89       	ldd	r30, Y+16	; 0x10
     9d0:	f9 89       	ldd	r31, Y+17	; 0x11
     9d2:	30 83       	st	Z, r19
     9d4:	ea 89       	ldd	r30, Y+18	; 0x12
     9d6:	fb 89       	ldd	r31, Y+19	; 0x13
     9d8:	20 83       	st	Z, r18
     9da:	19 a2       	std	Y+33, r1	; 0x21
     9dc:	ee 89       	ldd	r30, Y+22	; 0x16
     9de:	ff 89       	ldd	r31, Y+23	; 0x17
     9e0:	40 81       	ld	r20, Z
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	9c 01       	movw	r18, r24
     9e8:	0c 8c       	ldd	r0, Y+28	; 0x1c
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <_ZN14HardwareSerial5beginEm+0xa4>
     9ec:	22 0f       	add	r18, r18
     9ee:	33 1f       	adc	r19, r19
     9f0:	0a 94       	dec	r0
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <_ZN14HardwareSerial5beginEm+0xa0>
     9f4:	42 2b       	or	r20, r18
     9f6:	40 83       	st	Z, r20
     9f8:	ee 89       	ldd	r30, Y+22	; 0x16
     9fa:	ff 89       	ldd	r31, Y+23	; 0x17
     9fc:	40 81       	ld	r20, Z
     9fe:	9c 01       	movw	r18, r24
     a00:	0d 8c       	ldd	r0, Y+29	; 0x1d
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <_ZN14HardwareSerial5beginEm+0xbc>
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	0a 94       	dec	r0
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <_ZN14HardwareSerial5beginEm+0xb8>
     a0c:	42 2b       	or	r20, r18
     a0e:	40 83       	st	Z, r20
     a10:	ee 89       	ldd	r30, Y+22	; 0x16
     a12:	ff 89       	ldd	r31, Y+23	; 0x17
     a14:	40 81       	ld	r20, Z
     a16:	9c 01       	movw	r18, r24
     a18:	0e 8c       	ldd	r0, Y+30	; 0x1e
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <_ZN14HardwareSerial5beginEm+0xd4>
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	0a 94       	dec	r0
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <_ZN14HardwareSerial5beginEm+0xd0>
     a24:	42 2b       	or	r20, r18
     a26:	40 83       	st	Z, r20
     a28:	ee 89       	ldd	r30, Y+22	; 0x16
     a2a:	ff 89       	ldd	r31, Y+23	; 0x17
     a2c:	20 81       	ld	r18, Z
     a2e:	0f 8c       	ldd	r0, Y+31	; 0x1f
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <_ZN14HardwareSerial5beginEm+0xea>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	0a 94       	dec	r0
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <_ZN14HardwareSerial5beginEm+0xe6>
     a3a:	80 95       	com	r24
     a3c:	82 23       	and	r24, r18
     a3e:	80 83       	st	Z, r24
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	df 90       	pop	r13
     a4a:	cf 90       	pop	r12
     a4c:	08 95       	ret

00000a4e <_ZN14HardwareSerial5beginEmh>:
     a4e:	bf 92       	push	r11
     a50:	cf 92       	push	r12
     a52:	df 92       	push	r13
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
     a5e:	6a 01       	movw	r12, r20
     a60:	7b 01       	movw	r14, r22
     a62:	b2 2e       	mov	r11, r18
     a64:	41 15       	cp	r20, r1
     a66:	81 ee       	ldi	r24, 0xE1	; 225
     a68:	58 07       	cpc	r21, r24
     a6a:	61 05       	cpc	r22, r1
     a6c:	71 05       	cpc	r23, r1
     a6e:	f9 f0       	breq	.+62     	; 0xaae <_ZN14HardwareSerial5beginEmh+0x60>
     a70:	ec 89       	ldd	r30, Y+20	; 0x14
     a72:	fd 89       	ldd	r31, Y+21	; 0x15
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	08 a0       	ldd	r0, Y+32	; 0x20
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <_ZN14HardwareSerial5beginEmh+0x32>
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	0a 94       	dec	r0
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <_ZN14HardwareSerial5beginEmh+0x2e>
     a84:	80 83       	st	Z, r24
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	79 e0       	ldi	r23, 0x09	; 9
     a8a:	8d e3       	ldi	r24, 0x3D	; 61
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a7 01       	movw	r20, r14
     a90:	96 01       	movw	r18, r12
     a92:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	31 09       	sbc	r19, r1
     a9a:	41 09       	sbc	r20, r1
     a9c:	51 09       	sbc	r21, r1
     a9e:	56 95       	lsr	r21
     aa0:	47 95       	ror	r20
     aa2:	37 95       	ror	r19
     aa4:	27 95       	ror	r18
     aa6:	21 15       	cp	r18, r1
     aa8:	80 e1       	ldi	r24, 0x10	; 16
     aaa:	38 07       	cpc	r19, r24
     aac:	98 f0       	brcs	.+38     	; 0xad4 <_ZN14HardwareSerial5beginEmh+0x86>
     aae:	ec 89       	ldd	r30, Y+20	; 0x14
     ab0:	fd 89       	ldd	r31, Y+21	; 0x15
     ab2:	10 82       	st	Z, r1
     ab4:	60 e8       	ldi	r22, 0x80	; 128
     ab6:	74 e8       	ldi	r23, 0x84	; 132
     ab8:	8e e1       	ldi	r24, 0x1E	; 30
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a7 01       	movw	r20, r14
     abe:	96 01       	movw	r18, r12
     ac0:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
     ac4:	21 50       	subi	r18, 0x01	; 1
     ac6:	31 09       	sbc	r19, r1
     ac8:	41 09       	sbc	r20, r1
     aca:	51 09       	sbc	r21, r1
     acc:	56 95       	lsr	r21
     ace:	47 95       	ror	r20
     ad0:	37 95       	ror	r19
     ad2:	27 95       	ror	r18
     ad4:	e8 89       	ldd	r30, Y+16	; 0x10
     ad6:	f9 89       	ldd	r31, Y+17	; 0x11
     ad8:	30 83       	st	Z, r19
     ada:	ea 89       	ldd	r30, Y+18	; 0x12
     adc:	fb 89       	ldd	r31, Y+19	; 0x13
     ade:	20 83       	st	Z, r18
     ae0:	87 e0       	ldi	r24, 0x07	; 7
     ae2:	b8 12       	cpse	r11, r24
     ae4:	0a c0       	rjmp	.+20     	; 0xafa <_ZN14HardwareSerial5beginEmh+0xac>
     ae6:	e8 8d       	ldd	r30, Y+24	; 0x18
     ae8:	f9 8d       	ldd	r31, Y+25	; 0x19
     aea:	86 e0       	ldi	r24, 0x06	; 6
     aec:	80 83       	st	Z, r24
     aee:	ee 89       	ldd	r30, Y+22	; 0x16
     af0:	ff 89       	ldd	r31, Y+23	; 0x17
     af2:	80 81       	ld	r24, Z
     af4:	84 60       	ori	r24, 0x04	; 4
     af6:	80 83       	st	Z, r24
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <_ZN14HardwareSerial5beginEmh+0xbc>
     afa:	ee 89       	ldd	r30, Y+22	; 0x16
     afc:	ff 89       	ldd	r31, Y+23	; 0x17
     afe:	80 81       	ld	r24, Z
     b00:	84 70       	andi	r24, 0x04	; 4
     b02:	80 83       	st	Z, r24
     b04:	e8 8d       	ldd	r30, Y+24	; 0x18
     b06:	f9 8d       	ldd	r31, Y+25	; 0x19
     b08:	b0 82       	st	Z, r11
     b0a:	ee 89       	ldd	r30, Y+22	; 0x16
     b0c:	ff 89       	ldd	r31, Y+23	; 0x17
     b0e:	40 81       	ld	r20, Z
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	9c 01       	movw	r18, r24
     b16:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <_ZN14HardwareSerial5beginEmh+0xd0>
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	0a 94       	dec	r0
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <_ZN14HardwareSerial5beginEmh+0xcc>
     b22:	42 2b       	or	r20, r18
     b24:	40 83       	st	Z, r20
     b26:	ee 89       	ldd	r30, Y+22	; 0x16
     b28:	ff 89       	ldd	r31, Y+23	; 0x17
     b2a:	40 81       	ld	r20, Z
     b2c:	9c 01       	movw	r18, r24
     b2e:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <_ZN14HardwareSerial5beginEmh+0xe8>
     b32:	22 0f       	add	r18, r18
     b34:	33 1f       	adc	r19, r19
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <_ZN14HardwareSerial5beginEmh+0xe4>
     b3a:	42 2b       	or	r20, r18
     b3c:	40 83       	st	Z, r20
     b3e:	ee 89       	ldd	r30, Y+22	; 0x16
     b40:	ff 89       	ldd	r31, Y+23	; 0x17
     b42:	40 81       	ld	r20, Z
     b44:	9c 01       	movw	r18, r24
     b46:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <_ZN14HardwareSerial5beginEmh+0x100>
     b4a:	22 0f       	add	r18, r18
     b4c:	33 1f       	adc	r19, r19
     b4e:	0a 94       	dec	r0
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <_ZN14HardwareSerial5beginEmh+0xfc>
     b52:	42 2b       	or	r20, r18
     b54:	40 83       	st	Z, r20
     b56:	ee 89       	ldd	r30, Y+22	; 0x16
     b58:	ff 89       	ldd	r31, Y+23	; 0x17
     b5a:	20 81       	ld	r18, Z
     b5c:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <_ZN14HardwareSerial5beginEmh+0x116>
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	0a 94       	dec	r0
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <_ZN14HardwareSerial5beginEmh+0x112>
     b68:	80 95       	com	r24
     b6a:	82 23       	and	r24, r18
     b6c:	80 83       	st	Z, r24
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	08 95       	ret

00000b7e <_ZN14HardwareSerial3endEv>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	fc 01       	movw	r30, r24
     b84:	86 85       	ldd	r24, Z+14	; 0x0e
     b86:	97 85       	ldd	r25, Z+15	; 0x0f
     b88:	dc 01       	movw	r26, r24
     b8a:	a0 5c       	subi	r26, 0xC0	; 192
     b8c:	bf 4f       	sbci	r27, 0xFF	; 255
     b8e:	ec 01       	movw	r28, r24
     b90:	ce 5b       	subi	r28, 0xBE	; 190
     b92:	df 4f       	sbci	r29, 0xFF	; 255
     b94:	4d 91       	ld	r20, X+
     b96:	5c 91       	ld	r21, X
     b98:	11 97       	sbiw	r26, 0x01	; 1
     b9a:	28 81       	ld	r18, Y
     b9c:	39 81       	ldd	r19, Y+1	; 0x01
     b9e:	42 17       	cp	r20, r18
     ba0:	53 07       	cpc	r21, r19
     ba2:	c1 f7       	brne	.-16     	; 0xb94 <_ZN14HardwareSerial3endEv+0x16>
     ba4:	a6 89       	ldd	r26, Z+22	; 0x16
     ba6:	b7 89       	ldd	r27, Z+23	; 0x17
     ba8:	4c 91       	ld	r20, X
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	9c 01       	movw	r18, r24
     bb0:	04 8c       	ldd	r0, Z+28	; 0x1c
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <_ZN14HardwareSerial3endEv+0x3a>
     bb4:	22 0f       	add	r18, r18
     bb6:	33 1f       	adc	r19, r19
     bb8:	0a 94       	dec	r0
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <_ZN14HardwareSerial3endEv+0x36>
     bbc:	20 95       	com	r18
     bbe:	24 23       	and	r18, r20
     bc0:	2c 93       	st	X, r18
     bc2:	a6 89       	ldd	r26, Z+22	; 0x16
     bc4:	b7 89       	ldd	r27, Z+23	; 0x17
     bc6:	4c 91       	ld	r20, X
     bc8:	9c 01       	movw	r18, r24
     bca:	05 8c       	ldd	r0, Z+29	; 0x1d
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <_ZN14HardwareSerial3endEv+0x54>
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <_ZN14HardwareSerial3endEv+0x50>
     bd6:	20 95       	com	r18
     bd8:	24 23       	and	r18, r20
     bda:	2c 93       	st	X, r18
     bdc:	a6 89       	ldd	r26, Z+22	; 0x16
     bde:	b7 89       	ldd	r27, Z+23	; 0x17
     be0:	4c 91       	ld	r20, X
     be2:	9c 01       	movw	r18, r24
     be4:	06 8c       	ldd	r0, Z+30	; 0x1e
     be6:	02 c0       	rjmp	.+4      	; 0xbec <_ZN14HardwareSerial3endEv+0x6e>
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	0a 94       	dec	r0
     bee:	e2 f7       	brpl	.-8      	; 0xbe8 <_ZN14HardwareSerial3endEv+0x6a>
     bf0:	20 95       	com	r18
     bf2:	24 23       	and	r18, r20
     bf4:	2c 93       	st	X, r18
     bf6:	a6 89       	ldd	r26, Z+22	; 0x16
     bf8:	b7 89       	ldd	r27, Z+23	; 0x17
     bfa:	2c 91       	ld	r18, X
     bfc:	07 8c       	ldd	r0, Z+31	; 0x1f
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <_ZN14HardwareSerial3endEv+0x86>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <_ZN14HardwareSerial3endEv+0x82>
     c08:	80 95       	com	r24
     c0a:	82 23       	and	r24, r18
     c0c:	8c 93       	st	X, r24
     c0e:	84 85       	ldd	r24, Z+12	; 0x0c
     c10:	95 85       	ldd	r25, Z+13	; 0x0d
     c12:	fc 01       	movw	r30, r24
     c14:	ee 5b       	subi	r30, 0xBE	; 190
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	20 81       	ld	r18, Z
     c1a:	31 81       	ldd	r19, Z+1	; 0x01
     c1c:	fc 01       	movw	r30, r24
     c1e:	e0 5c       	subi	r30, 0xC0	; 192
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	31 83       	std	Z+1, r19	; 0x01
     c24:	20 83       	st	Z, r18
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <_ZN14HardwareSerialcvbEv>:
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	08 95       	ret

00000c30 <_ZN5Print5writeEPKhj>:
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	6c 01       	movw	r12, r24
     c42:	eb 01       	movw	r28, r22
     c44:	7a 01       	movw	r14, r20
     c46:	e6 0e       	add	r14, r22
     c48:	f7 1e       	adc	r15, r23
     c4a:	00 e0       	ldi	r16, 0x00	; 0
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	0b c0       	rjmp	.+22     	; 0xc66 <_ZN5Print5writeEPKhj+0x36>
     c50:	69 91       	ld	r22, Y+
     c52:	d6 01       	movw	r26, r12
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	01 90       	ld	r0, Z+
     c5a:	f0 81       	ld	r31, Z
     c5c:	e0 2d       	mov	r30, r0
     c5e:	c6 01       	movw	r24, r12
     c60:	09 95       	icall
     c62:	08 0f       	add	r16, r24
     c64:	19 1f       	adc	r17, r25
     c66:	ce 15       	cp	r28, r14
     c68:	df 05       	cpc	r29, r15
     c6a:	91 f7       	brne	.-28     	; 0xc50 <_ZN5Print5writeEPKhj+0x20>
     c6c:	c8 01       	movw	r24, r16
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	cf 90       	pop	r12
     c7e:	08 95       	ret

00000c80 <_ZN5Print5printEPK19__FlashStringHelper>:
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	7c 01       	movw	r14, r24
     c8e:	eb 01       	movw	r28, r22
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	fe 01       	movw	r30, r28
     c96:	21 96       	adiw	r28, 0x01	; 1
     c98:	64 91       	lpm	r22, Z+
     c9a:	66 23       	and	r22, r22
     c9c:	51 f0       	breq	.+20     	; 0xcb2 <_ZN5Print5printEPK19__FlashStringHelper+0x32>
     c9e:	f7 01       	movw	r30, r14
     ca0:	a0 81       	ld	r26, Z
     ca2:	b1 81       	ldd	r27, Z+1	; 0x01
     ca4:	ed 91       	ld	r30, X+
     ca6:	fc 91       	ld	r31, X
     ca8:	c7 01       	movw	r24, r14
     caa:	09 95       	icall
     cac:	08 0f       	add	r16, r24
     cae:	19 1f       	adc	r17, r25
     cb0:	f1 cf       	rjmp	.-30     	; 0xc94 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     cb2:	c8 01       	movw	r24, r16
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	ff 90       	pop	r15
     cbe:	ef 90       	pop	r14
     cc0:	08 95       	ret

00000cc2 <_ZN5Print5printERK6String>:
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	7c 01       	movw	r14, r24
     cd8:	6b 01       	movw	r12, r22
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	c0 e0       	ldi	r28, 0x00	; 0
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <_ZN5Print5printERK6String+0x44>
     ce4:	d7 01       	movw	r26, r14
     ce6:	ed 91       	ld	r30, X+
     ce8:	fc 91       	ld	r31, X
     cea:	a0 80       	ld	r10, Z
     cec:	b1 80       	ldd	r11, Z+1	; 0x01
     cee:	b8 01       	movw	r22, r16
     cf0:	c6 01       	movw	r24, r12
     cf2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZNK6StringixEj>
     cf6:	68 2f       	mov	r22, r24
     cf8:	c7 01       	movw	r24, r14
     cfa:	f5 01       	movw	r30, r10
     cfc:	09 95       	icall
     cfe:	c8 0f       	add	r28, r24
     d00:	d9 1f       	adc	r29, r25
     d02:	0f 5f       	subi	r16, 0xFF	; 255
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	d6 01       	movw	r26, r12
     d08:	14 96       	adiw	r26, 0x04	; 4
     d0a:	8d 91       	ld	r24, X+
     d0c:	9c 91       	ld	r25, X
     d0e:	15 97       	sbiw	r26, 0x05	; 5
     d10:	08 17       	cp	r16, r24
     d12:	19 07       	cpc	r17, r25
     d14:	38 f3       	brcs	.-50     	; 0xce4 <_ZN5Print5printERK6String+0x22>
     d16:	ce 01       	movw	r24, r28
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	08 95       	ret

00000d2e <_ZN5Print5printEPKc>:
     d2e:	0c 94 21 41 	jmp	0x8242	; 0x8242 <_ZN5Print5writeEPKc>

00000d32 <_ZN5Print5printEc>:
     d32:	dc 01       	movw	r26, r24
     d34:	ed 91       	ld	r30, X+
     d36:	fc 91       	ld	r31, X
     d38:	01 90       	ld	r0, Z+
     d3a:	f0 81       	ld	r31, Z
     d3c:	e0 2d       	mov	r30, r0
     d3e:	09 94       	ijmp

00000d40 <_ZN5Print5printERK9Printable>:
     d40:	db 01       	movw	r26, r22
     d42:	ed 91       	ld	r30, X+
     d44:	fc 91       	ld	r31, X
     d46:	11 97       	sbiw	r26, 0x01	; 1
     d48:	01 90       	ld	r0, Z+
     d4a:	f0 81       	ld	r31, Z
     d4c:	e0 2d       	mov	r30, r0
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	09 94       	ijmp

00000d54 <_ZN5Print7printlnEv>:
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
     d5e:	6d e0       	ldi	r22, 0x0D	; 13
     d60:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
     d64:	8c 01       	movw	r16, r24
     d66:	6a e0       	ldi	r22, 0x0A	; 10
     d68:	ce 01       	movw	r24, r28
     d6a:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
     d6e:	9c 01       	movw	r18, r24
     d70:	20 0f       	add	r18, r16
     d72:	31 1f       	adc	r19, r17
     d74:	c9 01       	movw	r24, r18
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <_ZN5Print7printlnEPK19__FlashStringHelper>:
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ec 01       	movw	r28, r24
     d8a:	0e 94 40 06 	call	0xc80	; 0xc80 <_ZN5Print5printEPK19__FlashStringHelper>
     d8e:	8c 01       	movw	r16, r24
     d90:	ce 01       	movw	r24, r28
     d92:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     d96:	9c 01       	movw	r18, r24
     d98:	20 0f       	add	r18, r16
     d9a:	31 1f       	adc	r19, r17
     d9c:	c9 01       	movw	r24, r18
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <_ZN5Print7printlnERK6String>:
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	ec 01       	movw	r28, r24
     db2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN5Print5printERK6String>
     db6:	8c 01       	movw	r16, r24
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     dbe:	9c 01       	movw	r18, r24
     dc0:	20 0f       	add	r18, r16
     dc2:	31 1f       	adc	r19, r17
     dc4:	c9 01       	movw	r24, r18
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <_ZN5Print7printlnEPKc>:
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
     dda:	0e 94 21 41 	call	0x8242	; 0x8242 <_ZN5Print5writeEPKc>
     dde:	8c 01       	movw	r16, r24
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     de6:	98 01       	movw	r18, r16
     de8:	28 0f       	add	r18, r24
     dea:	39 1f       	adc	r19, r25
     dec:	c9 01       	movw	r24, r18
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <_ZN5Print7printlnEc>:
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
     e02:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
     e06:	8c 01       	movw	r16, r24
     e08:	ce 01       	movw	r24, r28
     e0a:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     e0e:	9c 01       	movw	r18, r24
     e10:	20 0f       	add	r18, r16
     e12:	31 1f       	adc	r19, r17
     e14:	c9 01       	movw	r24, r18
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <_ZN5Print7printlnERK9Printable>:
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	ec 01       	movw	r28, r24
     e2a:	0e 94 a0 06 	call	0xd40	; 0xd40 <_ZN5Print5printERK9Printable>
     e2e:	8c 01       	movw	r16, r24
     e30:	ce 01       	movw	r24, r28
     e32:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     e36:	9c 01       	movw	r18, r24
     e38:	20 0f       	add	r18, r16
     e3a:	31 1f       	adc	r19, r17
     e3c:	c9 01       	movw	r24, r18
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <_ZN5Print11printNumberEmh>:
     e48:	5f 92       	push	r5
     e4a:	6f 92       	push	r6
     e4c:	7f 92       	push	r7
     e4e:	8f 92       	push	r8
     e50:	9f 92       	push	r9
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	a1 97       	sbiw	r28, 0x21	; 33
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	3c 01       	movw	r6, r24
     e78:	6a 01       	movw	r12, r20
     e7a:	7b 01       	movw	r14, r22
     e7c:	52 2e       	mov	r5, r18
     e7e:	19 a2       	std	Y+33, r1	; 0x21
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	82 17       	cp	r24, r18
     e84:	10 f0       	brcs	.+4      	; 0xe8a <_ZN5Print11printNumberEmh+0x42>
     e86:	8a e0       	ldi	r24, 0x0A	; 10
     e88:	58 2e       	mov	r5, r24
     e8a:	8e 01       	movw	r16, r28
     e8c:	0f 5d       	subi	r16, 0xDF	; 223
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	85 2c       	mov	r8, r5
     e92:	91 2c       	mov	r9, r1
     e94:	a1 2c       	mov	r10, r1
     e96:	b1 2c       	mov	r11, r1
     e98:	c7 01       	movw	r24, r14
     e9a:	b6 01       	movw	r22, r12
     e9c:	a5 01       	movw	r20, r10
     e9e:	94 01       	movw	r18, r8
     ea0:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
     ea4:	8c 2d       	mov	r24, r12
     ea6:	52 9e       	mul	r5, r18
     ea8:	80 19       	sub	r24, r0
     eaa:	11 24       	eor	r1, r1
     eac:	01 50       	subi	r16, 0x01	; 1
     eae:	11 09       	sbc	r17, r1
     eb0:	8a 30       	cpi	r24, 0x0A	; 10
     eb2:	10 f4       	brcc	.+4      	; 0xeb8 <_ZN5Print11printNumberEmh+0x70>
     eb4:	80 5d       	subi	r24, 0xD0	; 208
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <_ZN5Print11printNumberEmh+0x72>
     eb8:	89 5c       	subi	r24, 0xC9	; 201
     eba:	f8 01       	movw	r30, r16
     ebc:	80 83       	st	Z, r24
     ebe:	69 01       	movw	r12, r18
     ec0:	7a 01       	movw	r14, r20
     ec2:	c1 14       	cp	r12, r1
     ec4:	d1 04       	cpc	r13, r1
     ec6:	e1 04       	cpc	r14, r1
     ec8:	f1 04       	cpc	r15, r1
     eca:	31 f7       	brne	.-52     	; 0xe98 <_ZN5Print11printNumberEmh+0x50>
     ecc:	b8 01       	movw	r22, r16
     ece:	c3 01       	movw	r24, r6
     ed0:	0e 94 21 41 	call	0x8242	; 0x8242 <_ZN5Print5writeEPKc>
     ed4:	a1 96       	adiw	r28, 0x21	; 33
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	9f 90       	pop	r9
     ef6:	8f 90       	pop	r8
     ef8:	7f 90       	pop	r7
     efa:	6f 90       	pop	r6
     efc:	5f 90       	pop	r5
     efe:	08 95       	ret

00000f00 <_ZN5Print5printEmi>:
     f00:	21 15       	cp	r18, r1
     f02:	31 05       	cpc	r19, r1
     f04:	41 f4       	brne	.+16     	; 0xf16 <_ZN5Print5printEmi+0x16>
     f06:	dc 01       	movw	r26, r24
     f08:	ed 91       	ld	r30, X+
     f0a:	fc 91       	ld	r31, X
     f0c:	01 90       	ld	r0, Z+
     f0e:	f0 81       	ld	r31, Z
     f10:	e0 2d       	mov	r30, r0
     f12:	64 2f       	mov	r22, r20
     f14:	09 94       	ijmp
     f16:	0c 94 24 07 	jmp	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>

00000f1a <_ZN5Print7printlnEmi>:
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5Print5printEmi>
     f28:	8c 01       	movw	r16, r24
     f2a:	ce 01       	movw	r24, r28
     f2c:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     f30:	9c 01       	movw	r18, r24
     f32:	20 0f       	add	r18, r16
     f34:	31 1f       	adc	r19, r17
     f36:	c9 01       	movw	r24, r18
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <_ZN5Print5printEji>:
     f42:	9a 01       	movw	r18, r20
     f44:	ab 01       	movw	r20, r22
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_ZN5Print5printEmi>

00000f4e <_ZN5Print7printlnEji>:
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
     f58:	9a 01       	movw	r18, r20
     f5a:	ab 01       	movw	r20, r22
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5Print5printEmi>
     f64:	8c 01       	movw	r16, r24
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     f6c:	98 01       	movw	r18, r16
     f6e:	28 0f       	add	r18, r24
     f70:	39 1f       	adc	r19, r25
     f72:	c9 01       	movw	r24, r18
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <_ZN5Print5printEhi>:
     f7e:	9a 01       	movw	r18, r20
     f80:	46 2f       	mov	r20, r22
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0c 94 80 07 	jmp	0xf00	; 0xf00 <_ZN5Print5printEmi>

00000f8c <_ZN5Print7printlnEhi>:
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
     f96:	9a 01       	movw	r18, r20
     f98:	46 2f       	mov	r20, r22
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5Print5printEmi>
     fa4:	8c 01       	movw	r16, r24
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
     fac:	98 01       	movw	r18, r16
     fae:	28 0f       	add	r18, r24
     fb0:	39 1f       	adc	r19, r25
     fb2:	c9 01       	movw	r24, r18
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <_ZN5Print5printEli>:
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	6a 01       	movw	r12, r20
     fd2:	7b 01       	movw	r14, r22
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	79 f4       	brne	.+30     	; 0xff8 <_ZN5Print5printEli+0x3a>
     fda:	e8 81       	ld	r30, Y
     fdc:	f9 81       	ldd	r31, Y+1	; 0x01
     fde:	01 90       	ld	r0, Z+
     fe0:	f0 81       	ld	r31, Z
     fe2:	e0 2d       	mov	r30, r0
     fe4:	64 2f       	mov	r22, r20
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	09 94       	ijmp
     ff8:	2a 30       	cpi	r18, 0x0A	; 10
     ffa:	31 05       	cpc	r19, r1
     ffc:	19 f4       	brne	.+6      	; 0x1004 <_ZN5Print5printEli+0x46>
     ffe:	77 fd       	sbrc	r23, 7
    1000:	0e c0       	rjmp	.+28     	; 0x101e <_ZN5Print5printEli+0x60>
    1002:	2a e0       	ldi	r18, 0x0A	; 10
    1004:	b7 01       	movw	r22, r14
    1006:	a6 01       	movw	r20, r12
    1008:	ce 01       	movw	r24, r28
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	0c 94 24 07 	jmp	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>
    101e:	6d e2       	ldi	r22, 0x2D	; 45
    1020:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
    1024:	8c 01       	movw	r16, r24
    1026:	44 27       	eor	r20, r20
    1028:	55 27       	eor	r21, r21
    102a:	ba 01       	movw	r22, r20
    102c:	4c 19       	sub	r20, r12
    102e:	5d 09       	sbc	r21, r13
    1030:	6e 09       	sbc	r22, r14
    1032:	7f 09       	sbc	r23, r15
    1034:	2a e0       	ldi	r18, 0x0A	; 10
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>
    103c:	9c 01       	movw	r18, r24
    103e:	20 0f       	add	r18, r16
    1040:	31 1f       	adc	r19, r17
    1042:	c9 01       	movw	r24, r18
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	08 95       	ret

00001056 <_ZN5Print7printlnEli>:
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ec 01       	movw	r28, r24
    1060:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
    1064:	8c 01       	movw	r16, r24
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
    106c:	9c 01       	movw	r18, r24
    106e:	20 0f       	add	r18, r16
    1070:	31 1f       	adc	r19, r17
    1072:	c9 01       	movw	r24, r18
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <_ZN5Print5printEii>:
    107e:	9a 01       	movw	r18, r20
    1080:	ab 01       	movw	r20, r22
    1082:	66 27       	eor	r22, r22
    1084:	57 fd       	sbrc	r21, 7
    1086:	60 95       	com	r22
    1088:	76 2f       	mov	r23, r22
    108a:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_ZN5Print5printEli>

0000108e <_ZN5Print7printlnEii>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	ec 01       	movw	r28, r24
    1098:	9a 01       	movw	r18, r20
    109a:	ab 01       	movw	r20, r22
    109c:	66 27       	eor	r22, r22
    109e:	57 fd       	sbrc	r21, 7
    10a0:	60 95       	com	r22
    10a2:	76 2f       	mov	r23, r22
    10a4:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
    10a8:	8c 01       	movw	r16, r24
    10aa:	ce 01       	movw	r24, r28
    10ac:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
    10b0:	98 01       	movw	r18, r16
    10b2:	28 0f       	add	r18, r24
    10b4:	39 1f       	adc	r19, r25
    10b6:	c9 01       	movw	r24, r18
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <_ZN5Print10printFloatEdh>:
    10c2:	6f 92       	push	r6
    10c4:	7f 92       	push	r7
    10c6:	8f 92       	push	r8
    10c8:	9f 92       	push	r9
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	8c 01       	movw	r16, r24
    10de:	6a 01       	movw	r12, r20
    10e0:	7b 01       	movw	r14, r22
    10e2:	c2 2f       	mov	r28, r18
    10e4:	9a 01       	movw	r18, r20
    10e6:	ab 01       	movw	r20, r22
    10e8:	c7 01       	movw	r24, r14
    10ea:	b6 01       	movw	r22, r12
    10ec:	0e 94 c7 44 	call	0x898e	; 0x898e <__unordsf2>
    10f0:	88 23       	and	r24, r24
    10f2:	19 f0       	breq	.+6      	; 0x10fa <_ZN5Print10printFloatEdh+0x38>
    10f4:	62 e5       	ldi	r22, 0x52	; 82
    10f6:	76 e0       	ldi	r23, 0x06	; 6
    10f8:	32 c0       	rjmp	.+100    	; 0x115e <_ZN5Print10printFloatEdh+0x9c>
    10fa:	46 01       	movw	r8, r12
    10fc:	57 01       	movw	r10, r14
    10fe:	e8 94       	clt
    1100:	b7 f8       	bld	r11, 7
    1102:	2f ef       	ldi	r18, 0xFF	; 255
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	5f e7       	ldi	r21, 0x7F	; 127
    110a:	c5 01       	movw	r24, r10
    110c:	b4 01       	movw	r22, r8
    110e:	0e 94 c7 44 	call	0x898e	; 0x898e <__unordsf2>
    1112:	81 11       	cpse	r24, r1
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <_ZN5Print10printFloatEdh+0x6e>
    1116:	2f ef       	ldi	r18, 0xFF	; 255
    1118:	3f ef       	ldi	r19, 0xFF	; 255
    111a:	4f e7       	ldi	r20, 0x7F	; 127
    111c:	5f e7       	ldi	r21, 0x7F	; 127
    111e:	c5 01       	movw	r24, r10
    1120:	b4 01       	movw	r22, r8
    1122:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    1126:	18 16       	cp	r1, r24
    1128:	1c f4       	brge	.+6      	; 0x1130 <_ZN5Print10printFloatEdh+0x6e>
    112a:	66 e5       	ldi	r22, 0x56	; 86
    112c:	76 e0       	ldi	r23, 0x06	; 6
    112e:	17 c0       	rjmp	.+46     	; 0x115e <_ZN5Print10printFloatEdh+0x9c>
    1130:	2f ef       	ldi	r18, 0xFF	; 255
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	5f e4       	ldi	r21, 0x4F	; 79
    1138:	c7 01       	movw	r24, r14
    113a:	b6 01       	movw	r22, r12
    113c:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    1140:	18 16       	cp	r1, r24
    1142:	0c f4       	brge	.+2      	; 0x1146 <_ZN5Print10printFloatEdh+0x84>
    1144:	0a c0       	rjmp	.+20     	; 0x115a <_ZN5Print10printFloatEdh+0x98>
    1146:	2f ef       	ldi	r18, 0xFF	; 255
    1148:	3f ef       	ldi	r19, 0xFF	; 255
    114a:	4f e7       	ldi	r20, 0x7F	; 127
    114c:	5f ec       	ldi	r21, 0xCF	; 207
    114e:	c7 01       	movw	r24, r14
    1150:	b6 01       	movw	r22, r12
    1152:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    1156:	87 ff       	sbrs	r24, 7
    1158:	12 c0       	rjmp	.+36     	; 0x117e <_ZN5Print10printFloatEdh+0xbc>
    115a:	6a e5       	ldi	r22, 0x5A	; 90
    115c:	76 e0       	ldi	r23, 0x06	; 6
    115e:	c8 01       	movw	r24, r16
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	bf 90       	pop	r11
    1170:	af 90       	pop	r10
    1172:	9f 90       	pop	r9
    1174:	8f 90       	pop	r8
    1176:	7f 90       	pop	r7
    1178:	6f 90       	pop	r6
    117a:	0c 94 21 41 	jmp	0x8242	; 0x8242 <_ZN5Print5writeEPKc>
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    118c:	87 ff       	sbrs	r24, 7
    118e:	0a c0       	rjmp	.+20     	; 0x11a4 <_ZN5Print10printFloatEdh+0xe2>
    1190:	6d e2       	ldi	r22, 0x2D	; 45
    1192:	c8 01       	movw	r24, r16
    1194:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
    1198:	3c 01       	movw	r6, r24
    119a:	f7 fa       	bst	r15, 7
    119c:	f0 94       	com	r15
    119e:	f7 f8       	bld	r15, 7
    11a0:	f0 94       	com	r15
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <_ZN5Print10printFloatEdh+0xe6>
    11a4:	61 2c       	mov	r6, r1
    11a6:	71 2c       	mov	r7, r1
    11a8:	b1 2c       	mov	r11, r1
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	9f e3       	ldi	r25, 0x3F	; 63
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <_ZN5Print10printFloatEdh+0x100>
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    11c0:	b3 94       	inc	r11
    11c2:	bc 12       	cpse	r11, r28
    11c4:	f7 cf       	rjmp	.-18     	; 0x11b4 <_ZN5Print10printFloatEdh+0xf2>
    11c6:	26 2f       	mov	r18, r22
    11c8:	37 2f       	mov	r19, r23
    11ca:	48 2f       	mov	r20, r24
    11cc:	59 2f       	mov	r21, r25
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    11d6:	4b 01       	movw	r8, r22
    11d8:	5c 01       	movw	r10, r24
    11da:	79 2d       	mov	r23, r9
    11dc:	9b 2d       	mov	r25, r11
    11de:	0e 94 7f 42 	call	0x84fe	; 0x84fe <__fixunssfsi>
    11e2:	6b 01       	movw	r12, r22
    11e4:	7c 01       	movw	r14, r24
    11e6:	0e 94 ab 42 	call	0x8556	; 0x8556 <__floatunsisf>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	68 2d       	mov	r22, r8
    11f0:	79 2d       	mov	r23, r9
    11f2:	8a 2d       	mov	r24, r10
    11f4:	9b 2d       	mov	r25, r11
    11f6:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    11fa:	b6 2e       	mov	r11, r22
    11fc:	a7 2e       	mov	r10, r23
    11fe:	98 2e       	mov	r9, r24
    1200:	89 2e       	mov	r8, r25
    1202:	2a e0       	ldi	r18, 0x0A	; 10
    1204:	a6 01       	movw	r20, r12
    1206:	b7 01       	movw	r22, r14
    1208:	c8 01       	movw	r24, r16
    120a:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZN5Print11printNumberEmh>
    120e:	68 0e       	add	r6, r24
    1210:	79 1e       	adc	r7, r25
    1212:	cc 23       	and	r28, r28
    1214:	c9 f1       	breq	.+114    	; 0x1288 <_ZN5Print10printFloatEdh+0x1c6>
    1216:	63 ef       	ldi	r22, 0xF3	; 243
    1218:	73 e0       	ldi	r23, 0x03	; 3
    121a:	c8 01       	movw	r24, r16
    121c:	0e 94 21 41 	call	0x8242	; 0x8242 <_ZN5Print5writeEPKc>
    1220:	68 0e       	add	r6, r24
    1222:	79 1e       	adc	r7, r25
    1224:	31 c0       	rjmp	.+98     	; 0x1288 <_ZN5Print10printFloatEdh+0x1c6>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e2       	ldi	r20, 0x20	; 32
    122c:	51 e4       	ldi	r21, 0x41	; 65
    122e:	d5 01       	movw	r26, r10
    1230:	f4 01       	movw	r30, r8
    1232:	6b 2f       	mov	r22, r27
    1234:	7a 2d       	mov	r23, r10
    1236:	8f 2f       	mov	r24, r31
    1238:	98 2d       	mov	r25, r8
    123a:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    123e:	4b 01       	movw	r8, r22
    1240:	5c 01       	movw	r10, r24
    1242:	79 2d       	mov	r23, r9
    1244:	9b 2d       	mov	r25, r11
    1246:	0e 94 7a 42 	call	0x84f4	; 0x84f4 <__fixsfsi>
    124a:	6b 01       	movw	r12, r22
    124c:	ee 24       	eor	r14, r14
    124e:	d7 fc       	sbrc	r13, 7
    1250:	e0 94       	com	r14
    1252:	fe 2c       	mov	r15, r14
    1254:	2a e0       	ldi	r18, 0x0A	; 10
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	b7 01       	movw	r22, r14
    125a:	a6 01       	movw	r20, r12
    125c:	c8 01       	movw	r24, r16
    125e:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
    1262:	68 0e       	add	r6, r24
    1264:	79 1e       	adc	r7, r25
    1266:	c7 01       	movw	r24, r14
    1268:	b6 01       	movw	r22, r12
    126a:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    126e:	9b 01       	movw	r18, r22
    1270:	ac 01       	movw	r20, r24
    1272:	68 2d       	mov	r22, r8
    1274:	79 2d       	mov	r23, r9
    1276:	8a 2d       	mov	r24, r10
    1278:	9b 2d       	mov	r25, r11
    127a:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    127e:	b6 2e       	mov	r11, r22
    1280:	a7 2e       	mov	r10, r23
    1282:	98 2e       	mov	r9, r24
    1284:	89 2e       	mov	r8, r25
    1286:	c1 50       	subi	r28, 0x01	; 1
    1288:	c1 11       	cpse	r28, r1
    128a:	cd cf       	rjmp	.-102    	; 0x1226 <_ZN5Print10printFloatEdh+0x164>
    128c:	c3 01       	movw	r24, r6
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	bf 90       	pop	r11
    129e:	af 90       	pop	r10
    12a0:	9f 90       	pop	r9
    12a2:	8f 90       	pop	r8
    12a4:	7f 90       	pop	r7
    12a6:	6f 90       	pop	r6
    12a8:	08 95       	ret

000012aa <_ZN5Print5printEdi>:
    12aa:	0c 94 61 08 	jmp	0x10c2	; 0x10c2 <_ZN5Print10printFloatEdh>

000012ae <_ZN5Print7printlnEdi>:
    12ae:	0f 93       	push	r16
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ec 01       	movw	r28, r24
    12b8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5Print10printFloatEdh>
    12bc:	8c 01       	movw	r16, r24
    12be:	ce 01       	movw	r24, r28
    12c0:	0e 94 aa 06 	call	0xd54	; 0xd54 <_ZN5Print7printlnEv>
    12c4:	98 01       	movw	r18, r16
    12c6:	28 0f       	add	r18, r24
    12c8:	39 1f       	adc	r19, r25
    12ca:	c9 01       	movw	r24, r18
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <attachInterrupt>:
    12d6:	88 30       	cpi	r24, 0x08	; 8
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <attachInterrupt+0x6>
    12da:	73 c0       	rjmp	.+230    	; 0x13c2 <attachInterrupt+0xec>
    12dc:	e8 2f       	mov	r30, r24
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	ea 5f       	subi	r30, 0xFA	; 250
    12e6:	f6 4f       	sbci	r31, 0xF6	; 246
    12e8:	71 83       	std	Z+1, r23	; 0x01
    12ea:	60 83       	st	Z, r22
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	11 f1       	breq	.+68     	; 0x1334 <attachInterrupt+0x5e>
    12f0:	30 f4       	brcc	.+12     	; 0x12fe <attachInterrupt+0x28>
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	59 f0       	breq	.+22     	; 0x130c <attachInterrupt+0x36>
    12f6:	90 f4       	brcc	.+36     	; 0x131c <attachInterrupt+0x46>
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	b1 f5       	brne	.+108    	; 0x1368 <attachInterrupt+0x92>
    12fc:	3d c0       	rjmp	.+122    	; 0x1378 <attachInterrupt+0xa2>
    12fe:	86 30       	cpi	r24, 0x06	; 6
    1300:	09 f4       	brne	.+2      	; 0x1304 <attachInterrupt+0x2e>
    1302:	46 c0       	rjmp	.+140    	; 0x1390 <attachInterrupt+0xba>
    1304:	20 f1       	brcs	.+72     	; 0x134e <attachInterrupt+0x78>
    1306:	87 30       	cpi	r24, 0x07	; 7
    1308:	79 f5       	brne	.+94     	; 0x1368 <attachInterrupt+0x92>
    130a:	4f c0       	rjmp	.+158    	; 0x13aa <attachInterrupt+0xd4>
    130c:	80 91 69 00 	lds	r24, 0x0069
    1310:	8c 7f       	andi	r24, 0xFC	; 252
    1312:	84 2b       	or	r24, r20
    1314:	80 93 69 00 	sts	0x0069, r24
    1318:	e8 9a       	sbi	0x1d, 0	; 29
    131a:	08 95       	ret
    131c:	80 91 69 00 	lds	r24, 0x0069
    1320:	44 0f       	add	r20, r20
    1322:	55 1f       	adc	r21, r21
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	83 7f       	andi	r24, 0xF3	; 243
    132a:	84 2b       	or	r24, r20
    132c:	80 93 69 00 	sts	0x0069, r24
    1330:	e9 9a       	sbi	0x1d, 1	; 29
    1332:	08 95       	ret
    1334:	80 91 69 00 	lds	r24, 0x0069
    1338:	74 e0       	ldi	r23, 0x04	; 4
    133a:	44 0f       	add	r20, r20
    133c:	55 1f       	adc	r21, r21
    133e:	7a 95       	dec	r23
    1340:	e1 f7       	brne	.-8      	; 0x133a <attachInterrupt+0x64>
    1342:	8f 7c       	andi	r24, 0xCF	; 207
    1344:	84 2b       	or	r24, r20
    1346:	80 93 69 00 	sts	0x0069, r24
    134a:	ea 9a       	sbi	0x1d, 2	; 29
    134c:	08 95       	ret
    134e:	80 91 69 00 	lds	r24, 0x0069
    1352:	66 e0       	ldi	r22, 0x06	; 6
    1354:	44 0f       	add	r20, r20
    1356:	55 1f       	adc	r21, r21
    1358:	6a 95       	dec	r22
    135a:	e1 f7       	brne	.-8      	; 0x1354 <attachInterrupt+0x7e>
    135c:	8f 73       	andi	r24, 0x3F	; 63
    135e:	84 2b       	or	r24, r20
    1360:	80 93 69 00 	sts	0x0069, r24
    1364:	eb 9a       	sbi	0x1d, 3	; 29
    1366:	08 95       	ret
    1368:	80 91 6a 00 	lds	r24, 0x006A
    136c:	8c 7f       	andi	r24, 0xFC	; 252
    136e:	84 2b       	or	r24, r20
    1370:	80 93 6a 00 	sts	0x006A, r24
    1374:	ec 9a       	sbi	0x1d, 4	; 29
    1376:	08 95       	ret
    1378:	80 91 6a 00 	lds	r24, 0x006A
    137c:	44 0f       	add	r20, r20
    137e:	55 1f       	adc	r21, r21
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	83 7f       	andi	r24, 0xF3	; 243
    1386:	84 2b       	or	r24, r20
    1388:	80 93 6a 00 	sts	0x006A, r24
    138c:	ed 9a       	sbi	0x1d, 5	; 29
    138e:	08 95       	ret
    1390:	80 91 6a 00 	lds	r24, 0x006A
    1394:	24 e0       	ldi	r18, 0x04	; 4
    1396:	44 0f       	add	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	2a 95       	dec	r18
    139c:	e1 f7       	brne	.-8      	; 0x1396 <attachInterrupt+0xc0>
    139e:	8f 7c       	andi	r24, 0xCF	; 207
    13a0:	84 2b       	or	r24, r20
    13a2:	80 93 6a 00 	sts	0x006A, r24
    13a6:	ee 9a       	sbi	0x1d, 6	; 29
    13a8:	08 95       	ret
    13aa:	80 91 6a 00 	lds	r24, 0x006A
    13ae:	96 e0       	ldi	r25, 0x06	; 6
    13b0:	44 0f       	add	r20, r20
    13b2:	55 1f       	adc	r21, r21
    13b4:	9a 95       	dec	r25
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <attachInterrupt+0xda>
    13b8:	8f 73       	andi	r24, 0x3F	; 63
    13ba:	84 2b       	or	r24, r20
    13bc:	80 93 6a 00 	sts	0x006A, r24
    13c0:	ef 9a       	sbi	0x1d, 7	; 29
    13c2:	08 95       	ret

000013c4 <detachInterrupt>:
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	30 f5       	brcc	.+76     	; 0x1414 <detachInterrupt+0x50>
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	89 f0       	breq	.+34     	; 0x13ee <detachInterrupt+0x2a>
    13cc:	30 f4       	brcc	.+12     	; 0x13da <detachInterrupt+0x16>
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	51 f0       	breq	.+20     	; 0x13e6 <detachInterrupt+0x22>
    13d2:	58 f4       	brcc	.+22     	; 0x13ea <detachInterrupt+0x26>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <detachInterrupt+0x32>
    13d8:	10 c0       	rjmp	.+32     	; 0x13fa <detachInterrupt+0x36>
    13da:	86 30       	cpi	r24, 0x06	; 6
    13dc:	81 f0       	breq	.+32     	; 0x13fe <detachInterrupt+0x3a>
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <detachInterrupt+0x2e>
    13e0:	87 30       	cpi	r24, 0x07	; 7
    13e2:	49 f4       	brne	.+18     	; 0x13f6 <detachInterrupt+0x32>
    13e4:	0e c0       	rjmp	.+28     	; 0x1402 <detachInterrupt+0x3e>
    13e6:	e8 98       	cbi	0x1d, 0	; 29
    13e8:	0d c0       	rjmp	.+26     	; 0x1404 <detachInterrupt+0x40>
    13ea:	e9 98       	cbi	0x1d, 1	; 29
    13ec:	0b c0       	rjmp	.+22     	; 0x1404 <detachInterrupt+0x40>
    13ee:	ea 98       	cbi	0x1d, 2	; 29
    13f0:	09 c0       	rjmp	.+18     	; 0x1404 <detachInterrupt+0x40>
    13f2:	eb 98       	cbi	0x1d, 3	; 29
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <detachInterrupt+0x40>
    13f6:	ec 98       	cbi	0x1d, 4	; 29
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <detachInterrupt+0x40>
    13fa:	ed 98       	cbi	0x1d, 5	; 29
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <detachInterrupt+0x40>
    13fe:	ee 98       	cbi	0x1d, 6	; 29
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <detachInterrupt+0x40>
    1402:	ef 98       	cbi	0x1d, 7	; 29
    1404:	e8 2f       	mov	r30, r24
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	ee 0f       	add	r30, r30
    140a:	ff 1f       	adc	r31, r31
    140c:	ea 5f       	subi	r30, 0xFA	; 250
    140e:	f6 4f       	sbci	r31, 0xF6	; 246
    1410:	11 82       	std	Z+1, r1	; 0x01
    1412:	10 82       	st	Z, r1
    1414:	08 95       	ret

00001416 <__vector_1>:
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	1b be       	out	0x3b, r1	; 59
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
    143e:	80 91 0a 09 	lds	r24, 0x090A
    1442:	90 91 0b 09 	lds	r25, 0x090B
    1446:	89 2b       	or	r24, r25
    1448:	29 f0       	breq	.+10     	; 0x1454 <__vector_1+0x3e>
    144a:	e0 91 0a 09 	lds	r30, 0x090A
    144e:	f0 91 0b 09 	lds	r31, 0x090B
    1452:	09 95       	icall
    1454:	ff 91       	pop	r31
    1456:	ef 91       	pop	r30
    1458:	bf 91       	pop	r27
    145a:	af 91       	pop	r26
    145c:	9f 91       	pop	r25
    145e:	8f 91       	pop	r24
    1460:	7f 91       	pop	r23
    1462:	6f 91       	pop	r22
    1464:	5f 91       	pop	r21
    1466:	4f 91       	pop	r20
    1468:	3f 91       	pop	r19
    146a:	2f 91       	pop	r18
    146c:	0f 90       	pop	r0
    146e:	0b be       	out	0x3b, r0	; 59
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_2>:
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	0b b6       	in	r0, 0x3b	; 59
    1486:	0f 92       	push	r0
    1488:	1b be       	out	0x3b, r1	; 59
    148a:	2f 93       	push	r18
    148c:	3f 93       	push	r19
    148e:	4f 93       	push	r20
    1490:	5f 93       	push	r21
    1492:	6f 93       	push	r22
    1494:	7f 93       	push	r23
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	af 93       	push	r26
    149c:	bf 93       	push	r27
    149e:	ef 93       	push	r30
    14a0:	ff 93       	push	r31
    14a2:	80 91 0c 09 	lds	r24, 0x090C
    14a6:	90 91 0d 09 	lds	r25, 0x090D
    14aa:	89 2b       	or	r24, r25
    14ac:	29 f0       	breq	.+10     	; 0x14b8 <__vector_2+0x3e>
    14ae:	e0 91 0c 09 	lds	r30, 0x090C
    14b2:	f0 91 0d 09 	lds	r31, 0x090D
    14b6:	09 95       	icall
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	0f 90       	pop	r0
    14d2:	0b be       	out	0x3b, r0	; 59
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <__vector_3>:
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	0b b6       	in	r0, 0x3b	; 59
    14ea:	0f 92       	push	r0
    14ec:	1b be       	out	0x3b, r1	; 59
    14ee:	2f 93       	push	r18
    14f0:	3f 93       	push	r19
    14f2:	4f 93       	push	r20
    14f4:	5f 93       	push	r21
    14f6:	6f 93       	push	r22
    14f8:	7f 93       	push	r23
    14fa:	8f 93       	push	r24
    14fc:	9f 93       	push	r25
    14fe:	af 93       	push	r26
    1500:	bf 93       	push	r27
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    1506:	80 91 0e 09 	lds	r24, 0x090E
    150a:	90 91 0f 09 	lds	r25, 0x090F
    150e:	89 2b       	or	r24, r25
    1510:	29 f0       	breq	.+10     	; 0x151c <__vector_3+0x3e>
    1512:	e0 91 0e 09 	lds	r30, 0x090E
    1516:	f0 91 0f 09 	lds	r31, 0x090F
    151a:	09 95       	icall
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0b be       	out	0x3b, r0	; 59
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	0f 90       	pop	r0
    153e:	1f 90       	pop	r1
    1540:	18 95       	reti

00001542 <__vector_4>:
    1542:	1f 92       	push	r1
    1544:	0f 92       	push	r0
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	0b b6       	in	r0, 0x3b	; 59
    154e:	0f 92       	push	r0
    1550:	1b be       	out	0x3b, r1	; 59
    1552:	2f 93       	push	r18
    1554:	3f 93       	push	r19
    1556:	4f 93       	push	r20
    1558:	5f 93       	push	r21
    155a:	6f 93       	push	r22
    155c:	7f 93       	push	r23
    155e:	8f 93       	push	r24
    1560:	9f 93       	push	r25
    1562:	af 93       	push	r26
    1564:	bf 93       	push	r27
    1566:	ef 93       	push	r30
    1568:	ff 93       	push	r31
    156a:	80 91 10 09 	lds	r24, 0x0910
    156e:	90 91 11 09 	lds	r25, 0x0911
    1572:	89 2b       	or	r24, r25
    1574:	29 f0       	breq	.+10     	; 0x1580 <__vector_4+0x3e>
    1576:	e0 91 10 09 	lds	r30, 0x0910
    157a:	f0 91 11 09 	lds	r31, 0x0911
    157e:	09 95       	icall
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <__vector_5>:
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	0b b6       	in	r0, 0x3b	; 59
    15b2:	0f 92       	push	r0
    15b4:	1b be       	out	0x3b, r1	; 59
    15b6:	2f 93       	push	r18
    15b8:	3f 93       	push	r19
    15ba:	4f 93       	push	r20
    15bc:	5f 93       	push	r21
    15be:	6f 93       	push	r22
    15c0:	7f 93       	push	r23
    15c2:	8f 93       	push	r24
    15c4:	9f 93       	push	r25
    15c6:	af 93       	push	r26
    15c8:	bf 93       	push	r27
    15ca:	ef 93       	push	r30
    15cc:	ff 93       	push	r31
    15ce:	80 91 06 09 	lds	r24, 0x0906
    15d2:	90 91 07 09 	lds	r25, 0x0907
    15d6:	89 2b       	or	r24, r25
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <__vector_5+0x3e>
    15da:	e0 91 06 09 	lds	r30, 0x0906
    15de:	f0 91 07 09 	lds	r31, 0x0907
    15e2:	09 95       	icall
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <__vector_6>:
    160a:	1f 92       	push	r1
    160c:	0f 92       	push	r0
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	0f 92       	push	r0
    1612:	11 24       	eor	r1, r1
    1614:	0b b6       	in	r0, 0x3b	; 59
    1616:	0f 92       	push	r0
    1618:	1b be       	out	0x3b, r1	; 59
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
    1632:	80 91 08 09 	lds	r24, 0x0908
    1636:	90 91 09 09 	lds	r25, 0x0909
    163a:	89 2b       	or	r24, r25
    163c:	29 f0       	breq	.+10     	; 0x1648 <__vector_6+0x3e>
    163e:	e0 91 08 09 	lds	r30, 0x0908
    1642:	f0 91 09 09 	lds	r31, 0x0909
    1646:	09 95       	icall
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0b be       	out	0x3b, r0	; 59
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <__vector_7>:
    166e:	1f 92       	push	r1
    1670:	0f 92       	push	r0
    1672:	0f b6       	in	r0, 0x3f	; 63
    1674:	0f 92       	push	r0
    1676:	11 24       	eor	r1, r1
    1678:	0b b6       	in	r0, 0x3b	; 59
    167a:	0f 92       	push	r0
    167c:	1b be       	out	0x3b, r1	; 59
    167e:	2f 93       	push	r18
    1680:	3f 93       	push	r19
    1682:	4f 93       	push	r20
    1684:	5f 93       	push	r21
    1686:	6f 93       	push	r22
    1688:	7f 93       	push	r23
    168a:	8f 93       	push	r24
    168c:	9f 93       	push	r25
    168e:	af 93       	push	r26
    1690:	bf 93       	push	r27
    1692:	ef 93       	push	r30
    1694:	ff 93       	push	r31
    1696:	80 91 12 09 	lds	r24, 0x0912
    169a:	90 91 13 09 	lds	r25, 0x0913
    169e:	89 2b       	or	r24, r25
    16a0:	29 f0       	breq	.+10     	; 0x16ac <__vector_7+0x3e>
    16a2:	e0 91 12 09 	lds	r30, 0x0912
    16a6:	f0 91 13 09 	lds	r31, 0x0913
    16aa:	09 95       	icall
    16ac:	ff 91       	pop	r31
    16ae:	ef 91       	pop	r30
    16b0:	bf 91       	pop	r27
    16b2:	af 91       	pop	r26
    16b4:	9f 91       	pop	r25
    16b6:	8f 91       	pop	r24
    16b8:	7f 91       	pop	r23
    16ba:	6f 91       	pop	r22
    16bc:	5f 91       	pop	r21
    16be:	4f 91       	pop	r20
    16c0:	3f 91       	pop	r19
    16c2:	2f 91       	pop	r18
    16c4:	0f 90       	pop	r0
    16c6:	0b be       	out	0x3b, r0	; 59
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <__vector_8>:
    16d2:	1f 92       	push	r1
    16d4:	0f 92       	push	r0
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	0f 92       	push	r0
    16da:	11 24       	eor	r1, r1
    16dc:	0b b6       	in	r0, 0x3b	; 59
    16de:	0f 92       	push	r0
    16e0:	1b be       	out	0x3b, r1	; 59
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	80 91 14 09 	lds	r24, 0x0914
    16fe:	90 91 15 09 	lds	r25, 0x0915
    1702:	89 2b       	or	r24, r25
    1704:	29 f0       	breq	.+10     	; 0x1710 <__vector_8+0x3e>
    1706:	e0 91 14 09 	lds	r30, 0x0914
    170a:	f0 91 15 09 	lds	r31, 0x0915
    170e:	09 95       	icall
    1710:	ff 91       	pop	r31
    1712:	ef 91       	pop	r30
    1714:	bf 91       	pop	r27
    1716:	af 91       	pop	r26
    1718:	9f 91       	pop	r25
    171a:	8f 91       	pop	r24
    171c:	7f 91       	pop	r23
    171e:	6f 91       	pop	r22
    1720:	5f 91       	pop	r21
    1722:	4f 91       	pop	r20
    1724:	3f 91       	pop	r19
    1726:	2f 91       	pop	r18
    1728:	0f 90       	pop	r0
    172a:	0b be       	out	0x3b, r0	; 59
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	0f 90       	pop	r0
    1732:	1f 90       	pop	r1
    1734:	18 95       	reti

00001736 <_ZN6StringD1Ev>:
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <free>

00001740 <_ZN6String10invalidateEv>:
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	ec 01       	movw	r28, r24
    1746:	88 81       	ld	r24, Y
    1748:	99 81       	ldd	r25, Y+1	; 0x01
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	11 f0       	breq	.+4      	; 0x1752 <_ZN6String10invalidateEv+0x12>
    174e:	0e 94 0a 14 	call	0x2814	; 0x2814 <free>
    1752:	19 82       	std	Y+1, r1	; 0x01
    1754:	18 82       	st	Y, r1
    1756:	1d 82       	std	Y+5, r1	; 0x05
    1758:	1c 82       	std	Y+4, r1	; 0x04
    175a:	1b 82       	std	Y+3, r1	; 0x03
    175c:	1a 82       	std	Y+2, r1	; 0x02
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <_ZN6String12changeBufferEj>:
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	ec 01       	movw	r28, r24
    176e:	8b 01       	movw	r16, r22
    1770:	6f 5f       	subi	r22, 0xFF	; 255
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	88 81       	ld	r24, Y
    1776:	99 81       	ldd	r25, Y+1	; 0x01
    1778:	0e 94 a8 14 	call	0x2950	; 0x2950 <realloc>
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	31 f0       	breq	.+12     	; 0x178c <_ZN6String12changeBufferEj+0x28>
    1780:	99 83       	std	Y+1, r25	; 0x01
    1782:	88 83       	st	Y, r24
    1784:	1b 83       	std	Y+3, r17	; 0x03
    1786:	0a 83       	std	Y+2, r16	; 0x02
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	01 c0       	rjmp	.+2      	; 0x178e <_ZN6String12changeBufferEj+0x2a>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <_ZN6String7reserveEj>:
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	ec 01       	movw	r28, r24
    179e:	88 81       	ld	r24, Y
    17a0:	99 81       	ldd	r25, Y+1	; 0x01
    17a2:	89 2b       	or	r24, r25
    17a4:	31 f0       	breq	.+12     	; 0x17b2 <_ZN6String7reserveEj+0x1a>
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	9b 81       	ldd	r25, Y+3	; 0x03
    17aa:	86 17       	cp	r24, r22
    17ac:	97 07       	cpc	r25, r23
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <_ZN6String7reserveEj+0x1a>
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <_ZN6String7reserveEj+0x32>
    17b2:	ce 01       	movw	r24, r28
    17b4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN6String12changeBufferEj>
    17b8:	88 23       	and	r24, r24
    17ba:	49 f0       	breq	.+18     	; 0x17ce <_ZN6String7reserveEj+0x36>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	89 2b       	or	r24, r25
    17c2:	19 f4       	brne	.+6      	; 0x17ca <_ZN6String7reserveEj+0x32>
    17c4:	e8 81       	ld	r30, Y
    17c6:	f9 81       	ldd	r31, Y+1	; 0x01
    17c8:	10 82       	st	Z, r1
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <_ZN6String7reserveEj+0x38>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <_ZN6String4copyEPKcj>:
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	ec 01       	movw	r28, r24
    17e4:	7b 01       	movw	r14, r22
    17e6:	8a 01       	movw	r16, r20
    17e8:	ba 01       	movw	r22, r20
    17ea:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN6String7reserveEj>
    17ee:	81 11       	cpse	r24, r1
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <_ZN6String4copyEPKcj+0x24>
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <_ZN6String4copyEPKcj+0x32>
    17fa:	1d 83       	std	Y+5, r17	; 0x05
    17fc:	0c 83       	std	Y+4, r16	; 0x04
    17fe:	b7 01       	movw	r22, r14
    1800:	88 81       	ld	r24, Y
    1802:	99 81       	ldd	r25, Y+1	; 0x01
    1804:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    1808:	ce 01       	movw	r24, r28
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	ff 90       	pop	r15
    1814:	ef 90       	pop	r14
    1816:	08 95       	ret

00001818 <_ZN6StringC1EPKc>:
    1818:	dc 01       	movw	r26, r24
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	1c 92       	st	X, r1
    181e:	1e 92       	st	-X, r1
    1820:	13 96       	adiw	r26, 0x03	; 3
    1822:	1c 92       	st	X, r1
    1824:	1e 92       	st	-X, r1
    1826:	12 97       	sbiw	r26, 0x02	; 2
    1828:	15 96       	adiw	r26, 0x05	; 5
    182a:	1c 92       	st	X, r1
    182c:	1e 92       	st	-X, r1
    182e:	14 97       	sbiw	r26, 0x04	; 4
    1830:	16 96       	adiw	r26, 0x06	; 6
    1832:	1c 92       	st	X, r1
    1834:	61 15       	cp	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	59 f0       	breq	.+22     	; 0x1850 <_ZN6StringC1EPKc+0x38>
    183a:	db 01       	movw	r26, r22
    183c:	0d 90       	ld	r0, X+
    183e:	00 20       	and	r0, r0
    1840:	e9 f7       	brne	.-6      	; 0x183c <_ZN6StringC1EPKc+0x24>
    1842:	ad 01       	movw	r20, r26
    1844:	41 50       	subi	r20, 0x01	; 1
    1846:	51 09       	sbc	r21, r1
    1848:	46 1b       	sub	r20, r22
    184a:	57 0b       	sbc	r21, r23
    184c:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <_ZN6String4copyEPKcj>
    1850:	08 95       	ret

00001852 <_ZN6StringaSERKS_>:
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
    1858:	fb 01       	movw	r30, r22
    185a:	86 17       	cp	r24, r22
    185c:	97 07       	cpc	r25, r23
    185e:	61 f0       	breq	.+24     	; 0x1878 <_ZN6StringaSERKS_+0x26>
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	61 15       	cp	r22, r1
    1866:	71 05       	cpc	r23, r1
    1868:	29 f0       	breq	.+10     	; 0x1874 <_ZN6StringaSERKS_+0x22>
    186a:	44 81       	ldd	r20, Z+4	; 0x04
    186c:	55 81       	ldd	r21, Z+5	; 0x05
    186e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN6String4copyEPKcj>
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <_ZN6StringaSERKS_+0x26>
    1874:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1878:	ce 01       	movw	r24, r28
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <_ZN6StringC1ERKS_>:
    1880:	fc 01       	movw	r30, r24
    1882:	11 82       	std	Z+1, r1	; 0x01
    1884:	10 82       	st	Z, r1
    1886:	13 82       	std	Z+3, r1	; 0x03
    1888:	12 82       	std	Z+2, r1	; 0x02
    188a:	15 82       	std	Z+5, r1	; 0x05
    188c:	14 82       	std	Z+4, r1	; 0x04
    188e:	16 82       	std	Z+6, r1	; 0x06
    1890:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <_ZN6StringaSERKS_>

00001894 <_ZN6StringaSEPKc>:
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	d8 2f       	mov	r29, r24
    189a:	c9 2f       	mov	r28, r25
    189c:	61 15       	cp	r22, r1
    189e:	71 05       	cpc	r23, r1
    18a0:	61 f0       	breq	.+24     	; 0x18ba <_ZN6StringaSEPKc+0x26>
    18a2:	db 01       	movw	r26, r22
    18a4:	0d 90       	ld	r0, X+
    18a6:	00 20       	and	r0, r0
    18a8:	e9 f7       	brne	.-6      	; 0x18a4 <_ZN6StringaSEPKc+0x10>
    18aa:	ad 01       	movw	r20, r26
    18ac:	41 50       	subi	r20, 0x01	; 1
    18ae:	51 09       	sbc	r21, r1
    18b0:	46 1b       	sub	r20, r22
    18b2:	57 0b       	sbc	r21, r23
    18b4:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_ZN6String4copyEPKcj>
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <_ZN6StringaSEPKc+0x2a>
    18ba:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    18be:	8d 2f       	mov	r24, r29
    18c0:	9c 2f       	mov	r25, r28
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <_ZN6StringC1Emh>:
    18c8:	0f 93       	push	r16
    18ca:	1f 93       	push	r17
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	a1 97       	sbiw	r28, 0x21	; 33
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	8c 01       	movw	r16, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	ba 01       	movw	r22, r20
    18e6:	f8 01       	movw	r30, r16
    18e8:	11 82       	std	Z+1, r1	; 0x01
    18ea:	10 82       	st	Z, r1
    18ec:	13 82       	std	Z+3, r1	; 0x03
    18ee:	12 82       	std	Z+2, r1	; 0x02
    18f0:	15 82       	std	Z+5, r1	; 0x05
    18f2:	14 82       	std	Z+4, r1	; 0x04
    18f4:	16 82       	std	Z+6, r1	; 0x06
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	ae 01       	movw	r20, r28
    18fa:	4f 5f       	subi	r20, 0xFF	; 255
    18fc:	5f 4f       	sbci	r21, 0xFF	; 255
    18fe:	0e 94 f6 46 	call	0x8dec	; 0x8dec <ultoa>
    1902:	be 01       	movw	r22, r28
    1904:	6f 5f       	subi	r22, 0xFF	; 255
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	c8 01       	movw	r24, r16
    190a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    190e:	a1 96       	adiw	r28, 0x21	; 33
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <_ZN6StringC1Elh>:
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	a2 97       	sbiw	r28, 0x22	; 34
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	8c 01       	movw	r16, r24
    193e:	cb 01       	movw	r24, r22
    1940:	ba 01       	movw	r22, r20
    1942:	f8 01       	movw	r30, r16
    1944:	11 82       	std	Z+1, r1	; 0x01
    1946:	10 82       	st	Z, r1
    1948:	13 82       	std	Z+3, r1	; 0x03
    194a:	12 82       	std	Z+2, r1	; 0x02
    194c:	15 82       	std	Z+5, r1	; 0x05
    194e:	14 82       	std	Z+4, r1	; 0x04
    1950:	16 82       	std	Z+6, r1	; 0x06
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	ae 01       	movw	r20, r28
    1956:	4f 5f       	subi	r20, 0xFF	; 255
    1958:	5f 4f       	sbci	r21, 0xFF	; 255
    195a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <ltoa>
    195e:	be 01       	movw	r22, r28
    1960:	6f 5f       	subi	r22, 0xFF	; 255
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	c8 01       	movw	r24, r16
    1966:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    196a:	a2 96       	adiw	r28, 0x22	; 34
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	08 95       	ret

00001980 <_ZN6StringC1Ejh>:
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	61 97       	sbiw	r28, 0x11	; 17
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	8c 01       	movw	r16, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	11 82       	std	Z+1, r1	; 0x01
    19a0:	10 82       	st	Z, r1
    19a2:	13 82       	std	Z+3, r1	; 0x03
    19a4:	12 82       	std	Z+2, r1	; 0x02
    19a6:	15 82       	std	Z+5, r1	; 0x05
    19a8:	14 82       	std	Z+4, r1	; 0x04
    19aa:	16 82       	std	Z+6, r1	; 0x06
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	be 01       	movw	r22, r28
    19b0:	6f 5f       	subi	r22, 0xFF	; 255
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <utoa>
    19b8:	be 01       	movw	r22, r28
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	c8 01       	movw	r24, r16
    19c0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    19c4:	61 96       	adiw	r28, 0x11	; 17
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

000019da <_ZN6StringC1Eih>:
    19da:	0f 93       	push	r16
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	62 97       	sbiw	r28, 0x12	; 18
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	8c 01       	movw	r16, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	f8 01       	movw	r30, r16
    19f8:	11 82       	std	Z+1, r1	; 0x01
    19fa:	10 82       	st	Z, r1
    19fc:	13 82       	std	Z+3, r1	; 0x03
    19fe:	12 82       	std	Z+2, r1	; 0x02
    1a00:	15 82       	std	Z+5, r1	; 0x05
    1a02:	14 82       	std	Z+4, r1	; 0x04
    1a04:	16 82       	std	Z+6, r1	; 0x06
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	be 01       	movw	r22, r28
    1a0a:	6f 5f       	subi	r22, 0xFF	; 255
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	0e 94 84 46 	call	0x8d08	; 0x8d08 <itoa>
    1a12:	be 01       	movw	r22, r28
    1a14:	6f 5f       	subi	r22, 0xFF	; 255
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	c8 01       	movw	r24, r16
    1a1a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    1a1e:	62 96       	adiw	r28, 0x12	; 18
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <_ZN6StringC1Ehh>:
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	29 97       	sbiw	r28, 0x09	; 9
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	8c 01       	movw	r16, r24
    1a4e:	86 2f       	mov	r24, r22
    1a50:	f8 01       	movw	r30, r16
    1a52:	11 82       	std	Z+1, r1	; 0x01
    1a54:	10 82       	st	Z, r1
    1a56:	13 82       	std	Z+3, r1	; 0x03
    1a58:	12 82       	std	Z+2, r1	; 0x02
    1a5a:	15 82       	std	Z+5, r1	; 0x05
    1a5c:	14 82       	std	Z+4, r1	; 0x04
    1a5e:	16 82       	std	Z+6, r1	; 0x06
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	be 01       	movw	r22, r28
    1a64:	6f 5f       	subi	r22, 0xFF	; 255
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <utoa>
    1a6e:	be 01       	movw	r22, r28
    1a70:	6f 5f       	subi	r22, 0xFF	; 255
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	c8 01       	movw	r24, r16
    1a76:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    1a7a:	29 96       	adiw	r28, 0x09	; 9
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	08 95       	ret

00001a90 <_ZN6StringC1Ec>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <_ZN6StringC1Ec+0x6>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	11 82       	std	Z+1, r1	; 0x01
    1a9e:	10 82       	st	Z, r1
    1aa0:	13 82       	std	Z+3, r1	; 0x03
    1aa2:	12 82       	std	Z+2, r1	; 0x02
    1aa4:	15 82       	std	Z+5, r1	; 0x05
    1aa6:	14 82       	std	Z+4, r1	; 0x04
    1aa8:	16 82       	std	Z+6, r1	; 0x06
    1aaa:	69 83       	std	Y+1, r22	; 0x01
    1aac:	1a 82       	std	Y+2, r1	; 0x02
    1aae:	be 01       	movw	r22, r28
    1ab0:	6f 5f       	subi	r22, 0xFF	; 255
    1ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	08 95       	ret

00001ac2 <_ZN6String6concatEPKcj>:
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	ec 01       	movw	r28, r24
    1ad0:	7b 01       	movw	r14, r22
    1ad2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad4:	1d 81       	ldd	r17, Y+5	; 0x05
    1ad6:	61 15       	cp	r22, r1
    1ad8:	71 05       	cpc	r23, r1
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <_ZN6String6concatEPKcj+0x1e>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	16 c0       	rjmp	.+44     	; 0x1b0c <_ZN6String6concatEPKcj+0x4a>
    1ae0:	41 15       	cp	r20, r1
    1ae2:	51 05       	cpc	r21, r1
    1ae4:	91 f0       	breq	.+36     	; 0x1b0a <_ZN6String6concatEPKcj+0x48>
    1ae6:	04 0f       	add	r16, r20
    1ae8:	15 1f       	adc	r17, r21
    1aea:	b8 01       	movw	r22, r16
    1aec:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN6String7reserveEj>
    1af0:	88 23       	and	r24, r24
    1af2:	a1 f3       	breq	.-24     	; 0x1adc <_ZN6String6concatEPKcj+0x1a>
    1af4:	28 81       	ld	r18, Y
    1af6:	39 81       	ldd	r19, Y+1	; 0x01
    1af8:	8c 81       	ldd	r24, Y+4	; 0x04
    1afa:	9d 81       	ldd	r25, Y+5	; 0x05
    1afc:	b7 01       	movw	r22, r14
    1afe:	82 0f       	add	r24, r18
    1b00:	93 1f       	adc	r25, r19
    1b02:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    1b06:	1d 83       	std	Y+5, r17	; 0x05
    1b08:	0c 83       	std	Y+4, r16	; 0x04
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	08 95       	ret

00001b1a <_ZN6String6concatERKS_>:
    1b1a:	fb 01       	movw	r30, r22
    1b1c:	44 81       	ldd	r20, Z+4	; 0x04
    1b1e:	55 81       	ldd	r21, Z+5	; 0x05
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>

00001b28 <_ZN6String6concatEPKc>:
    1b28:	61 15       	cp	r22, r1
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <_ZN6String6concatEPKc+0x1c>
    1b2e:	db 01       	movw	r26, r22
    1b30:	0d 90       	ld	r0, X+
    1b32:	00 20       	and	r0, r0
    1b34:	e9 f7       	brne	.-6      	; 0x1b30 <_ZN6String6concatEPKc+0x8>
    1b36:	ad 01       	movw	r20, r26
    1b38:	41 50       	subi	r20, 0x01	; 1
    1b3a:	51 09       	sbc	r21, r1
    1b3c:	46 1b       	sub	r20, r22
    1b3e:	57 0b       	sbc	r21, r23
    1b40:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	08 95       	ret

00001b48 <_ZN6String6concatEc>:
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <_ZN6String6concatEc+0x6>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	69 83       	std	Y+1, r22	; 0x01
    1b54:	1a 82       	std	Y+2, r1	; 0x02
    1b56:	41 e0       	ldi	r20, 0x01	; 1
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	be 01       	movw	r22, r28
    1b5c:	6f 5f       	subi	r22, 0xFF	; 255
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <_ZN6String6concatEh>:
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <_ZN6String6concatEh+0xe>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <_ZN6String6concatEh+0x10>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	7c 01       	movw	r14, r24
    1b84:	86 2f       	mov	r24, r22
    1b86:	4a e0       	ldi	r20, 0x0A	; 10
    1b88:	50 e0       	ldi	r21, 0x00	; 0
    1b8a:	8e 01       	movw	r16, r28
    1b8c:	0f 5f       	subi	r16, 0xFF	; 255
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	b8 01       	movw	r22, r16
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 84 46 	call	0x8d08	; 0x8d08 <itoa>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	01 90       	ld	r0, Z+
    1b9c:	00 20       	and	r0, r0
    1b9e:	e9 f7       	brne	.-6      	; 0x1b9a <_ZN6String6concatEh+0x2c>
    1ba0:	af 01       	movw	r20, r30
    1ba2:	41 50       	subi	r20, 0x01	; 1
    1ba4:	51 09       	sbc	r21, r1
    1ba6:	40 1b       	sub	r20, r16
    1ba8:	51 0b       	sbc	r21, r17
    1baa:	b8 01       	movw	r22, r16
    1bac:	c7 01       	movw	r24, r14
    1bae:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	08 95       	ret

00001bc8 <_ZN6String6concatEi>:
    1bc8:	ef 92       	push	r14
    1bca:	ff 92       	push	r15
    1bcc:	0f 93       	push	r16
    1bce:	1f 93       	push	r17
    1bd0:	cf 93       	push	r28
    1bd2:	df 93       	push	r29
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	27 97       	sbiw	r28, 0x07	; 7
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	7c 01       	movw	r14, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	4a e0       	ldi	r20, 0x0A	; 10
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	8e 01       	movw	r16, r28
    1bee:	0f 5f       	subi	r16, 0xFF	; 255
    1bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf2:	b8 01       	movw	r22, r16
    1bf4:	0e 94 84 46 	call	0x8d08	; 0x8d08 <itoa>
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	00 20       	and	r0, r0
    1bfe:	e9 f7       	brne	.-6      	; 0x1bfa <_ZN6String6concatEi+0x32>
    1c00:	af 01       	movw	r20, r30
    1c02:	41 50       	subi	r20, 0x01	; 1
    1c04:	51 09       	sbc	r21, r1
    1c06:	40 1b       	sub	r20, r16
    1c08:	51 0b       	sbc	r21, r17
    1c0a:	b8 01       	movw	r22, r16
    1c0c:	c7 01       	movw	r24, r14
    1c0e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1c12:	27 96       	adiw	r28, 0x07	; 7
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	08 95       	ret

00001c2c <_ZN6String6concatEj>:
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <_ZN6String6concatEj+0xe>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <_ZN6String6concatEj+0x10>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <_ZN6String6concatEj+0x12>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	7c 01       	movw	r14, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	4a e0       	ldi	r20, 0x0A	; 10
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	0f 5f       	subi	r16, 0xFF	; 255
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	b8 01       	movw	r22, r16
    1c52:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <utoa>
    1c56:	f8 01       	movw	r30, r16
    1c58:	01 90       	ld	r0, Z+
    1c5a:	00 20       	and	r0, r0
    1c5c:	e9 f7       	brne	.-6      	; 0x1c58 <_ZN6String6concatEj+0x2c>
    1c5e:	af 01       	movw	r20, r30
    1c60:	41 50       	subi	r20, 0x01	; 1
    1c62:	51 09       	sbc	r21, r1
    1c64:	40 1b       	sub	r20, r16
    1c66:	51 0b       	sbc	r21, r17
    1c68:	b8 01       	movw	r22, r16
    1c6a:	c7 01       	movw	r24, r14
    1c6c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1c70:	26 96       	adiw	r28, 0x06	; 6
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	08 95       	ret

00001c8a <_ZN6String6concatEl>:
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	2c 97       	sbiw	r28, 0x0c	; 12
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	7c 01       	movw	r14, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	ba 01       	movw	r22, r20
    1cac:	2a e0       	ldi	r18, 0x0A	; 10
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	8e 01       	movw	r16, r28
    1cb2:	0f 5f       	subi	r16, 0xFF	; 255
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	a8 01       	movw	r20, r16
    1cb8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <ltoa>
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	01 90       	ld	r0, Z+
    1cc0:	00 20       	and	r0, r0
    1cc2:	e9 f7       	brne	.-6      	; 0x1cbe <_ZN6String6concatEl+0x34>
    1cc4:	af 01       	movw	r20, r30
    1cc6:	41 50       	subi	r20, 0x01	; 1
    1cc8:	51 09       	sbc	r21, r1
    1cca:	40 1b       	sub	r20, r16
    1ccc:	51 0b       	sbc	r21, r17
    1cce:	b8 01       	movw	r22, r16
    1cd0:	c7 01       	movw	r24, r14
    1cd2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1cd6:	2c 96       	adiw	r28, 0x0c	; 12
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	08 95       	ret

00001cf0 <_ZN6String6concatEm>:
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	2b 97       	sbiw	r28, 0x0b	; 11
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	7c 01       	movw	r14, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	ba 01       	movw	r22, r20
    1d12:	2a e0       	ldi	r18, 0x0A	; 10
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	8e 01       	movw	r16, r28
    1d18:	0f 5f       	subi	r16, 0xFF	; 255
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	a8 01       	movw	r20, r16
    1d1e:	0e 94 f6 46 	call	0x8dec	; 0x8dec <ultoa>
    1d22:	f8 01       	movw	r30, r16
    1d24:	01 90       	ld	r0, Z+
    1d26:	00 20       	and	r0, r0
    1d28:	e9 f7       	brne	.-6      	; 0x1d24 <_ZN6String6concatEm+0x34>
    1d2a:	af 01       	movw	r20, r30
    1d2c:	41 50       	subi	r20, 0x01	; 1
    1d2e:	51 09       	sbc	r21, r1
    1d30:	40 1b       	sub	r20, r16
    1d32:	51 0b       	sbc	r21, r17
    1d34:	b8 01       	movw	r22, r16
    1d36:	c7 01       	movw	r24, r14
    1d38:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1d3c:	2b 96       	adiw	r28, 0x0b	; 11
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	08 95       	ret

00001d56 <_ZplRK15StringSumHelperRK6String>:
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	d8 2f       	mov	r29, r24
    1d5c:	c9 2f       	mov	r28, r25
    1d5e:	fb 01       	movw	r30, r22
    1d60:	44 81       	ldd	r20, Z+4	; 0x04
    1d62:	55 81       	ldd	r21, Z+5	; 0x05
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1d6c:	81 11       	cpse	r24, r1
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <_ZplRK15StringSumHelperRK6String+0x22>
    1d70:	8d 2f       	mov	r24, r29
    1d72:	9c 2f       	mov	r25, r28
    1d74:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1d78:	8d 2f       	mov	r24, r29
    1d7a:	9c 2f       	mov	r25, r28
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <_ZplRK15StringSumHelperPKc>:
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	d8 2f       	mov	r29, r24
    1d88:	c9 2f       	mov	r28, r25
    1d8a:	61 15       	cp	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	69 f0       	breq	.+26     	; 0x1daa <_ZplRK15StringSumHelperPKc+0x28>
    1d90:	db 01       	movw	r26, r22
    1d92:	0d 90       	ld	r0, X+
    1d94:	00 20       	and	r0, r0
    1d96:	e9 f7       	brne	.-6      	; 0x1d92 <_ZplRK15StringSumHelperPKc+0x10>
    1d98:	ad 01       	movw	r20, r26
    1d9a:	41 50       	subi	r20, 0x01	; 1
    1d9c:	51 09       	sbc	r21, r1
    1d9e:	46 1b       	sub	r20, r22
    1da0:	57 0b       	sbc	r21, r23
    1da2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <_ZN6String6concatEPKcj>
    1da6:	81 11       	cpse	r24, r1
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <_ZplRK15StringSumHelperPKc+0x30>
    1daa:	8d 2f       	mov	r24, r29
    1dac:	9c 2f       	mov	r25, r28
    1dae:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1db2:	8d 2f       	mov	r24, r29
    1db4:	9c 2f       	mov	r25, r28
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <_ZplRK15StringSumHelperc>:
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	d8 2f       	mov	r29, r24
    1dc2:	c9 2f       	mov	r28, r25
    1dc4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN6String6concatEc>
    1dc8:	81 11       	cpse	r24, r1
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <_ZplRK15StringSumHelperc+0x18>
    1dcc:	8d 2f       	mov	r24, r29
    1dce:	9c 2f       	mov	r25, r28
    1dd0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1dd4:	8d 2f       	mov	r24, r29
    1dd6:	9c 2f       	mov	r25, r28
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	08 95       	ret

00001dde <_ZplRK15StringSumHelperh>:
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	d8 2f       	mov	r29, r24
    1de4:	c9 2f       	mov	r28, r25
    1de6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_ZN6String6concatEh>
    1dea:	81 11       	cpse	r24, r1
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <_ZplRK15StringSumHelperh+0x18>
    1dee:	8d 2f       	mov	r24, r29
    1df0:	9c 2f       	mov	r25, r28
    1df2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1df6:	8d 2f       	mov	r24, r29
    1df8:	9c 2f       	mov	r25, r28
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	08 95       	ret

00001e00 <_ZplRK15StringSumHelperi>:
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	d8 2f       	mov	r29, r24
    1e06:	c9 2f       	mov	r28, r25
    1e08:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_ZN6String6concatEi>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <_ZplRK15StringSumHelperi+0x18>
    1e10:	8d 2f       	mov	r24, r29
    1e12:	9c 2f       	mov	r25, r28
    1e14:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e18:	8d 2f       	mov	r24, r29
    1e1a:	9c 2f       	mov	r25, r28
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	08 95       	ret

00001e22 <_ZplRK15StringSumHelperj>:
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	d8 2f       	mov	r29, r24
    1e28:	c9 2f       	mov	r28, r25
    1e2a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <_ZN6String6concatEj>
    1e2e:	81 11       	cpse	r24, r1
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <_ZplRK15StringSumHelperj+0x18>
    1e32:	8d 2f       	mov	r24, r29
    1e34:	9c 2f       	mov	r25, r28
    1e36:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e3a:	8d 2f       	mov	r24, r29
    1e3c:	9c 2f       	mov	r25, r28
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <_ZplRK15StringSumHelperl>:
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	d8 2f       	mov	r29, r24
    1e4a:	c9 2f       	mov	r28, r25
    1e4c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <_ZN6String6concatEl>
    1e50:	81 11       	cpse	r24, r1
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <_ZplRK15StringSumHelperl+0x18>
    1e54:	8d 2f       	mov	r24, r29
    1e56:	9c 2f       	mov	r25, r28
    1e58:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e5c:	8d 2f       	mov	r24, r29
    1e5e:	9c 2f       	mov	r25, r28
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	08 95       	ret

00001e66 <_ZplRK15StringSumHelperm>:
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	d8 2f       	mov	r29, r24
    1e6c:	c9 2f       	mov	r28, r25
    1e6e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <_ZN6String6concatEm>
    1e72:	81 11       	cpse	r24, r1
    1e74:	04 c0       	rjmp	.+8      	; 0x1e7e <_ZplRK15StringSumHelperm+0x18>
    1e76:	8d 2f       	mov	r24, r29
    1e78:	9c 2f       	mov	r25, r28
    1e7a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_ZN6String10invalidateEv>
    1e7e:	8d 2f       	mov	r24, r29
    1e80:	9c 2f       	mov	r25, r28
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	08 95       	ret

00001e88 <_ZNK6String9compareToERKS_>:
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	ed 91       	ld	r30, X+
    1e90:	fc 91       	ld	r31, X
    1e92:	eb 01       	movw	r28, r22
    1e94:	a8 81       	ld	r26, Y
    1e96:	b9 81       	ldd	r27, Y+1	; 0x01
    1e98:	30 97       	sbiw	r30, 0x00	; 0
    1e9a:	11 f0       	breq	.+4      	; 0x1ea0 <_ZNK6String9compareToERKS_+0x18>
    1e9c:	10 97       	sbiw	r26, 0x00	; 0
    1e9e:	c9 f4       	brne	.+50     	; 0x1ed2 <_ZNK6String9compareToERKS_+0x4a>
    1ea0:	10 97       	sbiw	r26, 0x00	; 0
    1ea2:	59 f0       	breq	.+22     	; 0x1eba <_ZNK6String9compareToERKS_+0x32>
    1ea4:	eb 01       	movw	r28, r22
    1ea6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eaa:	23 2b       	or	r18, r19
    1eac:	31 f0       	breq	.+12     	; 0x1eba <_ZNK6String9compareToERKS_+0x32>
    1eae:	2c 91       	ld	r18, X
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	31 95       	neg	r19
    1eb4:	21 95       	neg	r18
    1eb6:	31 09       	sbc	r19, r1
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <_ZNK6String9compareToERKS_+0x5a>
    1eba:	30 97       	sbiw	r30, 0x00	; 0
    1ebc:	81 f0       	breq	.+32     	; 0x1ede <_ZNK6String9compareToERKS_+0x56>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	14 96       	adiw	r26, 0x04	; 4
    1ec2:	8d 91       	ld	r24, X+
    1ec4:	9c 91       	ld	r25, X
    1ec6:	15 97       	sbiw	r26, 0x05	; 5
    1ec8:	89 2b       	or	r24, r25
    1eca:	49 f0       	breq	.+18     	; 0x1ede <_ZNK6String9compareToERKS_+0x56>
    1ecc:	20 81       	ld	r18, Z
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	08 c0       	rjmp	.+16     	; 0x1ee2 <_ZNK6String9compareToERKS_+0x5a>
    1ed2:	bd 01       	movw	r22, r26
    1ed4:	cf 01       	movw	r24, r30
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	0c 94 0b 46 	jmp	0x8c16	; 0x8c16 <strcmp>
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	c9 01       	movw	r24, r18
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	08 95       	ret

00001eea <_ZNK6String6equalsERKS_>:
    1eea:	fc 01       	movw	r30, r24
    1eec:	44 81       	ldd	r20, Z+4	; 0x04
    1eee:	55 81       	ldd	r21, Z+5	; 0x05
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	24 81       	ldd	r18, Z+4	; 0x04
    1ef4:	35 81       	ldd	r19, Z+5	; 0x05
    1ef6:	42 17       	cp	r20, r18
    1ef8:	53 07       	cpc	r21, r19
    1efa:	29 f4       	brne	.+10     	; 0x1f06 <_ZNK6String6equalsERKS_+0x1c>
    1efc:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f00:	21 e0       	ldi	r18, 0x01	; 1
    1f02:	89 2b       	or	r24, r25
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <_ZNK6String6equalsERKS_+0x1e>
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	82 2f       	mov	r24, r18
    1f0a:	08 95       	ret

00001f0c <_ZNK6String6equalsEPKc>:
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	14 96       	adiw	r26, 0x04	; 4
    1f10:	2d 91       	ld	r18, X+
    1f12:	3c 91       	ld	r19, X
    1f14:	15 97       	sbiw	r26, 0x05	; 5
    1f16:	23 2b       	or	r18, r19
    1f18:	39 f4       	brne	.+14     	; 0x1f28 <_ZNK6String6equalsEPKc+0x1c>
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	61 15       	cp	r22, r1
    1f1e:	71 05       	cpc	r23, r1
    1f20:	11 f0       	breq	.+4      	; 0x1f26 <_ZNK6String6equalsEPKc+0x1a>
    1f22:	fb 01       	movw	r30, r22
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <_ZNK6String6equalsEPKc+0x2a>
    1f26:	08 95       	ret
    1f28:	dc 01       	movw	r26, r24
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	61 15       	cp	r22, r1
    1f30:	71 05       	cpc	r23, r1
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <_ZNK6String6equalsEPKc+0x32>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 81       	ld	r25, Z
    1f38:	99 23       	and	r25, r25
    1f3a:	49 f0       	breq	.+18     	; 0x1f4e <_ZNK6String6equalsEPKc+0x42>
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <_ZNK6String6equalsEPKc+0x40>
    1f3e:	cf 01       	movw	r24, r30
    1f40:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    1f44:	9c 01       	movw	r18, r24
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	23 2b       	or	r18, r19
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <_ZNK6String6equalsEPKc+0x42>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	08 95       	ret

00001f50 <_ZNK6StringltERKS_>:
    1f50:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f54:	89 2f       	mov	r24, r25
    1f56:	88 1f       	adc	r24, r24
    1f58:	88 27       	eor	r24, r24
    1f5a:	88 1f       	adc	r24, r24
    1f5c:	08 95       	ret

00001f5e <_ZNK6StringgtERKS_>:
    1f5e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	18 16       	cp	r1, r24
    1f66:	19 06       	cpc	r1, r25
    1f68:	0c f0       	brlt	.+2      	; 0x1f6c <_ZNK6StringgtERKS_+0xe>
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	82 2f       	mov	r24, r18
    1f6e:	08 95       	ret

00001f70 <_ZNK6StringleERKS_>:
    1f70:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f74:	21 e0       	ldi	r18, 0x01	; 1
    1f76:	18 16       	cp	r1, r24
    1f78:	19 06       	cpc	r1, r25
    1f7a:	0c f4       	brge	.+2      	; 0x1f7e <_ZNK6StringleERKS_+0xe>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	82 2f       	mov	r24, r18
    1f80:	08 95       	ret

00001f82 <_ZNK6StringgeERKS_>:
    1f82:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <_ZNK6String9compareToERKS_>
    1f86:	89 2f       	mov	r24, r25
    1f88:	80 95       	com	r24
    1f8a:	88 1f       	adc	r24, r24
    1f8c:	88 27       	eor	r24, r24
    1f8e:	88 1f       	adc	r24, r24
    1f90:	08 95       	ret

00001f92 <_ZNK6String16equalsIgnoreCaseERKS_>:
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	86 17       	cp	r24, r22
    1fa0:	97 07       	cpc	r25, r23
    1fa2:	09 f1       	breq	.+66     	; 0x1fe6 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	24 81       	ldd	r18, Z+4	; 0x04
    1fa8:	35 81       	ldd	r19, Z+5	; 0x05
    1faa:	fb 01       	movw	r30, r22
    1fac:	44 81       	ldd	r20, Z+4	; 0x04
    1fae:	55 81       	ldd	r21, Z+5	; 0x05
    1fb0:	24 17       	cp	r18, r20
    1fb2:	35 07       	cpc	r19, r21
    1fb4:	d1 f4       	brne	.+52     	; 0x1fea <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fb6:	23 2b       	or	r18, r19
    1fb8:	b1 f0       	breq	.+44     	; 0x1fe6 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fba:	c0 81       	ld	r28, Z
    1fbc:	d1 81       	ldd	r29, Z+1	; 0x01
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	00 81       	ld	r16, Z
    1fc2:	11 81       	ldd	r17, Z+1	; 0x01
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <tolower>
    1fcc:	7c 01       	movw	r14, r24
    1fce:	89 91       	ld	r24, Y+
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <tolower>
    1fd6:	e8 16       	cp	r14, r24
    1fd8:	f9 06       	cpc	r15, r25
    1fda:	39 f4       	brne	.+14     	; 0x1fea <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fdc:	f8 01       	movw	r30, r16
    1fde:	81 91       	ld	r24, Z+
    1fe0:	8f 01       	movw	r16, r30
    1fe2:	81 11       	cpse	r24, r1
    1fe4:	f0 cf       	rjmp	.-32     	; 0x1fc6 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	08 95       	ret

00001ffa <_ZNK6String10startsWithERKS_j>:
    1ffa:	fa 01       	movw	r30, r20
    1ffc:	db 01       	movw	r26, r22
    1ffe:	14 96       	adiw	r26, 0x04	; 4
    2000:	4d 91       	ld	r20, X+
    2002:	5c 91       	ld	r21, X
    2004:	15 97       	sbiw	r26, 0x05	; 5
    2006:	dc 01       	movw	r26, r24
    2008:	14 96       	adiw	r26, 0x04	; 4
    200a:	2d 91       	ld	r18, X+
    200c:	3c 91       	ld	r19, X
    200e:	15 97       	sbiw	r26, 0x05	; 5
    2010:	24 1b       	sub	r18, r20
    2012:	35 0b       	sbc	r19, r21
    2014:	2e 17       	cp	r18, r30
    2016:	3f 07       	cpc	r19, r31
    2018:	90 f0       	brcs	.+36     	; 0x203e <_ZNK6String10startsWithERKS_j+0x44>
    201a:	8d 91       	ld	r24, X+
    201c:	9c 91       	ld	r25, X
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	71 f0       	breq	.+28     	; 0x203e <_ZNK6String10startsWithERKS_j+0x44>
    2022:	db 01       	movw	r26, r22
    2024:	6d 91       	ld	r22, X+
    2026:	7c 91       	ld	r23, X
    2028:	61 15       	cp	r22, r1
    202a:	71 05       	cpc	r23, r1
    202c:	41 f0       	breq	.+16     	; 0x203e <_ZNK6String10startsWithERKS_j+0x44>
    202e:	8e 0f       	add	r24, r30
    2030:	9f 1f       	adc	r25, r31
    2032:	0e 94 1b 46 	call	0x8c36	; 0x8c36 <strncmp>
    2036:	9c 01       	movw	r18, r24
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	23 2b       	or	r18, r19
    203c:	09 f0       	breq	.+2      	; 0x2040 <_ZNK6String10startsWithERKS_j+0x46>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	08 95       	ret

00002042 <_ZNK6String10startsWithERKS_>:
    2042:	fc 01       	movw	r30, r24
    2044:	44 81       	ldd	r20, Z+4	; 0x04
    2046:	55 81       	ldd	r21, Z+5	; 0x05
    2048:	fb 01       	movw	r30, r22
    204a:	24 81       	ldd	r18, Z+4	; 0x04
    204c:	35 81       	ldd	r19, Z+5	; 0x05
    204e:	42 17       	cp	r20, r18
    2050:	53 07       	cpc	r21, r19
    2052:	20 f0       	brcs	.+8      	; 0x205c <_ZNK6String10startsWithERKS_+0x1a>
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <_ZNK6String10startsWithERKS_j>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	08 95       	ret

00002060 <_ZNK6String8endsWithERKS_>:
    2060:	fc 01       	movw	r30, r24
    2062:	84 81       	ldd	r24, Z+4	; 0x04
    2064:	95 81       	ldd	r25, Z+5	; 0x05
    2066:	db 01       	movw	r26, r22
    2068:	14 96       	adiw	r26, 0x04	; 4
    206a:	4d 91       	ld	r20, X+
    206c:	5c 91       	ld	r21, X
    206e:	15 97       	sbiw	r26, 0x05	; 5
    2070:	84 17       	cp	r24, r20
    2072:	95 07       	cpc	r25, r21
    2074:	a0 f0       	brcs	.+40     	; 0x209e <_ZNK6String8endsWithERKS_+0x3e>
    2076:	20 81       	ld	r18, Z
    2078:	31 81       	ldd	r19, Z+1	; 0x01
    207a:	21 15       	cp	r18, r1
    207c:	31 05       	cpc	r19, r1
    207e:	79 f0       	breq	.+30     	; 0x209e <_ZNK6String8endsWithERKS_+0x3e>
    2080:	6d 91       	ld	r22, X+
    2082:	7c 91       	ld	r23, X
    2084:	61 15       	cp	r22, r1
    2086:	71 05       	cpc	r23, r1
    2088:	51 f0       	breq	.+20     	; 0x209e <_ZNK6String8endsWithERKS_+0x3e>
    208a:	84 1b       	sub	r24, r20
    208c:	95 0b       	sbc	r25, r21
    208e:	82 0f       	add	r24, r18
    2090:	93 1f       	adc	r25, r19
    2092:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    2096:	9c 01       	movw	r18, r24
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	23 2b       	or	r18, r19
    209c:	09 f0       	breq	.+2      	; 0x20a0 <_ZNK6String8endsWithERKS_+0x40>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	08 95       	ret

000020a2 <_ZN6String9setCharAtEjc>:
    20a2:	dc 01       	movw	r26, r24
    20a4:	14 96       	adiw	r26, 0x04	; 4
    20a6:	2d 91       	ld	r18, X+
    20a8:	3c 91       	ld	r19, X
    20aa:	15 97       	sbiw	r26, 0x05	; 5
    20ac:	62 17       	cp	r22, r18
    20ae:	73 07       	cpc	r23, r19
    20b0:	28 f4       	brcc	.+10     	; 0x20bc <_ZN6String9setCharAtEjc+0x1a>
    20b2:	ed 91       	ld	r30, X+
    20b4:	fc 91       	ld	r31, X
    20b6:	e6 0f       	add	r30, r22
    20b8:	f7 1f       	adc	r31, r23
    20ba:	40 83       	st	Z, r20
    20bc:	08 95       	ret

000020be <_ZN6StringixEj>:
    20be:	fc 01       	movw	r30, r24
    20c0:	24 81       	ldd	r18, Z+4	; 0x04
    20c2:	35 81       	ldd	r19, Z+5	; 0x05
    20c4:	62 17       	cp	r22, r18
    20c6:	73 07       	cpc	r23, r19
    20c8:	20 f4       	brcc	.+8      	; 0x20d2 <_ZN6StringixEj+0x14>
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	29 f4       	brne	.+10     	; 0x20dc <_ZN6StringixEj+0x1e>
    20d2:	10 92 16 09 	sts	0x0916, r1
    20d6:	66 e1       	ldi	r22, 0x16	; 22
    20d8:	79 e0       	ldi	r23, 0x09	; 9
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <_ZN6StringixEj+0x22>
    20dc:	68 0f       	add	r22, r24
    20de:	79 1f       	adc	r23, r25
    20e0:	cb 01       	movw	r24, r22
    20e2:	08 95       	ret

000020e4 <_ZNK6StringixEj>:
    20e4:	fc 01       	movw	r30, r24
    20e6:	24 81       	ldd	r18, Z+4	; 0x04
    20e8:	35 81       	ldd	r19, Z+5	; 0x05
    20ea:	62 17       	cp	r22, r18
    20ec:	73 07       	cpc	r23, r19
    20ee:	48 f4       	brcc	.+18     	; 0x2102 <_ZNK6StringixEj+0x1e>
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	29 f0       	breq	.+10     	; 0x2102 <_ZNK6StringixEj+0x1e>
    20f8:	fc 01       	movw	r30, r24
    20fa:	e6 0f       	add	r30, r22
    20fc:	f7 1f       	adc	r31, r23
    20fe:	80 81       	ld	r24, Z
    2100:	08 95       	ret
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	08 95       	ret

00002106 <_ZNK6String6charAtEj>:
    2106:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <_ZNK6StringixEj>

0000210a <_ZNK6String8getBytesEPhjj>:
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	eb 01       	movw	r28, r22
    2114:	41 15       	cp	r20, r1
    2116:	51 05       	cpc	r21, r1
    2118:	e9 f0       	breq	.+58     	; 0x2154 <_ZNK6String8getBytesEPhjj+0x4a>
    211a:	20 97       	sbiw	r28, 0x00	; 0
    211c:	d9 f0       	breq	.+54     	; 0x2154 <_ZNK6String8getBytesEPhjj+0x4a>
    211e:	fc 01       	movw	r30, r24
    2120:	04 81       	ldd	r16, Z+4	; 0x04
    2122:	15 81       	ldd	r17, Z+5	; 0x05
    2124:	20 17       	cp	r18, r16
    2126:	31 07       	cpc	r19, r17
    2128:	08 f0       	brcs	.+2      	; 0x212c <_ZNK6String8getBytesEPhjj+0x22>
    212a:	13 c0       	rjmp	.+38     	; 0x2152 <_ZNK6String8getBytesEPhjj+0x48>
    212c:	41 50       	subi	r20, 0x01	; 1
    212e:	51 09       	sbc	r21, r1
    2130:	02 1b       	sub	r16, r18
    2132:	13 0b       	sbc	r17, r19
    2134:	40 17       	cp	r20, r16
    2136:	51 07       	cpc	r21, r17
    2138:	08 f4       	brcc	.+2      	; 0x213c <_ZNK6String8getBytesEPhjj+0x32>
    213a:	8a 01       	movw	r16, r20
    213c:	fc 01       	movw	r30, r24
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	62 0f       	add	r22, r18
    2144:	73 1f       	adc	r23, r19
    2146:	a8 01       	movw	r20, r16
    2148:	ce 01       	movw	r24, r28
    214a:	0e 94 29 46 	call	0x8c52	; 0x8c52 <strncpy>
    214e:	c0 0f       	add	r28, r16
    2150:	d1 1f       	adc	r29, r17
    2152:	18 82       	st	Y, r1
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	1f 91       	pop	r17
    215a:	0f 91       	pop	r16
    215c:	08 95       	ret

0000215e <_ZNK6String7indexOfEcj>:
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	fc 01       	movw	r30, r24
    2164:	84 81       	ldd	r24, Z+4	; 0x04
    2166:	95 81       	ldd	r25, Z+5	; 0x05
    2168:	48 17       	cp	r20, r24
    216a:	59 07       	cpc	r21, r25
    216c:	70 f4       	brcc	.+28     	; 0x218a <_ZNK6String7indexOfEcj+0x2c>
    216e:	c0 81       	ld	r28, Z
    2170:	d1 81       	ldd	r29, Z+1	; 0x01
    2172:	70 e0       	ldi	r23, 0x00	; 0
    2174:	ce 01       	movw	r24, r28
    2176:	84 0f       	add	r24, r20
    2178:	95 1f       	adc	r25, r21
    217a:	0e 94 00 46 	call	0x8c00	; 0x8c00 <strchr>
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	21 f0       	breq	.+8      	; 0x218a <_ZNK6String7indexOfEcj+0x2c>
    2182:	9c 01       	movw	r18, r24
    2184:	2c 1b       	sub	r18, r28
    2186:	3d 0b       	sbc	r19, r29
    2188:	02 c0       	rjmp	.+4      	; 0x218e <_ZNK6String7indexOfEcj+0x30>
    218a:	2f ef       	ldi	r18, 0xFF	; 255
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	c9 01       	movw	r24, r18
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	08 95       	ret

00002196 <_ZNK6String7indexOfEc>:
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	0c 94 af 10 	jmp	0x215e	; 0x215e <_ZNK6String7indexOfEcj>

0000219e <_ZNK6String7indexOfERKS_j>:
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	fc 01       	movw	r30, r24
    21a4:	84 81       	ldd	r24, Z+4	; 0x04
    21a6:	95 81       	ldd	r25, Z+5	; 0x05
    21a8:	48 17       	cp	r20, r24
    21aa:	59 07       	cpc	r21, r25
    21ac:	80 f4       	brcc	.+32     	; 0x21ce <_ZNK6String7indexOfERKS_j+0x30>
    21ae:	c0 81       	ld	r28, Z
    21b0:	d1 81       	ldd	r29, Z+1	; 0x01
    21b2:	fb 01       	movw	r30, r22
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	ce 01       	movw	r24, r28
    21ba:	84 0f       	add	r24, r20
    21bc:	95 1f       	adc	r25, r21
    21be:	0e 94 43 46 	call	0x8c86	; 0x8c86 <strstr>
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	21 f0       	breq	.+8      	; 0x21ce <_ZNK6String7indexOfERKS_j+0x30>
    21c6:	9c 01       	movw	r18, r24
    21c8:	2c 1b       	sub	r18, r28
    21ca:	3d 0b       	sbc	r19, r29
    21cc:	02 c0       	rjmp	.+4      	; 0x21d2 <_ZNK6String7indexOfERKS_j+0x34>
    21ce:	2f ef       	ldi	r18, 0xFF	; 255
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	c9 01       	movw	r24, r18
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <_ZNK6String7indexOfERKS_>:
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	0c 94 cf 10 	jmp	0x219e	; 0x219e <_ZNK6String7indexOfERKS_j>

000021e2 <_ZNK6String11lastIndexOfEcj>:
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	ec 01       	movw	r28, r24
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	48 17       	cp	r20, r24
    21f8:	59 07       	cpc	r21, r25
    21fa:	18 f0       	brcs	.+6      	; 0x2202 <__stack+0x3>
    21fc:	2f ef       	ldi	r18, 0xFF	; 255
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	1b c0       	rjmp	.+54     	; 0x2238 <__stack+0x39>
    2202:	8a 01       	movw	r16, r20
    2204:	0f 5f       	subi	r16, 0xFF	; 255
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	e8 81       	ld	r30, Y
    220a:	f9 81       	ldd	r31, Y+1	; 0x01
    220c:	e0 0f       	add	r30, r16
    220e:	f1 1f       	adc	r31, r17
    2210:	d0 80       	ld	r13, Z
    2212:	10 82       	st	Z, r1
    2214:	e8 80       	ld	r14, Y
    2216:	f9 80       	ldd	r15, Y+1	; 0x01
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	c7 01       	movw	r24, r14
    221c:	0e 94 38 46 	call	0x8c70	; 0x8c70 <strrchr>
    2220:	f7 01       	movw	r30, r14
    2222:	e0 0f       	add	r30, r16
    2224:	f1 1f       	adc	r31, r17
    2226:	d0 82       	st	Z, r13
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	41 f3       	breq	.-48     	; 0x21fc <_ZNK6String11lastIndexOfEcj+0x1a>
    222c:	28 81       	ld	r18, Y
    222e:	39 81       	ldd	r19, Y+1	; 0x01
    2230:	ac 01       	movw	r20, r24
    2232:	42 1b       	sub	r20, r18
    2234:	53 0b       	sbc	r21, r19
    2236:	9a 01       	movw	r18, r20
    2238:	c9 01       	movw	r24, r18
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	08 95       	ret

0000224a <_ZNK6String11lastIndexOfEc>:
    224a:	fc 01       	movw	r30, r24
    224c:	44 81       	ldd	r20, Z+4	; 0x04
    224e:	55 81       	ldd	r21, Z+5	; 0x05
    2250:	41 50       	subi	r20, 0x01	; 1
    2252:	51 09       	sbc	r21, r1
    2254:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <_ZNK6String11lastIndexOfEcj>

00002258 <_ZNK6String11lastIndexOfERKS_j>:
    2258:	af 92       	push	r10
    225a:	bf 92       	push	r11
    225c:	cf 92       	push	r12
    225e:	df 92       	push	r13
    2260:	ef 92       	push	r14
    2262:	ff 92       	push	r15
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	6b 01       	movw	r12, r22
    226e:	8a 01       	movw	r16, r20
    2270:	fb 01       	movw	r30, r22
    2272:	44 81       	ldd	r20, Z+4	; 0x04
    2274:	55 81       	ldd	r21, Z+5	; 0x05
    2276:	41 15       	cp	r20, r1
    2278:	51 05       	cpc	r21, r1
    227a:	69 f1       	breq	.+90     	; 0x22d6 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    227c:	fc 01       	movw	r30, r24
    227e:	24 81       	ldd	r18, Z+4	; 0x04
    2280:	35 81       	ldd	r19, Z+5	; 0x05
    2282:	21 15       	cp	r18, r1
    2284:	31 05       	cpc	r19, r1
    2286:	39 f1       	breq	.+78     	; 0x22d6 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2288:	24 17       	cp	r18, r20
    228a:	35 07       	cpc	r19, r21
    228c:	20 f1       	brcs	.+72     	; 0x22d6 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    228e:	02 17       	cp	r16, r18
    2290:	13 07       	cpc	r17, r19
    2292:	18 f0       	brcs	.+6      	; 0x229a <_ZNK6String11lastIndexOfERKS_j+0x42>
    2294:	89 01       	movw	r16, r18
    2296:	01 50       	subi	r16, 0x01	; 1
    2298:	11 09       	sbc	r17, r1
    229a:	fc 01       	movw	r30, r24
    229c:	e0 80       	ld	r14, Z
    229e:	f1 80       	ldd	r15, Z+1	; 0x01
    22a0:	c7 01       	movw	r24, r14
    22a2:	cf ef       	ldi	r28, 0xFF	; 255
    22a4:	df ef       	ldi	r29, 0xFF	; 255
    22a6:	57 01       	movw	r10, r14
    22a8:	a0 0e       	add	r10, r16
    22aa:	b1 1e       	adc	r11, r17
    22ac:	10 c0       	rjmp	.+32     	; 0x22ce <_ZNK6String11lastIndexOfERKS_j+0x76>
    22ae:	f6 01       	movw	r30, r12
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	0e 94 43 46 	call	0x8c86	; 0x8c86 <strstr>
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	79 f0       	breq	.+30     	; 0x22da <_ZNK6String11lastIndexOfERKS_j+0x82>
    22bc:	9c 01       	movw	r18, r24
    22be:	2e 19       	sub	r18, r14
    22c0:	3f 09       	sbc	r19, r15
    22c2:	02 17       	cp	r16, r18
    22c4:	13 07       	cpc	r17, r19
    22c6:	08 f4       	brcc	.+2      	; 0x22ca <_ZNK6String11lastIndexOfERKS_j+0x72>
    22c8:	9e 01       	movw	r18, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	e9 01       	movw	r28, r18
    22ce:	a8 16       	cp	r10, r24
    22d0:	b9 06       	cpc	r11, r25
    22d2:	68 f7       	brcc	.-38     	; 0x22ae <_ZNK6String11lastIndexOfERKS_j+0x56>
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <_ZNK6String11lastIndexOfERKS_j+0x82>
    22d6:	cf ef       	ldi	r28, 0xFF	; 255
    22d8:	df ef       	ldi	r29, 0xFF	; 255
    22da:	ce 01       	movw	r24, r28
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	df 90       	pop	r13
    22ea:	cf 90       	pop	r12
    22ec:	bf 90       	pop	r11
    22ee:	af 90       	pop	r10
    22f0:	08 95       	ret

000022f2 <_ZNK6String11lastIndexOfERKS_>:
    22f2:	fc 01       	movw	r30, r24
    22f4:	44 81       	ldd	r20, Z+4	; 0x04
    22f6:	55 81       	ldd	r21, Z+5	; 0x05
    22f8:	fb 01       	movw	r30, r22
    22fa:	24 81       	ldd	r18, Z+4	; 0x04
    22fc:	35 81       	ldd	r19, Z+5	; 0x05
    22fe:	42 1b       	sub	r20, r18
    2300:	53 0b       	sbc	r21, r19
    2302:	0c 94 2c 11 	jmp	0x2258	; 0x2258 <_ZNK6String11lastIndexOfERKS_j>

00002306 <_ZNK6String9substringEjj>:
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	6c 01       	movw	r12, r24
    231a:	7b 01       	movw	r14, r22
    231c:	ea 01       	movw	r28, r20
    231e:	89 01       	movw	r16, r18
    2320:	24 17       	cp	r18, r20
    2322:	35 07       	cpc	r19, r21
    2324:	20 f4       	brcc	.+8      	; 0x232e <_ZNK6String9substringEjj+0x28>
    2326:	8d 2f       	mov	r24, r29
    2328:	e9 01       	movw	r28, r18
    232a:	04 2f       	mov	r16, r20
    232c:	18 2f       	mov	r17, r24
    232e:	6e e3       	ldi	r22, 0x3E	; 62
    2330:	74 e0       	ldi	r23, 0x04	; 4
    2332:	c6 01       	movw	r24, r12
    2334:	0e 94 0c 0c 	call	0x1818	; 0x1818 <_ZN6StringC1EPKc>
    2338:	d7 01       	movw	r26, r14
    233a:	14 96       	adiw	r26, 0x04	; 4
    233c:	8d 91       	ld	r24, X+
    233e:	9c 91       	ld	r25, X
    2340:	15 97       	sbiw	r26, 0x05	; 5
    2342:	8c 17       	cp	r24, r28
    2344:	9d 07       	cpc	r25, r29
    2346:	c8 f0       	brcs	.+50     	; 0x237a <_ZNK6String9substringEjj+0x74>
    2348:	80 17       	cp	r24, r16
    234a:	91 07       	cpc	r25, r17
    234c:	08 f4       	brcc	.+2      	; 0x2350 <_ZNK6String9substringEjj+0x4a>
    234e:	8c 01       	movw	r16, r24
    2350:	d7 01       	movw	r26, r14
    2352:	ed 91       	ld	r30, X+
    2354:	fc 91       	ld	r31, X
    2356:	11 97       	sbiw	r26, 0x01	; 1
    2358:	e0 0f       	add	r30, r16
    235a:	f1 1f       	adc	r31, r17
    235c:	b0 80       	ld	r11, Z
    235e:	10 82       	st	Z, r1
    2360:	6d 91       	ld	r22, X+
    2362:	7c 91       	ld	r23, X
    2364:	6c 0f       	add	r22, r28
    2366:	7d 1f       	adc	r23, r29
    2368:	c6 01       	movw	r24, r12
    236a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    236e:	d7 01       	movw	r26, r14
    2370:	ed 91       	ld	r30, X+
    2372:	fc 91       	ld	r31, X
    2374:	e0 0f       	add	r30, r16
    2376:	f1 1f       	adc	r31, r17
    2378:	b0 82       	st	Z, r11
    237a:	c6 01       	movw	r24, r12
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	cf 90       	pop	r12
    238c:	bf 90       	pop	r11
    238e:	08 95       	ret

00002390 <_ZNK6String9substringEj>:
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	ec 01       	movw	r28, r24
    2396:	fb 01       	movw	r30, r22
    2398:	24 81       	ldd	r18, Z+4	; 0x04
    239a:	35 81       	ldd	r19, Z+5	; 0x05
    239c:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZNK6String9substringEjj>
    23a0:	ce 01       	movw	r24, r28
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	08 95       	ret

000023a8 <_ZN6String7replaceEcc>:
    23a8:	dc 01       	movw	r26, r24
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	30 97       	sbiw	r30, 0x00	; 0
    23b0:	29 f4       	brne	.+10     	; 0x23bc <_ZN6String7replaceEcc+0x14>
    23b2:	08 95       	ret
    23b4:	86 13       	cpse	r24, r22
    23b6:	01 c0       	rjmp	.+2      	; 0x23ba <_ZN6String7replaceEcc+0x12>
    23b8:	40 83       	st	Z, r20
    23ba:	31 96       	adiw	r30, 0x01	; 1
    23bc:	80 81       	ld	r24, Z
    23be:	81 11       	cpse	r24, r1
    23c0:	f9 cf       	rjmp	.-14     	; 0x23b4 <_ZN6String7replaceEcc+0xc>
    23c2:	08 95       	ret

000023c4 <_ZN6String7replaceERKS_S1_>:
    23c4:	2f 92       	push	r2
    23c6:	3f 92       	push	r3
    23c8:	4f 92       	push	r4
    23ca:	5f 92       	push	r5
    23cc:	6f 92       	push	r6
    23ce:	7f 92       	push	r7
    23d0:	8f 92       	push	r8
    23d2:	9f 92       	push	r9
    23d4:	af 92       	push	r10
    23d6:	bf 92       	push	r11
    23d8:	cf 92       	push	r12
    23da:	df 92       	push	r13
    23dc:	ef 92       	push	r14
    23de:	ff 92       	push	r15
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	8c 01       	movw	r16, r24
    23ea:	5b 01       	movw	r10, r22
    23ec:	7a 01       	movw	r14, r20
    23ee:	dc 01       	movw	r26, r24
    23f0:	14 96       	adiw	r26, 0x04	; 4
    23f2:	6d 90       	ld	r6, X+
    23f4:	7c 90       	ld	r7, X
    23f6:	15 97       	sbiw	r26, 0x05	; 5
    23f8:	61 14       	cp	r6, r1
    23fa:	71 04       	cpc	r7, r1
    23fc:	09 f4       	brne	.+2      	; 0x2400 <_ZN6String7replaceERKS_S1_+0x3c>
    23fe:	e1 c0       	rjmp	.+450    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2400:	fb 01       	movw	r30, r22
    2402:	44 80       	ldd	r4, Z+4	; 0x04
    2404:	55 80       	ldd	r5, Z+5	; 0x05
    2406:	41 14       	cp	r4, r1
    2408:	51 04       	cpc	r5, r1
    240a:	09 f4       	brne	.+2      	; 0x240e <_ZN6String7replaceERKS_S1_+0x4a>
    240c:	da c0       	rjmp	.+436    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    240e:	da 01       	movw	r26, r20
    2410:	14 96       	adiw	r26, 0x04	; 4
    2412:	cd 90       	ld	r12, X+
    2414:	dc 90       	ld	r13, X
    2416:	15 97       	sbiw	r26, 0x05	; 5
    2418:	c4 18       	sub	r12, r4
    241a:	d5 08       	sbc	r13, r5
    241c:	fc 01       	movw	r30, r24
    241e:	c0 81       	ld	r28, Z
    2420:	d1 81       	ldd	r29, Z+1	; 0x01
    2422:	c1 14       	cp	r12, r1
    2424:	d1 04       	cpc	r13, r1
    2426:	e1 f4       	brne	.+56     	; 0x2460 <_ZN6String7replaceERKS_S1_+0x9c>
    2428:	11 c0       	rjmp	.+34     	; 0x244c <_ZN6String7replaceERKS_S1_+0x88>
    242a:	d7 01       	movw	r26, r14
    242c:	6c 91       	ld	r22, X
    242e:	11 96       	adiw	r26, 0x01	; 1
    2430:	7c 91       	ld	r23, X
    2432:	11 97       	sbiw	r26, 0x01	; 1
    2434:	14 96       	adiw	r26, 0x04	; 4
    2436:	4d 91       	ld	r20, X+
    2438:	5c 91       	ld	r21, X
    243a:	15 97       	sbiw	r26, 0x05	; 5
    243c:	c8 01       	movw	r24, r16
    243e:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
    2442:	f7 01       	movw	r30, r14
    2444:	c4 81       	ldd	r28, Z+4	; 0x04
    2446:	d5 81       	ldd	r29, Z+5	; 0x05
    2448:	c0 0f       	add	r28, r16
    244a:	d1 1f       	adc	r29, r17
    244c:	d5 01       	movw	r26, r10
    244e:	6d 91       	ld	r22, X+
    2450:	7c 91       	ld	r23, X
    2452:	ce 01       	movw	r24, r28
    2454:	0e 94 43 46 	call	0x8c86	; 0x8c86 <strstr>
    2458:	8c 01       	movw	r16, r24
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	31 f7       	brne	.-52     	; 0x242a <_ZN6String7replaceERKS_S1_+0x66>
    245e:	b1 c0       	rjmp	.+354    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2460:	d7 fe       	sbrs	r13, 7
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <_ZN6String7replaceERKS_S1_+0xa4>
    2464:	4e 01       	movw	r8, r28
    2466:	2f c0       	rjmp	.+94     	; 0x24c6 <_ZN6String7replaceERKS_S1_+0x102>
    2468:	fb 01       	movw	r30, r22
    246a:	20 80       	ld	r2, Z
    246c:	31 80       	ldd	r3, Z+1	; 0x01
    246e:	43 01       	movw	r8, r6
    2470:	4e c0       	rjmp	.+156    	; 0x250e <_ZN6String7replaceERKS_S1_+0x14a>
    2472:	23 01       	movw	r4, r6
    2474:	4c 1a       	sub	r4, r28
    2476:	5d 0a       	sbc	r5, r29
    2478:	a2 01       	movw	r20, r4
    247a:	be 01       	movw	r22, r28
    247c:	c4 01       	movw	r24, r8
    247e:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
    2482:	e4 01       	movw	r28, r8
    2484:	c4 0d       	add	r28, r4
    2486:	d5 1d       	adc	r29, r5
    2488:	d7 01       	movw	r26, r14
    248a:	6c 91       	ld	r22, X
    248c:	11 96       	adiw	r26, 0x01	; 1
    248e:	7c 91       	ld	r23, X
    2490:	11 97       	sbiw	r26, 0x01	; 1
    2492:	14 96       	adiw	r26, 0x04	; 4
    2494:	4d 91       	ld	r20, X+
    2496:	5c 91       	ld	r21, X
    2498:	15 97       	sbiw	r26, 0x05	; 5
    249a:	ce 01       	movw	r24, r28
    249c:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
    24a0:	f7 01       	movw	r30, r14
    24a2:	84 80       	ldd	r8, Z+4	; 0x04
    24a4:	95 80       	ldd	r9, Z+5	; 0x05
    24a6:	8c 0e       	add	r8, r28
    24a8:	9d 1e       	adc	r9, r29
    24aa:	d5 01       	movw	r26, r10
    24ac:	14 96       	adiw	r26, 0x04	; 4
    24ae:	cd 91       	ld	r28, X+
    24b0:	dc 91       	ld	r29, X
    24b2:	15 97       	sbiw	r26, 0x05	; 5
    24b4:	c6 0d       	add	r28, r6
    24b6:	d7 1d       	adc	r29, r7
    24b8:	f8 01       	movw	r30, r16
    24ba:	84 81       	ldd	r24, Z+4	; 0x04
    24bc:	95 81       	ldd	r25, Z+5	; 0x05
    24be:	8c 0d       	add	r24, r12
    24c0:	9d 1d       	adc	r25, r13
    24c2:	95 83       	std	Z+5, r25	; 0x05
    24c4:	84 83       	std	Z+4, r24	; 0x04
    24c6:	d5 01       	movw	r26, r10
    24c8:	6d 91       	ld	r22, X+
    24ca:	7c 91       	ld	r23, X
    24cc:	ce 01       	movw	r24, r28
    24ce:	0e 94 43 46 	call	0x8c86	; 0x8c86 <strstr>
    24d2:	3c 01       	movw	r6, r24
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	69 f6       	brne	.-102    	; 0x2472 <_ZN6String7replaceERKS_S1_+0xae>
    24d8:	be 01       	movw	r22, r28
    24da:	c4 01       	movw	r24, r8
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	bf 90       	pop	r11
    24ee:	af 90       	pop	r10
    24f0:	9f 90       	pop	r9
    24f2:	8f 90       	pop	r8
    24f4:	7f 90       	pop	r7
    24f6:	6f 90       	pop	r6
    24f8:	5f 90       	pop	r5
    24fa:	4f 90       	pop	r4
    24fc:	3f 90       	pop	r3
    24fe:	2f 90       	pop	r2
    2500:	0c 94 14 46 	jmp	0x8c28	; 0x8c28 <strcpy>
    2504:	ec 01       	movw	r28, r24
    2506:	c4 0d       	add	r28, r4
    2508:	d5 1d       	adc	r29, r5
    250a:	8c 0c       	add	r8, r12
    250c:	9d 1c       	adc	r9, r13
    250e:	b1 01       	movw	r22, r2
    2510:	ce 01       	movw	r24, r28
    2512:	0e 94 43 46 	call	0x8c86	; 0x8c86 <strstr>
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	a9 f7       	brne	.-22     	; 0x2504 <_ZN6String7replaceERKS_S1_+0x140>
    251a:	86 14       	cp	r8, r6
    251c:	97 04       	cpc	r9, r7
    251e:	09 f4       	brne	.+2      	; 0x2522 <_ZN6String7replaceERKS_S1_+0x15e>
    2520:	50 c0       	rjmp	.+160    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2522:	f8 01       	movw	r30, r16
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	88 15       	cp	r24, r8
    252a:	99 05       	cpc	r25, r9
    252c:	98 f4       	brcc	.+38     	; 0x2554 <_ZN6String7replaceERKS_S1_+0x190>
    252e:	b4 01       	movw	r22, r8
    2530:	c8 01       	movw	r24, r16
    2532:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN6String12changeBufferEj>
    2536:	88 23       	and	r24, r24
    2538:	09 f4       	brne	.+2      	; 0x253c <_ZN6String7replaceERKS_S1_+0x178>
    253a:	43 c0       	rjmp	.+134    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    253c:	0b c0       	rjmp	.+22     	; 0x2554 <_ZN6String7replaceERKS_S1_+0x190>
    253e:	d7 fd       	sbrc	r29, 7
    2540:	40 c0       	rjmp	.+128    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2542:	ae 01       	movw	r20, r28
    2544:	b5 01       	movw	r22, r10
    2546:	c8 01       	movw	r24, r16
    2548:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZNK6String11lastIndexOfERKS_j>
    254c:	ec 01       	movw	r28, r24
    254e:	97 ff       	sbrs	r25, 7
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <_ZN6String7replaceERKS_S1_+0x19c>
    2552:	37 c0       	rjmp	.+110    	; 0x25c2 <_ZN6String7replaceERKS_S1_+0x1fe>
    2554:	d8 01       	movw	r26, r16
    2556:	14 96       	adiw	r26, 0x04	; 4
    2558:	cd 91       	ld	r28, X+
    255a:	dc 91       	ld	r29, X
    255c:	15 97       	sbiw	r26, 0x05	; 5
    255e:	2f c0       	rjmp	.+94     	; 0x25be <_ZN6String7replaceERKS_S1_+0x1fa>
    2560:	f8 01       	movw	r30, r16
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	d5 01       	movw	r26, r10
    2568:	14 96       	adiw	r26, 0x04	; 4
    256a:	2d 91       	ld	r18, X+
    256c:	3c 91       	ld	r19, X
    256e:	15 97       	sbiw	r26, 0x05	; 5
    2570:	2c 0f       	add	r18, r28
    2572:	3d 1f       	adc	r19, r29
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
    2578:	44 81       	ldd	r20, Z+4	; 0x04
    257a:	55 81       	ldd	r21, Z+5	; 0x05
    257c:	42 1b       	sub	r20, r18
    257e:	53 0b       	sbc	r21, r19
    2580:	bc 01       	movw	r22, r24
    2582:	8c 0d       	add	r24, r12
    2584:	9d 1d       	adc	r25, r13
    2586:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <memmove>
    258a:	f8 01       	movw	r30, r16
    258c:	84 81       	ldd	r24, Z+4	; 0x04
    258e:	95 81       	ldd	r25, Z+5	; 0x05
    2590:	8c 0d       	add	r24, r12
    2592:	9d 1d       	adc	r25, r13
    2594:	95 83       	std	Z+5, r25	; 0x05
    2596:	84 83       	std	Z+4, r24	; 0x04
    2598:	01 90       	ld	r0, Z+
    259a:	f0 81       	ld	r31, Z
    259c:	e0 2d       	mov	r30, r0
    259e:	e8 0f       	add	r30, r24
    25a0:	f9 1f       	adc	r31, r25
    25a2:	10 82       	st	Z, r1
    25a4:	d8 01       	movw	r26, r16
    25a6:	2d 91       	ld	r18, X+
    25a8:	3c 91       	ld	r19, X
    25aa:	2c 0f       	add	r18, r28
    25ac:	3d 1f       	adc	r19, r29
    25ae:	f7 01       	movw	r30, r14
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	44 81       	ldd	r20, Z+4	; 0x04
    25b6:	55 81       	ldd	r21, Z+5	; 0x05
    25b8:	c9 01       	movw	r24, r18
    25ba:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
    25be:	21 97       	sbiw	r28, 0x01	; 1
    25c0:	be cf       	rjmp	.-132    	; 0x253e <_ZN6String7replaceERKS_S1_+0x17a>
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	1f 91       	pop	r17
    25c8:	0f 91       	pop	r16
    25ca:	ff 90       	pop	r15
    25cc:	ef 90       	pop	r14
    25ce:	df 90       	pop	r13
    25d0:	cf 90       	pop	r12
    25d2:	bf 90       	pop	r11
    25d4:	af 90       	pop	r10
    25d6:	9f 90       	pop	r9
    25d8:	8f 90       	pop	r8
    25da:	7f 90       	pop	r7
    25dc:	6f 90       	pop	r6
    25de:	5f 90       	pop	r5
    25e0:	4f 90       	pop	r4
    25e2:	3f 90       	pop	r3
    25e4:	2f 90       	pop	r2
    25e6:	08 95       	ret

000025e8 <_ZN6String11toLowerCaseEv>:
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	fc 01       	movw	r30, r24
    25ee:	c0 81       	ld	r28, Z
    25f0:	d1 81       	ldd	r29, Z+1	; 0x01
    25f2:	20 97       	sbiw	r28, 0x00	; 0
    25f4:	29 f4       	brne	.+10     	; 0x2600 <_ZN6String11toLowerCaseEv+0x18>
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <_ZN6String11toLowerCaseEv+0x1e>
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 d1 45 	call	0x8ba2	; 0x8ba2 <tolower>
    25fe:	89 93       	st	Y+, r24
    2600:	88 81       	ld	r24, Y
    2602:	81 11       	cpse	r24, r1
    2604:	f9 cf       	rjmp	.-14     	; 0x25f8 <_ZN6String11toLowerCaseEv+0x10>
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <_ZN6String11toUpperCaseEv>:
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	fc 01       	movw	r30, r24
    2612:	c0 81       	ld	r28, Z
    2614:	d1 81       	ldd	r29, Z+1	; 0x01
    2616:	20 97       	sbiw	r28, 0x00	; 0
    2618:	29 f4       	brne	.+10     	; 0x2624 <_ZN6String11toUpperCaseEv+0x18>
    261a:	07 c0       	rjmp	.+14     	; 0x262a <_ZN6String11toUpperCaseEv+0x1e>
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 d9 45 	call	0x8bb2	; 0x8bb2 <toupper>
    2622:	89 93       	st	Y+, r24
    2624:	88 81       	ld	r24, Y
    2626:	81 11       	cpse	r24, r1
    2628:	f9 cf       	rjmp	.-14     	; 0x261c <_ZN6String11toUpperCaseEv+0x10>
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <_ZN6String4trimEv>:
    2630:	af 92       	push	r10
    2632:	bf 92       	push	r11
    2634:	cf 92       	push	r12
    2636:	df 92       	push	r13
    2638:	ef 92       	push	r14
    263a:	ff 92       	push	r15
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	6c 01       	movw	r12, r24
    2646:	dc 01       	movw	r26, r24
    2648:	ed 90       	ld	r14, X+
    264a:	fc 90       	ld	r15, X
    264c:	11 97       	sbiw	r26, 0x01	; 1
    264e:	e1 14       	cp	r14, r1
    2650:	f1 04       	cpc	r15, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <_ZN6String4trimEv+0x26>
    2654:	42 c0       	rjmp	.+132    	; 0x26da <_ZN6String4trimEv+0xaa>
    2656:	14 96       	adiw	r26, 0x04	; 4
    2658:	0d 91       	ld	r16, X+
    265a:	1c 91       	ld	r17, X
    265c:	15 97       	sbiw	r26, 0x05	; 5
    265e:	01 15       	cp	r16, r1
    2660:	11 05       	cpc	r17, r1
    2662:	d9 f1       	breq	.+118    	; 0x26da <_ZN6String4trimEv+0xaa>
    2664:	57 01       	movw	r10, r14
    2666:	e5 01       	movw	r28, r10
    2668:	bf ef       	ldi	r27, 0xFF	; 255
    266a:	ab 1a       	sub	r10, r27
    266c:	bb 0a       	sbc	r11, r27
    266e:	88 81       	ld	r24, Y
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <isspace>
    2676:	89 2b       	or	r24, r25
    2678:	b1 f7       	brne	.-20     	; 0x2666 <_ZN6String4trimEv+0x36>
    267a:	01 50       	subi	r16, 0x01	; 1
    267c:	11 09       	sbc	r17, r1
    267e:	0e 0d       	add	r16, r14
    2680:	1f 1d       	adc	r17, r15
    2682:	f8 01       	movw	r30, r16
    2684:	80 81       	ld	r24, Z
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <isspace>
    268c:	89 2b       	or	r24, r25
    268e:	69 f4       	brne	.+26     	; 0x26aa <_ZN6String4trimEv+0x7a>
    2690:	0f 5f       	subi	r16, 0xFF	; 255
    2692:	1f 4f       	sbci	r17, 0xFF	; 255
    2694:	0c 1b       	sub	r16, r28
    2696:	1d 0b       	sbc	r17, r29
    2698:	d6 01       	movw	r26, r12
    269a:	15 96       	adiw	r26, 0x05	; 5
    269c:	1c 93       	st	X, r17
    269e:	0e 93       	st	-X, r16
    26a0:	14 97       	sbiw	r26, 0x04	; 4
    26a2:	ec 16       	cp	r14, r28
    26a4:	fd 06       	cpc	r15, r29
    26a6:	50 f4       	brcc	.+20     	; 0x26bc <_ZN6String4trimEv+0x8c>
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <_ZN6String4trimEv+0x82>
    26aa:	0c 17       	cp	r16, r28
    26ac:	1d 07       	cpc	r17, r29
    26ae:	90 f4       	brcc	.+36     	; 0x26d4 <_ZN6String4trimEv+0xa4>
    26b0:	ef cf       	rjmp	.-34     	; 0x2690 <_ZN6String4trimEv+0x60>
    26b2:	a8 01       	movw	r20, r16
    26b4:	be 01       	movw	r22, r28
    26b6:	c7 01       	movw	r24, r14
    26b8:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
    26bc:	d6 01       	movw	r26, r12
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	11 97       	sbiw	r26, 0x01	; 1
    26c4:	14 96       	adiw	r26, 0x04	; 4
    26c6:	8d 91       	ld	r24, X+
    26c8:	9c 91       	ld	r25, X
    26ca:	15 97       	sbiw	r26, 0x05	; 5
    26cc:	e8 0f       	add	r30, r24
    26ce:	f9 1f       	adc	r31, r25
    26d0:	10 82       	st	Z, r1
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <_ZN6String4trimEv+0xaa>
    26d4:	01 50       	subi	r16, 0x01	; 1
    26d6:	11 09       	sbc	r17, r1
    26d8:	d4 cf       	rjmp	.-88     	; 0x2682 <_ZN6String4trimEv+0x52>
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	ef 90       	pop	r14
    26e6:	df 90       	pop	r13
    26e8:	cf 90       	pop	r12
    26ea:	bf 90       	pop	r11
    26ec:	af 90       	pop	r10
    26ee:	08 95       	ret

000026f0 <_ZNK6String5toIntEv>:
    26f0:	fc 01       	movw	r30, r24
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	11 f0       	breq	.+4      	; 0x26fe <_ZNK6String5toIntEv+0xe>
    26fa:	0c 94 a2 45 	jmp	0x8b44	; 0x8b44 <atol>
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	08 95       	ret

00002708 <malloc>:
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	82 30       	cpi	r24, 0x02	; 2
    2712:	91 05       	cpc	r25, r1
    2714:	10 f4       	brcc	.+4      	; 0x271a <malloc+0x12>
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	e0 91 86 11 	lds	r30, 0x1186
    271e:	f0 91 87 11 	lds	r31, 0x1187
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	c0 e0       	ldi	r28, 0x00	; 0
    2728:	d0 e0       	ldi	r29, 0x00	; 0
    272a:	23 c0       	rjmp	.+70     	; 0x2772 <malloc+0x6a>
    272c:	40 81       	ld	r20, Z
    272e:	51 81       	ldd	r21, Z+1	; 0x01
    2730:	48 17       	cp	r20, r24
    2732:	59 07       	cpc	r21, r25
    2734:	a8 f0       	brcs	.+42     	; 0x2760 <malloc+0x58>
    2736:	48 17       	cp	r20, r24
    2738:	59 07       	cpc	r21, r25
    273a:	61 f4       	brne	.+24     	; 0x2754 <malloc+0x4c>
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 97       	sbiw	r28, 0x00	; 0
    2742:	19 f0       	breq	.+6      	; 0x274a <malloc+0x42>
    2744:	9b 83       	std	Y+3, r25	; 0x03
    2746:	8a 83       	std	Y+2, r24	; 0x02
    2748:	2e c0       	rjmp	.+92     	; 0x27a6 <malloc+0x9e>
    274a:	90 93 87 11 	sts	0x1187, r25
    274e:	80 93 86 11 	sts	0x1186, r24
    2752:	29 c0       	rjmp	.+82     	; 0x27a6 <malloc+0x9e>
    2754:	21 15       	cp	r18, r1
    2756:	31 05       	cpc	r19, r1
    2758:	29 f0       	breq	.+10     	; 0x2764 <malloc+0x5c>
    275a:	42 17       	cp	r20, r18
    275c:	53 07       	cpc	r21, r19
    275e:	10 f0       	brcs	.+4      	; 0x2764 <malloc+0x5c>
    2760:	a9 01       	movw	r20, r18
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <malloc+0x60>
    2764:	be 01       	movw	r22, r28
    2766:	df 01       	movw	r26, r30
    2768:	02 81       	ldd	r16, Z+2	; 0x02
    276a:	13 81       	ldd	r17, Z+3	; 0x03
    276c:	ef 01       	movw	r28, r30
    276e:	9a 01       	movw	r18, r20
    2770:	f8 01       	movw	r30, r16
    2772:	30 97       	sbiw	r30, 0x00	; 0
    2774:	d9 f6       	brne	.-74     	; 0x272c <malloc+0x24>
    2776:	21 15       	cp	r18, r1
    2778:	31 05       	cpc	r19, r1
    277a:	09 f1       	breq	.+66     	; 0x27be <malloc+0xb6>
    277c:	28 1b       	sub	r18, r24
    277e:	39 0b       	sbc	r19, r25
    2780:	24 30       	cpi	r18, 0x04	; 4
    2782:	31 05       	cpc	r19, r1
    2784:	90 f4       	brcc	.+36     	; 0x27aa <malloc+0xa2>
    2786:	12 96       	adiw	r26, 0x02	; 2
    2788:	8d 91       	ld	r24, X+
    278a:	9c 91       	ld	r25, X
    278c:	13 97       	sbiw	r26, 0x03	; 3
    278e:	61 15       	cp	r22, r1
    2790:	71 05       	cpc	r23, r1
    2792:	21 f0       	breq	.+8      	; 0x279c <malloc+0x94>
    2794:	fb 01       	movw	r30, r22
    2796:	93 83       	std	Z+3, r25	; 0x03
    2798:	82 83       	std	Z+2, r24	; 0x02
    279a:	04 c0       	rjmp	.+8      	; 0x27a4 <malloc+0x9c>
    279c:	90 93 87 11 	sts	0x1187, r25
    27a0:	80 93 86 11 	sts	0x1186, r24
    27a4:	fd 01       	movw	r30, r26
    27a6:	32 96       	adiw	r30, 0x02	; 2
    27a8:	2f c0       	rjmp	.+94     	; 0x2808 <malloc+0x100>
    27aa:	fd 01       	movw	r30, r26
    27ac:	e2 0f       	add	r30, r18
    27ae:	f3 1f       	adc	r31, r19
    27b0:	81 93       	st	Z+, r24
    27b2:	91 93       	st	Z+, r25
    27b4:	22 50       	subi	r18, 0x02	; 2
    27b6:	31 09       	sbc	r19, r1
    27b8:	2d 93       	st	X+, r18
    27ba:	3c 93       	st	X, r19
    27bc:	25 c0       	rjmp	.+74     	; 0x2808 <malloc+0x100>
    27be:	4d b7       	in	r20, 0x3d	; 61
    27c0:	5e b7       	in	r21, 0x3e	; 62
    27c2:	48 57       	subi	r20, 0x78	; 120
    27c4:	51 09       	sbc	r21, r1
    27c6:	e0 91 02 02 	lds	r30, 0x0202
    27ca:	f0 91 03 02 	lds	r31, 0x0203
    27ce:	e4 17       	cp	r30, r20
    27d0:	f5 07       	cpc	r31, r21
    27d2:	c0 f4       	brcc	.+48     	; 0x2804 <malloc+0xfc>
    27d4:	4e 1b       	sub	r20, r30
    27d6:	5f 0b       	sbc	r21, r31
    27d8:	48 17       	cp	r20, r24
    27da:	59 07       	cpc	r21, r25
    27dc:	98 f0       	brcs	.+38     	; 0x2804 <malloc+0xfc>
    27de:	9c 01       	movw	r18, r24
    27e0:	2e 5f       	subi	r18, 0xFE	; 254
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	42 17       	cp	r20, r18
    27e6:	53 07       	cpc	r21, r19
    27e8:	68 f0       	brcs	.+26     	; 0x2804 <malloc+0xfc>
    27ea:	2e 0f       	add	r18, r30
    27ec:	3f 1f       	adc	r19, r31
    27ee:	30 93 03 02 	sts	0x0203, r19
    27f2:	20 93 02 02 	sts	0x0202, r18
    27f6:	30 93 01 02 	sts	0x0201, r19
    27fa:	20 93 00 02 	sts	0x0200, r18
    27fe:	81 93       	st	Z+, r24
    2800:	91 93       	st	Z+, r25
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <malloc+0x100>
    2804:	e0 e0       	ldi	r30, 0x00	; 0
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	cf 01       	movw	r24, r30
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	1f 91       	pop	r17
    2810:	0f 91       	pop	r16
    2812:	08 95       	ret

00002814 <free>:
    2814:	ef 92       	push	r14
    2816:	ff 92       	push	r15
    2818:	0f 93       	push	r16
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	09 f4       	brne	.+2      	; 0x2826 <free+0x12>
    2824:	8e c0       	rjmp	.+284    	; 0x2942 <free+0x12e>
    2826:	dc 01       	movw	r26, r24
    2828:	12 97       	sbiw	r26, 0x02	; 2
    282a:	13 96       	adiw	r26, 0x03	; 3
    282c:	1c 92       	st	X, r1
    282e:	1e 92       	st	-X, r1
    2830:	12 97       	sbiw	r26, 0x02	; 2
    2832:	e0 90 86 11 	lds	r14, 0x1186
    2836:	f0 90 87 11 	lds	r15, 0x1187
    283a:	e1 14       	cp	r14, r1
    283c:	f1 04       	cpc	r15, r1
    283e:	89 f4       	brne	.+34     	; 0x2862 <free+0x4e>
    2840:	2d 91       	ld	r18, X+
    2842:	3c 91       	ld	r19, X
    2844:	11 97       	sbiw	r26, 0x01	; 1
    2846:	28 0f       	add	r18, r24
    2848:	39 1f       	adc	r19, r25
    284a:	80 91 02 02 	lds	r24, 0x0202
    284e:	90 91 03 02 	lds	r25, 0x0203
    2852:	82 17       	cp	r24, r18
    2854:	93 07       	cpc	r25, r19
    2856:	89 f5       	brne	.+98     	; 0x28ba <free+0xa6>
    2858:	b0 93 03 02 	sts	0x0203, r27
    285c:	a0 93 02 02 	sts	0x0202, r26
    2860:	70 c0       	rjmp	.+224    	; 0x2942 <free+0x12e>
    2862:	e7 01       	movw	r28, r14
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	01 c0       	rjmp	.+2      	; 0x286c <free+0x58>
    286a:	ea 01       	movw	r28, r20
    286c:	ca 17       	cp	r28, r26
    286e:	db 07       	cpc	r29, r27
    2870:	38 f4       	brcc	.+14     	; 0x2880 <free+0x6c>
    2872:	4a 81       	ldd	r20, Y+2	; 0x02
    2874:	5b 81       	ldd	r21, Y+3	; 0x03
    2876:	9e 01       	movw	r18, r28
    2878:	41 15       	cp	r20, r1
    287a:	51 05       	cpc	r21, r1
    287c:	b1 f7       	brne	.-20     	; 0x286a <free+0x56>
    287e:	22 c0       	rjmp	.+68     	; 0x28c4 <free+0xb0>
    2880:	ac 01       	movw	r20, r24
    2882:	42 50       	subi	r20, 0x02	; 2
    2884:	51 09       	sbc	r21, r1
    2886:	fa 01       	movw	r30, r20
    2888:	d3 83       	std	Z+3, r29	; 0x03
    288a:	c2 83       	std	Z+2, r28	; 0x02
    288c:	00 81       	ld	r16, Z
    288e:	11 81       	ldd	r17, Z+1	; 0x01
    2890:	bc 01       	movw	r22, r24
    2892:	60 0f       	add	r22, r16
    2894:	71 1f       	adc	r23, r17
    2896:	6c 17       	cp	r22, r28
    2898:	7d 07       	cpc	r23, r29
    289a:	61 f4       	brne	.+24     	; 0x28b4 <free+0xa0>
    289c:	68 81       	ld	r22, Y
    289e:	79 81       	ldd	r23, Y+1	; 0x01
    28a0:	60 0f       	add	r22, r16
    28a2:	71 1f       	adc	r23, r17
    28a4:	6e 5f       	subi	r22, 0xFE	; 254
    28a6:	7f 4f       	sbci	r23, 0xFF	; 255
    28a8:	71 83       	std	Z+1, r23	; 0x01
    28aa:	60 83       	st	Z, r22
    28ac:	6a 81       	ldd	r22, Y+2	; 0x02
    28ae:	7b 81       	ldd	r23, Y+3	; 0x03
    28b0:	73 83       	std	Z+3, r23	; 0x03
    28b2:	62 83       	std	Z+2, r22	; 0x02
    28b4:	21 15       	cp	r18, r1
    28b6:	31 05       	cpc	r19, r1
    28b8:	29 f4       	brne	.+10     	; 0x28c4 <free+0xb0>
    28ba:	b0 93 87 11 	sts	0x1187, r27
    28be:	a0 93 86 11 	sts	0x1186, r26
    28c2:	3f c0       	rjmp	.+126    	; 0x2942 <free+0x12e>
    28c4:	f9 01       	movw	r30, r18
    28c6:	b3 83       	std	Z+3, r27	; 0x03
    28c8:	a2 83       	std	Z+2, r26	; 0x02
    28ca:	e9 01       	movw	r28, r18
    28cc:	49 91       	ld	r20, Y+
    28ce:	59 91       	ld	r21, Y+
    28d0:	c4 0f       	add	r28, r20
    28d2:	d5 1f       	adc	r29, r21
    28d4:	ac 17       	cp	r26, r28
    28d6:	bd 07       	cpc	r27, r29
    28d8:	71 f4       	brne	.+28     	; 0x28f6 <free+0xe2>
    28da:	dc 01       	movw	r26, r24
    28dc:	9e 91       	ld	r25, -X
    28de:	8e 91       	ld	r24, -X
    28e0:	84 0f       	add	r24, r20
    28e2:	95 1f       	adc	r25, r21
    28e4:	02 96       	adiw	r24, 0x02	; 2
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	8d 91       	ld	r24, X+
    28ee:	9c 91       	ld	r25, X
    28f0:	13 97       	sbiw	r26, 0x03	; 3
    28f2:	93 83       	std	Z+3, r25	; 0x03
    28f4:	82 83       	std	Z+2, r24	; 0x02
    28f6:	a0 e0       	ldi	r26, 0x00	; 0
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <free+0xec>
    28fc:	d7 01       	movw	r26, r14
    28fe:	7c 01       	movw	r14, r24
    2900:	f7 01       	movw	r30, r14
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	00 97       	sbiw	r24, 0x00	; 0
    2908:	c9 f7       	brne	.-14     	; 0x28fc <free+0xe8>
    290a:	c7 01       	movw	r24, r14
    290c:	02 96       	adiw	r24, 0x02	; 2
    290e:	20 81       	ld	r18, Z
    2910:	31 81       	ldd	r19, Z+1	; 0x01
    2912:	82 0f       	add	r24, r18
    2914:	93 1f       	adc	r25, r19
    2916:	20 91 02 02 	lds	r18, 0x0202
    291a:	30 91 03 02 	lds	r19, 0x0203
    291e:	28 17       	cp	r18, r24
    2920:	39 07       	cpc	r19, r25
    2922:	79 f4       	brne	.+30     	; 0x2942 <free+0x12e>
    2924:	10 97       	sbiw	r26, 0x00	; 0
    2926:	29 f4       	brne	.+10     	; 0x2932 <free+0x11e>
    2928:	10 92 87 11 	sts	0x1187, r1
    292c:	10 92 86 11 	sts	0x1186, r1
    2930:	04 c0       	rjmp	.+8      	; 0x293a <free+0x126>
    2932:	13 96       	adiw	r26, 0x03	; 3
    2934:	1c 92       	st	X, r1
    2936:	1e 92       	st	-X, r1
    2938:	12 97       	sbiw	r26, 0x02	; 2
    293a:	f0 92 03 02 	sts	0x0203, r15
    293e:	e0 92 02 02 	sts	0x0202, r14
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	08 95       	ret

00002950 <realloc>:
    2950:	8f 92       	push	r8
    2952:	9f 92       	push	r9
    2954:	af 92       	push	r10
    2956:	bf 92       	push	r11
    2958:	cf 92       	push	r12
    295a:	df 92       	push	r13
    295c:	ef 92       	push	r14
    295e:	ff 92       	push	r15
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	ec 01       	movw	r28, r24
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	79 f4       	brne	.+30     	; 0x298c <realloc+0x3c>
    296e:	cb 01       	movw	r24, r22
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ff 90       	pop	r15
    297a:	ef 90       	pop	r14
    297c:	df 90       	pop	r13
    297e:	cf 90       	pop	r12
    2980:	bf 90       	pop	r11
    2982:	af 90       	pop	r10
    2984:	9f 90       	pop	r9
    2986:	8f 90       	pop	r8
    2988:	0c 94 84 13 	jmp	0x2708	; 0x2708 <malloc>
    298c:	dc 01       	movw	r26, r24
    298e:	a6 0f       	add	r26, r22
    2990:	b7 1f       	adc	r27, r23
    2992:	fc 01       	movw	r30, r24
    2994:	32 97       	sbiw	r30, 0x02	; 2
    2996:	ae 17       	cp	r26, r30
    2998:	bf 07       	cpc	r27, r31
    299a:	18 f4       	brcc	.+6      	; 0x29a2 <realloc+0x52>
    299c:	c0 e0       	ldi	r28, 0x00	; 0
    299e:	d0 e0       	ldi	r29, 0x00	; 0
    29a0:	a3 c0       	rjmp	.+326    	; 0x2ae8 <realloc+0x198>
    29a2:	00 81       	ld	r16, Z
    29a4:	11 81       	ldd	r17, Z+1	; 0x01
    29a6:	06 17       	cp	r16, r22
    29a8:	17 07       	cpc	r17, r23
    29aa:	b0 f0       	brcs	.+44     	; 0x29d8 <realloc+0x88>
    29ac:	05 30       	cpi	r16, 0x05	; 5
    29ae:	11 05       	cpc	r17, r1
    29b0:	08 f4       	brcc	.+2      	; 0x29b4 <realloc+0x64>
    29b2:	9a c0       	rjmp	.+308    	; 0x2ae8 <realloc+0x198>
    29b4:	c8 01       	movw	r24, r16
    29b6:	04 97       	sbiw	r24, 0x04	; 4
    29b8:	86 17       	cp	r24, r22
    29ba:	97 07       	cpc	r25, r23
    29bc:	08 f4       	brcc	.+2      	; 0x29c0 <realloc+0x70>
    29be:	94 c0       	rjmp	.+296    	; 0x2ae8 <realloc+0x198>
    29c0:	02 50       	subi	r16, 0x02	; 2
    29c2:	11 09       	sbc	r17, r1
    29c4:	06 1b       	sub	r16, r22
    29c6:	17 0b       	sbc	r17, r23
    29c8:	0d 93       	st	X+, r16
    29ca:	1d 93       	st	X+, r17
    29cc:	71 83       	std	Z+1, r23	; 0x01
    29ce:	60 83       	st	Z, r22
    29d0:	cd 01       	movw	r24, r26
    29d2:	0e 94 0a 14 	call	0x2814	; 0x2814 <free>
    29d6:	88 c0       	rjmp	.+272    	; 0x2ae8 <realloc+0x198>
    29d8:	6b 01       	movw	r12, r22
    29da:	c0 1a       	sub	r12, r16
    29dc:	d1 0a       	sbc	r13, r17
    29de:	7c 01       	movw	r14, r24
    29e0:	e0 0e       	add	r14, r16
    29e2:	f1 1e       	adc	r15, r17
    29e4:	e0 91 86 11 	lds	r30, 0x1186
    29e8:	f0 91 87 11 	lds	r31, 0x1187
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	48 c0       	rjmp	.+144    	; 0x2a86 <realloc+0x136>
    29f6:	ee 15       	cp	r30, r14
    29f8:	ff 05       	cpc	r31, r15
    29fa:	d1 f5       	brne	.+116    	; 0x2a70 <realloc+0x120>
    29fc:	80 80       	ld	r8, Z
    29fe:	91 80       	ldd	r9, Z+1	; 0x01
    2a00:	54 01       	movw	r10, r8
    2a02:	42 e0       	ldi	r20, 0x02	; 2
    2a04:	a4 0e       	add	r10, r20
    2a06:	b1 1c       	adc	r11, r1
    2a08:	ac 14       	cp	r10, r12
    2a0a:	bd 04       	cpc	r11, r13
    2a0c:	88 f1       	brcs	.+98     	; 0x2a70 <realloc+0x120>
    2a0e:	74 01       	movw	r14, r8
    2a10:	ec 18       	sub	r14, r12
    2a12:	fd 08       	sbc	r15, r13
    2a14:	67 01       	movw	r12, r14
    2a16:	22 e0       	ldi	r18, 0x02	; 2
    2a18:	c2 0e       	add	r12, r18
    2a1a:	d1 1c       	adc	r13, r1
    2a1c:	9e 01       	movw	r18, r28
    2a1e:	22 50       	subi	r18, 0x02	; 2
    2a20:	31 09       	sbc	r19, r1
    2a22:	45 e0       	ldi	r20, 0x05	; 5
    2a24:	c4 16       	cp	r12, r20
    2a26:	d1 04       	cpc	r13, r1
    2a28:	78 f0       	brcs	.+30     	; 0x2a48 <realloc+0xf8>
    2a2a:	42 81       	ldd	r20, Z+2	; 0x02
    2a2c:	53 81       	ldd	r21, Z+3	; 0x03
    2a2e:	13 96       	adiw	r26, 0x03	; 3
    2a30:	5c 93       	st	X, r21
    2a32:	4e 93       	st	-X, r20
    2a34:	12 97       	sbiw	r26, 0x02	; 2
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	fc 92       	st	X, r15
    2a3a:	ee 92       	st	-X, r14
    2a3c:	f9 01       	movw	r30, r18
    2a3e:	71 83       	std	Z+1, r23	; 0x01
    2a40:	60 83       	st	Z, r22
    2a42:	3a 2f       	mov	r19, r26
    2a44:	2b 2f       	mov	r18, r27
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <realloc+0x10a>
    2a48:	0e 5f       	subi	r16, 0xFE	; 254
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	08 0d       	add	r16, r8
    2a4e:	19 1d       	adc	r17, r9
    2a50:	d9 01       	movw	r26, r18
    2a52:	0d 93       	st	X+, r16
    2a54:	1c 93       	st	X, r17
    2a56:	32 81       	ldd	r19, Z+2	; 0x02
    2a58:	23 81       	ldd	r18, Z+3	; 0x03
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	21 f0       	breq	.+8      	; 0x2a66 <realloc+0x116>
    2a5e:	fc 01       	movw	r30, r24
    2a60:	32 83       	std	Z+2, r19	; 0x02
    2a62:	23 83       	std	Z+3, r18	; 0x03
    2a64:	41 c0       	rjmp	.+130    	; 0x2ae8 <realloc+0x198>
    2a66:	30 93 86 11 	sts	0x1186, r19
    2a6a:	20 93 87 11 	sts	0x1187, r18
    2a6e:	3c c0       	rjmp	.+120    	; 0x2ae8 <realloc+0x198>
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	28 17       	cp	r18, r24
    2a76:	39 07       	cpc	r19, r25
    2a78:	08 f4       	brcc	.+2      	; 0x2a7c <realloc+0x12c>
    2a7a:	9c 01       	movw	r18, r24
    2a7c:	52 81       	ldd	r21, Z+2	; 0x02
    2a7e:	43 81       	ldd	r20, Z+3	; 0x03
    2a80:	cf 01       	movw	r24, r30
    2a82:	e5 2f       	mov	r30, r21
    2a84:	f4 2f       	mov	r31, r20
    2a86:	30 97       	sbiw	r30, 0x00	; 0
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <realloc+0x13c>
    2a8a:	b5 cf       	rjmp	.-150    	; 0x29f6 <realloc+0xa6>
    2a8c:	80 91 02 02 	lds	r24, 0x0202
    2a90:	90 91 03 02 	lds	r25, 0x0203
    2a94:	8e 15       	cp	r24, r14
    2a96:	9f 05       	cpc	r25, r15
    2a98:	c1 f4       	brne	.+48     	; 0x2aca <realloc+0x17a>
    2a9a:	26 17       	cp	r18, r22
    2a9c:	37 07       	cpc	r19, r23
    2a9e:	a8 f4       	brcc	.+42     	; 0x2aca <realloc+0x17a>
    2aa0:	8d b7       	in	r24, 0x3d	; 61
    2aa2:	9e b7       	in	r25, 0x3e	; 62
    2aa4:	88 57       	subi	r24, 0x78	; 120
    2aa6:	91 09       	sbc	r25, r1
    2aa8:	a8 17       	cp	r26, r24
    2aaa:	b9 07       	cpc	r27, r25
    2aac:	08 f0       	brcs	.+2      	; 0x2ab0 <realloc+0x160>
    2aae:	76 cf       	rjmp	.-276    	; 0x299c <realloc+0x4c>
    2ab0:	b0 93 03 02 	sts	0x0203, r27
    2ab4:	a0 93 02 02 	sts	0x0202, r26
    2ab8:	b0 93 01 02 	sts	0x0201, r27
    2abc:	a0 93 00 02 	sts	0x0200, r26
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	32 97       	sbiw	r30, 0x02	; 2
    2ac4:	71 83       	std	Z+1, r23	; 0x01
    2ac6:	60 83       	st	Z, r22
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <realloc+0x198>
    2aca:	cb 01       	movw	r24, r22
    2acc:	0e 94 84 13 	call	0x2708	; 0x2708 <malloc>
    2ad0:	7c 01       	movw	r14, r24
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <realloc+0x188>
    2ad6:	62 cf       	rjmp	.-316    	; 0x299c <realloc+0x4c>
    2ad8:	a8 01       	movw	r20, r16
    2ada:	be 01       	movw	r22, r28
    2adc:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	0e 94 0a 14 	call	0x2814	; 0x2814 <free>
    2ae6:	e7 01       	movw	r28, r14
    2ae8:	ce 01       	movw	r24, r28
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	ff 90       	pop	r15
    2af4:	ef 90       	pop	r14
    2af6:	df 90       	pop	r13
    2af8:	cf 90       	pop	r12
    2afa:	bf 90       	pop	r11
    2afc:	af 90       	pop	r10
    2afe:	9f 90       	pop	r9
    2b00:	8f 90       	pop	r8
    2b02:	08 95       	ret

00002b04 <_Znwj>:
    2b04:	0c 94 84 13 	jmp	0x2708	; 0x2708 <malloc>

00002b08 <_Znaj>:
    2b08:	0c 94 84 13 	jmp	0x2708	; 0x2708 <malloc>

00002b0c <_ZdlPv>:
    2b0c:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <free>

00002b10 <_ZdaPv>:
    2b10:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <free>

00002b14 <__cxa_guard_acquire>:
    2b14:	21 e0       	ldi	r18, 0x01	; 1
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	fc 01       	movw	r30, r24
    2b1a:	80 81       	ld	r24, Z
    2b1c:	88 23       	and	r24, r24
    2b1e:	11 f0       	breq	.+4      	; 0x2b24 <__cxa_guard_acquire+0x10>
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	c9 01       	movw	r24, r18
    2b26:	08 95       	ret

00002b28 <__cxa_guard_release>:
    2b28:	21 e0       	ldi	r18, 0x01	; 1
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	20 83       	st	Z, r18
    2b2e:	08 95       	ret

00002b30 <__cxa_guard_abort>:
    2b30:	08 95       	ret

00002b32 <__cxa_pure_virtual>:
    2b32:	08 95       	ret

00002b34 <__vector_23>:
    2b34:	1f 92       	push	r1
    2b36:	0f 92       	push	r0
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	0f 92       	push	r0
    2b3c:	11 24       	eor	r1, r1
    2b3e:	2f 93       	push	r18
    2b40:	3f 93       	push	r19
    2b42:	8f 93       	push	r24
    2b44:	9f 93       	push	r25
    2b46:	af 93       	push	r26
    2b48:	bf 93       	push	r27
    2b4a:	80 91 17 09 	lds	r24, 0x0917
    2b4e:	90 91 18 09 	lds	r25, 0x0918
    2b52:	a0 91 19 09 	lds	r26, 0x0919
    2b56:	b0 91 1a 09 	lds	r27, 0x091A
    2b5a:	30 91 1f 09 	lds	r19, 0x091F
    2b5e:	23 2f       	mov	r18, r19
    2b60:	2d 5f       	subi	r18, 0xFD	; 253
    2b62:	2d 37       	cpi	r18, 0x7D	; 125
    2b64:	20 f4       	brcc	.+8      	; 0x2b6e <__vector_23+0x3a>
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	a1 1d       	adc	r26, r1
    2b6a:	b1 1d       	adc	r27, r1
    2b6c:	05 c0       	rjmp	.+10     	; 0x2b78 <__vector_23+0x44>
    2b6e:	23 2f       	mov	r18, r19
    2b70:	2a 57       	subi	r18, 0x7A	; 122
    2b72:	02 96       	adiw	r24, 0x02	; 2
    2b74:	a1 1d       	adc	r26, r1
    2b76:	b1 1d       	adc	r27, r1
    2b78:	20 93 1f 09 	sts	0x091F, r18
    2b7c:	80 93 17 09 	sts	0x0917, r24
    2b80:	90 93 18 09 	sts	0x0918, r25
    2b84:	a0 93 19 09 	sts	0x0919, r26
    2b88:	b0 93 1a 09 	sts	0x091A, r27
    2b8c:	80 91 1b 09 	lds	r24, 0x091B
    2b90:	90 91 1c 09 	lds	r25, 0x091C
    2b94:	a0 91 1d 09 	lds	r26, 0x091D
    2b98:	b0 91 1e 09 	lds	r27, 0x091E
    2b9c:	01 96       	adiw	r24, 0x01	; 1
    2b9e:	a1 1d       	adc	r26, r1
    2ba0:	b1 1d       	adc	r27, r1
    2ba2:	80 93 1b 09 	sts	0x091B, r24
    2ba6:	90 93 1c 09 	sts	0x091C, r25
    2baa:	a0 93 1d 09 	sts	0x091D, r26
    2bae:	b0 93 1e 09 	sts	0x091E, r27
    2bb2:	bf 91       	pop	r27
    2bb4:	af 91       	pop	r26
    2bb6:	9f 91       	pop	r25
    2bb8:	8f 91       	pop	r24
    2bba:	3f 91       	pop	r19
    2bbc:	2f 91       	pop	r18
    2bbe:	0f 90       	pop	r0
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	0f 90       	pop	r0
    2bc4:	1f 90       	pop	r1
    2bc6:	18 95       	reti

00002bc8 <millis>:
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	8f b7       	in	r24, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	00 91 17 09 	lds	r16, 0x0917
    2bd4:	10 91 18 09 	lds	r17, 0x0918
    2bd8:	20 91 19 09 	lds	r18, 0x0919
    2bdc:	30 91 1a 09 	lds	r19, 0x091A
    2be0:	8f bf       	out	0x3f, r24	; 63
    2be2:	b8 01       	movw	r22, r16
    2be4:	c9 01       	movw	r24, r18
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	08 95       	ret

00002bec <micros>:
    2bec:	0f 93       	push	r16
    2bee:	1f 93       	push	r17
    2bf0:	9f b7       	in	r25, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	00 91 1b 09 	lds	r16, 0x091B
    2bf8:	10 91 1c 09 	lds	r17, 0x091C
    2bfc:	20 91 1d 09 	lds	r18, 0x091D
    2c00:	30 91 1e 09 	lds	r19, 0x091E
    2c04:	86 b5       	in	r24, 0x26	; 38
    2c06:	a8 9b       	sbis	0x15, 0	; 21
    2c08:	06 c0       	rjmp	.+12     	; 0x2c16 <micros+0x2a>
    2c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0c:	21 f0       	breq	.+8      	; 0x2c16 <micros+0x2a>
    2c0e:	0f 5f       	subi	r16, 0xFF	; 255
    2c10:	1f 4f       	sbci	r17, 0xFF	; 255
    2c12:	2f 4f       	sbci	r18, 0xFF	; 255
    2c14:	3f 4f       	sbci	r19, 0xFF	; 255
    2c16:	9f bf       	out	0x3f, r25	; 63
    2c18:	32 2f       	mov	r19, r18
    2c1a:	21 2f       	mov	r18, r17
    2c1c:	10 2f       	mov	r17, r16
    2c1e:	00 27       	eor	r16, r16
    2c20:	08 0f       	add	r16, r24
    2c22:	11 1d       	adc	r17, r1
    2c24:	21 1d       	adc	r18, r1
    2c26:	31 1d       	adc	r19, r1
    2c28:	42 e0       	ldi	r20, 0x02	; 2
    2c2a:	00 0f       	add	r16, r16
    2c2c:	11 1f       	adc	r17, r17
    2c2e:	22 1f       	adc	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	4a 95       	dec	r20
    2c34:	d1 f7       	brne	.-12     	; 0x2c2a <micros+0x3e>
    2c36:	b8 01       	movw	r22, r16
    2c38:	c9 01       	movw	r24, r18
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <delay>:
    2c40:	cf 92       	push	r12
    2c42:	df 92       	push	r13
    2c44:	ef 92       	push	r14
    2c46:	ff 92       	push	r15
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	6b 01       	movw	r12, r22
    2c4e:	7c 01       	movw	r14, r24
    2c50:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    2c54:	eb 01       	movw	r28, r22
    2c56:	10 c0       	rjmp	.+32     	; 0x2c78 <delay+0x38>
    2c58:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <yield>
    2c5c:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    2c60:	6c 1b       	sub	r22, r28
    2c62:	7d 0b       	sbc	r23, r29
    2c64:	68 3e       	cpi	r22, 0xE8	; 232
    2c66:	73 40       	sbci	r23, 0x03	; 3
    2c68:	38 f0       	brcs	.+14     	; 0x2c78 <delay+0x38>
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	c8 1a       	sub	r12, r24
    2c6e:	d1 08       	sbc	r13, r1
    2c70:	e1 08       	sbc	r14, r1
    2c72:	f1 08       	sbc	r15, r1
    2c74:	c8 51       	subi	r28, 0x18	; 24
    2c76:	dc 4f       	sbci	r29, 0xFC	; 252
    2c78:	c1 14       	cp	r12, r1
    2c7a:	d1 04       	cpc	r13, r1
    2c7c:	e1 04       	cpc	r14, r1
    2c7e:	f1 04       	cpc	r15, r1
    2c80:	59 f7       	brne	.-42     	; 0x2c58 <delay+0x18>
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
    2c8e:	08 95       	ret

00002c90 <delayMicroseconds>:
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	39 f0       	breq	.+14     	; 0x2ca2 <delayMicroseconds+0x12>
    2c94:	88 0f       	add	r24, r24
    2c96:	99 1f       	adc	r25, r25
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	02 97       	sbiw	r24, 0x02	; 2
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <delayMicroseconds+0xe>
    2ca2:	08 95       	ret

00002ca4 <init>:
    2ca4:	78 94       	sei
    2ca6:	84 b5       	in	r24, 0x24	; 36
    2ca8:	82 60       	ori	r24, 0x02	; 2
    2caa:	84 bd       	out	0x24, r24	; 36
    2cac:	84 b5       	in	r24, 0x24	; 36
    2cae:	81 60       	ori	r24, 0x01	; 1
    2cb0:	84 bd       	out	0x24, r24	; 36
    2cb2:	85 b5       	in	r24, 0x25	; 37
    2cb4:	82 60       	ori	r24, 0x02	; 2
    2cb6:	85 bd       	out	0x25, r24	; 37
    2cb8:	85 b5       	in	r24, 0x25	; 37
    2cba:	81 60       	ori	r24, 0x01	; 1
    2cbc:	85 bd       	out	0x25, r24	; 37
    2cbe:	ee e6       	ldi	r30, 0x6E	; 110
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	81 60       	ori	r24, 0x01	; 1
    2cc6:	80 83       	st	Z, r24
    2cc8:	e1 e8       	ldi	r30, 0x81	; 129
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	10 82       	st	Z, r1
    2cce:	80 81       	ld	r24, Z
    2cd0:	82 60       	ori	r24, 0x02	; 2
    2cd2:	80 83       	st	Z, r24
    2cd4:	80 81       	ld	r24, Z
    2cd6:	81 60       	ori	r24, 0x01	; 1
    2cd8:	80 83       	st	Z, r24
    2cda:	e0 e8       	ldi	r30, 0x80	; 128
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	81 60       	ori	r24, 0x01	; 1
    2ce2:	80 83       	st	Z, r24
    2ce4:	e1 eb       	ldi	r30, 0xB1	; 177
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	80 81       	ld	r24, Z
    2cea:	84 60       	ori	r24, 0x04	; 4
    2cec:	80 83       	st	Z, r24
    2cee:	e0 eb       	ldi	r30, 0xB0	; 176
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	81 60       	ori	r24, 0x01	; 1
    2cf6:	80 83       	st	Z, r24
    2cf8:	e1 e9       	ldi	r30, 0x91	; 145
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	82 60       	ori	r24, 0x02	; 2
    2d00:	80 83       	st	Z, r24
    2d02:	80 81       	ld	r24, Z
    2d04:	81 60       	ori	r24, 0x01	; 1
    2d06:	80 83       	st	Z, r24
    2d08:	e0 e9       	ldi	r30, 0x90	; 144
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	81 60       	ori	r24, 0x01	; 1
    2d10:	80 83       	st	Z, r24
    2d12:	e1 ea       	ldi	r30, 0xA1	; 161
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	82 60       	ori	r24, 0x02	; 2
    2d1a:	80 83       	st	Z, r24
    2d1c:	80 81       	ld	r24, Z
    2d1e:	81 60       	ori	r24, 0x01	; 1
    2d20:	80 83       	st	Z, r24
    2d22:	e0 ea       	ldi	r30, 0xA0	; 160
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	81 60       	ori	r24, 0x01	; 1
    2d2a:	80 83       	st	Z, r24
    2d2c:	e1 e2       	ldi	r30, 0x21	; 33
    2d2e:	f1 e0       	ldi	r31, 0x01	; 1
    2d30:	80 81       	ld	r24, Z
    2d32:	82 60       	ori	r24, 0x02	; 2
    2d34:	80 83       	st	Z, r24
    2d36:	80 81       	ld	r24, Z
    2d38:	81 60       	ori	r24, 0x01	; 1
    2d3a:	80 83       	st	Z, r24
    2d3c:	e0 e2       	ldi	r30, 0x20	; 32
    2d3e:	f1 e0       	ldi	r31, 0x01	; 1
    2d40:	80 81       	ld	r24, Z
    2d42:	81 60       	ori	r24, 0x01	; 1
    2d44:	80 83       	st	Z, r24
    2d46:	ea e7       	ldi	r30, 0x7A	; 122
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	84 60       	ori	r24, 0x04	; 4
    2d4e:	80 83       	st	Z, r24
    2d50:	80 81       	ld	r24, Z
    2d52:	82 60       	ori	r24, 0x02	; 2
    2d54:	80 83       	st	Z, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	81 60       	ori	r24, 0x01	; 1
    2d5a:	80 83       	st	Z, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	80 68       	ori	r24, 0x80	; 128
    2d60:	80 83       	st	Z, r24
    2d62:	10 92 c1 00 	sts	0x00C1, r1
    2d66:	08 95       	ret

00002d68 <turnOffPWM>:
    2d68:	89 30       	cpi	r24, 0x09	; 9
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <turnOffPWM+0x6>
    2d6c:	43 c0       	rjmp	.+134    	; 0x2df4 <turnOffPWM+0x8c>
    2d6e:	88 f4       	brcc	.+34     	; 0x2d92 <turnOffPWM+0x2a>
    2d70:	84 30       	cpi	r24, 0x04	; 4
    2d72:	29 f1       	breq	.+74     	; 0x2dbe <turnOffPWM+0x56>
    2d74:	38 f4       	brcc	.+14     	; 0x2d84 <turnOffPWM+0x1c>
    2d76:	82 30       	cpi	r24, 0x02	; 2
    2d78:	59 f1       	breq	.+86     	; 0x2dd0 <turnOffPWM+0x68>
    2d7a:	e8 f4       	brcc	.+58     	; 0x2db6 <turnOffPWM+0x4e>
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <turnOffPWM+0x1a>
    2d80:	5e c0       	rjmp	.+188    	; 0x2e3e <turnOffPWM+0xd6>
    2d82:	23 c0       	rjmp	.+70     	; 0x2dca <turnOffPWM+0x62>
    2d84:	87 30       	cpi	r24, 0x07	; 7
    2d86:	61 f1       	breq	.+88     	; 0x2de0 <turnOffPWM+0x78>
    2d88:	88 f5       	brcc	.+98     	; 0x2dec <turnOffPWM+0x84>
    2d8a:	86 30       	cpi	r24, 0x06	; 6
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <turnOffPWM+0x28>
    2d8e:	57 c0       	rjmp	.+174    	; 0x2e3e <turnOffPWM+0xd6>
    2d90:	23 c0       	rjmp	.+70     	; 0x2dd8 <turnOffPWM+0x70>
    2d92:	8d 30       	cpi	r24, 0x0D	; 13
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <turnOffPWM+0x30>
    2d96:	40 c0       	rjmp	.+128    	; 0x2e18 <turnOffPWM+0xb0>
    2d98:	20 f4       	brcc	.+8      	; 0x2da2 <turnOffPWM+0x3a>
    2d9a:	8b 30       	cpi	r24, 0x0B	; 11
    2d9c:	a9 f1       	breq	.+106    	; 0x2e08 <turnOffPWM+0xa0>
    2d9e:	c0 f5       	brcc	.+112    	; 0x2e10 <turnOffPWM+0xa8>
    2da0:	2d c0       	rjmp	.+90     	; 0x2dfc <turnOffPWM+0x94>
    2da2:	80 31       	cpi	r24, 0x10	; 16
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <turnOffPWM+0x40>
    2da6:	42 c0       	rjmp	.+132    	; 0x2e2c <turnOffPWM+0xc4>
    2da8:	81 31       	cpi	r24, 0x11	; 17
    2daa:	09 f4       	brne	.+2      	; 0x2dae <turnOffPWM+0x46>
    2dac:	43 c0       	rjmp	.+134    	; 0x2e34 <turnOffPWM+0xcc>
    2dae:	8f 30       	cpi	r24, 0x0F	; 15
    2db0:	09 f0       	breq	.+2      	; 0x2db4 <turnOffPWM+0x4c>
    2db2:	45 c0       	rjmp	.+138    	; 0x2e3e <turnOffPWM+0xd6>
    2db4:	37 c0       	rjmp	.+110    	; 0x2e24 <turnOffPWM+0xbc>
    2db6:	80 91 80 00 	lds	r24, 0x0080
    2dba:	8f 77       	andi	r24, 0x7F	; 127
    2dbc:	03 c0       	rjmp	.+6      	; 0x2dc4 <turnOffPWM+0x5c>
    2dbe:	80 91 80 00 	lds	r24, 0x0080
    2dc2:	8f 7d       	andi	r24, 0xDF	; 223
    2dc4:	80 93 80 00 	sts	0x0080, r24
    2dc8:	08 95       	ret
    2dca:	84 b5       	in	r24, 0x24	; 36
    2dcc:	8f 77       	andi	r24, 0x7F	; 127
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <turnOffPWM+0x6c>
    2dd0:	84 b5       	in	r24, 0x24	; 36
    2dd2:	8f 7d       	andi	r24, 0xDF	; 223
    2dd4:	84 bd       	out	0x24, r24	; 36
    2dd6:	08 95       	ret
    2dd8:	80 91 b0 00 	lds	r24, 0x00B0
    2ddc:	8f 77       	andi	r24, 0x7F	; 127
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <turnOffPWM+0x7e>
    2de0:	80 91 b0 00 	lds	r24, 0x00B0
    2de4:	8f 7d       	andi	r24, 0xDF	; 223
    2de6:	80 93 b0 00 	sts	0x00B0, r24
    2dea:	08 95       	ret
    2dec:	80 91 90 00 	lds	r24, 0x0090
    2df0:	8f 77       	andi	r24, 0x7F	; 127
    2df2:	07 c0       	rjmp	.+14     	; 0x2e02 <turnOffPWM+0x9a>
    2df4:	80 91 90 00 	lds	r24, 0x0090
    2df8:	8f 7d       	andi	r24, 0xDF	; 223
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <turnOffPWM+0x9a>
    2dfc:	80 91 90 00 	lds	r24, 0x0090
    2e00:	87 7f       	andi	r24, 0xF7	; 247
    2e02:	80 93 90 00 	sts	0x0090, r24
    2e06:	08 95       	ret
    2e08:	80 91 a0 00 	lds	r24, 0x00A0
    2e0c:	8f 77       	andi	r24, 0x7F	; 127
    2e0e:	07 c0       	rjmp	.+14     	; 0x2e1e <turnOffPWM+0xb6>
    2e10:	80 91 a0 00 	lds	r24, 0x00A0
    2e14:	8f 7d       	andi	r24, 0xDF	; 223
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <turnOffPWM+0xb6>
    2e18:	80 91 a0 00 	lds	r24, 0x00A0
    2e1c:	87 7f       	andi	r24, 0xF7	; 247
    2e1e:	80 93 a0 00 	sts	0x00A0, r24
    2e22:	08 95       	ret
    2e24:	80 91 20 01 	lds	r24, 0x0120
    2e28:	8f 77       	andi	r24, 0x7F	; 127
    2e2a:	07 c0       	rjmp	.+14     	; 0x2e3a <turnOffPWM+0xd2>
    2e2c:	80 91 20 01 	lds	r24, 0x0120
    2e30:	8f 7d       	andi	r24, 0xDF	; 223
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <turnOffPWM+0xd2>
    2e34:	80 91 20 01 	lds	r24, 0x0120
    2e38:	87 7f       	andi	r24, 0xF7	; 247
    2e3a:	80 93 20 01 	sts	0x0120, r24
    2e3e:	08 95       	ret

00002e40 <pinMode>:
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	fc 01       	movw	r30, r24
    2e48:	eb 58       	subi	r30, 0x8B	; 139
    2e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e4c:	44 91       	lpm	r20, Z+
    2e4e:	fc 01       	movw	r30, r24
    2e50:	e5 54       	subi	r30, 0x45	; 69
    2e52:	fe 4f       	sbci	r31, 0xFE	; 254
    2e54:	84 91       	lpm	r24, Z+
    2e56:	88 23       	and	r24, r24
    2e58:	41 f1       	breq	.+80     	; 0x2eaa <pinMode+0x6a>
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	fc 01       	movw	r30, r24
    2e62:	eb 5c       	subi	r30, 0xCB	; 203
    2e64:	fd 4f       	sbci	r31, 0xFD	; 253
    2e66:	25 91       	lpm	r18, Z+
    2e68:	34 91       	lpm	r19, Z+
    2e6a:	d9 01       	movw	r26, r18
    2e6c:	85 5e       	subi	r24, 0xE5	; 229
    2e6e:	9d 4f       	sbci	r25, 0xFD	; 253
    2e70:	fc 01       	movw	r30, r24
    2e72:	85 91       	lpm	r24, Z+
    2e74:	94 91       	lpm	r25, Z+
    2e76:	c8 2f       	mov	r28, r24
    2e78:	d9 2f       	mov	r29, r25
    2e7a:	9f b7       	in	r25, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	8c 91       	ld	r24, X
    2e80:	61 11       	cpse	r22, r1
    2e82:	06 c0       	rjmp	.+12     	; 0x2e90 <pinMode+0x50>
    2e84:	40 95       	com	r20
    2e86:	84 23       	and	r24, r20
    2e88:	8c 93       	st	X, r24
    2e8a:	88 81       	ld	r24, Y
    2e8c:	84 23       	and	r24, r20
    2e8e:	08 c0       	rjmp	.+16     	; 0x2ea0 <pinMode+0x60>
    2e90:	62 30       	cpi	r22, 0x02	; 2
    2e92:	41 f4       	brne	.+16     	; 0x2ea4 <pinMode+0x64>
    2e94:	24 2f       	mov	r18, r20
    2e96:	20 95       	com	r18
    2e98:	82 23       	and	r24, r18
    2e9a:	8c 93       	st	X, r24
    2e9c:	88 81       	ld	r24, Y
    2e9e:	84 2b       	or	r24, r20
    2ea0:	88 83       	st	Y, r24
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <pinMode+0x68>
    2ea4:	84 2b       	or	r24, r20
    2ea6:	8c 93       	st	X, r24
    2ea8:	9f bf       	out	0x3f, r25	; 63
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <digitalWrite>:
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	1f 92       	push	r1
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	f9 01       	movw	r30, r18
    2ec4:	e1 5d       	subi	r30, 0xD1	; 209
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	84 91       	lpm	r24, Z+
    2eca:	f9 01       	movw	r30, r18
    2ecc:	eb 58       	subi	r30, 0x8B	; 139
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	14 91       	lpm	r17, Z+
    2ed2:	f9 01       	movw	r30, r18
    2ed4:	e5 54       	subi	r30, 0x45	; 69
    2ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed8:	04 91       	lpm	r16, Z+
    2eda:	00 23       	and	r16, r16
    2edc:	d1 f0       	breq	.+52     	; 0x2f12 <digitalWrite+0x62>
    2ede:	88 23       	and	r24, r24
    2ee0:	21 f0       	breq	.+8      	; 0x2eea <digitalWrite+0x3a>
    2ee2:	69 83       	std	Y+1, r22	; 0x01
    2ee4:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <turnOffPWM>
    2ee8:	69 81       	ldd	r22, Y+1	; 0x01
    2eea:	e0 2f       	mov	r30, r16
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	ee 0f       	add	r30, r30
    2ef0:	ff 1f       	adc	r31, r31
    2ef2:	e5 5e       	subi	r30, 0xE5	; 229
    2ef4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ef6:	85 91       	lpm	r24, Z+
    2ef8:	94 91       	lpm	r25, Z+
    2efa:	dc 01       	movw	r26, r24
    2efc:	9f b7       	in	r25, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	8c 91       	ld	r24, X
    2f02:	61 11       	cpse	r22, r1
    2f04:	03 c0       	rjmp	.+6      	; 0x2f0c <digitalWrite+0x5c>
    2f06:	10 95       	com	r17
    2f08:	81 23       	and	r24, r17
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <digitalWrite+0x5e>
    2f0c:	81 2b       	or	r24, r17
    2f0e:	8c 93       	st	X, r24
    2f10:	9f bf       	out	0x3f, r25	; 63
    2f12:	0f 90       	pop	r0
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	08 95       	ret

00002f1e <digitalRead>:
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	f9 01       	movw	r30, r18
    2f28:	e1 5d       	subi	r30, 0xD1	; 209
    2f2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2c:	84 91       	lpm	r24, Z+
    2f2e:	f9 01       	movw	r30, r18
    2f30:	eb 58       	subi	r30, 0x8B	; 139
    2f32:	fe 4f       	sbci	r31, 0xFE	; 254
    2f34:	d4 91       	lpm	r29, Z+
    2f36:	f9 01       	movw	r30, r18
    2f38:	e5 54       	subi	r30, 0x45	; 69
    2f3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3c:	c4 91       	lpm	r28, Z+
    2f3e:	cc 23       	and	r28, r28
    2f40:	89 f0       	breq	.+34     	; 0x2f64 <digitalRead+0x46>
    2f42:	81 11       	cpse	r24, r1
    2f44:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <turnOffPWM>
    2f48:	ec 2f       	mov	r30, r28
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	ee 0f       	add	r30, r30
    2f4e:	ff 1f       	adc	r31, r31
    2f50:	ef 5f       	subi	r30, 0xFF	; 255
    2f52:	fd 4f       	sbci	r31, 0xFD	; 253
    2f54:	85 91       	lpm	r24, Z+
    2f56:	94 91       	lpm	r25, Z+
    2f58:	dc 01       	movw	r26, r24
    2f5a:	8c 91       	ld	r24, X
    2f5c:	8d 23       	and	r24, r29
    2f5e:	21 e0       	ldi	r18, 0x01	; 1
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	11 f4       	brne	.+4      	; 0x2f68 <digitalRead+0x4a>
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	c9 01       	movw	r24, r18
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <yield>:
    2f70:	08 95       	ret

00002f72 <_ZN7PString5writeEh>:
#if defined(ARDUINO) && ARDUINO >= 100
size_t PString::write(uint8_t b)
#else
void PString::write(uint8_t b)
#endif
{
    2f72:	fc 01       	movw	r30, r24
  if (_cur + 1 < _buf + _size)
    2f74:	a6 81       	ldd	r26, Z+6	; 0x06
    2f76:	b7 81       	ldd	r27, Z+7	; 0x07
    2f78:	9d 01       	movw	r18, r26
    2f7a:	2f 5f       	subi	r18, 0xFF	; 255
    2f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7e:	84 81       	ldd	r24, Z+4	; 0x04
    2f80:	95 81       	ldd	r25, Z+5	; 0x05
    2f82:	40 85       	ldd	r20, Z+8	; 0x08
    2f84:	51 85       	ldd	r21, Z+9	; 0x09
    2f86:	84 0f       	add	r24, r20
    2f88:	95 1f       	adc	r25, r21
    2f8a:	28 17       	cp	r18, r24
    2f8c:	39 07       	cpc	r19, r25
    2f8e:	40 f4       	brcc	.+16     	; 0x2fa0 <_ZN7PString5writeEh+0x2e>
  {
    *_cur++ = (char)b;
    2f90:	6c 93       	st	X, r22
    2f92:	37 83       	std	Z+7, r19	; 0x07
    2f94:	26 83       	std	Z+6, r18	; 0x06
    *_cur = '\0';
    2f96:	11 96       	adiw	r26, 0x01	; 1
    2f98:	1c 92       	st	X, r1
#if defined(ARDUINO) && ARDUINO >= 100
		return 1;
    2f9a:	21 e0       	ldi	r18, 0x01	; 1
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <_ZN7PString5writeEh+0x32>
#endif
	}

#if defined(ARDUINO) && ARDUINO >= 100
	return 0;
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
#endif
}
    2fa4:	c9 01       	movw	r24, r18
    2fa6:	08 95       	ret

00002fa8 <_ZN7PString5beginEv>:
*/

#include "PString.h"

void PString::begin()
{
    2fa8:	fc 01       	movw	r30, r24
  _cur = _buf;
    2faa:	a4 81       	ldd	r26, Z+4	; 0x04
    2fac:	b5 81       	ldd	r27, Z+5	; 0x05
    2fae:	b7 83       	std	Z+7, r27	; 0x07
    2fb0:	a6 83       	std	Z+6, r26	; 0x06
  if (_size > 0)
    2fb2:	80 85       	ldd	r24, Z+8	; 0x08
    2fb4:	91 85       	ldd	r25, Z+9	; 0x09
    2fb6:	89 2b       	or	r24, r25
    2fb8:	09 f0       	breq	.+2      	; 0x2fbc <_ZN7PString5beginEv+0x14>
    _buf[0] = '\0';
    2fba:	1c 92       	st	X, r1
    2fbc:	08 95       	ret

00002fbe <_ZN3PIDC1Ev>:
  #include "WProgram.h"
#endif

#include <PID_v1/PID_v1.h>

PID::PID(){};
    2fbe:	08 95       	ret

00002fc0 <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    2fc0:	2f 92       	push	r2
    2fc2:	3f 92       	push	r3
    2fc4:	4f 92       	push	r4
    2fc6:	5f 92       	push	r5
    2fc8:	6f 92       	push	r6
    2fca:	7f 92       	push	r7
    2fcc:	8f 92       	push	r8
    2fce:	9f 92       	push	r9
    2fd0:	af 92       	push	r10
    2fd2:	bf 92       	push	r11
    2fd4:	cf 92       	push	r12
    2fd6:	df 92       	push	r13
    2fd8:	ef 92       	push	r14
    2fda:	ff 92       	push	r15
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	2a 97       	sbiw	r28, 0x0a	; 10
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	9a 87       	std	Y+10, r25	; 0x0a
    2ff6:	89 87       	std	Y+9, r24	; 0x09
   if(!inAuto) return;
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	d6 96       	adiw	r26, 0x36	; 54
    2ffc:	8c 91       	ld	r24, X
    2ffe:	88 23       	and	r24, r24
    3000:	09 f4       	brne	.+2      	; 0x3004 <_ZN3PID7ComputeEv+0x44>
    3002:	fa c0       	rjmp	.+500    	; 0x31f8 <_ZN3PID7ComputeEv+0x238>
   unsigned long now = millis();
    3004:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    3008:	69 83       	std	Y+1, r22	; 0x01
    300a:	7a 83       	std	Y+2, r23	; 0x02
    300c:	8b 83       	std	Y+3, r24	; 0x03
    300e:	9c 83       	std	Y+4, r25	; 0x04
   int timeChange = (now - lastTime);
    3010:	e9 85       	ldd	r30, Y+9	; 0x09
    3012:	fa 85       	ldd	r31, Y+10	; 0x0a
    3014:	80 a1       	ldd	r24, Z+32	; 0x20
    3016:	91 a1       	ldd	r25, Z+33	; 0x21
    3018:	29 81       	ldd	r18, Y+1	; 0x01
    301a:	3a 81       	ldd	r19, Y+2	; 0x02
    301c:	28 1b       	sub	r18, r24
    301e:	39 0b       	sbc	r19, r25
   if(timeChange>=SampleTime)
    3020:	84 a5       	ldd	r24, Z+44	; 0x2c
    3022:	95 a5       	ldd	r25, Z+45	; 0x2d
    3024:	28 17       	cp	r18, r24
    3026:	39 07       	cpc	r19, r25
    3028:	0c f4       	brge	.+2      	; 0x302c <_ZN3PID7ComputeEv+0x6c>
    302a:	e6 c0       	rjmp	.+460    	; 0x31f8 <_ZN3PID7ComputeEv+0x238>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    302c:	02 8c       	ldd	r0, Z+26	; 0x1a
    302e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3030:	e0 2d       	mov	r30, r0
    3032:	c0 80       	ld	r12, Z
    3034:	d1 80       	ldd	r13, Z+1	; 0x01
    3036:	e2 80       	ldd	r14, Z+2	; 0x02
    3038:	f3 80       	ldd	r15, Z+3	; 0x03
      double error = *mySetpoint - input;
    303a:	a9 85       	ldd	r26, Y+9	; 0x09
    303c:	ba 85       	ldd	r27, Y+10	; 0x0a
    303e:	5e 96       	adiw	r26, 0x1e	; 30
    3040:	ed 91       	ld	r30, X+
    3042:	fc 91       	ld	r31, X
    3044:	5f 97       	sbiw	r26, 0x1f	; 31
    3046:	a7 01       	movw	r20, r14
    3048:	96 01       	movw	r18, r12
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3056:	6d 83       	std	Y+5, r22	; 0x05
    3058:	7e 83       	std	Y+6, r23	; 0x06
    305a:	8f 83       	std	Y+7, r24	; 0x07
    305c:	98 87       	std	Y+8, r25	; 0x08
      ITerm+= (ki * error);
    305e:	e9 85       	ldd	r30, Y+9	; 0x09
    3060:	fa 85       	ldd	r31, Y+10	; 0x0a
    3062:	20 89       	ldd	r18, Z+16	; 0x10
    3064:	31 89       	ldd	r19, Z+17	; 0x11
    3066:	42 89       	ldd	r20, Z+18	; 0x12
    3068:	53 89       	ldd	r21, Z+19	; 0x13
    306a:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    306e:	a9 85       	ldd	r26, Y+9	; 0x09
    3070:	ba 85       	ldd	r27, Y+10	; 0x0a
    3072:	94 96       	adiw	r26, 0x24	; 36
    3074:	2d 91       	ld	r18, X+
    3076:	3d 91       	ld	r19, X+
    3078:	4d 91       	ld	r20, X+
    307a:	5c 91       	ld	r21, X
    307c:	97 97       	sbiw	r26, 0x27	; 39
    307e:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    3082:	56 2e       	mov	r5, r22
    3084:	67 2e       	mov	r6, r23
    3086:	78 2e       	mov	r7, r24
    3088:	09 2f       	mov	r16, r25
    308a:	98 2f       	mov	r25, r24
    308c:	45 2d       	mov	r20, r5
    308e:	56 2d       	mov	r21, r6
    3090:	69 2f       	mov	r22, r25
    3092:	70 2f       	mov	r23, r16
    3094:	e9 85       	ldd	r30, Y+9	; 0x09
    3096:	fa 85       	ldd	r31, Y+10	; 0x0a
    3098:	44 a3       	std	Z+36, r20	; 0x24
    309a:	55 a3       	std	Z+37, r21	; 0x25
    309c:	66 a3       	std	Z+38, r22	; 0x26
    309e:	77 a3       	std	Z+39, r23	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    30a0:	22 a8       	ldd	r2, Z+50	; 0x32
    30a2:	13 a9       	ldd	r17, Z+51	; 0x33
    30a4:	34 a8       	ldd	r3, Z+52	; 0x34
    30a6:	45 a8       	ldd	r4, Z+53	; 0x35
    30a8:	22 2d       	mov	r18, r2
    30aa:	31 2f       	mov	r19, r17
    30ac:	43 2d       	mov	r20, r3
    30ae:	54 2d       	mov	r21, r4
    30b0:	65 2d       	mov	r22, r5
    30b2:	76 2d       	mov	r23, r6
    30b4:	87 2d       	mov	r24, r7
    30b6:	90 2f       	mov	r25, r16
    30b8:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    30bc:	18 16       	cp	r1, r24
    30be:	6c f4       	brge	.+26     	; 0x30da <_ZN3PID7ComputeEv+0x11a>
    30c0:	42 2d       	mov	r20, r2
    30c2:	51 2f       	mov	r21, r17
    30c4:	63 2d       	mov	r22, r3
    30c6:	74 2d       	mov	r23, r4
    30c8:	a9 85       	ldd	r26, Y+9	; 0x09
    30ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    30cc:	94 96       	adiw	r26, 0x24	; 36
    30ce:	4d 93       	st	X+, r20
    30d0:	5d 93       	st	X+, r21
    30d2:	6d 93       	st	X+, r22
    30d4:	7c 93       	st	X, r23
    30d6:	97 97       	sbiw	r26, 0x27	; 39
    30d8:	18 c0       	rjmp	.+48     	; 0x310a <_ZN3PID7ComputeEv+0x14a>
      else if(ITerm < outMin) ITerm= outMin;
    30da:	e9 85       	ldd	r30, Y+9	; 0x09
    30dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    30de:	86 a4       	ldd	r8, Z+46	; 0x2e
    30e0:	97 a4       	ldd	r9, Z+47	; 0x2f
    30e2:	a0 a8       	ldd	r10, Z+48	; 0x30
    30e4:	b1 a8       	ldd	r11, Z+49	; 0x31
    30e6:	a5 01       	movw	r20, r10
    30e8:	94 01       	movw	r18, r8
    30ea:	65 2d       	mov	r22, r5
    30ec:	76 2d       	mov	r23, r6
    30ee:	87 2d       	mov	r24, r7
    30f0:	90 2f       	mov	r25, r16
    30f2:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    30f6:	87 ff       	sbrs	r24, 7
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <_ZN3PID7ComputeEv+0x14a>
    30fa:	a9 85       	ldd	r26, Y+9	; 0x09
    30fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    30fe:	94 96       	adiw	r26, 0x24	; 36
    3100:	8d 92       	st	X+, r8
    3102:	9d 92       	st	X+, r9
    3104:	ad 92       	st	X+, r10
    3106:	bc 92       	st	X, r11
    3108:	97 97       	sbiw	r26, 0x27	; 39
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    310a:	e9 85       	ldd	r30, Y+9	; 0x09
    310c:	fa 85       	ldd	r31, Y+10	; 0x0a
    310e:	24 85       	ldd	r18, Z+12	; 0x0c
    3110:	35 85       	ldd	r19, Z+13	; 0x0d
    3112:	46 85       	ldd	r20, Z+14	; 0x0e
    3114:	57 85       	ldd	r21, Z+15	; 0x0f
    3116:	bd 81       	ldd	r27, Y+5	; 0x05
    3118:	ae 81       	ldd	r26, Y+6	; 0x06
    311a:	0f 81       	ldd	r16, Y+7	; 0x07
    311c:	b8 84       	ldd	r11, Y+8	; 0x08
    311e:	6b 2f       	mov	r22, r27
    3120:	7a 2f       	mov	r23, r26
    3122:	80 2f       	mov	r24, r16
    3124:	9b 2d       	mov	r25, r11
    3126:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    312a:	a9 85       	ldd	r26, Y+9	; 0x09
    312c:	ba 85       	ldd	r27, Y+10	; 0x0a
    312e:	94 96       	adiw	r26, 0x24	; 36
    3130:	2d 91       	ld	r18, X+
    3132:	3d 91       	ld	r19, X+
    3134:	4d 91       	ld	r20, X+
    3136:	5c 91       	ld	r21, X
    3138:	97 97       	sbiw	r26, 0x27	; 39
    313a:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    313e:	4b 01       	movw	r8, r22
    3140:	5c 01       	movw	r10, r24
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
    3142:	e9 85       	ldd	r30, Y+9	; 0x09
    3144:	fa 85       	ldd	r31, Y+10	; 0x0a
    3146:	20 a5       	ldd	r18, Z+40	; 0x28
    3148:	31 a5       	ldd	r19, Z+41	; 0x29
    314a:	42 a5       	ldd	r20, Z+42	; 0x2a
    314c:	53 a5       	ldd	r21, Z+43	; 0x2b
    314e:	c7 01       	movw	r24, r14
    3150:	b6 01       	movw	r22, r12
    3152:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    3156:	a9 85       	ldd	r26, Y+9	; 0x09
    3158:	ba 85       	ldd	r27, Y+10	; 0x0a
    315a:	54 96       	adiw	r26, 0x14	; 20
    315c:	2d 91       	ld	r18, X+
    315e:	3d 91       	ld	r19, X+
    3160:	4d 91       	ld	r20, X+
    3162:	5c 91       	ld	r21, X
    3164:	57 97       	sbiw	r26, 0x17	; 23
    3166:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    316a:	9b 01       	movw	r18, r22
    316c:	ac 01       	movw	r20, r24
    316e:	c5 01       	movw	r24, r10
    3170:	b4 01       	movw	r22, r8
    3172:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3176:	96 2e       	mov	r9, r22
    3178:	a7 2e       	mov	r10, r23
    317a:	b8 2e       	mov	r11, r24
    317c:	09 2f       	mov	r16, r25
      
	  if(output > outMax) output = outMax;
    317e:	22 2d       	mov	r18, r2
    3180:	31 2f       	mov	r19, r17
    3182:	43 2d       	mov	r20, r3
    3184:	54 2d       	mov	r21, r4
    3186:	69 2d       	mov	r22, r9
    3188:	7a 2d       	mov	r23, r10
    318a:	8b 2d       	mov	r24, r11
    318c:	90 2f       	mov	r25, r16
    318e:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    3192:	18 16       	cp	r1, r24
    3194:	b4 f0       	brlt	.+44     	; 0x31c2 <_ZN3PID7ComputeEv+0x202>
      else if(output < outMin) output = outMin;
    3196:	e9 85       	ldd	r30, Y+9	; 0x09
    3198:	fa 85       	ldd	r31, Y+10	; 0x0a
    319a:	26 a4       	ldd	r2, Z+46	; 0x2e
    319c:	17 a5       	ldd	r17, Z+47	; 0x2f
    319e:	30 a8       	ldd	r3, Z+48	; 0x30
    31a0:	41 a8       	ldd	r4, Z+49	; 0x31
    31a2:	22 2d       	mov	r18, r2
    31a4:	31 2f       	mov	r19, r17
    31a6:	43 2d       	mov	r20, r3
    31a8:	54 2d       	mov	r21, r4
    31aa:	69 2d       	mov	r22, r9
    31ac:	7a 2d       	mov	r23, r10
    31ae:	8b 2d       	mov	r24, r11
    31b0:	90 2f       	mov	r25, r16
    31b2:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    31b6:	87 fd       	sbrc	r24, 7
    31b8:	04 c0       	rjmp	.+8      	; 0x31c2 <_ZN3PID7ComputeEv+0x202>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    31ba:	29 2c       	mov	r2, r9
    31bc:	1a 2d       	mov	r17, r10
    31be:	3b 2c       	mov	r3, r11
    31c0:	40 2e       	mov	r4, r16
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    31c2:	a9 85       	ldd	r26, Y+9	; 0x09
    31c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    31c6:	5c 96       	adiw	r26, 0x1c	; 28
    31c8:	ed 91       	ld	r30, X+
    31ca:	fc 91       	ld	r31, X
    31cc:	5d 97       	sbiw	r26, 0x1d	; 29
    31ce:	42 2d       	mov	r20, r2
    31d0:	51 2f       	mov	r21, r17
    31d2:	63 2d       	mov	r22, r3
    31d4:	74 2d       	mov	r23, r4
    31d6:	40 83       	st	Z, r20
    31d8:	51 83       	std	Z+1, r21	; 0x01
    31da:	62 83       	std	Z+2, r22	; 0x02
    31dc:	73 83       	std	Z+3, r23	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    31de:	fd 01       	movw	r30, r26
    31e0:	c0 a6       	std	Z+40, r12	; 0x28
    31e2:	d1 a6       	std	Z+41, r13	; 0x29
    31e4:	e2 a6       	std	Z+42, r14	; 0x2a
    31e6:	f3 a6       	std	Z+43, r15	; 0x2b
      lastTime = now;
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	ab 81       	ldd	r26, Y+3	; 0x03
    31ee:	bc 81       	ldd	r27, Y+4	; 0x04
    31f0:	80 a3       	std	Z+32, r24	; 0x20
    31f2:	91 a3       	std	Z+33, r25	; 0x21
    31f4:	a2 a3       	std	Z+34, r26	; 0x22
    31f6:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    31f8:	2a 96       	adiw	r28, 0x0a	; 10
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	ff 90       	pop	r15
    320e:	ef 90       	pop	r14
    3210:	df 90       	pop	r13
    3212:	cf 90       	pop	r12
    3214:	bf 90       	pop	r11
    3216:	af 90       	pop	r10
    3218:	9f 90       	pop	r9
    321a:	8f 90       	pop	r8
    321c:	7f 90       	pop	r7
    321e:	6f 90       	pop	r6
    3220:	5f 90       	pop	r5
    3222:	4f 90       	pop	r4
    3224:	3f 90       	pop	r3
    3226:	2f 90       	pop	r2
    3228:	08 95       	ret

0000322a <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    322a:	2f 92       	push	r2
    322c:	3f 92       	push	r3
    322e:	4f 92       	push	r4
    3230:	5f 92       	push	r5
    3232:	6f 92       	push	r6
    3234:	7f 92       	push	r7
    3236:	8f 92       	push	r8
    3238:	9f 92       	push	r9
    323a:	af 92       	push	r10
    323c:	bf 92       	push	r11
    323e:	cf 92       	push	r12
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	1c 01       	movw	r2, r24
    3250:	4a 01       	movw	r8, r20
    3252:	5b 01       	movw	r10, r22
    3254:	28 01       	movw	r4, r16
    3256:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	a9 01       	movw	r20, r18
    325e:	c5 01       	movw	r24, r10
    3260:	b4 01       	movw	r22, r8
    3262:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    3266:	87 fd       	sbrc	r24, 7
    3268:	8e c0       	rjmp	.+284    	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	a9 01       	movw	r20, r18
    3270:	c3 01       	movw	r24, r6
    3272:	b2 01       	movw	r22, r4
    3274:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    3278:	87 fd       	sbrc	r24, 7
    327a:	85 c0       	rjmp	.+266    	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	a9 01       	movw	r20, r18
    3282:	c7 01       	movw	r24, r14
    3284:	b6 01       	movw	r22, r12
    3286:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    328a:	87 fd       	sbrc	r24, 7
    328c:	7c c0       	rjmp	.+248    	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    328e:	f1 01       	movw	r30, r2
    3290:	80 82       	st	Z, r8
    3292:	91 82       	std	Z+1, r9	; 0x01
    3294:	a2 82       	std	Z+2, r10	; 0x02
    3296:	b3 82       	std	Z+3, r11	; 0x03
    3298:	44 82       	std	Z+4, r4	; 0x04
    329a:	55 82       	std	Z+5, r5	; 0x05
    329c:	66 82       	std	Z+6, r6	; 0x06
    329e:	77 82       	std	Z+7, r7	; 0x07
    32a0:	c0 86       	std	Z+8, r12	; 0x08
    32a2:	d1 86       	std	Z+9, r13	; 0x09
    32a4:	e2 86       	std	Z+10, r14	; 0x0a
    32a6:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    32a8:	64 a5       	ldd	r22, Z+44	; 0x2c
    32aa:	75 a5       	ldd	r23, Z+45	; 0x2d
    32ac:	88 27       	eor	r24, r24
    32ae:	77 fd       	sbrc	r23, 7
    32b0:	80 95       	com	r24
    32b2:	98 2f       	mov	r25, r24
    32b4:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	4a e7       	ldi	r20, 0x7A	; 122
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    32c4:	d6 2f       	mov	r29, r22
    32c6:	c7 2f       	mov	r28, r23
    32c8:	8c 01       	movw	r16, r24
   kp = Kp;
    32ca:	f1 01       	movw	r30, r2
    32cc:	84 86       	std	Z+12, r8	; 0x0c
    32ce:	95 86       	std	Z+13, r9	; 0x0d
    32d0:	a6 86       	std	Z+14, r10	; 0x0e
    32d2:	b7 86       	std	Z+15, r11	; 0x0f
   ki = Ki * SampleTimeInSec;
    32d4:	be 01       	movw	r22, r28
    32d6:	98 2f       	mov	r25, r24
    32d8:	27 2f       	mov	r18, r23
    32da:	36 2f       	mov	r19, r22
    32dc:	49 2f       	mov	r20, r25
    32de:	51 2f       	mov	r21, r17
    32e0:	c3 01       	movw	r24, r6
    32e2:	b2 01       	movw	r22, r4
    32e4:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    32e8:	2b 01       	movw	r4, r22
    32ea:	3c 01       	movw	r6, r24
    32ec:	98 2f       	mov	r25, r24
    32ee:	44 2d       	mov	r20, r4
    32f0:	55 2d       	mov	r21, r5
    32f2:	69 2f       	mov	r22, r25
    32f4:	77 2d       	mov	r23, r7
    32f6:	f1 01       	movw	r30, r2
    32f8:	40 8b       	std	Z+16, r20	; 0x10
    32fa:	51 8b       	std	Z+17, r21	; 0x11
    32fc:	62 8b       	std	Z+18, r22	; 0x12
    32fe:	73 8b       	std	Z+19, r23	; 0x13
   kd = Kd / SampleTimeInSec;
    3300:	be 01       	movw	r22, r28
    3302:	27 2f       	mov	r18, r23
    3304:	36 2f       	mov	r19, r22
    3306:	40 2f       	mov	r20, r16
    3308:	51 2f       	mov	r21, r17
    330a:	c7 01       	movw	r24, r14
    330c:	b6 01       	movw	r22, r12
    330e:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    3312:	7b 01       	movw	r14, r22
    3314:	d8 2f       	mov	r29, r24
    3316:	c9 2f       	mov	r28, r25
    3318:	ce 01       	movw	r24, r28
    331a:	0e 2d       	mov	r16, r14
    331c:	1f 2d       	mov	r17, r15
    331e:	29 2f       	mov	r18, r25
    3320:	38 2f       	mov	r19, r24
    3322:	f1 01       	movw	r30, r2
    3324:	04 8b       	std	Z+20, r16	; 0x14
    3326:	15 8b       	std	Z+21, r17	; 0x15
    3328:	26 8b       	std	Z+22, r18	; 0x16
    332a:	37 8b       	std	Z+23, r19	; 0x17
 
  if(controllerDirection ==REVERSE)
    332c:	80 8d       	ldd	r24, Z+24	; 0x18
    332e:	91 8d       	ldd	r25, Z+25	; 0x19
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	49 f5       	brne	.+82     	; 0x3386 <_ZN3PID10SetTuningsEddd+0x15c>
   {
      kp = (0 - kp);
    3334:	a5 01       	movw	r20, r10
    3336:	94 01       	movw	r18, r8
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	cb 01       	movw	r24, r22
    333e:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3342:	f1 01       	movw	r30, r2
    3344:	64 87       	std	Z+12, r22	; 0x0c
    3346:	75 87       	std	Z+13, r23	; 0x0d
    3348:	86 87       	std	Z+14, r24	; 0x0e
    334a:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    334c:	24 2d       	mov	r18, r4
    334e:	35 2d       	mov	r19, r5
    3350:	46 2d       	mov	r20, r6
    3352:	57 2d       	mov	r21, r7
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	cb 01       	movw	r24, r22
    335a:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    335e:	f1 01       	movw	r30, r2
    3360:	60 8b       	std	Z+16, r22	; 0x10
    3362:	71 8b       	std	Z+17, r23	; 0x11
    3364:	82 8b       	std	Z+18, r24	; 0x12
    3366:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    3368:	ce 01       	movw	r24, r28
    336a:	20 2f       	mov	r18, r16
    336c:	31 2f       	mov	r19, r17
    336e:	49 2f       	mov	r20, r25
    3370:	58 2f       	mov	r21, r24
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	cb 01       	movw	r24, r22
    3378:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    337c:	f1 01       	movw	r30, r2
    337e:	64 8b       	std	Z+20, r22	; 0x14
    3380:	75 8b       	std	Z+21, r23	; 0x15
    3382:	86 8b       	std	Z+22, r24	; 0x16
    3384:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	ff 90       	pop	r15
    3390:	ef 90       	pop	r14
    3392:	df 90       	pop	r13
    3394:	cf 90       	pop	r12
    3396:	bf 90       	pop	r11
    3398:	af 90       	pop	r10
    339a:	9f 90       	pop	r9
    339c:	8f 90       	pop	r8
    339e:	7f 90       	pop	r7
    33a0:	6f 90       	pop	r6
    33a2:	5f 90       	pop	r5
    33a4:	4f 90       	pop	r4
    33a6:	3f 90       	pop	r3
    33a8:	2f 90       	pop	r2
    33aa:	08 95       	ret

000033ac <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	ec 01       	movw	r28, r24
    33be:	8b 01       	movw	r16, r22
   if (NewSampleTime > 0)
    33c0:	16 16       	cp	r1, r22
    33c2:	17 06       	cpc	r1, r23
    33c4:	bc f5       	brge	.+110    	; 0x3434 <_ZN3PID13SetSampleTimeEi+0x88>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    33c6:	88 27       	eor	r24, r24
    33c8:	77 fd       	sbrc	r23, 7
    33ca:	80 95       	com	r24
    33cc:	98 2f       	mov	r25, r24
    33ce:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    33d2:	6b 01       	movw	r12, r22
    33d4:	7c 01       	movw	r14, r24
    33d6:	6c a5       	ldd	r22, Y+44	; 0x2c
    33d8:	7d a5       	ldd	r23, Y+45	; 0x2d
    33da:	88 27       	eor	r24, r24
    33dc:	77 fd       	sbrc	r23, 7
    33de:	80 95       	com	r24
    33e0:	98 2f       	mov	r25, r24
    33e2:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    33e6:	9b 01       	movw	r18, r22
    33e8:	ac 01       	movw	r20, r24
    33ea:	c7 01       	movw	r24, r14
    33ec:	b6 01       	movw	r22, r12
    33ee:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    33f2:	6b 01       	movw	r12, r22
    33f4:	7c 01       	movw	r14, r24
      ki *= ratio;
    33f6:	76 2f       	mov	r23, r22
    33f8:	27 2f       	mov	r18, r23
    33fa:	3d 2d       	mov	r19, r13
    33fc:	4e 2d       	mov	r20, r14
    33fe:	5f 2d       	mov	r21, r15
    3400:	68 89       	ldd	r22, Y+16	; 0x10
    3402:	79 89       	ldd	r23, Y+17	; 0x11
    3404:	8a 89       	ldd	r24, Y+18	; 0x12
    3406:	9b 89       	ldd	r25, Y+19	; 0x13
    3408:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    340c:	68 8b       	std	Y+16, r22	; 0x10
    340e:	79 8b       	std	Y+17, r23	; 0x11
    3410:	8a 8b       	std	Y+18, r24	; 0x12
    3412:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    3414:	2c 2d       	mov	r18, r12
    3416:	3d 2d       	mov	r19, r13
    3418:	4e 2d       	mov	r20, r14
    341a:	5f 2d       	mov	r21, r15
    341c:	6c 89       	ldd	r22, Y+20	; 0x14
    341e:	7d 89       	ldd	r23, Y+21	; 0x15
    3420:	8e 89       	ldd	r24, Y+22	; 0x16
    3422:	9f 89       	ldd	r25, Y+23	; 0x17
    3424:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    3428:	6c 8b       	std	Y+20, r22	; 0x14
    342a:	7d 8b       	std	Y+21, r23	; 0x15
    342c:	8e 8b       	std	Y+22, r24	; 0x16
    342e:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    3430:	1d a7       	std	Y+45, r17	; 0x2d
    3432:	0c a7       	std	Y+44, r16	; 0x2c
   }
}
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	df 90       	pop	r13
    3442:	cf 90       	pop	r12
    3444:	08 95       	ret

00003446 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    3446:	4f 92       	push	r4
    3448:	5f 92       	push	r5
    344a:	6f 92       	push	r6
    344c:	7f 92       	push	r7
    344e:	8f 92       	push	r8
    3450:	9f 92       	push	r9
    3452:	af 92       	push	r10
    3454:	bf 92       	push	r11
    3456:	cf 92       	push	r12
    3458:	df 92       	push	r13
    345a:	ef 92       	push	r14
    345c:	ff 92       	push	r15
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	ec 01       	movw	r28, r24
    3468:	6a 01       	movw	r12, r20
    346a:	7b 01       	movw	r14, r22
    346c:	48 01       	movw	r8, r16
    346e:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    3470:	a9 01       	movw	r20, r18
    3472:	98 01       	movw	r18, r16
    3474:	c7 01       	movw	r24, r14
    3476:	b6 01       	movw	r22, r12
    3478:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    347c:	87 ff       	sbrs	r24, 7
    347e:	4f c0       	rjmp	.+158    	; 0x351e <_ZN3PID15SetOutputLimitsEdd+0xd8>
   outMin = Min;
    3480:	ce a6       	std	Y+46, r12	; 0x2e
    3482:	df a6       	std	Y+47, r13	; 0x2f
    3484:	e8 aa       	std	Y+48, r14	; 0x30
    3486:	f9 aa       	std	Y+49, r15	; 0x31
   outMax = Max;
    3488:	8a aa       	std	Y+50, r8	; 0x32
    348a:	9b aa       	std	Y+51, r9	; 0x33
    348c:	ac aa       	std	Y+52, r10	; 0x34
    348e:	bd aa       	std	Y+53, r11	; 0x35
 
   if(inAuto)
    3490:	8e a9       	ldd	r24, Y+54	; 0x36
    3492:	88 23       	and	r24, r24
    3494:	09 f4       	brne	.+2      	; 0x3498 <_ZN3PID15SetOutputLimitsEdd+0x52>
    3496:	43 c0       	rjmp	.+134    	; 0x351e <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    3498:	0c 8d       	ldd	r16, Y+28	; 0x1c
    349a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    349c:	f8 01       	movw	r30, r16
    349e:	40 80       	ld	r4, Z
    34a0:	51 80       	ldd	r5, Z+1	; 0x01
    34a2:	62 80       	ldd	r6, Z+2	; 0x02
    34a4:	73 80       	ldd	r7, Z+3	; 0x03
    34a6:	a5 01       	movw	r20, r10
    34a8:	94 01       	movw	r18, r8
    34aa:	c3 01       	movw	r24, r6
    34ac:	b2 01       	movw	r22, r4
    34ae:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    34b2:	18 16       	cp	r1, r24
    34b4:	34 f4       	brge	.+12     	; 0x34c2 <_ZN3PID15SetOutputLimitsEdd+0x7c>
    34b6:	f8 01       	movw	r30, r16
    34b8:	80 82       	st	Z, r8
    34ba:	91 82       	std	Z+1, r9	; 0x01
    34bc:	a2 82       	std	Z+2, r10	; 0x02
    34be:	b3 82       	std	Z+3, r11	; 0x03
    34c0:	0d c0       	rjmp	.+26     	; 0x34dc <_ZN3PID15SetOutputLimitsEdd+0x96>
	   else if(*myOutput < outMin) *myOutput = outMin;
    34c2:	a7 01       	movw	r20, r14
    34c4:	96 01       	movw	r18, r12
    34c6:	c3 01       	movw	r24, r6
    34c8:	b2 01       	movw	r22, r4
    34ca:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    34ce:	87 ff       	sbrs	r24, 7
    34d0:	05 c0       	rjmp	.+10     	; 0x34dc <_ZN3PID15SetOutputLimitsEdd+0x96>
    34d2:	f8 01       	movw	r30, r16
    34d4:	c0 82       	st	Z, r12
    34d6:	d1 82       	std	Z+1, r13	; 0x01
    34d8:	e2 82       	std	Z+2, r14	; 0x02
    34da:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    34dc:	8c a0       	ldd	r8, Y+36	; 0x24
    34de:	9d a0       	ldd	r9, Y+37	; 0x25
    34e0:	ae a0       	ldd	r10, Y+38	; 0x26
    34e2:	bf a0       	ldd	r11, Y+39	; 0x27
    34e4:	ca a8       	ldd	r12, Y+50	; 0x32
    34e6:	db a8       	ldd	r13, Y+51	; 0x33
    34e8:	ec a8       	ldd	r14, Y+52	; 0x34
    34ea:	fd a8       	ldd	r15, Y+53	; 0x35
    34ec:	a7 01       	movw	r20, r14
    34ee:	96 01       	movw	r18, r12
    34f0:	c5 01       	movw	r24, r10
    34f2:	b4 01       	movw	r22, r8
    34f4:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    34f8:	18 16       	cp	r1, r24
    34fa:	0c f4       	brge	.+2      	; 0x34fe <_ZN3PID15SetOutputLimitsEdd+0xb8>
    34fc:	0c c0       	rjmp	.+24     	; 0x3516 <_ZN3PID15SetOutputLimitsEdd+0xd0>
	   else if(ITerm < outMin) ITerm= outMin;
    34fe:	ce a4       	ldd	r12, Y+46	; 0x2e
    3500:	df a4       	ldd	r13, Y+47	; 0x2f
    3502:	e8 a8       	ldd	r14, Y+48	; 0x30
    3504:	f9 a8       	ldd	r15, Y+49	; 0x31
    3506:	a7 01       	movw	r20, r14
    3508:	96 01       	movw	r18, r12
    350a:	c5 01       	movw	r24, r10
    350c:	b4 01       	movw	r22, r8
    350e:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    3512:	87 ff       	sbrs	r24, 7
    3514:	04 c0       	rjmp	.+8      	; 0x351e <_ZN3PID15SetOutputLimitsEdd+0xd8>
    3516:	cc a2       	std	Y+36, r12	; 0x24
    3518:	dd a2       	std	Y+37, r13	; 0x25
    351a:	ee a2       	std	Y+38, r14	; 0x26
    351c:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    351e:	df 91       	pop	r29
    3520:	cf 91       	pop	r28
    3522:	1f 91       	pop	r17
    3524:	0f 91       	pop	r16
    3526:	ff 90       	pop	r15
    3528:	ef 90       	pop	r14
    352a:	df 90       	pop	r13
    352c:	cf 90       	pop	r12
    352e:	bf 90       	pop	r11
    3530:	af 90       	pop	r10
    3532:	9f 90       	pop	r9
    3534:	8f 90       	pop	r8
    3536:	7f 90       	pop	r7
    3538:	6f 90       	pop	r6
    353a:	5f 90       	pop	r5
    353c:	4f 90       	pop	r4
    353e:	08 95       	ret

00003540 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    3540:	8f 92       	push	r8
    3542:	9f 92       	push	r9
    3544:	af 92       	push	r10
    3546:	bf 92       	push	r11
    3548:	cf 92       	push	r12
    354a:	df 92       	push	r13
    354c:	ef 92       	push	r14
    354e:	ff 92       	push	r15
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    3556:	ec 8d       	ldd	r30, Y+28	; 0x1c
    3558:	fd 8d       	ldd	r31, Y+29	; 0x1d
    355a:	c0 80       	ld	r12, Z
    355c:	d1 80       	ldd	r13, Z+1	; 0x01
    355e:	e2 80       	ldd	r14, Z+2	; 0x02
    3560:	f3 80       	ldd	r15, Z+3	; 0x03
    3562:	cc a2       	std	Y+36, r12	; 0x24
    3564:	dd a2       	std	Y+37, r13	; 0x25
    3566:	ee a2       	std	Y+38, r14	; 0x26
    3568:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    356a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    356c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    356e:	40 81       	ld	r20, Z
    3570:	51 81       	ldd	r21, Z+1	; 0x01
    3572:	62 81       	ldd	r22, Z+2	; 0x02
    3574:	73 81       	ldd	r23, Z+3	; 0x03
    3576:	48 a7       	std	Y+40, r20	; 0x28
    3578:	59 a7       	std	Y+41, r21	; 0x29
    357a:	6a a7       	std	Y+42, r22	; 0x2a
    357c:	7b a7       	std	Y+43, r23	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    357e:	8a a8       	ldd	r8, Y+50	; 0x32
    3580:	9b a8       	ldd	r9, Y+51	; 0x33
    3582:	ac a8       	ldd	r10, Y+52	; 0x34
    3584:	bd a8       	ldd	r11, Y+53	; 0x35
    3586:	a5 01       	movw	r20, r10
    3588:	94 01       	movw	r18, r8
    358a:	c7 01       	movw	r24, r14
    358c:	b6 01       	movw	r22, r12
    358e:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    3592:	18 16       	cp	r1, r24
    3594:	0c f4       	brge	.+2      	; 0x3598 <_ZN3PID10InitializeEv+0x58>
    3596:	0c c0       	rjmp	.+24     	; 0x35b0 <_ZN3PID10InitializeEv+0x70>
   else if(ITerm < outMin) ITerm = outMin;
    3598:	8e a4       	ldd	r8, Y+46	; 0x2e
    359a:	9f a4       	ldd	r9, Y+47	; 0x2f
    359c:	a8 a8       	ldd	r10, Y+48	; 0x30
    359e:	b9 a8       	ldd	r11, Y+49	; 0x31
    35a0:	a5 01       	movw	r20, r10
    35a2:	94 01       	movw	r18, r8
    35a4:	c7 01       	movw	r24, r14
    35a6:	b6 01       	movw	r22, r12
    35a8:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    35ac:	87 ff       	sbrs	r24, 7
    35ae:	04 c0       	rjmp	.+8      	; 0x35b8 <_ZN3PID10InitializeEv+0x78>
    35b0:	8c a2       	std	Y+36, r8	; 0x24
    35b2:	9d a2       	std	Y+37, r9	; 0x25
    35b4:	ae a2       	std	Y+38, r10	; 0x26
    35b6:	bf a2       	std	Y+39, r11	; 0x27
}
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	df 90       	pop	r13
    35c2:	cf 90       	pop	r12
    35c4:	bf 90       	pop	r11
    35c6:	af 90       	pop	r10
    35c8:	9f 90       	pop	r9
    35ca:	8f 90       	pop	r8
    35cc:	08 95       	ret

000035ce <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    35ce:	1f 93       	push	r17
    35d0:	cf 93       	push	r28
    35d2:	df 93       	push	r29
    35d4:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    35d6:	11 e0       	ldi	r17, 0x01	; 1
    35d8:	61 30       	cpi	r22, 0x01	; 1
    35da:	71 05       	cpc	r23, r1
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <_ZN3PID7SetModeEi+0x12>
    35de:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    35e0:	8e a9       	ldd	r24, Y+54	; 0x36
    35e2:	91 e0       	ldi	r25, 0x01	; 1
    35e4:	89 27       	eor	r24, r25
    35e6:	18 13       	cpse	r17, r24
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    35ea:	ce 01       	movw	r24, r28
    35ec:	0e 94 a0 1a 	call	0x3540	; 0x3540 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    35f0:	1e ab       	std	Y+54, r17	; 0x36
}
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	1f 91       	pop	r17
    35f8:	08 95       	ret

000035fa <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
    3604:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    3606:	8e a9       	ldd	r24, Y+54	; 0x36
    3608:	88 23       	and	r24, r24
    360a:	61 f1       	breq	.+88     	; 0x3664 <_ZN3PID22SetControllerDirectionEi+0x6a>
    360c:	88 8d       	ldd	r24, Y+24	; 0x18
    360e:	99 8d       	ldd	r25, Y+25	; 0x19
    3610:	68 17       	cp	r22, r24
    3612:	79 07       	cpc	r23, r25
    3614:	39 f1       	breq	.+78     	; 0x3664 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    3616:	2c 85       	ldd	r18, Y+12	; 0x0c
    3618:	3d 85       	ldd	r19, Y+13	; 0x0d
    361a:	4e 85       	ldd	r20, Y+14	; 0x0e
    361c:	5f 85       	ldd	r21, Y+15	; 0x0f
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	70 e0       	ldi	r23, 0x00	; 0
    3622:	cb 01       	movw	r24, r22
    3624:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3628:	6c 87       	std	Y+12, r22	; 0x0c
    362a:	7d 87       	std	Y+13, r23	; 0x0d
    362c:	8e 87       	std	Y+14, r24	; 0x0e
    362e:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    3630:	28 89       	ldd	r18, Y+16	; 0x10
    3632:	39 89       	ldd	r19, Y+17	; 0x11
    3634:	4a 89       	ldd	r20, Y+18	; 0x12
    3636:	5b 89       	ldd	r21, Y+19	; 0x13
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	70 e0       	ldi	r23, 0x00	; 0
    363c:	cb 01       	movw	r24, r22
    363e:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3642:	68 8b       	std	Y+16, r22	; 0x10
    3644:	79 8b       	std	Y+17, r23	; 0x11
    3646:	8a 8b       	std	Y+18, r24	; 0x12
    3648:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    364a:	2c 89       	ldd	r18, Y+20	; 0x14
    364c:	3d 89       	ldd	r19, Y+21	; 0x15
    364e:	4e 89       	ldd	r20, Y+22	; 0x16
    3650:	5f 89       	ldd	r21, Y+23	; 0x17
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	cb 01       	movw	r24, r22
    3658:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    365c:	6c 8b       	std	Y+20, r22	; 0x14
    365e:	7d 8b       	std	Y+21, r23	; 0x15
    3660:	8e 8b       	std	Y+22, r24	; 0x16
    3662:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    3664:	19 8f       	std	Y+25, r17	; 0x19
    3666:	08 8f       	std	Y+24, r16	; 0x18
}
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	08 95       	ret

00003672 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    3672:	2f 92       	push	r2
    3674:	3f 92       	push	r3
    3676:	4f 92       	push	r4
    3678:	5f 92       	push	r5
    367a:	6f 92       	push	r6
    367c:	7f 92       	push	r7
    367e:	8f 92       	push	r8
    3680:	9f 92       	push	r9
    3682:	af 92       	push	r10
    3684:	bf 92       	push	r11
    3686:	cf 92       	push	r12
    3688:	df 92       	push	r13
    368a:	ef 92       	push	r14
    368c:	ff 92       	push	r15
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	00 d0       	rcall	.+0      	; 0x3698 <_ZN3PIDC1EPdS0_S0_dddi+0x26>
    3698:	00 d0       	rcall	.+0      	; 0x369a <_ZN3PIDC1EPdS0_S0_dddi+0x28>
    369a:	00 d0       	rcall	.+0      	; 0x369c <_ZN3PIDC1EPdS0_S0_dddi+0x2a>
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	1c 01       	movw	r2, r24
    36a2:	7a 83       	std	Y+2, r23	; 0x02
    36a4:	69 83       	std	Y+1, r22	; 0x01
    36a6:	5c 83       	std	Y+4, r21	; 0x04
    36a8:	4b 83       	std	Y+3, r20	; 0x03
    36aa:	3e 83       	std	Y+6, r19	; 0x06
    36ac:	2d 83       	std	Y+5, r18	; 0x05
    36ae:	27 01       	movw	r4, r14
    36b0:	38 01       	movw	r6, r16
    36b2:	45 01       	movw	r8, r10
    36b4:	56 01       	movw	r10, r12
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    36b6:	00 e0       	ldi	r16, 0x00	; 0
    36b8:	10 e0       	ldi	r17, 0x00	; 0
    36ba:	2f e7       	ldi	r18, 0x7F	; 127
    36bc:	33 e4       	ldi	r19, 0x43	; 67
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	50 e0       	ldi	r21, 0x00	; 0
    36c2:	ba 01       	movw	r22, r20
    36c4:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    36c8:	84 e6       	ldi	r24, 0x64	; 100
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	f1 01       	movw	r30, r2
    36ce:	95 a7       	std	Z+45, r25	; 0x2d
    36d0:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    36d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36d4:	78 a1       	ldd	r23, Y+32	; 0x20
    36d6:	c1 01       	movw	r24, r2
    36d8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    36dc:	cb 8c       	ldd	r12, Y+27	; 0x1b
    36de:	dc 8c       	ldd	r13, Y+28	; 0x1c
    36e0:	ed 8c       	ldd	r14, Y+29	; 0x1d
    36e2:	fe 8c       	ldd	r15, Y+30	; 0x1e
    36e4:	95 01       	movw	r18, r10
    36e6:	84 01       	movw	r16, r8
    36e8:	b3 01       	movw	r22, r6
    36ea:	a2 01       	movw	r20, r4
    36ec:	c1 01       	movw	r24, r2
    36ee:	0e 94 15 19 	call	0x322a	; 0x322a <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    36f2:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    36f6:	f1 01       	movw	r30, r2
    36f8:	84 a4       	ldd	r8, Z+44	; 0x2c
    36fa:	95 a4       	ldd	r9, Z+45	; 0x2d
    36fc:	aa 24       	eor	r10, r10
    36fe:	97 fc       	sbrc	r9, 7
    3700:	a0 94       	com	r10
    3702:	ba 2c       	mov	r11, r10
    3704:	68 19       	sub	r22, r8
    3706:	79 09       	sbc	r23, r9
    3708:	8a 09       	sbc	r24, r10
    370a:	9b 09       	sbc	r25, r11
    370c:	60 a3       	std	Z+32, r22	; 0x20
    370e:	71 a3       	std	Z+33, r23	; 0x21
    3710:	82 a3       	std	Z+34, r24	; 0x22
    3712:	93 a3       	std	Z+35, r25	; 0x23
    inAuto = false;
    3714:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	9c 81       	ldd	r25, Y+4	; 0x04
    371a:	95 8f       	std	Z+29, r25	; 0x1d
    371c:	84 8f       	std	Z+28, r24	; 0x1c
    myInput = Input;
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	93 8f       	std	Z+27, r25	; 0x1b
    3724:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	9e 81       	ldd	r25, Y+6	; 0x06
    372a:	97 8f       	std	Z+31, r25	; 0x1f
    372c:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    372e:	26 96       	adiw	r28, 0x06	; 6
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	ff 90       	pop	r15
    3744:	ef 90       	pop	r14
    3746:	df 90       	pop	r13
    3748:	cf 90       	pop	r12
    374a:	bf 90       	pop	r11
    374c:	af 90       	pop	r10
    374e:	9f 90       	pop	r9
    3750:	8f 90       	pop	r8
    3752:	7f 90       	pop	r7
    3754:	6f 90       	pop	r6
    3756:	5f 90       	pop	r5
    3758:	4f 90       	pop	r4
    375a:	3f 90       	pop	r3
    375c:	2f 90       	pop	r2
    375e:	08 95       	ret

00003760 <_ZN4NMEAC1Ei>:

//
// constructor method
//

NMEA::NMEA(int connect)
    3760:	0f 93       	push	r16
    3762:	1f 93       	push	r17
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	fc 01       	movw	r30, r24
{
	// private properties
	_gprmc_only = connect;
    376a:	71 83       	std	Z+1, r23	; 0x01
    376c:	60 83       	st	Z, r22
	_gprmc_utc = 0.0;
    376e:	12 82       	std	Z+2, r1	; 0x02
    3770:	13 82       	std	Z+3, r1	; 0x03
    3772:	14 82       	std	Z+4, r1	; 0x04
    3774:	15 82       	std	Z+5, r1	; 0x05
	_gprmc_status = 'V';
    3776:	86 e5       	ldi	r24, 0x56	; 86
    3778:	86 83       	std	Z+6, r24	; 0x06
	_gprmc_lat = 0.0;
    377a:	17 82       	std	Z+7, r1	; 0x07
    377c:	10 86       	std	Z+8, r1	; 0x08
    377e:	11 86       	std	Z+9, r1	; 0x09
    3780:	12 86       	std	Z+10, r1	; 0x0a
	_gprmc_long = 0.0;
    3782:	13 86       	std	Z+11, r1	; 0x0b
    3784:	14 86       	std	Z+12, r1	; 0x0c
    3786:	15 86       	std	Z+13, r1	; 0x0d
    3788:	16 86       	std	Z+14, r1	; 0x0e
	_gprmc_speed = 0.0;
    378a:	17 86       	std	Z+15, r1	; 0x0f
    378c:	10 8a       	std	Z+16, r1	; 0x10
    378e:	11 8a       	std	Z+17, r1	; 0x11
    3790:	12 8a       	std	Z+18, r1	; 0x12
	_gprmc_angle = 0.0;
    3792:	13 8a       	std	Z+19, r1	; 0x13
    3794:	14 8a       	std	Z+20, r1	; 0x14
    3796:	15 8a       	std	Z+21, r1	; 0x15
    3798:	16 8a       	std	Z+22, r1	; 0x16
	_terms = 0;
    379a:	df 01       	movw	r26, r30
    379c:	a7 54       	subi	r26, 0x47	; 71
    379e:	bf 4f       	sbci	r27, 0xFF	; 255
    37a0:	1d 92       	st	X+, r1
    37a2:	1c 92       	st	X, r1
	n = 0;
    37a4:	df 01       	movw	r26, r30
    37a6:	a5 5a       	subi	r26, 0xA5	; 165
    37a8:	be 4f       	sbci	r27, 0xFE	; 254
    37aa:	1d 92       	st	X+, r1
    37ac:	1c 92       	st	X, r1
	_state = 0;
    37ae:	df 01       	movw	r26, r30
    37b0:	a1 5a       	subi	r26, 0xA1	; 161
    37b2:	be 4f       	sbci	r27, 0xFE	; 254
    37b4:	1d 92       	st	X+, r1
    37b6:	1c 92       	st	X, r1
	_parity = 0;
    37b8:	df 01       	movw	r26, r30
    37ba:	af 59       	subi	r26, 0x9F	; 159
    37bc:	be 4f       	sbci	r27, 0xFE	; 254
    37be:	1d 92       	st	X+, r1
    37c0:	1c 92       	st	X, r1
	_nt = 0;
    37c2:	df 01       	movw	r26, r30
    37c4:	ad 59       	subi	r26, 0x9D	; 157
    37c6:	be 4f       	sbci	r27, 0xFE	; 254
    37c8:	1d 92       	st	X+, r1
    37ca:	1c 92       	st	X, r1

	f_sentence[0] = 0;
    37cc:	17 8a       	std	Z+23, r1	; 0x17
	f_terms = 0;
    37ce:	df 01       	movw	r26, r30
    37d0:	a9 54       	subi	r26, 0x49	; 73
    37d2:	bf 4f       	sbci	r27, 0xFF	; 255
    37d4:	1d 92       	st	X+, r1
    37d6:	1c 92       	st	X, r1
    37d8:	ef 01       	movw	r28, r30
    37da:	0e e1       	ldi	r16, 0x1E	; 30
    37dc:	10 e0       	ldi	r17, 0x00	; 0
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    37de:	8f e0       	ldi	r24, 0x0F	; 15
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	0e 94 84 13 	call	0x2708	; 0x2708 <malloc>

//
// constructor method
//

NMEA::NMEA(int connect)
    37e6:	fe 01       	movw	r30, r28
    37e8:	e1 5e       	subi	r30, 0xE1	; 225
    37ea:	fe 4f       	sbci	r31, 0xFE	; 254

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    37ec:	80 83       	st	Z, r24
    37ee:	91 83       	std	Z+1, r25	; 0x01
    f_term[t] = (char*) malloc (15 * sizeof(char));
    37f0:	8f e0       	ldi	r24, 0x0F	; 15
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 84 13 	call	0x2708	; 0x2708 <malloc>
    37f8:	fc 01       	movw	r30, r24

//
// constructor method
//

NMEA::NMEA(int connect)
    37fa:	de 01       	movw	r26, r28
    37fc:	a5 58       	subi	r26, 0x85	; 133
    37fe:	bf 4f       	sbci	r27, 0xFF	; 255
	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    3800:	8d 93       	st	X+, r24
    3802:	9c 93       	st	X, r25
    (f_term[t])[0] = 0;
    3804:	10 82       	st	Z, r1
    3806:	01 50       	subi	r16, 0x01	; 1
    3808:	11 09       	sbc	r17, r1
    380a:	22 96       	adiw	r28, 0x02	; 2
	_nt = 0;

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    380c:	01 15       	cp	r16, r1
    380e:	11 05       	cpc	r17, r1
    3810:	31 f7       	brne	.-52     	; 0x37de <_ZN4NMEAC1Ei+0x7e>
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    (f_term[t])[0] = 0;
  }
}
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	1f 91       	pop	r17
    3818:	0f 91       	pop	r16
    381a:	08 95       	ret

0000381c <_ZN4NMEA9gprmc_utcEv>:
    break;
  }
  return 0;
}

float NMEA::gprmc_utc() {
    381c:	fc 01       	movw	r30, r24
	// returns decimal value of UTC term of last-known GPRMC sentence
	return _gprmc_utc;
}
    381e:	52 81       	ldd	r21, Z+2	; 0x02
    3820:	43 81       	ldd	r20, Z+3	; 0x03
    3822:	34 81       	ldd	r19, Z+4	; 0x04
    3824:	25 81       	ldd	r18, Z+5	; 0x05
    3826:	65 2f       	mov	r22, r21
    3828:	74 2f       	mov	r23, r20
    382a:	83 2f       	mov	r24, r19
    382c:	92 2f       	mov	r25, r18
    382e:	08 95       	ret

00003830 <_ZN4NMEA12gprmc_statusEv>:

char NMEA::gprmc_status() {
	// returns status character of last-known GPRMC sentence ('A' or 'V')
	return _gprmc_status;
}
    3830:	fc 01       	movw	r30, r24
    3832:	86 81       	ldd	r24, Z+6	; 0x06
    3834:	08 95       	ret

00003836 <_ZN4NMEA14gprmc_latitudeEv>:

float NMEA::gprmc_latitude() {
    3836:	fc 01       	movw	r30, r24
	// returns signed degree-decimal latitude value of last-known GPRMC position
	return _gprmc_lat;
}
    3838:	57 81       	ldd	r21, Z+7	; 0x07
    383a:	40 85       	ldd	r20, Z+8	; 0x08
    383c:	31 85       	ldd	r19, Z+9	; 0x09
    383e:	22 85       	ldd	r18, Z+10	; 0x0a
    3840:	65 2f       	mov	r22, r21
    3842:	74 2f       	mov	r23, r20
    3844:	83 2f       	mov	r24, r19
    3846:	92 2f       	mov	r25, r18
    3848:	08 95       	ret

0000384a <_ZN4NMEA15gprmc_longitudeEv>:

float NMEA::gprmc_longitude() {
    384a:	fc 01       	movw	r30, r24
	// returns signed degree-decimal longitude value of last-known GPRMC position
	return _gprmc_long;
}
    384c:	53 85       	ldd	r21, Z+11	; 0x0b
    384e:	44 85       	ldd	r20, Z+12	; 0x0c
    3850:	35 85       	ldd	r19, Z+13	; 0x0d
    3852:	26 85       	ldd	r18, Z+14	; 0x0e
    3854:	65 2f       	mov	r22, r21
    3856:	74 2f       	mov	r23, r20
    3858:	83 2f       	mov	r24, r19
    385a:	92 2f       	mov	r25, r18
    385c:	08 95       	ret

0000385e <_ZN4NMEA11gprmc_speedEf>:

float NMEA::gprmc_speed(float unit) {
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
    3866:	6a 01       	movw	r12, r20
    3868:	7b 01       	movw	r14, r22
	// returns speed-over-ground from last-known GPRMC sentence
	return (_gprmc_speed * unit);
    386a:	fc 01       	movw	r30, r24
    386c:	27 85       	ldd	r18, Z+15	; 0x0f
    386e:	30 89       	ldd	r19, Z+16	; 0x10
    3870:	41 89       	ldd	r20, Z+17	; 0x11
    3872:	52 89       	ldd	r21, Z+18	; 0x12
    3874:	c7 01       	movw	r24, r14
    3876:	b6 01       	movw	r22, r12
    3878:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
}
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	df 90       	pop	r13
    3882:	cf 90       	pop	r12
    3884:	08 95       	ret

00003886 <_ZN4NMEA12gprmc_courseEv>:

float NMEA::gprmc_course() {
    3886:	fc 01       	movw	r30, r24
	// returns decimal value of track-angle-made-good term in last-known GPRMC sentence - 0-360 deg
	return _gprmc_angle;
}
    3888:	53 89       	ldd	r21, Z+19	; 0x13
    388a:	44 89       	ldd	r20, Z+20	; 0x14
    388c:	35 89       	ldd	r19, Z+21	; 0x15
    388e:	26 89       	ldd	r18, Z+22	; 0x16
    3890:	65 2f       	mov	r22, r21
    3892:	74 2f       	mov	r23, r20
    3894:	83 2f       	mov	r24, r19
    3896:	92 2f       	mov	r25, r18
    3898:	08 95       	ret

0000389a <_ZN4NMEA8sentenceEv>:
//	return rc;
//}

char* NMEA::sentence() {
	// returns last received full sentence as zero terminated string
  return f_sentence;
    389a:	9c 01       	movw	r18, r24
    389c:	29 5e       	subi	r18, 0xE9	; 233
    389e:	3f 4f       	sbci	r19, 0xFF	; 255
}
    38a0:	c9 01       	movw	r24, r18
    38a2:	08 95       	ret

000038a4 <_ZN4NMEA4termEi>:
  return f_terms;
}

char* NMEA::term(int t) {
	// returns term t of last received full sentence as zero terminated string
  return f_term[t];
    38a4:	66 0f       	add	r22, r22
    38a6:	77 1f       	adc	r23, r23
    38a8:	68 0f       	add	r22, r24
    38aa:	79 1f       	adc	r23, r25
    38ac:	fb 01       	movw	r30, r22
    38ae:	e5 58       	subi	r30, 0x85	; 133
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	08 95       	ret

000038b8 <_ZN4NMEA8_decimalEPc>:
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    38b8:	4f 92       	push	r4
    38ba:	5f 92       	push	r5
    38bc:	6f 92       	push	r6
    38be:	7f 92       	push	r7
    38c0:	8f 92       	push	r8
    38c2:	9f 92       	push	r9
    38c4:	af 92       	push	r10
    38c6:	bf 92       	push	r11
    38c8:	cf 92       	push	r12
    38ca:	df 92       	push	r13
    38cc:	ef 92       	push	r14
    38ce:	ff 92       	push	r15
    38d0:	0f 93       	push	r16
    38d2:	1f 93       	push	r17
    38d4:	cf 93       	push	r28
    38d6:	df 93       	push	r29
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
    38d8:	db 01       	movw	r26, r22
    38da:	cc 91       	ld	r28, X
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	cd 32       	cpi	r28, 0x2D	; 45
    38e2:	21 f0       	breq	.+8      	; 0x38ec <_ZN4NMEA8_decimalEPc+0x34>
    38e4:	cb 32       	cpi	r28, 0x2B	; 43
    38e6:	11 f0       	breq	.+4      	; 0x38ec <_ZN4NMEA8_decimalEPc+0x34>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	90 e0       	ldi	r25, 0x00	; 0
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    38ec:	2b 01       	movw	r4, r22
    38ee:	48 0e       	add	r4, r24
    38f0:	59 1e       	adc	r5, r25
    38f2:	61 2c       	mov	r6, r1
    38f4:	3d ec       	ldi	r19, 0xCD	; 205
    38f6:	a3 2e       	mov	r10, r19
    38f8:	4c ec       	ldi	r20, 0xCC	; 204
    38fa:	94 2e       	mov	r9, r20
    38fc:	5c ec       	ldi	r21, 0xCC	; 204
    38fe:	85 2e       	mov	r8, r21
    3900:	6d e3       	ldi	r22, 0x3D	; 61
    3902:	76 2e       	mov	r7, r22
    3904:	b1 2c       	mov	r11, r1
    3906:	00 e0       	ldi	r16, 0x00	; 0
    3908:	10 e0       	ldi	r17, 0x00	; 0
    390a:	d0 e0       	ldi	r29, 0x00	; 0
    390c:	c1 2c       	mov	r12, r1
    390e:	d1 2c       	mov	r13, r1
    3910:	76 01       	movw	r14, r12
    3912:	4a c0       	rjmp	.+148    	; 0x39a8 <_ZN4NMEA8_decimalEPc+0xf0>
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
    3914:	ee 32       	cpi	r30, 0x2E	; 46
    3916:	09 f4       	brne	.+2      	; 0x391a <_ZN4NMEA8_decimalEPc+0x62>
    3918:	45 c0       	rjmp	.+138    	; 0x39a4 <_ZN4NMEA8_decimalEPc+0xec>
    391a:	ff 27       	eor	r31, r31
    391c:	e7 fd       	sbrc	r30, 7
    391e:	f0 95       	com	r31
      dec = true;
    }
    else{
      if (!dec) {
    3920:	61 10       	cpse	r6, r1
    3922:	15 c0       	rjmp	.+42     	; 0x394e <_ZN4NMEA8_decimalEPc+0x96>
        rl = (10 * rl) + (s[i] - 48);
    3924:	aa e0       	ldi	r26, 0x0A	; 10
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	a7 01       	movw	r20, r14
    392a:	96 01       	movw	r18, r12
    392c:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    3930:	6b 01       	movw	r12, r22
    3932:	7c 01       	movw	r14, r24
    3934:	bf 01       	movw	r22, r30
    3936:	60 53       	subi	r22, 0x30	; 48
    3938:	71 09       	sbc	r23, r1
    393a:	cb 01       	movw	r24, r22
    393c:	aa 27       	eor	r26, r26
    393e:	97 fd       	sbrc	r25, 7
    3940:	a0 95       	com	r26
    3942:	ba 2f       	mov	r27, r26
    3944:	c8 0e       	add	r12, r24
    3946:	d9 1e       	adc	r13, r25
    3948:	ea 1e       	adc	r14, r26
    394a:	fb 1e       	adc	r15, r27
    394c:	2d c0       	rjmp	.+90     	; 0x39a8 <_ZN4NMEA8_decimalEPc+0xf0>
      }
      else {
        rr += rb * (float)(s[i] - 48);
    394e:	bf 01       	movw	r22, r30
    3950:	60 53       	subi	r22, 0x30	; 48
    3952:	71 09       	sbc	r23, r1
    3954:	88 27       	eor	r24, r24
    3956:	77 fd       	sbrc	r23, 7
    3958:	80 95       	com	r24
    395a:	98 2f       	mov	r25, r24
    395c:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    3960:	9b 01       	movw	r18, r22
    3962:	ac 01       	movw	r20, r24
    3964:	6a 2d       	mov	r22, r10
    3966:	79 2d       	mov	r23, r9
    3968:	88 2d       	mov	r24, r8
    396a:	97 2d       	mov	r25, r7
    396c:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    3970:	9b 01       	movw	r18, r22
    3972:	ac 01       	movw	r20, r24
    3974:	6b 2d       	mov	r22, r11
    3976:	70 2f       	mov	r23, r16
    3978:	81 2f       	mov	r24, r17
    397a:	9d 2f       	mov	r25, r29
    397c:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    3980:	b6 2e       	mov	r11, r22
    3982:	07 2f       	mov	r16, r23
    3984:	18 2f       	mov	r17, r24
    3986:	d9 2f       	mov	r29, r25
        rb /= 10.0;
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e2       	ldi	r20, 0x20	; 32
    398e:	51 e4       	ldi	r21, 0x41	; 65
    3990:	6a 2d       	mov	r22, r10
    3992:	79 2d       	mov	r23, r9
    3994:	88 2d       	mov	r24, r8
    3996:	97 2d       	mov	r25, r7
    3998:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    399c:	a6 2e       	mov	r10, r22
    399e:	97 2e       	mov	r9, r23
    39a0:	88 2e       	mov	r8, r24
    39a2:	79 2e       	mov	r7, r25
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
      dec = true;
    39a4:	66 24       	eor	r6, r6
    39a6:	63 94       	inc	r6
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    39a8:	d2 01       	movw	r26, r4
    39aa:	ed 91       	ld	r30, X+
    39ac:	2d 01       	movw	r4, r26
    39ae:	e1 11       	cpse	r30, r1
    39b0:	b1 cf       	rjmp	.-158    	; 0x3914 <_ZN4NMEA8_decimalEPc+0x5c>
        rb /= 10.0;
      }
    }
    i++;
  }
  rr += (float)rl;
    39b2:	c7 01       	movw	r24, r14
    39b4:	b6 01       	movw	r22, r12
    39b6:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    39ba:	9b 01       	movw	r18, r22
    39bc:	ac 01       	movw	r20, r24
    39be:	6b 2d       	mov	r22, r11
    39c0:	70 2f       	mov	r23, r16
    39c2:	81 2f       	mov	r24, r17
    39c4:	9d 2f       	mov	r25, r29
    39c6:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
  if (s[0] == '-') {
    39ca:	cd 32       	cpi	r28, 0x2D	; 45
    39cc:	49 f4       	brne	.+18     	; 0x39e0 <_ZN4NMEA8_decimalEPc+0x128>
    rr = 0.0 - rr;
    39ce:	26 2f       	mov	r18, r22
    39d0:	37 2f       	mov	r19, r23
    39d2:	48 2f       	mov	r20, r24
    39d4:	59 2f       	mov	r21, r25
    39d6:	60 e0       	ldi	r22, 0x00	; 0
    39d8:	70 e0       	ldi	r23, 0x00	; 0
    39da:	cb 01       	movw	r24, r22
    39dc:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
  }
  return rr;
}
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	1f 91       	pop	r17
    39e6:	0f 91       	pop	r16
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	df 90       	pop	r13
    39ee:	cf 90       	pop	r12
    39f0:	bf 90       	pop	r11
    39f2:	af 90       	pop	r10
    39f4:	9f 90       	pop	r9
    39f6:	8f 90       	pop	r8
    39f8:	7f 90       	pop	r7
    39fa:	6f 90       	pop	r6
    39fc:	5f 90       	pop	r5
    39fe:	4f 90       	pop	r4
    3a00:	08 95       	ret

00003a02 <_ZN4NMEA6decodeEc>:

//
// public methods
//

int NMEA::decode(char c) {
    3a02:	8f 92       	push	r8
    3a04:	9f 92       	push	r9
    3a06:	af 92       	push	r10
    3a08:	bf 92       	push	r11
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	ec 01       	movw	r28, r24
  // avoid runaway sentences (>99 chars or >29 terms) and terms (>14 chars)
  if ((n >= 100) || (_terms >= 30) || (_nt >= 15)) { _state = 0; }
    3a18:	fc 01       	movw	r30, r24
    3a1a:	e5 5a       	subi	r30, 0xA5	; 165
    3a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1e:	80 81       	ld	r24, Z
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	84 36       	cpi	r24, 0x64	; 100
    3a24:	91 05       	cpc	r25, r1
    3a26:	84 f4       	brge	.+32     	; 0x3a48 <_ZN4NMEA6decodeEc+0x46>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e7 54       	subi	r30, 0x47	; 71
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	20 81       	ld	r18, Z
    3a30:	31 81       	ldd	r19, Z+1	; 0x01
    3a32:	2e 31       	cpi	r18, 0x1E	; 30
    3a34:	31 05       	cpc	r19, r1
    3a36:	44 f4       	brge	.+16     	; 0x3a48 <_ZN4NMEA6decodeEc+0x46>
    3a38:	fe 01       	movw	r30, r28
    3a3a:	ed 59       	subi	r30, 0x9D	; 157
    3a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a3e:	20 81       	ld	r18, Z
    3a40:	31 81       	ldd	r19, Z+1	; 0x01
    3a42:	2f 30       	cpi	r18, 0x0F	; 15
    3a44:	31 05       	cpc	r19, r1
    3a46:	2c f0       	brlt	.+10     	; 0x3a52 <_ZN4NMEA6decodeEc+0x50>
    3a48:	fe 01       	movw	r30, r28
    3a4a:	e1 5a       	subi	r30, 0xA1	; 161
    3a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a4e:	11 82       	std	Z+1, r1	; 0x01
    3a50:	10 82       	st	Z, r1
    3a52:	8e 01       	movw	r16, r28
    3a54:	01 5a       	subi	r16, 0xA1	; 161
    3a56:	1e 4f       	sbci	r17, 0xFE	; 254
  // LF and CR always reset parser
  if ((c == 0x0A) || (c == 0x0D)) { _state = 0; }
    3a58:	6a 30       	cpi	r22, 0x0A	; 10
    3a5a:	11 f0       	breq	.+4      	; 0x3a60 <_ZN4NMEA6decodeEc+0x5e>
    3a5c:	6d 30       	cpi	r22, 0x0D	; 13
    3a5e:	19 f4       	brne	.+6      	; 0x3a66 <_ZN4NMEA6decodeEc+0x64>
    3a60:	d8 01       	movw	r26, r16
    3a62:	1d 92       	st	X+, r1
    3a64:	1c 92       	st	X, r1
  // '$' always starts a new sentence
  if (c == '$') {
    3a66:	64 32       	cpi	r22, 0x24	; 36
    3a68:	11 f5       	brne	.+68     	; 0x3aae <_ZN4NMEA6decodeEc+0xac>
    _gprmc_tag = 0;
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e3 5a       	subi	r30, 0xA3	; 163
    3a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a70:	11 82       	std	Z+1, r1	; 0x01
    3a72:	10 82       	st	Z, r1
    _parity = 0;
    3a74:	fe 01       	movw	r30, r28
    3a76:	ef 59       	subi	r30, 0x9F	; 159
    3a78:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7a:	11 82       	std	Z+1, r1	; 0x01
    3a7c:	10 82       	st	Z, r1
    _terms = 0;
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e7 54       	subi	r30, 0x47	; 71
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	11 82       	std	Z+1, r1	; 0x01
    3a86:	10 82       	st	Z, r1
    _nt = 0;
    3a88:	fe 01       	movw	r30, r28
    3a8a:	ed 59       	subi	r30, 0x9D	; 157
    3a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8e:	11 82       	std	Z+1, r1	; 0x01
    3a90:	10 82       	st	Z, r1
    _sentence[0] = c;
    3a92:	fe 01       	movw	r30, r28
    3a94:	e5 54       	subi	r30, 0x45	; 69
    3a96:	ff 4f       	sbci	r31, 0xFF	; 255
    3a98:	60 83       	st	Z, r22
    n = 1;
    3a9a:	fe 01       	movw	r30, r28
    3a9c:	e5 5a       	subi	r30, 0xA5	; 165
    3a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	80 83       	st	Z, r24
    _state = 1;
    3aa8:	c1 5a       	subi	r28, 0xA1	; 161
    3aaa:	de 4f       	sbci	r29, 0xFE	; 254
    3aac:	e0 c0       	rjmp	.+448    	; 0x3c6e <_ZN4NMEA6decodeEc+0x26c>
    return 0;
  }
  // parse other chars according to parser state
  switch(_state) {
    3aae:	f8 01       	movw	r30, r16
    3ab0:	20 81       	ld	r18, Z
    3ab2:	31 81       	ldd	r19, Z+1	; 0x01
    3ab4:	21 30       	cpi	r18, 0x01	; 1
    3ab6:	31 05       	cpc	r19, r1
    3ab8:	71 f0       	breq	.+28     	; 0x3ad6 <_ZN4NMEA6decodeEc+0xd4>
    3aba:	24 f4       	brge	.+8      	; 0x3ac4 <_ZN4NMEA6decodeEc+0xc2>
    3abc:	23 2b       	or	r18, r19
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <_ZN4NMEA6decodeEc+0xc0>
    3ac0:	8d c2       	rjmp	.+1306   	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
    3ac2:	88 c2       	rjmp	.+1296   	; 0x3fd4 <_ZN4NMEA6decodeEc+0x5d2>
    3ac4:	22 30       	cpi	r18, 0x02	; 2
    3ac6:	31 05       	cpc	r19, r1
    3ac8:	09 f4       	brne	.+2      	; 0x3acc <_ZN4NMEA6decodeEc+0xca>
    3aca:	8b c0       	rjmp	.+278    	; 0x3be2 <_ZN4NMEA6decodeEc+0x1e0>
    3acc:	23 30       	cpi	r18, 0x03	; 3
    3ace:	31 05       	cpc	r19, r1
    3ad0:	09 f0       	breq	.+2      	; 0x3ad4 <_ZN4NMEA6decodeEc+0xd2>
    3ad2:	80 c2       	rjmp	.+1280   	; 0x3fd4 <_ZN4NMEA6decodeEc+0x5d2>
    3ad4:	cf c0       	rjmp	.+414    	; 0x3c74 <_ZN4NMEA6decodeEc+0x272>
  case 0:
    // waiting for '$', do nothing
    break;
  case 1:
  	// decode chars after '$' and before '*' found
    if (n < 7) {
    3ad6:	87 30       	cpi	r24, 0x07	; 7
    3ad8:	91 05       	cpc	r25, r1
    3ada:	7c f4       	brge	.+30     	; 0x3afa <_ZN4NMEA6decodeEc+0xf8>
    	// see if first seven chars match "$GPRMC,"
    	if (c == _GPRMC_TERM[n]) { _gprmc_tag++; }
    3adc:	fc 01       	movw	r30, r24
    3ade:	e4 5f       	subi	r30, 0xF4	; 244
    3ae0:	fd 4f       	sbci	r31, 0xFD	; 253
    3ae2:	20 81       	ld	r18, Z
    3ae4:	62 13       	cpse	r22, r18
    3ae6:	09 c0       	rjmp	.+18     	; 0x3afa <_ZN4NMEA6decodeEc+0xf8>
    3ae8:	fe 01       	movw	r30, r28
    3aea:	e3 5a       	subi	r30, 0xA3	; 163
    3aec:	fe 4f       	sbci	r31, 0xFE	; 254
    3aee:	20 81       	ld	r18, Z
    3af0:	31 81       	ldd	r19, Z+1	; 0x01
    3af2:	2f 5f       	subi	r18, 0xFF	; 255
    3af4:	3f 4f       	sbci	r19, 0xFF	; 255
    3af6:	31 83       	std	Z+1, r19	; 0x01
    3af8:	20 83       	st	Z, r18
    }
    // add received char to sentence
    _sentence[n++] = c;
    3afa:	fe 01       	movw	r30, r28
    3afc:	e8 0f       	add	r30, r24
    3afe:	f9 1f       	adc	r31, r25
    3b00:	e5 54       	subi	r30, 0x45	; 69
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	60 83       	st	Z, r22
    3b06:	fe 01       	movw	r30, r28
    3b08:	e5 5a       	subi	r30, 0xA5	; 165
    3b0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0c:	01 96       	adiw	r24, 0x01	; 1
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	80 83       	st	Z, r24
    3b12:	8e 01       	movw	r16, r28
    3b14:	07 54       	subi	r16, 0x47	; 71
    3b16:	1f 4f       	sbci	r17, 0xFF	; 255
    3b18:	fe 01       	movw	r30, r28
    3b1a:	ed 59       	subi	r30, 0x9D	; 157
    3b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    switch (c) {
    3b1e:	6a 32       	cpi	r22, 0x2A	; 42
    3b20:	19 f1       	breq	.+70     	; 0x3b68 <_ZN4NMEA6decodeEc+0x166>
    3b22:	6c 32       	cpi	r22, 0x2C	; 44
    3b24:	e1 f5       	brne	.+120    	; 0x3b9e <_ZN4NMEA6decodeEc+0x19c>
    case ',':
    	// ',' delimits the individual terms
      (_term[_terms++])[_nt] = 0;
    3b26:	d8 01       	movw	r26, r16
    3b28:	2d 91       	ld	r18, X+
    3b2a:	3c 91       	ld	r19, X
    3b2c:	c9 01       	movw	r24, r18
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	8c 0f       	add	r24, r28
    3b34:	9d 1f       	adc	r25, r29
    3b36:	81 5e       	subi	r24, 0xE1	; 225
    3b38:	9e 4f       	sbci	r25, 0xFE	; 254
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	8d 91       	ld	r24, X+
    3b3e:	9c 91       	ld	r25, X
    3b40:	40 81       	ld	r20, Z
    3b42:	51 81       	ldd	r21, Z+1	; 0x01
    3b44:	84 0f       	add	r24, r20
    3b46:	95 1f       	adc	r25, r21
    3b48:	dc 01       	movw	r26, r24
    3b4a:	1c 92       	st	X, r1
    3b4c:	2f 5f       	subi	r18, 0xFF	; 255
    3b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b50:	d8 01       	movw	r26, r16
    3b52:	2d 93       	st	X+, r18
    3b54:	3c 93       	st	X, r19
      _nt = 0;
    3b56:	11 82       	std	Z+1, r1	; 0x01
    3b58:	10 82       	st	Z, r1
      _parity = _parity ^ c;
    3b5a:	cf 59       	subi	r28, 0x9F	; 159
    3b5c:	de 4f       	sbci	r29, 0xFE	; 254
    3b5e:	88 81       	ld	r24, Y
    3b60:	99 81       	ldd	r25, Y+1	; 0x01
    3b62:	bc e2       	ldi	r27, 0x2C	; 44
    3b64:	8b 27       	eor	r24, r27
    3b66:	83 c0       	rjmp	.+262    	; 0x3c6e <_ZN4NMEA6decodeEc+0x26c>
      break;
    case '*':
    	// '*' delimits term and precedes checksum term
      (_term[_terms++])[_nt] = 0;
    3b68:	d8 01       	movw	r26, r16
    3b6a:	2d 91       	ld	r18, X+
    3b6c:	3c 91       	ld	r19, X
    3b6e:	c9 01       	movw	r24, r18
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	8c 0f       	add	r24, r28
    3b76:	9d 1f       	adc	r25, r29
    3b78:	81 5e       	subi	r24, 0xE1	; 225
    3b7a:	9e 4f       	sbci	r25, 0xFE	; 254
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	8d 91       	ld	r24, X+
    3b80:	9c 91       	ld	r25, X
    3b82:	40 81       	ld	r20, Z
    3b84:	51 81       	ldd	r21, Z+1	; 0x01
    3b86:	84 0f       	add	r24, r20
    3b88:	95 1f       	adc	r25, r21
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	1c 92       	st	X, r1
    3b8e:	2f 5f       	subi	r18, 0xFF	; 255
    3b90:	3f 4f       	sbci	r19, 0xFF	; 255
    3b92:	d8 01       	movw	r26, r16
    3b94:	2d 93       	st	X+, r18
    3b96:	3c 93       	st	X, r19
      _nt = 0;
    3b98:	11 82       	std	Z+1, r1	; 0x01
    3b9a:	10 82       	st	Z, r1
    3b9c:	63 c0       	rjmp	.+198    	; 0x3c64 <_ZN4NMEA6decodeEc+0x262>
      _state++;
      break;
    default:
    	// all other chars between '$' and '*' are part of a term
      (_term[_terms])[_nt++] = c;
    3b9e:	20 81       	ld	r18, Z
    3ba0:	31 81       	ldd	r19, Z+1	; 0x01
    3ba2:	d8 01       	movw	r26, r16
    3ba4:	8d 91       	ld	r24, X+
    3ba6:	9c 91       	ld	r25, X
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	8c 0f       	add	r24, r28
    3bae:	9d 1f       	adc	r25, r29
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	a1 5e       	subi	r26, 0xE1	; 225
    3bb4:	be 4f       	sbci	r27, 0xFE	; 254
    3bb6:	0d 90       	ld	r0, X+
    3bb8:	bc 91       	ld	r27, X
    3bba:	a0 2d       	mov	r26, r0
    3bbc:	a2 0f       	add	r26, r18
    3bbe:	b3 1f       	adc	r27, r19
    3bc0:	6c 93       	st	X, r22
    3bc2:	2f 5f       	subi	r18, 0xFF	; 255
    3bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc6:	31 83       	std	Z+1, r19	; 0x01
    3bc8:	20 83       	st	Z, r18
      _parity = _parity ^ c;
    3bca:	cf 59       	subi	r28, 0x9F	; 159
    3bcc:	de 4f       	sbci	r29, 0xFE	; 254
    3bce:	77 27       	eor	r23, r23
    3bd0:	67 fd       	sbrc	r22, 7
    3bd2:	70 95       	com	r23
    3bd4:	88 81       	ld	r24, Y
    3bd6:	99 81       	ldd	r25, Y+1	; 0x01
    3bd8:	68 27       	eor	r22, r24
    3bda:	79 27       	eor	r23, r25
    3bdc:	79 83       	std	Y+1, r23	; 0x01
    3bde:	68 83       	st	Y, r22
    3be0:	fd c1       	rjmp	.+1018   	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
      break;
    }
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    3be2:	fe 01       	movw	r30, r28
    3be4:	e8 0f       	add	r30, r24
    3be6:	f9 1f       	adc	r31, r25
    3be8:	e5 54       	subi	r30, 0x45	; 69
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	60 83       	st	Z, r22
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e5 5a       	subi	r30, 0xA5	; 165
    3bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf4:	01 96       	adiw	r24, 0x01	; 1
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    3bfa:	de 01       	movw	r26, r28
    3bfc:	ad 59       	subi	r26, 0x9D	; 157
    3bfe:	be 4f       	sbci	r27, 0xFE	; 254
    3c00:	2d 91       	ld	r18, X+
    3c02:	3c 91       	ld	r19, X
    3c04:	11 97       	sbiw	r26, 0x01	; 1
    3c06:	fe 01       	movw	r30, r28
    3c08:	e7 54       	subi	r30, 0x47	; 71
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	88 0f       	add	r24, r24
    3c12:	99 1f       	adc	r25, r25
    3c14:	8c 0f       	add	r24, r28
    3c16:	9d 1f       	adc	r25, r29
    3c18:	fc 01       	movw	r30, r24
    3c1a:	e1 5e       	subi	r30, 0xE1	; 225
    3c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c1e:	01 90       	ld	r0, Z+
    3c20:	f0 81       	ld	r31, Z
    3c22:	e0 2d       	mov	r30, r0
    3c24:	e2 0f       	add	r30, r18
    3c26:	f3 1f       	adc	r31, r19
    3c28:	60 83       	st	Z, r22
    3c2a:	2f 5f       	subi	r18, 0xFF	; 255
    3c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2e:	2d 93       	st	X+, r18
    3c30:	3c 93       	st	X, r19
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3c32:	fe 01       	movw	r30, r28
    3c34:	ef 59       	subi	r30, 0x9F	; 159
    3c36:	fe 4f       	sbci	r31, 0xFE	; 254
    3c38:	40 81       	ld	r20, Z
    3c3a:	51 81       	ldd	r21, Z+1	; 0x01
    3c3c:	86 2f       	mov	r24, r22
    3c3e:	99 27       	eor	r25, r25
    3c40:	87 fd       	sbrc	r24, 7
    3c42:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3c44:	61 34       	cpi	r22, 0x41	; 65
    3c46:	14 f0       	brlt	.+4      	; 0x3c4c <_ZN4NMEA6decodeEc+0x24a>
    return int(a)-55;
    3c48:	c7 97       	sbiw	r24, 0x37	; 55
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <_ZN4NMEA6decodeEc+0x24c>
  }
  else {
    return int(a)-48;
    3c4c:	c0 97       	sbiw	r24, 0x30	; 48
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    (_term[_terms])[_nt++] = c;
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3c4e:	9c 01       	movw	r18, r24
    3c50:	a4 e0       	ldi	r26, 0x04	; 4
    3c52:	22 0f       	add	r18, r18
    3c54:	33 1f       	adc	r19, r19
    3c56:	aa 95       	dec	r26
    3c58:	e1 f7       	brne	.-8      	; 0x3c52 <_ZN4NMEA6decodeEc+0x250>
    3c5a:	ca 01       	movw	r24, r20
    3c5c:	82 1b       	sub	r24, r18
    3c5e:	93 0b       	sbc	r25, r19
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	80 83       	st	Z, r24
    _state++;
    3c64:	c1 5a       	subi	r28, 0xA1	; 161
    3c66:	de 4f       	sbci	r29, 0xFE	; 254
    3c68:	88 81       	ld	r24, Y
    3c6a:	99 81       	ldd	r25, Y+1	; 0x01
    3c6c:	01 96       	adiw	r24, 0x01	; 1
    3c6e:	99 83       	std	Y+1, r25	; 0x01
    3c70:	88 83       	st	Y, r24
    3c72:	b4 c1       	rjmp	.+872    	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
    break;
  case 3:
  	// second char after '*' completes the checksum (LSB)
    _sentence[n++] = c;
    3c74:	9e 01       	movw	r18, r28
    3c76:	28 0f       	add	r18, r24
    3c78:	39 1f       	adc	r19, r25
    3c7a:	d9 01       	movw	r26, r18
    3c7c:	a5 54       	subi	r26, 0x45	; 69
    3c7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c80:	6c 93       	st	X, r22
    _sentence[n++] = 0;
    3c82:	d9 01       	movw	r26, r18
    3c84:	a4 54       	subi	r26, 0x44	; 68
    3c86:	bf 4f       	sbci	r27, 0xFF	; 255
    3c88:	1c 92       	st	X, r1
    3c8a:	de 01       	movw	r26, r28
    3c8c:	a5 5a       	subi	r26, 0xA5	; 165
    3c8e:	be 4f       	sbci	r27, 0xFE	; 254
    3c90:	02 96       	adiw	r24, 0x02	; 2
    3c92:	8d 93       	st	X+, r24
    3c94:	9c 93       	st	X, r25
    (_term[_terms])[_nt++] = c;
    3c96:	9e 01       	movw	r18, r28
    3c98:	2d 59       	subi	r18, 0x9D	; 157
    3c9a:	3e 4f       	sbci	r19, 0xFE	; 254
    3c9c:	f9 01       	movw	r30, r18
    3c9e:	40 81       	ld	r20, Z
    3ca0:	51 81       	ldd	r21, Z+1	; 0x01
    3ca2:	de 01       	movw	r26, r28
    3ca4:	a7 54       	subi	r26, 0x47	; 71
    3ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca8:	8d 91       	ld	r24, X+
    3caa:	9c 91       	ld	r25, X
    3cac:	11 97       	sbiw	r26, 0x01	; 1
    3cae:	88 0f       	add	r24, r24
    3cb0:	99 1f       	adc	r25, r25
    3cb2:	8c 0f       	add	r24, r28
    3cb4:	9d 1f       	adc	r25, r29
    3cb6:	81 5e       	subi	r24, 0xE1	; 225
    3cb8:	9e 4f       	sbci	r25, 0xFE	; 254
    3cba:	fc 01       	movw	r30, r24
    3cbc:	80 81       	ld	r24, Z
    3cbe:	91 81       	ldd	r25, Z+1	; 0x01
    3cc0:	84 0f       	add	r24, r20
    3cc2:	95 1f       	adc	r25, r21
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	60 83       	st	Z, r22
    3cc8:	4f 5f       	subi	r20, 0xFF	; 255
    3cca:	5f 4f       	sbci	r21, 0xFF	; 255
    3ccc:	f9 01       	movw	r30, r18
    3cce:	51 83       	std	Z+1, r21	; 0x01
    3cd0:	40 83       	st	Z, r20
    (_term[_terms++])[_nt] = 0;
    3cd2:	2d 91       	ld	r18, X+
    3cd4:	3c 91       	ld	r19, X
    3cd6:	11 97       	sbiw	r26, 0x01	; 1
    3cd8:	c9 01       	movw	r24, r18
    3cda:	88 0f       	add	r24, r24
    3cdc:	99 1f       	adc	r25, r25
    3cde:	8c 0f       	add	r24, r28
    3ce0:	9d 1f       	adc	r25, r29
    3ce2:	81 5e       	subi	r24, 0xE1	; 225
    3ce4:	9e 4f       	sbci	r25, 0xFE	; 254
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	80 81       	ld	r24, Z
    3cea:	91 81       	ldd	r25, Z+1	; 0x01
    3cec:	84 0f       	add	r24, r20
    3cee:	95 1f       	adc	r25, r21
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	10 82       	st	Z, r1
    3cf4:	2f 5f       	subi	r18, 0xFF	; 255
    3cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf8:	2d 93       	st	X+, r18
    3cfa:	3c 93       	st	X, r19
    _state = 0;
    3cfc:	d8 01       	movw	r26, r16
    3cfe:	1d 92       	st	X+, r1
    3d00:	1c 92       	st	X, r1
    _parity = _parity - _dehex(c);
    3d02:	fe 01       	movw	r30, r28
    3d04:	ef 59       	subi	r30, 0x9F	; 159
    3d06:	fe 4f       	sbci	r31, 0xFE	; 254
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	26 2f       	mov	r18, r22
    3d0e:	33 27       	eor	r19, r19
    3d10:	27 fd       	sbrc	r18, 7
    3d12:	30 95       	com	r19
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3d14:	61 34       	cpi	r22, 0x41	; 65
    3d16:	1c f0       	brlt	.+6      	; 0x3d1e <_ZN4NMEA6decodeEc+0x31c>
    return int(a)-55;
    3d18:	27 53       	subi	r18, 0x37	; 55
    3d1a:	31 09       	sbc	r19, r1
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <_ZN4NMEA6decodeEc+0x320>
  }
  else {
    return int(a)-48;
    3d1e:	20 53       	subi	r18, 0x30	; 48
    3d20:	31 09       	sbc	r19, r1
    _sentence[n++] = c;
    _sentence[n++] = 0;
    (_term[_terms])[_nt++] = c;
    (_term[_terms++])[_nt] = 0;
    _state = 0;
    _parity = _parity - _dehex(c);
    3d22:	82 1b       	sub	r24, r18
    3d24:	93 0b       	sbc	r25, r19
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    3d2a:	89 2b       	or	r24, r25
    3d2c:	09 f0       	breq	.+2      	; 0x3d30 <_ZN4NMEA6decodeEc+0x32e>
    3d2e:	56 c1       	rjmp	.+684    	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    3d30:	88 81       	ld	r24, Y
    3d32:	99 81       	ldd	r25, Y+1	; 0x01
    3d34:	89 2b       	or	r24, r25
    3d36:	39 f4       	brne	.+14     	; 0x3d46 <_ZN4NMEA6decodeEc+0x344>
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e5 5a       	subi	r30, 0xA5	; 165
    3d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3e:	20 81       	ld	r18, Z
    3d40:	31 81       	ldd	r19, Z+1	; 0x01
    3d42:	c9 01       	movw	r24, r18
    3d44:	10 c0       	rjmp	.+32     	; 0x3d66 <_ZN4NMEA6decodeEc+0x364>
    3d46:	fe 01       	movw	r30, r28
    3d48:	e3 5a       	subi	r30, 0xA3	; 163
    3d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	06 97       	sbiw	r24, 0x06	; 6
    3d52:	91 f3       	breq	.-28     	; 0x3d38 <_ZN4NMEA6decodeEc+0x336>
    3d54:	43 c1       	rjmp	.+646    	; 0x3fdc <_ZN4NMEA6decodeEc+0x5da>

//
// public methods
//

int NMEA::decode(char c) {
    3d56:	fe 01       	movw	r30, r28
    3d58:	e8 0f       	add	r30, r24
    3d5a:	f9 1f       	adc	r31, r25
    3d5c:	df 01       	movw	r26, r30
    3d5e:	a5 54       	subi	r26, 0x45	; 69
    3d60:	bf 4f       	sbci	r27, 0xFF	; 255
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    3d62:	4c 91       	ld	r20, X
    3d64:	47 8b       	std	Z+23, r20	; 0x17
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	97 ff       	sbrs	r25, 7
    3d6a:	f5 cf       	rjmp	.-22     	; 0x3d56 <_ZN4NMEA6decodeEc+0x354>

//
// public methods
//

int NMEA::decode(char c) {
    3d6c:	a9 01       	movw	r20, r18
    3d6e:	41 50       	subi	r20, 0x01	; 1
    3d70:	51 09       	sbc	r21, r1
    3d72:	c9 01       	movw	r24, r18
    3d74:	37 ff       	sbrs	r19, 7
    3d76:	02 c0       	rjmp	.+4      	; 0x3d7c <_ZN4NMEA6decodeEc+0x37a>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e5 5a       	subi	r30, 0xA5	; 165
    3d80:	fe 4f       	sbci	r31, 0xFE	; 254
    3d82:	9a 01       	movw	r18, r20
    3d84:	28 1b       	sub	r18, r24
    3d86:	39 0b       	sbc	r19, r25
    3d88:	31 83       	std	Z+1, r19	; 0x01
    3d8a:	20 83       	st	Z, r18
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3d8c:	7e 01       	movw	r14, r28
    3d8e:	37 eb       	ldi	r19, 0xB7	; 183
    3d90:	e3 0e       	add	r14, r19
    3d92:	f1 1c       	adc	r15, r1
    3d94:	d7 01       	movw	r26, r14
    3d96:	1d 92       	st	X+, r1
    3d98:	1c 92       	st	X, r1
    3d9a:	b7 01       	movw	r22, r14
    3d9c:	8e 01       	movw	r16, r28
    3d9e:	07 54       	subi	r16, 0x47	; 71
    3da0:	1f 4f       	sbci	r17, 0xFF	; 255
	      	_nt = 0;
    3da2:	de 01       	movw	r26, r28
    3da4:	ad 59       	subi	r26, 0x9D	; 157
    3da6:	be 4f       	sbci	r27, 0xFE	; 254
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3da8:	31 c0       	rjmp	.+98     	; 0x3e0c <_ZN4NMEA6decodeEc+0x40a>
	      	_nt = 0;
    3daa:	11 96       	adiw	r26, 0x01	; 1
    3dac:	1c 92       	st	X, r1
    3dae:	1e 92       	st	-X, r1
	      	while ((_term[f_terms])[_nt]) {
    3db0:	08 c0       	rjmp	.+16     	; 0x3dc2 <_ZN4NMEA6decodeEc+0x3c0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3db2:	40 83       	st	Z, r20
	        	_nt++;
    3db4:	8d 91       	ld	r24, X+
    3db6:	9c 91       	ld	r25, X
    3db8:	11 97       	sbiw	r26, 0x01	; 1
    3dba:	01 96       	adiw	r24, 0x01	; 1
    3dbc:	11 96       	adiw	r26, 0x01	; 1
    3dbe:	9c 93       	st	X, r25
    3dc0:	8e 93       	st	-X, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3dc2:	fb 01       	movw	r30, r22
    3dc4:	80 81       	ld	r24, Z
    3dc6:	91 81       	ldd	r25, Z+1	; 0x01
    3dc8:	2d 91       	ld	r18, X+
    3dca:	3c 91       	ld	r19, X
    3dcc:	11 97       	sbiw	r26, 0x01	; 1
    3dce:	88 0f       	add	r24, r24
    3dd0:	99 1f       	adc	r25, r25
    3dd2:	8c 0f       	add	r24, r28
    3dd4:	9d 1f       	adc	r25, r29
    3dd6:	ac 01       	movw	r20, r24
    3dd8:	41 5e       	subi	r20, 0xE1	; 225
    3dda:	5e 4f       	sbci	r21, 0xFE	; 254
    3ddc:	fa 01       	movw	r30, r20
    3dde:	40 81       	ld	r20, Z
    3de0:	51 81       	ldd	r21, Z+1	; 0x01
    3de2:	42 0f       	add	r20, r18
    3de4:	53 1f       	adc	r21, r19
    3de6:	fa 01       	movw	r30, r20
    3de8:	40 81       	ld	r20, Z
    3dea:	85 58       	subi	r24, 0x85	; 133
    3dec:	9f 4f       	sbci	r25, 0xFF	; 255
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3dee:	fc 01       	movw	r30, r24
    3df0:	80 81       	ld	r24, Z
    3df2:	91 81       	ldd	r25, Z+1	; 0x01
    3df4:	82 0f       	add	r24, r18
    3df6:	93 1f       	adc	r25, r19
    3df8:	fc 01       	movw	r30, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3dfa:	41 11       	cpse	r20, r1
    3dfc:	da cf       	rjmp	.-76     	; 0x3db2 <_ZN4NMEA6decodeEc+0x3b0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
    3dfe:	10 82       	st	Z, r1
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3e00:	f7 01       	movw	r30, r14
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	01 96       	adiw	r24, 0x01	; 1
    3e08:	91 83       	std	Z+1, r25	; 0x01
    3e0a:	80 83       	st	Z, r24
    3e0c:	fb 01       	movw	r30, r22
    3e0e:	20 81       	ld	r18, Z
    3e10:	31 81       	ldd	r19, Z+1	; 0x01
    3e12:	f8 01       	movw	r30, r16
    3e14:	80 81       	ld	r24, Z
    3e16:	91 81       	ldd	r25, Z+1	; 0x01
    3e18:	28 17       	cp	r18, r24
    3e1a:	39 07       	cpc	r19, r25
    3e1c:	34 f2       	brlt	.-116    	; 0x3daa <_ZN4NMEA6decodeEc+0x3a8>
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
	      }
	      // when sentence is of datatype GPRMC
	      if (_gprmc_tag == 6) {
    3e1e:	fe 01       	movw	r30, r28
    3e20:	e3 5a       	subi	r30, 0xA3	; 163
    3e22:	fe 4f       	sbci	r31, 0xFE	; 254
    3e24:	80 81       	ld	r24, Z
    3e26:	91 81       	ldd	r25, Z+1	; 0x01
    3e28:	06 97       	sbiw	r24, 0x06	; 6
    3e2a:	09 f0       	breq	.+2      	; 0x3e2e <_ZN4NMEA6decodeEc+0x42c>
    3e2c:	da c0       	rjmp	.+436    	; 0x3fe2 <_ZN4NMEA6decodeEc+0x5e0>
	      	// store values of relevant GPRMC terms
	      	_gprmc_utc = _decimal(_term[1]);
    3e2e:	fe 01       	movw	r30, r28
    3e30:	ef 5d       	subi	r30, 0xDF	; 223
    3e32:	fe 4f       	sbci	r31, 0xFE	; 254
    3e34:	60 81       	ld	r22, Z
    3e36:	71 81       	ldd	r23, Z+1	; 0x01
    3e38:	ce 01       	movw	r24, r28
    3e3a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3e3e:	6a 83       	std	Y+2, r22	; 0x02
    3e40:	7b 83       	std	Y+3, r23	; 0x03
    3e42:	8c 83       	std	Y+4, r24	; 0x04
    3e44:	9d 83       	std	Y+5, r25	; 0x05
	      	_gprmc_status = (_term[2])[0];
    3e46:	fe 01       	movw	r30, r28
    3e48:	ed 5d       	subi	r30, 0xDD	; 221
    3e4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4c:	01 90       	ld	r0, Z+
    3e4e:	f0 81       	ld	r31, Z
    3e50:	e0 2d       	mov	r30, r0
    3e52:	80 81       	ld	r24, Z
    3e54:	8e 83       	std	Y+6, r24	; 0x06
	        // calculate signed degree-decimal value of latitude term
	        _gprmc_lat = _decimal(_term[3]) / 100.0;
    3e56:	fe 01       	movw	r30, r28
    3e58:	eb 5d       	subi	r30, 0xDB	; 219
    3e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	ce 01       	movw	r24, r28
    3e62:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	48 ec       	ldi	r20, 0xC8	; 200
    3e6c:	52 e4       	ldi	r21, 0x42	; 66
    3e6e:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    3e72:	7b 01       	movw	r14, r22
    3e74:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_lat);
    3e76:	7f 2d       	mov	r23, r15
    3e78:	80 2f       	mov	r24, r16
    3e7a:	91 2f       	mov	r25, r17
    3e7c:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <floor>
    3e80:	4b 01       	movw	r8, r22
    3e82:	5c 01       	movw	r10, r24
    3e84:	fe 01       	movw	r30, r28
    3e86:	eb 59       	subi	r30, 0x9B	; 155
    3e88:	fe 4f       	sbci	r31, 0xFE	; 254
    3e8a:	60 83       	st	Z, r22
    3e8c:	71 83       	std	Z+1, r23	; 0x01
    3e8e:	82 83       	std	Z+2, r24	; 0x02
    3e90:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_lat = (100.0 * (_gprmc_lat - _degs)) / 60.0;
    3e92:	9b 01       	movw	r18, r22
    3e94:	ac 01       	movw	r20, r24
    3e96:	6e 2d       	mov	r22, r14
    3e98:	7f 2d       	mov	r23, r15
    3e9a:	80 2f       	mov	r24, r16
    3e9c:	91 2f       	mov	r25, r17
    3e9e:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	48 ec       	ldi	r20, 0xC8	; 200
    3ea8:	52 e4       	ldi	r21, 0x42	; 66
    3eaa:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	40 e7       	ldi	r20, 0x70	; 112
    3eb4:	52 e4       	ldi	r21, 0x42	; 66
    3eb6:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
	        _gprmc_lat += _degs;
    3eba:	a5 01       	movw	r20, r10
    3ebc:	94 01       	movw	r18, r8
    3ebe:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    3ec2:	9b 01       	movw	r18, r22
    3ec4:	46 2f       	mov	r20, r22
    3ec6:	53 2f       	mov	r21, r19
    3ec8:	68 2f       	mov	r22, r24
    3eca:	79 2f       	mov	r23, r25
    3ecc:	4f 83       	std	Y+7, r20	; 0x07
    3ece:	58 87       	std	Y+8, r21	; 0x08
    3ed0:	69 87       	std	Y+9, r22	; 0x09
    3ed2:	7a 87       	std	Y+10, r23	; 0x0a
	        // southern hemisphere is negative-valued
	        if ((_term[4])[0] == 'S') {
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e9 5d       	subi	r30, 0xD9	; 217
    3ed8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eda:	01 90       	ld	r0, Z+
    3edc:	f0 81       	ld	r31, Z
    3ede:	e0 2d       	mov	r30, r0
    3ee0:	40 81       	ld	r20, Z
    3ee2:	43 35       	cpi	r20, 0x53	; 83
    3ee4:	59 f4       	brne	.+22     	; 0x3efc <_ZN4NMEA6decodeEc+0x4fa>
	          _gprmc_lat = 0.0 - _gprmc_lat;
    3ee6:	48 2f       	mov	r20, r24
    3ee8:	59 2f       	mov	r21, r25
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	70 e0       	ldi	r23, 0x00	; 0
    3eee:	cb 01       	movw	r24, r22
    3ef0:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3ef4:	6f 83       	std	Y+7, r22	; 0x07
    3ef6:	78 87       	std	Y+8, r23	; 0x08
    3ef8:	89 87       	std	Y+9, r24	; 0x09
    3efa:	9a 87       	std	Y+10, r25	; 0x0a
	        }
	        // calculate signed degree-decimal value of longitude term
	        _gprmc_long = _decimal(_term[5]) / 100.0;
    3efc:	fe 01       	movw	r30, r28
    3efe:	e7 5d       	subi	r30, 0xD7	; 215
    3f00:	fe 4f       	sbci	r31, 0xFE	; 254
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	ce 01       	movw	r24, r28
    3f08:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	48 ec       	ldi	r20, 0xC8	; 200
    3f12:	52 e4       	ldi	r21, 0x42	; 66
    3f14:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    3f18:	7b 01       	movw	r14, r22
    3f1a:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_long);
    3f1c:	7f 2d       	mov	r23, r15
    3f1e:	80 2f       	mov	r24, r16
    3f20:	91 2f       	mov	r25, r17
    3f22:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <floor>
    3f26:	4b 01       	movw	r8, r22
    3f28:	5c 01       	movw	r10, r24
    3f2a:	fe 01       	movw	r30, r28
    3f2c:	eb 59       	subi	r30, 0x9B	; 155
    3f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f30:	60 83       	st	Z, r22
    3f32:	71 83       	std	Z+1, r23	; 0x01
    3f34:	82 83       	std	Z+2, r24	; 0x02
    3f36:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_long = (100.0 * (_gprmc_long - _degs)) / 60.0;
    3f38:	9b 01       	movw	r18, r22
    3f3a:	ac 01       	movw	r20, r24
    3f3c:	6e 2d       	mov	r22, r14
    3f3e:	7f 2d       	mov	r23, r15
    3f40:	80 2f       	mov	r24, r16
    3f42:	91 2f       	mov	r25, r17
    3f44:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	48 ec       	ldi	r20, 0xC8	; 200
    3f4e:	52 e4       	ldi	r21, 0x42	; 66
    3f50:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	40 e7       	ldi	r20, 0x70	; 112
    3f5a:	52 e4       	ldi	r21, 0x42	; 66
    3f5c:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
	        _gprmc_long += _degs;
    3f60:	a5 01       	movw	r20, r10
    3f62:	94 01       	movw	r18, r8
    3f64:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    3f68:	9b 01       	movw	r18, r22
    3f6a:	46 2f       	mov	r20, r22
    3f6c:	53 2f       	mov	r21, r19
    3f6e:	68 2f       	mov	r22, r24
    3f70:	79 2f       	mov	r23, r25
    3f72:	4b 87       	std	Y+11, r20	; 0x0b
    3f74:	5c 87       	std	Y+12, r21	; 0x0c
    3f76:	6d 87       	std	Y+13, r22	; 0x0d
    3f78:	7e 87       	std	Y+14, r23	; 0x0e
	        // western hemisphere is negative-valued
	        if ((_term[6])[0] == 'W') {
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e5 5d       	subi	r30, 0xD5	; 213
    3f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f80:	01 90       	ld	r0, Z+
    3f82:	f0 81       	ld	r31, Z
    3f84:	e0 2d       	mov	r30, r0
    3f86:	40 81       	ld	r20, Z
    3f88:	47 35       	cpi	r20, 0x57	; 87
    3f8a:	59 f4       	brne	.+22     	; 0x3fa2 <_ZN4NMEA6decodeEc+0x5a0>
	          _gprmc_long = 0.0 - _gprmc_long;
    3f8c:	48 2f       	mov	r20, r24
    3f8e:	59 2f       	mov	r21, r25
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	70 e0       	ldi	r23, 0x00	; 0
    3f94:	cb 01       	movw	r24, r22
    3f96:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    3f9a:	6b 87       	std	Y+11, r22	; 0x0b
    3f9c:	7c 87       	std	Y+12, r23	; 0x0c
    3f9e:	8d 87       	std	Y+13, r24	; 0x0d
    3fa0:	9e 87       	std	Y+14, r25	; 0x0e
	        }
	        _gprmc_speed = _decimal(_term[7]);
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e3 5d       	subi	r30, 0xD3	; 211
    3fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa8:	60 81       	ld	r22, Z
    3faa:	71 81       	ldd	r23, Z+1	; 0x01
    3fac:	ce 01       	movw	r24, r28
    3fae:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3fb2:	6f 87       	std	Y+15, r22	; 0x0f
    3fb4:	78 8b       	std	Y+16, r23	; 0x10
    3fb6:	89 8b       	std	Y+17, r24	; 0x11
    3fb8:	9a 8b       	std	Y+18, r25	; 0x12
	        _gprmc_angle = _decimal(_term[8]);
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e1 5d       	subi	r30, 0xD1	; 209
    3fbe:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc0:	60 81       	ld	r22, Z
    3fc2:	71 81       	ldd	r23, Z+1	; 0x01
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_ZN4NMEA8_decimalEPc>
    3fca:	6b 8b       	std	Y+19, r22	; 0x13
    3fcc:	7c 8b       	std	Y+20, r23	; 0x14
    3fce:	8d 8b       	std	Y+21, r24	; 0x15
    3fd0:	9e 8b       	std	Y+22, r25	; 0x16
    3fd2:	07 c0       	rjmp	.+14     	; 0x3fe2 <_ZN4NMEA6decodeEc+0x5e0>
      	return 1;
      }
    }
    break;
  default:
    _state = 0;
    3fd4:	c1 5a       	subi	r28, 0xA1	; 161
    3fd6:	de 4f       	sbci	r29, 0xFE	; 254
    3fd8:	19 82       	std	Y+1, r1	; 0x01
    3fda:	18 82       	st	Y, r1
    break;
  }
  return 0;
    3fdc:	20 e0       	ldi	r18, 0x00	; 0
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	02 c0       	rjmp	.+4      	; 0x3fe6 <_ZN4NMEA6decodeEc+0x5e4>
	        }
	        _gprmc_speed = _decimal(_term[7]);
	        _gprmc_angle = _decimal(_term[8]);
	      }
      	// sentence accepted!
      	return 1;
    3fe2:	21 e0       	ldi	r18, 0x01	; 1
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
  default:
    _state = 0;
    break;
  }
  return 0;
}
    3fe6:	c9 01       	movw	r24, r18
    3fe8:	df 91       	pop	r29
    3fea:	cf 91       	pop	r28
    3fec:	1f 91       	pop	r17
    3fee:	0f 91       	pop	r16
    3ff0:	ff 90       	pop	r15
    3ff2:	ef 90       	pop	r14
    3ff4:	bf 90       	pop	r11
    3ff6:	af 90       	pop	r10
    3ff8:	9f 90       	pop	r9
    3ffa:	8f 90       	pop	r8
    3ffc:	08 95       	ret

00003ffe <_ZN11FlexiTimer23setEmdPFvvE>:
/**
 * @param resolution
 *   0.001 implies a 1 ms (1/1000s = 0.001s = 1ms) resolution. Therefore,
 *   0.0005 implies a 0.5 ms (1/2000s) resolution. And so on.
 */
void FlexiTimer2::set(unsigned long units, double resolution, void (*f)()) {
    3ffe:	cf 92       	push	r12
    4000:	df 92       	push	r13
    4002:	ef 92       	push	r14
    4004:	ff 92       	push	r15
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	6b 01       	movw	r12, r22
    400c:	7c 01       	movw	r14, r24
    400e:	ca 01       	movw	r24, r20
    4010:	b9 01       	movw	r22, r18
	float prescaler = 0.0;
	
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TIMSK2 &= ~(1<<TOIE2);
    4012:	20 91 70 00 	lds	r18, 0x0070
    4016:	2e 7f       	andi	r18, 0xFE	; 254
    4018:	20 93 70 00 	sts	0x0070, r18
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    401c:	20 91 b0 00 	lds	r18, 0x00B0
    4020:	2c 7f       	andi	r18, 0xFC	; 252
    4022:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B &= ~(1<<WGM22);
    4026:	20 91 b1 00 	lds	r18, 0x00B1
    402a:	27 7f       	andi	r18, 0xF7	; 247
    402c:	20 93 b1 00 	sts	0x00B1, r18
	ASSR &= ~(1<<AS2);
    4030:	20 91 b6 00 	lds	r18, 0x00B6
    4034:	2f 7d       	andi	r18, 0xDF	; 223
    4036:	20 93 b6 00 	sts	0x00B6, r18
	TIMSK2 &= ~(1<<OCIE2A);
    403a:	20 91 70 00 	lds	r18, 0x0070
    403e:	2d 7f       	andi	r18, 0xFD	; 253
    4040:	20 93 70 00 	sts	0x0070, r18
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    4044:	20 91 b1 00 	lds	r18, 0x00B1
    4048:	24 60       	ori	r18, 0x04	; 4
    404a:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    404e:	20 91 b1 00 	lds	r18, 0x00B1
    4052:	2c 7f       	andi	r18, 0xFC	; 252
    4054:	20 93 b1 00 	sts	0x00B1, r18
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * resolution / prescaler);
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	34 e2       	ldi	r19, 0x24	; 36
    405c:	44 e7       	ldi	r20, 0x74	; 116
    405e:	5b e4       	ldi	r21, 0x4B	; 75
    4060:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e8       	ldi	r20, 0x80	; 128
    406a:	5c e3       	ldi	r21, 0x3C	; 60
    406c:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    4070:	0e 94 7a 42 	call	0x84f4	; 0x84f4 <__fixsfsi>
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	91 e0       	ldi	r25, 0x01	; 1
    4078:	86 1b       	sub	r24, r22
    407a:	97 0b       	sbc	r25, r23
    407c:	90 93 23 09 	sts	0x0923, r25
    4080:	80 93 22 09 	sts	0x0922, r24
	
	if (units == 0)
    4084:	c1 14       	cp	r12, r1
    4086:	d1 04       	cpc	r13, r1
    4088:	e1 04       	cpc	r14, r1
    408a:	f1 04       	cpc	r15, r1
    408c:	69 f4       	brne	.+26     	; 0x40a8 <_ZN11FlexiTimer23setEmdPFvvE+0xaa>
		time_units = 1;
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	a0 e0       	ldi	r26, 0x00	; 0
    4094:	b0 e0       	ldi	r27, 0x00	; 0
    4096:	80 93 2b 09 	sts	0x092B, r24
    409a:	90 93 2c 09 	sts	0x092C, r25
    409e:	a0 93 2d 09 	sts	0x092D, r26
    40a2:	b0 93 2e 09 	sts	0x092E, r27
    40a6:	08 c0       	rjmp	.+16     	; 0x40b8 <_ZN11FlexiTimer23setEmdPFvvE+0xba>
	else
		time_units = units;
    40a8:	c0 92 2b 09 	sts	0x092B, r12
    40ac:	d0 92 2c 09 	sts	0x092C, r13
    40b0:	e0 92 2d 09 	sts	0x092D, r14
    40b4:	f0 92 2e 09 	sts	0x092E, r15
		
	func = f;
    40b8:	10 93 2a 09 	sts	0x092A, r17
    40bc:	00 93 29 09 	sts	0x0929, r16
}
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	ff 90       	pop	r15
    40c6:	ef 90       	pop	r14
    40c8:	df 90       	pop	r13
    40ca:	cf 90       	pop	r12
    40cc:	08 95       	ret

000040ce <_ZN11FlexiTimer23setEmPFvvE>:
void (*FlexiTimer2::func)();
volatile unsigned long FlexiTimer2::count;
volatile char FlexiTimer2::overflowing;
volatile unsigned int FlexiTimer2::tcnt2;

void FlexiTimer2::set(unsigned long ms, void (*f)()) {
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    FlexiTimer2::set(ms, 0.001, f);
    40d2:	8a 01       	movw	r16, r20
    40d4:	2f e6       	ldi	r18, 0x6F	; 111
    40d6:	32 e1       	ldi	r19, 0x12	; 18
    40d8:	43 e8       	ldi	r20, 0x83	; 131
    40da:	5a e3       	ldi	r21, 0x3A	; 58
    40dc:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <_ZN11FlexiTimer23setEmdPFvvE>
}
    40e0:	1f 91       	pop	r17
    40e2:	0f 91       	pop	r16
    40e4:	08 95       	ret

000040e6 <_ZN11FlexiTimer25startEv>:
		
	func = f;
}

void FlexiTimer2::start() {
	count = 0;
    40e6:	10 92 25 09 	sts	0x0925, r1
    40ea:	10 92 26 09 	sts	0x0926, r1
    40ee:	10 92 27 09 	sts	0x0927, r1
    40f2:	10 92 28 09 	sts	0x0928, r1
	overflowing = 0;
    40f6:	10 92 24 09 	sts	0x0924, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = tcnt2;
    40fa:	80 91 22 09 	lds	r24, 0x0922
    40fe:	90 91 23 09 	lds	r25, 0x0923
    4102:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    4106:	e0 e7       	ldi	r30, 0x70	; 112
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	81 60       	ori	r24, 0x01	; 1
    410e:	80 83       	st	Z, r24
    4110:	08 95       	ret

00004112 <_ZN11FlexiTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void FlexiTimer2::_overflow() {
	count += 1;
    4112:	80 91 25 09 	lds	r24, 0x0925
    4116:	90 91 26 09 	lds	r25, 0x0926
    411a:	a0 91 27 09 	lds	r26, 0x0927
    411e:	b0 91 28 09 	lds	r27, 0x0928
    4122:	01 96       	adiw	r24, 0x01	; 1
    4124:	a1 1d       	adc	r26, r1
    4126:	b1 1d       	adc	r27, r1
    4128:	80 93 25 09 	sts	0x0925, r24
    412c:	90 93 26 09 	sts	0x0926, r25
    4130:	a0 93 27 09 	sts	0x0927, r26
    4134:	b0 93 28 09 	sts	0x0928, r27
	
	if (count >= time_units && !overflowing) {
    4138:	40 91 25 09 	lds	r20, 0x0925
    413c:	50 91 26 09 	lds	r21, 0x0926
    4140:	60 91 27 09 	lds	r22, 0x0927
    4144:	70 91 28 09 	lds	r23, 0x0928
    4148:	80 91 2b 09 	lds	r24, 0x092B
    414c:	90 91 2c 09 	lds	r25, 0x092C
    4150:	a0 91 2d 09 	lds	r26, 0x092D
    4154:	b0 91 2e 09 	lds	r27, 0x092E
    4158:	48 17       	cp	r20, r24
    415a:	59 07       	cpc	r21, r25
    415c:	6a 07       	cpc	r22, r26
    415e:	7b 07       	cpc	r23, r27
    4160:	b0 f0       	brcs	.+44     	; 0x418e <_ZN11FlexiTimer29_overflowEv+0x7c>
    4162:	80 91 24 09 	lds	r24, 0x0924
    4166:	81 11       	cpse	r24, r1
    4168:	12 c0       	rjmp	.+36     	; 0x418e <_ZN11FlexiTimer29_overflowEv+0x7c>
		overflowing = 1;
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	80 93 24 09 	sts	0x0924, r24
		count = 0;
    4170:	10 92 25 09 	sts	0x0925, r1
    4174:	10 92 26 09 	sts	0x0926, r1
    4178:	10 92 27 09 	sts	0x0927, r1
    417c:	10 92 28 09 	sts	0x0928, r1
		(*func)();
    4180:	e0 91 29 09 	lds	r30, 0x0929
    4184:	f0 91 2a 09 	lds	r31, 0x092A
    4188:	09 95       	icall
		overflowing = 0;
    418a:	10 92 24 09 	sts	0x0924, r1
    418e:	08 95       	ret

00004190 <__vector_15>:
	}
}

ISR(TIMER2_OVF_vect) {
    4190:	1f 92       	push	r1
    4192:	0f 92       	push	r0
    4194:	0f b6       	in	r0, 0x3f	; 63
    4196:	0f 92       	push	r0
    4198:	11 24       	eor	r1, r1
    419a:	0b b6       	in	r0, 0x3b	; 59
    419c:	0f 92       	push	r0
    419e:	1b be       	out	0x3b, r1	; 59
    41a0:	2f 93       	push	r18
    41a2:	3f 93       	push	r19
    41a4:	4f 93       	push	r20
    41a6:	5f 93       	push	r21
    41a8:	6f 93       	push	r22
    41aa:	7f 93       	push	r23
    41ac:	8f 93       	push	r24
    41ae:	9f 93       	push	r25
    41b0:	af 93       	push	r26
    41b2:	bf 93       	push	r27
    41b4:	ef 93       	push	r30
    41b6:	ff 93       	push	r31
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || (__AVR_ATmega1280__)
	TCNT2 = FlexiTimer2::tcnt2;
    41b8:	80 91 22 09 	lds	r24, 0x0922
    41bc:	90 91 23 09 	lds	r25, 0x0923
    41c0:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega128__)
	TCNT2 = FlexiTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = FlexiTimer2::tcnt2;
#endif
	FlexiTimer2::_overflow();
    41c4:	0e 94 89 20 	call	0x4112	; 0x4112 <_ZN11FlexiTimer29_overflowEv>
}
    41c8:	ff 91       	pop	r31
    41ca:	ef 91       	pop	r30
    41cc:	bf 91       	pop	r27
    41ce:	af 91       	pop	r26
    41d0:	9f 91       	pop	r25
    41d2:	8f 91       	pop	r24
    41d4:	7f 91       	pop	r23
    41d6:	6f 91       	pop	r22
    41d8:	5f 91       	pop	r21
    41da:	4f 91       	pop	r20
    41dc:	3f 91       	pop	r19
    41de:	2f 91       	pop	r18
    41e0:	0f 90       	pop	r0
    41e2:	0b be       	out	0x3b, r0	; 59
    41e4:	0f 90       	pop	r0
    41e6:	0f be       	out	0x3f, r0	; 63
    41e8:	0f 90       	pop	r0
    41ea:	1f 90       	pop	r1
    41ec:	18 95       	reti

000041ee <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
    41ee:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
    41f0:	0c 94 31 47 	jmp	0x8e62	; 0x8e62 <__eerd_byte_m1280>

000041f4 <_ZN11EEPROMClass5writeEih>:
}

void EEPROMClass::write(int address, uint8_t value)
{
    41f4:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
    41f6:	64 2f       	mov	r22, r20
    41f8:	0c 94 39 47 	jmp	0x8e72	; 0x8e72 <__eewr_byte_m1280>

000041fc <_ZN13AltSoftSerial4readEv>:

int AltSoftSerial::read(void)
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
    41fc:	90 91 d4 09 	lds	r25, 0x09D4
	tail = rx_buffer_tail;
    4200:	80 91 d3 09 	lds	r24, 0x09D3
	if (head == tail) return -1;
    4204:	98 17       	cp	r25, r24
    4206:	69 f0       	breq	.+26     	; 0x4222 <_ZN13AltSoftSerial4readEv+0x26>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    4208:	8f 5f       	subi	r24, 0xFF	; 255
    420a:	80 35       	cpi	r24, 0x50	; 80
    420c:	08 f0       	brcs	.+2      	; 0x4210 <_ZN13AltSoftSerial4readEv+0x14>
    420e:	80 e0       	ldi	r24, 0x00	; 0
	out = rx_buffer[tail];
    4210:	e8 2f       	mov	r30, r24
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	ed 57       	subi	r30, 0x7D	; 125
    4216:	f6 4f       	sbci	r31, 0xF6	; 246
    4218:	20 81       	ld	r18, Z
	rx_buffer_tail = tail;
    421a:	80 93 d3 09 	sts	0x09D3, r24
	return out;
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <_ZN13AltSoftSerial4readEv+0x2a>
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4222:	2f ef       	ldi	r18, 0xFF	; 255
    4224:	3f ef       	ldi	r19, 0xFF	; 255
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	out = rx_buffer[tail];
	rx_buffer_tail = tail;
	return out;
}
    4226:	c9 01       	movw	r24, r18
    4228:	08 95       	ret

0000422a <_ZN13AltSoftSerial4peekEv>:

int AltSoftSerial::peek(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    422a:	80 91 d4 09 	lds	r24, 0x09D4
	tail = rx_buffer_tail;
    422e:	e0 91 d3 09 	lds	r30, 0x09D3
	if (head == tail) return -1;
    4232:	8e 17       	cp	r24, r30
    4234:	31 f0       	breq	.+12     	; 0x4242 <_ZN13AltSoftSerial4peekEv+0x18>
	return rx_buffer[tail];
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	ed 57       	subi	r30, 0x7D	; 125
    423a:	f6 4f       	sbci	r31, 0xF6	; 246
    423c:	20 81       	ld	r18, Z
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	02 c0       	rjmp	.+4      	; 0x4246 <_ZN13AltSoftSerial4peekEv+0x1c>
{
	uint8_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    4242:	2f ef       	ldi	r18, 0xFF	; 255
    4244:	3f ef       	ldi	r19, 0xFF	; 255
	return rx_buffer[tail];
}
    4246:	c9 01       	movw	r24, r18
    4248:	08 95       	ret

0000424a <_ZN13AltSoftSerial9availableEv>:

int AltSoftSerial::available(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    424a:	50 91 d4 09 	lds	r21, 0x09D4
	tail = rx_buffer_tail;
    424e:	40 91 d3 09 	lds	r20, 0x09D3
    4252:	25 2f       	mov	r18, r21
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	84 2f       	mov	r24, r20
    4258:	90 e0       	ldi	r25, 0x00	; 0
	if (head >= tail) return head - tail;
    425a:	54 17       	cp	r21, r20
    425c:	08 f0       	brcs	.+2      	; 0x4260 <_ZN13AltSoftSerial9availableEv+0x16>
    425e:	02 c0       	rjmp	.+4      	; 0x4264 <_ZN13AltSoftSerial9availableEv+0x1a>
	return RX_BUFFER_SIZE + head - tail;
    4260:	20 5b       	subi	r18, 0xB0	; 176
    4262:	3f 4f       	sbci	r19, 0xFF	; 255
    4264:	28 1b       	sub	r18, r24
    4266:	39 0b       	sbc	r19, r25
}
    4268:	c9 01       	movw	r24, r18
    426a:	08 95       	ret

0000426c <_ZN13AltSoftSerial4initEm>:
#ifndef INPUT_PULLUP
#define INPUT_PULLUP INPUT
#endif

void AltSoftSerial::init(uint32_t cycles_per_bit)
{
    426c:	9b 01       	movw	r18, r22
    426e:	ac 01       	movw	r20, r24
	if (cycles_per_bit < 7085) {
    4270:	2d 3a       	cpi	r18, 0xAD	; 173
    4272:	8b e1       	ldi	r24, 0x1B	; 27
    4274:	38 07       	cpc	r19, r24
    4276:	41 05       	cpc	r20, r1
    4278:	51 05       	cpc	r21, r1
    427a:	30 f4       	brcc	.+12     	; 0x4288 <_ZN13AltSoftSerial4initEm+0x1c>
		CONFIG_TIMER_NOPRESCALE();
    427c:	10 92 73 00 	sts	0x0073, r1
    4280:	10 92 20 01 	sts	0x0120, r1
    4284:	81 e8       	ldi	r24, 0x81	; 129
    4286:	12 c0       	rjmp	.+36     	; 0x42ac <_ZN13AltSoftSerial4initEm+0x40>
	} else {
		cycles_per_bit /= 8;
    4288:	63 e0       	ldi	r22, 0x03	; 3
    428a:	56 95       	lsr	r21
    428c:	47 95       	ror	r20
    428e:	37 95       	ror	r19
    4290:	27 95       	ror	r18
    4292:	6a 95       	dec	r22
    4294:	d1 f7       	brne	.-12     	; 0x428a <_ZN13AltSoftSerial4initEm+0x1e>
		if (cycles_per_bit < 7085) {
    4296:	2d 3a       	cpi	r18, 0xAD	; 173
    4298:	8b e1       	ldi	r24, 0x1B	; 27
    429a:	38 07       	cpc	r19, r24
    429c:	41 05       	cpc	r20, r1
    429e:	51 05       	cpc	r21, r1
    42a0:	b0 f5       	brcc	.+108    	; 0x430e <_ZN13AltSoftSerial4initEm+0xa2>
			CONFIG_TIMER_PRESCALE_8();
    42a2:	10 92 73 00 	sts	0x0073, r1
    42a6:	10 92 20 01 	sts	0x0120, r1
    42aa:	82 e8       	ldi	r24, 0x82	; 130
    42ac:	80 93 21 01 	sts	0x0121, r24
		} else {
			return; // minimum 283 baud at 16 MHz clock
		}
	}
	ticks_per_bit = cycles_per_bit;
    42b0:	30 93 d8 09 	sts	0x09D8, r19
    42b4:	20 93 d7 09 	sts	0x09D7, r18
	rx_stop_ticks = cycles_per_bit * 37 / 4;
    42b8:	a5 e2       	ldi	r26, 0x25	; 37
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    42c0:	22 e0       	ldi	r18, 0x02	; 2
    42c2:	96 95       	lsr	r25
    42c4:	87 95       	ror	r24
    42c6:	77 95       	ror	r23
    42c8:	67 95       	ror	r22
    42ca:	2a 95       	dec	r18
    42cc:	d1 f7       	brne	.-12     	; 0x42c2 <_ZN13AltSoftSerial4initEm+0x56>
    42ce:	70 93 da 09 	sts	0x09DA, r23
    42d2:	60 93 d9 09 	sts	0x09D9, r22
	pinMode(INPUT_CAPTURE_PIN, INPUT_PULLUP);
    42d6:	62 e0       	ldi	r22, 0x02	; 2
    42d8:	80 e3       	ldi	r24, 0x30	; 48
    42da:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	digitalWrite(OUTPUT_COMPARE_A_PIN, HIGH);
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	8e e2       	ldi	r24, 0x2E	; 46
    42e2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
	pinMode(OUTPUT_COMPARE_A_PIN, OUTPUT);
    42e6:	61 e0       	ldi	r22, 0x01	; 1
    42e8:	8e e2       	ldi	r24, 0x2E	; 46
    42ea:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	rx_count = 0;
    42ee:	10 92 d5 09 	sts	0x09D5, r1
	rx_buffer_head = 0;
    42f2:	10 92 d4 09 	sts	0x09D4, r1
	rx_buffer_tail = 0;
    42f6:	10 92 d3 09 	sts	0x09D3, r1
	tx_state = 0;
    42fa:	10 92 82 09 	sts	0x0982, r1
	tx_buffer_head = 0;
    42fe:	10 92 81 09 	sts	0x0981, r1
	tx_buffer_tail = 0;
    4302:	10 92 80 09 	sts	0x0980, r1
	ENABLE_INT_INPUT_CAPTURE();
    4306:	80 e2       	ldi	r24, 0x20	; 32
    4308:	8a bb       	out	0x1a, r24	; 26
    430a:	80 93 73 00 	sts	0x0073, r24
    430e:	08 95       	ret

00004310 <_ZN13AltSoftSerial9writeByteEh>:

void AltSoftSerial::writeByte(uint8_t b)
{
	uint8_t intr_state, head;

	head = tx_buffer_head + 1;
    4310:	90 91 81 09 	lds	r25, 0x0981
    4314:	9f 5f       	subi	r25, 0xFF	; 255
	if (head >= TX_BUFFER_SIZE) head = 0;
    4316:	94 34       	cpi	r25, 0x44	; 68
    4318:	08 f0       	brcs	.+2      	; 0x431c <_ZN13AltSoftSerial9writeByteEh+0xc>
    431a:	90 e0       	ldi	r25, 0x00	; 0
	while (tx_buffer_tail == head) ; // wait until space in buffer
    431c:	20 91 80 09 	lds	r18, 0x0980
    4320:	29 17       	cp	r18, r25
    4322:	e1 f3       	breq	.-8      	; 0x431c <_ZN13AltSoftSerial9writeByteEh+0xc>
	intr_state = SREG;
    4324:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4326:	f8 94       	cli
	if (tx_state) {
    4328:	30 91 82 09 	lds	r19, 0x0982
    432c:	33 23       	and	r19, r19
    432e:	41 f0       	breq	.+16     	; 0x4340 <_ZN13AltSoftSerial9writeByteEh+0x30>
		tx_buffer[head] = b;
    4330:	e9 2f       	mov	r30, r25
    4332:	f0 e0       	ldi	r31, 0x00	; 0
    4334:	e0 5d       	subi	r30, 0xD0	; 208
    4336:	f6 4f       	sbci	r31, 0xF6	; 246
    4338:	80 83       	st	Z, r24
		tx_buffer_head = head;
    433a:	90 93 81 09 	sts	0x0981, r25
    433e:	1d c0       	rjmp	.+58     	; 0x437a <_ZN13AltSoftSerial9writeByteEh+0x6a>
	} else {
		tx_state = 1;
    4340:	91 e0       	ldi	r25, 0x01	; 1
    4342:	90 93 82 09 	sts	0x0982, r25
		tx_byte = b;
    4346:	80 93 db 09 	sts	0x09DB, r24
		tx_bit = 0;
    434a:	10 92 dc 09 	sts	0x09DC, r1
		ENABLE_INT_COMPARE_A();
    434e:	82 e0       	ldi	r24, 0x02	; 2
    4350:	8a bb       	out	0x1a, r24	; 26
    4352:	80 91 73 00 	lds	r24, 0x0073
    4356:	82 60       	ori	r24, 0x02	; 2
    4358:	80 93 73 00 	sts	0x0073, r24
		CONFIG_MATCH_CLEAR();
    435c:	80 91 20 01 	lds	r24, 0x0120
    4360:	8f 73       	andi	r24, 0x3F	; 63
    4362:	80 68       	ori	r24, 0x80	; 128
    4364:	80 93 20 01 	sts	0x0120, r24
		SET_COMPARE_A(GET_TIMER_COUNT() + 16);
    4368:	80 91 24 01 	lds	r24, 0x0124
    436c:	90 91 25 01 	lds	r25, 0x0125
    4370:	40 96       	adiw	r24, 0x10	; 16
    4372:	90 93 29 01 	sts	0x0129, r25
    4376:	80 93 28 01 	sts	0x0128, r24
	}
	SREG = intr_state;
    437a:	2f bf       	out	0x3f, r18	; 63
    437c:	08 95       	ret

0000437e <_ZN13AltSoftSerial5writeEh>:
    437e:	86 2f       	mov	r24, r22
    4380:	0e 94 88 21 	call	0x4310	; 0x4310 <_ZN13AltSoftSerial9writeByteEh>
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	90 e0       	ldi	r25, 0x00	; 0
    4388:	08 95       	ret

0000438a <__vector_47>:
}


ISR(COMPARE_A_INTERRUPT)
{
    438a:	1f 92       	push	r1
    438c:	0f 92       	push	r0
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	0f 92       	push	r0
    4392:	11 24       	eor	r1, r1
    4394:	0b b6       	in	r0, 0x3b	; 59
    4396:	0f 92       	push	r0
    4398:	1b be       	out	0x3b, r1	; 59
    439a:	2f 93       	push	r18
    439c:	3f 93       	push	r19
    439e:	4f 93       	push	r20
    43a0:	5f 93       	push	r21
    43a2:	6f 93       	push	r22
    43a4:	7f 93       	push	r23
    43a6:	8f 93       	push	r24
    43a8:	9f 93       	push	r25
    43aa:	ef 93       	push	r30
    43ac:	ff 93       	push	r31
	uint8_t state, byte, bit, head, tail;
	uint16_t target;

	state = tx_state;
    43ae:	40 91 82 09 	lds	r20, 0x0982
	byte = tx_byte;
    43b2:	50 91 db 09 	lds	r21, 0x09DB
	target = GET_COMPARE_A();
    43b6:	80 91 28 01 	lds	r24, 0x0128
    43ba:	90 91 29 01 	lds	r25, 0x0129
	while (state < 9) {
		target += ticks_per_bit;
    43be:	20 91 d7 09 	lds	r18, 0x09D7
    43c2:	30 91 d8 09 	lds	r19, 0x09D8
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
    43c6:	70 91 dc 09 	lds	r23, 0x09DC
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    43ca:	1d c0       	rjmp	.+58     	; 0x4406 <__vector_47+0x7c>
		target += ticks_per_bit;
    43cc:	82 0f       	add	r24, r18
    43ce:	93 1f       	adc	r25, r19
		bit = byte & 1;
    43d0:	65 2f       	mov	r22, r21
    43d2:	61 70       	andi	r22, 0x01	; 1
		byte >>= 1;
    43d4:	56 95       	lsr	r21
		state++;
    43d6:	4f 5f       	subi	r20, 0xFF	; 255
		if (bit != tx_bit) {
    43d8:	67 17       	cp	r22, r23
    43da:	a9 f0       	breq	.+42     	; 0x4406 <__vector_47+0x7c>
			if (bit) {
				CONFIG_MATCH_SET();
    43dc:	20 91 20 01 	lds	r18, 0x0120
		target += ticks_per_bit;
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
			if (bit) {
    43e0:	66 23       	and	r22, r22
    43e2:	11 f0       	breq	.+4      	; 0x43e8 <__vector_47+0x5e>
				CONFIG_MATCH_SET();
    43e4:	20 6c       	ori	r18, 0xC0	; 192
    43e6:	02 c0       	rjmp	.+4      	; 0x43ec <__vector_47+0x62>
			} else {
				CONFIG_MATCH_CLEAR();
    43e8:	2f 73       	andi	r18, 0x3F	; 63
    43ea:	20 68       	ori	r18, 0x80	; 128
    43ec:	20 93 20 01 	sts	0x0120, r18
			}
			SET_COMPARE_A(target);
    43f0:	90 93 29 01 	sts	0x0129, r25
    43f4:	80 93 28 01 	sts	0x0128, r24
			tx_bit = bit;
    43f8:	60 93 dc 09 	sts	0x09DC, r22
			tx_byte = byte;
    43fc:	50 93 db 09 	sts	0x09DB, r21
			tx_state = state;
    4400:	40 93 82 09 	sts	0x0982, r20
			// TODO: how to detect timing_error?
			return;
    4404:	3f c0       	rjmp	.+126    	; 0x4484 <__vector_47+0xfa>
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    4406:	49 30       	cpi	r20, 0x09	; 9
    4408:	08 f3       	brcs	.-62     	; 0x43cc <__vector_47+0x42>
			tx_state = state;
			// TODO: how to detect timing_error?
			return;
		}
	}
	if (state == 9) {
    440a:	49 30       	cpi	r20, 0x09	; 9
    440c:	39 f4       	brne	.+14     	; 0x441c <__vector_47+0x92>
		tx_state = 10;
    440e:	2a e0       	ldi	r18, 0x0A	; 10
    4410:	20 93 82 09 	sts	0x0982, r18
		CONFIG_MATCH_SET();
    4414:	20 91 20 01 	lds	r18, 0x0120
    4418:	20 6c       	ori	r18, 0xC0	; 192
    441a:	28 c0       	rjmp	.+80     	; 0x446c <__vector_47+0xe2>
		SET_COMPARE_A(target + ticks_per_bit);
		return;
	}
	head = tx_buffer_head;
    441c:	20 91 81 09 	lds	r18, 0x0981
	tail = tx_buffer_tail;
    4420:	e0 91 80 09 	lds	r30, 0x0980
	if (head == tail) {
    4424:	2e 13       	cpse	r18, r30
    4426:	0d c0       	rjmp	.+26     	; 0x4442 <__vector_47+0xb8>
		tx_state = 0;
    4428:	10 92 82 09 	sts	0x0982, r1
		CONFIG_MATCH_NORMAL();
    442c:	80 91 20 01 	lds	r24, 0x0120
    4430:	8f 73       	andi	r24, 0x3F	; 63
    4432:	80 93 20 01 	sts	0x0120, r24
		DISABLE_INT_COMPARE_A();
    4436:	80 91 73 00 	lds	r24, 0x0073
    443a:	8d 7f       	andi	r24, 0xFD	; 253
    443c:	80 93 73 00 	sts	0x0073, r24
    4440:	21 c0       	rjmp	.+66     	; 0x4484 <__vector_47+0xfa>
	} else {
		tx_state = 1;
    4442:	21 e0       	ldi	r18, 0x01	; 1
    4444:	20 93 82 09 	sts	0x0982, r18
		if (++tail >= TX_BUFFER_SIZE) tail = 0;
    4448:	ef 5f       	subi	r30, 0xFF	; 255
    444a:	e4 34       	cpi	r30, 0x44	; 68
    444c:	08 f0       	brcs	.+2      	; 0x4450 <__vector_47+0xc6>
    444e:	e0 e0       	ldi	r30, 0x00	; 0
		tx_buffer_tail = tail;
    4450:	e0 93 80 09 	sts	0x0980, r30
		tx_byte = tx_buffer[tail];
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	e0 5d       	subi	r30, 0xD0	; 208
    4458:	f6 4f       	sbci	r31, 0xF6	; 246
    445a:	20 81       	ld	r18, Z
    445c:	20 93 db 09 	sts	0x09DB, r18
		tx_bit = 0;
    4460:	10 92 dc 09 	sts	0x09DC, r1
		CONFIG_MATCH_CLEAR();
    4464:	20 91 20 01 	lds	r18, 0x0120
    4468:	2f 73       	andi	r18, 0x3F	; 63
    446a:	20 68       	ori	r18, 0x80	; 128
    446c:	20 93 20 01 	sts	0x0120, r18
		SET_COMPARE_A(target + ticks_per_bit);
    4470:	20 91 d7 09 	lds	r18, 0x09D7
    4474:	30 91 d8 09 	lds	r19, 0x09D8
    4478:	28 0f       	add	r18, r24
    447a:	39 1f       	adc	r19, r25
    447c:	30 93 29 01 	sts	0x0129, r19
    4480:	20 93 28 01 	sts	0x0128, r18
		// TODO: how to detect timing_error?
	}
}
    4484:	ff 91       	pop	r31
    4486:	ef 91       	pop	r30
    4488:	9f 91       	pop	r25
    448a:	8f 91       	pop	r24
    448c:	7f 91       	pop	r23
    448e:	6f 91       	pop	r22
    4490:	5f 91       	pop	r21
    4492:	4f 91       	pop	r20
    4494:	3f 91       	pop	r19
    4496:	2f 91       	pop	r18
    4498:	0f 90       	pop	r0
    449a:	0b be       	out	0x3b, r0	; 59
    449c:	0f 90       	pop	r0
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	0f 90       	pop	r0
    44a2:	1f 90       	pop	r1
    44a4:	18 95       	reti

000044a6 <_ZN13AltSoftSerial11flushOutputEv>:

void AltSoftSerial::flushOutput(void)
{
	while (tx_state) /* wait */ ;
    44a6:	80 91 82 09 	lds	r24, 0x0982
    44aa:	81 11       	cpse	r24, r1
    44ac:	fc cf       	rjmp	.-8      	; 0x44a6 <_ZN13AltSoftSerial11flushOutputEv>
}
    44ae:	08 95       	ret

000044b0 <_ZN13AltSoftSerial5flushEv>:
    44b0:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <_ZN13AltSoftSerial11flushOutputEv>

000044b4 <__vector_46>:
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
    44b4:	1f 92       	push	r1
    44b6:	0f 92       	push	r0
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	0f 92       	push	r0
    44bc:	11 24       	eor	r1, r1
    44be:	0b b6       	in	r0, 0x3b	; 59
    44c0:	0f 92       	push	r0
    44c2:	1b be       	out	0x3b, r1	; 59
    44c4:	2f 93       	push	r18
    44c6:	3f 93       	push	r19
    44c8:	4f 93       	push	r20
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	ef 93       	push	r30
    44d0:	ff 93       	push	r31
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
    44d2:	80 91 26 01 	lds	r24, 0x0126
    44d6:	90 91 27 01 	lds	r25, 0x0127
	count = rx_count;
    44da:	40 91 d5 09 	lds	r20, 0x09D5
	if (count & 1) {
		CONFIG_CAPTURE_FALLING_EDGE();
    44de:	20 91 21 01 	lds	r18, 0x0121
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
	count = rx_count;
	if (count & 1) {
    44e2:	40 ff       	sbrs	r20, 0
    44e4:	04 c0       	rjmp	.+8      	; 0x44ee <__vector_46+0x3a>
		CONFIG_CAPTURE_FALLING_EDGE();
    44e6:	2f 7b       	andi	r18, 0xBF	; 191
    44e8:	20 93 21 01 	sts	0x0121, r18
    44ec:	1b c0       	rjmp	.+54     	; 0x4524 <__vector_46+0x70>
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
    44ee:	20 64       	ori	r18, 0x40	; 64
    44f0:	20 93 21 01 	sts	0x0121, r18
	}
	if (count == 0) {
    44f4:	41 11       	cpse	r20, r1
    44f6:	16 c0       	rjmp	.+44     	; 0x4524 <__vector_46+0x70>
		SET_COMPARE_B(capture + rx_stop_ticks);
    44f8:	20 91 d9 09 	lds	r18, 0x09D9
    44fc:	30 91 da 09 	lds	r19, 0x09DA
    4500:	28 0f       	add	r18, r24
    4502:	39 1f       	adc	r19, r25
    4504:	30 93 2b 01 	sts	0x012B, r19
    4508:	20 93 2a 01 	sts	0x012A, r18
		ENABLE_INT_COMPARE_B();
    450c:	24 e0       	ldi	r18, 0x04	; 4
    450e:	2a bb       	out	0x1a, r18	; 26
    4510:	20 91 73 00 	lds	r18, 0x0073
    4514:	24 60       	ori	r18, 0x04	; 4
    4516:	20 93 73 00 	sts	0x0073, r18
		rx_event[0] = capture;
    451a:	90 93 de 09 	sts	0x09DE, r25
    451e:	80 93 dd 09 	sts	0x09DD, r24
    4522:	0a c0       	rjmp	.+20     	; 0x4538 <__vector_46+0x84>
	} else if (count < MAX_RX_EVENTS) {
    4524:	4a 30       	cpi	r20, 0x0A	; 10
    4526:	40 f4       	brcc	.+16     	; 0x4538 <__vector_46+0x84>
		rx_event[count] = capture;
    4528:	e4 2f       	mov	r30, r20
    452a:	f0 e0       	ldi	r31, 0x00	; 0
    452c:	ee 0f       	add	r30, r30
    452e:	ff 1f       	adc	r31, r31
    4530:	e3 52       	subi	r30, 0x23	; 35
    4532:	f6 4f       	sbci	r31, 0xF6	; 246
    4534:	91 83       	std	Z+1, r25	; 0x01
    4536:	80 83       	st	Z, r24
	}
	rx_count = count + 1;
    4538:	4f 5f       	subi	r20, 0xFF	; 255
    453a:	40 93 d5 09 	sts	0x09D5, r20
	if (GET_TIMER_COUNT() - capture > ticks_per_bit) {
    453e:	20 91 24 01 	lds	r18, 0x0124
    4542:	30 91 25 01 	lds	r19, 0x0125
    4546:	28 1b       	sub	r18, r24
    4548:	39 0b       	sbc	r19, r25
    454a:	80 91 d7 09 	lds	r24, 0x09D7
    454e:	90 91 d8 09 	lds	r25, 0x09D8
    4552:	82 17       	cp	r24, r18
    4554:	93 07       	cpc	r25, r19
    4556:	18 f4       	brcc	.+6      	; 0x455e <__vector_46+0xaa>
		AltSoftSerial::timing_error = true;
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	80 93 d6 09 	sts	0x09D6, r24
	}
}
    455e:	ff 91       	pop	r31
    4560:	ef 91       	pop	r30
    4562:	9f 91       	pop	r25
    4564:	8f 91       	pop	r24
    4566:	4f 91       	pop	r20
    4568:	3f 91       	pop	r19
    456a:	2f 91       	pop	r18
    456c:	0f 90       	pop	r0
    456e:	0b be       	out	0x3b, r0	; 59
    4570:	0f 90       	pop	r0
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	0f 90       	pop	r0
    4576:	1f 90       	pop	r1
    4578:	18 95       	reti

0000457a <__vector_48>:
	}
	return out;
}

ISR(COMPARE_B_INTERRUPT)
{
    457a:	1f 92       	push	r1
    457c:	0f 92       	push	r0
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	0f 92       	push	r0
    4582:	11 24       	eor	r1, r1
    4584:	0b b6       	in	r0, 0x3b	; 59
    4586:	0f 92       	push	r0
    4588:	1b be       	out	0x3b, r1	; 59
    458a:	af 92       	push	r10
    458c:	bf 92       	push	r11
    458e:	cf 92       	push	r12
    4590:	df 92       	push	r13
    4592:	ef 92       	push	r14
    4594:	ff 92       	push	r15
    4596:	0f 93       	push	r16
    4598:	1f 93       	push	r17
    459a:	2f 93       	push	r18
    459c:	3f 93       	push	r19
    459e:	4f 93       	push	r20
    45a0:	5f 93       	push	r21
    45a2:	6f 93       	push	r22
    45a4:	7f 93       	push	r23
    45a6:	8f 93       	push	r24
    45a8:	9f 93       	push	r25
    45aa:	af 93       	push	r26
    45ac:	bf 93       	push	r27
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	ef 93       	push	r30
    45b4:	ff 93       	push	r31
	uint8_t head;

	DISABLE_INT_COMPARE_B();
    45b6:	80 91 73 00 	lds	r24, 0x0073
    45ba:	8b 7f       	andi	r24, 0xFB	; 251
    45bc:	80 93 73 00 	sts	0x0073, r24
	CONFIG_CAPTURE_FALLING_EDGE();
    45c0:	80 91 21 01 	lds	r24, 0x0121
    45c4:	8f 7b       	andi	r24, 0xBF	; 191
    45c6:	80 93 21 01 	sts	0x0121, r24
	head = rx_buffer_head + 1;
    45ca:	10 91 d4 09 	lds	r17, 0x09D4
    45ce:	1f 5f       	subi	r17, 0xFF	; 255
	if (head >= RX_BUFFER_SIZE) head = 0;
    45d0:	10 35       	cpi	r17, 0x50	; 80
    45d2:	08 f0       	brcs	.+2      	; 0x45d6 <__vector_48+0x5c>
    45d4:	10 e0       	ldi	r17, 0x00	; 0
	if (head != rx_buffer_tail) {
    45d6:	80 91 d3 09 	lds	r24, 0x09D3
    45da:	18 17       	cp	r17, r24
    45dc:	e9 f1       	breq	.+122    	; 0x4658 <__vector_48+0xde>
		rx_buffer[head] = analyze(rx_count);
    45de:	c1 2f       	mov	r28, r17
    45e0:	d0 e0       	ldi	r29, 0x00	; 0
    45e2:	00 91 d5 09 	lds	r16, 0x09D5
    45e6:	0b 30       	cpi	r16, 0x0B	; 11
    45e8:	08 f0       	brcs	.+2      	; 0x45ec <__vector_48+0x72>
    45ea:	0a e0       	ldi	r16, 0x0A	; 10
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    45ec:	60 91 dd 09 	lds	r22, 0x09DD
    45f0:	70 91 de 09 	lds	r23, 0x09DE
	target = ticks_per_bit + ticks_per_bit / 2;
    45f4:	20 91 d7 09 	lds	r18, 0x09D7
    45f8:	30 91 d8 09 	lds	r19, 0x09D8
    45fc:	c9 01       	movw	r24, r18
    45fe:	96 95       	lsr	r25
    4600:	87 95       	ror	r24
    4602:	82 0f       	add	r24, r18
    4604:	93 1f       	adc	r25, r19

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;
    4606:	40 e0       	ldi	r20, 0x00	; 0
    4608:	50 e0       	ldi	r21, 0x00	; 0
}

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
    460a:	e1 2c       	mov	r14, r1
    460c:	dd 24       	eor	r13, r13
    460e:	d3 94       	inc	r13
    4610:	ff 24       	eor	r15, r15
    4612:	fa 94       	dec	r15
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    4614:	ef ed       	ldi	r30, 0xDF	; 223
    4616:	f9 e0       	ldi	r31, 0x09	; 9
		while (now >= target) {
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    4618:	cc 24       	eor	r12, r12
    461a:	c3 94       	inc	r12
    461c:	15 c0       	rjmp	.+42     	; 0x4648 <__vector_48+0xce>

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
    461e:	a1 91       	ld	r26, Z+
    4620:	b1 91       	ld	r27, Z+
		now += tmp - begin;
    4622:	5d 01       	movw	r10, r26
    4624:	a6 1a       	sub	r10, r22
    4626:	b7 0a       	sbc	r11, r23
    4628:	4a 0d       	add	r20, r10
    462a:	5b 1d       	adc	r21, r11
    462c:	08 c0       	rjmp	.+16     	; 0x463e <__vector_48+0xc4>
		begin = tmp;
		while (now >= target) {
			if (state == 0) out &= ~mask;
    462e:	e1 10       	cpse	r14, r1
    4630:	03 c0       	rjmp	.+6      	; 0x4638 <__vector_48+0xbe>
    4632:	6d 2d       	mov	r22, r13
    4634:	60 95       	com	r22
    4636:	f6 22       	and	r15, r22
			mask <<= 1;
    4638:	dd 0c       	add	r13, r13
			target += ticks_per_bit;
    463a:	82 0f       	add	r24, r18
    463c:	93 1f       	adc	r25, r19
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
		while (now >= target) {
    463e:	48 17       	cp	r20, r24
    4640:	59 07       	cpc	r21, r25
    4642:	a8 f7       	brcc	.-22     	; 0x462e <__vector_48+0xb4>
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    4644:	ec 24       	eor	r14, r12
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
    4646:	bd 01       	movw	r22, r26
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
    4648:	01 50       	subi	r16, 0x01	; 1
    464a:	49 f7       	brne	.-46     	; 0x461e <__vector_48+0xa4>
	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	head = rx_buffer_head + 1;
	if (head >= RX_BUFFER_SIZE) head = 0;
	if (head != rx_buffer_tail) {
		rx_buffer[head] = analyze(rx_count);
    464c:	fe 01       	movw	r30, r28
    464e:	ed 57       	subi	r30, 0x7D	; 125
    4650:	f6 4f       	sbci	r31, 0xF6	; 246
    4652:	f0 82       	st	Z, r15
		rx_buffer_head = head;
    4654:	10 93 d4 09 	sts	0x09D4, r17
	}
	rx_count = 0;
    4658:	10 92 d5 09 	sts	0x09D5, r1
}
    465c:	ff 91       	pop	r31
    465e:	ef 91       	pop	r30
    4660:	df 91       	pop	r29
    4662:	cf 91       	pop	r28
    4664:	bf 91       	pop	r27
    4666:	af 91       	pop	r26
    4668:	9f 91       	pop	r25
    466a:	8f 91       	pop	r24
    466c:	7f 91       	pop	r23
    466e:	6f 91       	pop	r22
    4670:	5f 91       	pop	r21
    4672:	4f 91       	pop	r20
    4674:	3f 91       	pop	r19
    4676:	2f 91       	pop	r18
    4678:	1f 91       	pop	r17
    467a:	0f 91       	pop	r16
    467c:	ff 90       	pop	r15
    467e:	ef 90       	pop	r14
    4680:	df 90       	pop	r13
    4682:	cf 90       	pop	r12
    4684:	bf 90       	pop	r11
    4686:	af 90       	pop	r10
    4688:	0f 90       	pop	r0
    468a:	0b be       	out	0x3b, r0	; 59
    468c:	0f 90       	pop	r0
    468e:	0f be       	out	0x3f, r0	; 63
    4690:	0f 90       	pop	r0
    4692:	1f 90       	pop	r1
    4694:	18 95       	reti

00004696 <_ZN13AltSoftSerial10flushInputEv>:
	return RX_BUFFER_SIZE + head - tail;
}

void AltSoftSerial::flushInput(void)
{
	rx_buffer_head = rx_buffer_tail;
    4696:	80 91 d3 09 	lds	r24, 0x09D3
    469a:	80 93 d4 09 	sts	0x09D4, r24
    469e:	08 95       	ret

000046a0 <_ZN13AltSoftSerial3endEv>:
	tx_buffer_tail = 0;
	ENABLE_INT_INPUT_CAPTURE();
}

void AltSoftSerial::end(void)
{
    46a0:	cf 93       	push	r28
    46a2:	df 93       	push	r29
	DISABLE_INT_COMPARE_B();
    46a4:	c3 e7       	ldi	r28, 0x73	; 115
    46a6:	d0 e0       	ldi	r29, 0x00	; 0
    46a8:	88 81       	ld	r24, Y
    46aa:	8b 7f       	andi	r24, 0xFB	; 251
    46ac:	88 83       	st	Y, r24
	DISABLE_INT_INPUT_CAPTURE();
    46ae:	88 81       	ld	r24, Y
    46b0:	8f 7d       	andi	r24, 0xDF	; 223
    46b2:	88 83       	st	Y, r24
	flushInput();
    46b4:	0e 94 4b 23 	call	0x4696	; 0x4696 <_ZN13AltSoftSerial10flushInputEv>
	flushOutput();
    46b8:	0e 94 53 22 	call	0x44a6	; 0x44a6 <_ZN13AltSoftSerial11flushOutputEv>
	DISABLE_INT_COMPARE_A();
    46bc:	88 81       	ld	r24, Y
    46be:	8d 7f       	andi	r24, 0xFD	; 253
    46c0:	88 83       	st	Y, r24
	// TODO: restore timer to original settings?
}
    46c2:	df 91       	pop	r29
    46c4:	cf 91       	pop	r28
    46c6:	08 95       	ret

000046c8 <_ZN5AlarmD1Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    46c8:	28 e2       	ldi	r18, 0x28	; 40
    46ca:	32 e0       	ldi	r19, 0x02	; 2
    46cc:	fc 01       	movw	r30, r24
    46ce:	31 83       	std	Z+1, r19	; 0x01
    46d0:	20 83       	st	Z, r18
    46d2:	08 95       	ret

000046d4 <_ZN5AlarmD0Ev>:
    46d4:	28 e2       	ldi	r18, 0x28	; 40
    46d6:	32 e0       	ldi	r19, 0x02	; 2
    46d8:	fc 01       	movw	r30, r24
    46da:	31 83       	std	Z+1, r19	; 0x01
    46dc:	20 83       	st	Z, r18

}
    46de:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

000046e2 <_ZN5AlarmC1EP14FreeBoardModel>:
 *      Author: robert
 */

#include "Alarm.h"

Alarm::Alarm(FreeBoardModel* model) {
    46e2:	fc 01       	movw	r30, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	28 e2       	ldi	r18, 0x28	; 40
    46e8:	32 e0       	ldi	r19, 0x02	; 2
    46ea:	31 83       	std	Z+1, r19	; 0x01
    46ec:	20 83       	st	Z, r18
	this->model=model;
    46ee:	73 83       	std	Z+3, r23	; 0x03
    46f0:	62 83       	std	Z+2, r22	; 0x02
	alarmBeepState=false;
    46f2:	14 82       	std	Z+4, r1	; 0x04
	model->setAlarmLast(0);
    46f4:	40 e0       	ldi	r20, 0x00	; 0
    46f6:	50 e0       	ldi	r21, 0x00	; 0
    46f8:	ba 01       	movw	r22, r20
    46fa:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <_ZN14FreeBoardModel12setAlarmLastEm>
	pinMode(alarmPin0, OUTPUT);
    46fe:	61 e0       	ldi	r22, 0x01	; 1
    4700:	86 e1       	ldi	r24, 0x16	; 22
    4702:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(alarmPin1, OUTPUT);
    4706:	61 e0       	ldi	r22, 0x01	; 1
    4708:	87 e1       	ldi	r24, 0x17	; 23
    470a:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(alarmPin2, OUTPUT);
    470e:	61 e0       	ldi	r22, 0x01	; 1
    4710:	88 e1       	ldi	r24, 0x18	; 24
    4712:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(alarmPin3, OUTPUT);
    4716:	61 e0       	ldi	r22, 0x01	; 1
    4718:	89 e1       	ldi	r24, 0x19	; 25
    471a:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <pinMode>

0000471e <_ZN5Alarm14alarmTriggeredEv>:

Alarm::~Alarm() {

}

bool Alarm::alarmTriggered() {
    471e:	cf 92       	push	r12
    4720:	df 92       	push	r13
    4722:	ef 92       	push	r14
    4724:	ff 92       	push	r15
    4726:	cf 93       	push	r28
    4728:	df 93       	push	r29
    472a:	ec 01       	movw	r28, r24
	return model->isAlarmTriggered() && model->getAlarmSnooze() < millis() ;
    472c:	8a 81       	ldd	r24, Y+2	; 0x02
    472e:	9b 81       	ldd	r25, Y+3	; 0x03
    4730:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <_ZN14FreeBoardModel16isAlarmTriggeredEv>
    4734:	88 23       	and	r24, r24
    4736:	71 f0       	breq	.+28     	; 0x4754 <_ZN5Alarm14alarmTriggeredEv+0x36>
    4738:	8a 81       	ldd	r24, Y+2	; 0x02
    473a:	9b 81       	ldd	r25, Y+3	; 0x03
    473c:	0e 94 ed 2a 	call	0x55da	; 0x55da <_ZN14FreeBoardModel14getAlarmSnoozeEv>
    4740:	6b 01       	movw	r12, r22
    4742:	7c 01       	movw	r14, r24
    4744:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    4748:	21 e0       	ldi	r18, 0x01	; 1
    474a:	c6 16       	cp	r12, r22
    474c:	d7 06       	cpc	r13, r23
    474e:	e8 06       	cpc	r14, r24
    4750:	f9 06       	cpc	r15, r25
    4752:	08 f0       	brcs	.+2      	; 0x4756 <_ZN5Alarm14alarmTriggeredEv+0x38>
    4754:	20 e0       	ldi	r18, 0x00	; 0
}
    4756:	82 2f       	mov	r24, r18
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	ff 90       	pop	r15
    475e:	ef 90       	pop	r14
    4760:	df 90       	pop	r13
    4762:	cf 90       	pop	r12
    4764:	08 95       	ret

00004766 <_ZN5Alarm11checkAlarmsEv>:


/* Take action if alarms are triggered*/
void Alarm::checkAlarms() {
    4766:	cf 92       	push	r12
    4768:	df 92       	push	r13
    476a:	ef 92       	push	r14
    476c:	ff 92       	push	r15
    476e:	cf 93       	push	r28
    4770:	df 93       	push	r29
    4772:	ec 01       	movw	r28, r24
	if (alarmTriggered()) {
    4774:	0e 94 8f 23 	call	0x471e	; 0x471e <_ZN5Alarm14alarmTriggeredEv>
    4778:	88 23       	and	r24, r24
    477a:	a9 f1       	breq	.+106    	; 0x47e6 <_ZN5Alarm11checkAlarmsEv+0x80>
		//alarm beeps on off on off
		//once in the alarm state, hitting any button will give a 5 minute respite from the beeping, eg snooze
		if (millis() - model->getAlarmLast() > 1000) {
    477c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    4780:	6b 01       	movw	r12, r22
    4782:	7c 01       	movw	r14, r24
    4784:	8a 81       	ldd	r24, Y+2	; 0x02
    4786:	9b 81       	ldd	r25, Y+3	; 0x03
    4788:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <_ZN14FreeBoardModel12getAlarmLastEv>
    478c:	c6 1a       	sub	r12, r22
    478e:	d7 0a       	sbc	r13, r23
    4790:	e8 0a       	sbc	r14, r24
    4792:	f9 0a       	sbc	r15, r25
    4794:	89 ee       	ldi	r24, 0xE9	; 233
    4796:	c8 16       	cp	r12, r24
    4798:	83 e0       	ldi	r24, 0x03	; 3
    479a:	d8 06       	cpc	r13, r24
    479c:	e1 04       	cpc	r14, r1
    479e:	f1 04       	cpc	r15, r1
    47a0:	c0 f1       	brcs	.+112    	; 0x4812 <_ZN5Alarm11checkAlarmsEv+0xac>
			digitalWrite(alarmPin0, alarmBeepState);
    47a2:	6c 81       	ldd	r22, Y+4	; 0x04
    47a4:	86 e1       	ldi	r24, 0x16	; 22
    47a6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
			digitalWrite(alarmPin1, alarmBeepState);
    47aa:	6c 81       	ldd	r22, Y+4	; 0x04
    47ac:	87 e1       	ldi	r24, 0x17	; 23
    47ae:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
			digitalWrite(alarmPin2, alarmBeepState);
    47b2:	6c 81       	ldd	r22, Y+4	; 0x04
    47b4:	88 e1       	ldi	r24, 0x18	; 24
    47b6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
			digitalWrite(alarmPin3, alarmBeepState);
    47ba:	6c 81       	ldd	r22, Y+4	; 0x04
    47bc:	89 e1       	ldi	r24, 0x19	; 25
    47be:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
			alarmBeepState = !alarmBeepState;
    47c2:	8c 81       	ldd	r24, Y+4	; 0x04
    47c4:	91 e0       	ldi	r25, 0x01	; 1
    47c6:	89 27       	eor	r24, r25
    47c8:	8c 83       	std	Y+4, r24	; 0x04
			model->setAlarmLast(millis());
    47ca:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    47ce:	ab 01       	movw	r20, r22
    47d0:	bc 01       	movw	r22, r24
    47d2:	8a 81       	ldd	r24, Y+2	; 0x02
    47d4:	9b 81       	ldd	r25, Y+3	; 0x03
		digitalWrite(alarmPin0, LOW);
		digitalWrite(alarmPin1, LOW);
		digitalWrite(alarmPin2, LOW);
		digitalWrite(alarmPin3, LOW);
	}
}
    47d6:	df 91       	pop	r29
    47d8:	cf 91       	pop	r28
    47da:	ff 90       	pop	r15
    47dc:	ef 90       	pop	r14
    47de:	df 90       	pop	r13
    47e0:	cf 90       	pop	r12
			digitalWrite(alarmPin0, alarmBeepState);
			digitalWrite(alarmPin1, alarmBeepState);
			digitalWrite(alarmPin2, alarmBeepState);
			digitalWrite(alarmPin3, alarmBeepState);
			alarmBeepState = !alarmBeepState;
			model->setAlarmLast(millis());
    47e2:	0c 94 5e 2d 	jmp	0x5abc	; 0x5abc <_ZN14FreeBoardModel12setAlarmLastEm>
			//model->setAlarmSnooze(0); //5 minute alarm snooze
		}
	} else {
		//no alarm
		digitalWrite(alarmPin0, LOW);
    47e6:	60 e0       	ldi	r22, 0x00	; 0
    47e8:	86 e1       	ldi	r24, 0x16	; 22
    47ea:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
		digitalWrite(alarmPin1, LOW);
    47ee:	60 e0       	ldi	r22, 0x00	; 0
    47f0:	87 e1       	ldi	r24, 0x17	; 23
    47f2:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
		digitalWrite(alarmPin2, LOW);
    47f6:	60 e0       	ldi	r22, 0x00	; 0
    47f8:	88 e1       	ldi	r24, 0x18	; 24
    47fa:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <digitalWrite>
		digitalWrite(alarmPin3, LOW);
    47fe:	60 e0       	ldi	r22, 0x00	; 0
    4800:	89 e1       	ldi	r24, 0x19	; 25
	}
}
    4802:	df 91       	pop	r29
    4804:	cf 91       	pop	r28
    4806:	ff 90       	pop	r15
    4808:	ef 90       	pop	r14
    480a:	df 90       	pop	r13
    480c:	cf 90       	pop	r12
	} else {
		//no alarm
		digitalWrite(alarmPin0, LOW);
		digitalWrite(alarmPin1, LOW);
		digitalWrite(alarmPin2, LOW);
		digitalWrite(alarmPin3, LOW);
    480e:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <digitalWrite>
	}
}
    4812:	df 91       	pop	r29
    4814:	cf 91       	pop	r28
    4816:	ff 90       	pop	r15
    4818:	ef 90       	pop	r14
    481a:	df 90       	pop	r13
    481c:	cf 90       	pop	r12
    481e:	08 95       	ret

00004820 <_ZN5Alarm14checkWindAlarmEv>:

void Alarm::checkWindAlarm(){
    4820:	cf 92       	push	r12
    4822:	df 92       	push	r13
    4824:	ef 92       	push	r14
    4826:	ff 92       	push	r15
    4828:	cf 93       	push	r28
    482a:	df 93       	push	r29
    482c:	ec 01       	movw	r28, r24
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    482e:	8a 81       	ldd	r24, Y+2	; 0x02
    4830:	9b 81       	ldd	r25, Y+3	; 0x03
    4832:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <_ZN14FreeBoardModel13isWindAlarmOnEv>
    4836:	88 23       	and	r24, r24
    4838:	11 f1       	breq	.+68     	; 0x487e <_ZN5Alarm14checkWindAlarmEv+0x5e>
    483a:	8a 81       	ldd	r24, Y+2	; 0x02
    483c:	9b 81       	ldd	r25, Y+3	; 0x03
    483e:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    4842:	18 16       	cp	r1, r24
    4844:	19 06       	cpc	r1, r25
    4846:	dc f4       	brge	.+54     	; 0x487e <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
    4848:	8a 81       	ldd	r24, Y+2	; 0x02
    484a:	9b 81       	ldd	r25, Y+3	; 0x03
    484c:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN14FreeBoardModel14getWindAverageEv>
    4850:	6b 01       	movw	r12, r22
    4852:	7c 01       	movw	r14, r24
    4854:	8a 81       	ldd	r24, Y+2	; 0x02
    4856:	9b 81       	ldd	r25, Y+3	; 0x03
    4858:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
	}
}

void Alarm::checkWindAlarm(){
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    485c:	bc 01       	movw	r22, r24
    485e:	88 27       	eor	r24, r24
    4860:	77 fd       	sbrc	r23, 7
    4862:	80 95       	com	r24
    4864:	98 2f       	mov	r25, r24
    4866:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    486a:	9b 01       	movw	r18, r22
    486c:	ac 01       	movw	r20, r24
    486e:	c7 01       	movw	r24, r14
    4870:	b6 01       	movw	r22, r12
    4872:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    4876:	18 16       	cp	r1, r24
    4878:	14 f4       	brge	.+4      	; 0x487e <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
    487a:	61 e0       	ldi	r22, 0x01	; 1
    487c:	01 c0       	rjmp	.+2      	; 0x4880 <_ZN5Alarm14checkWindAlarmEv+0x60>
		} else {
			model->setWindAlarmTriggered(false);
    487e:	60 e0       	ldi	r22, 0x00	; 0
    4880:	8a 81       	ldd	r24, Y+2	; 0x02
    4882:	9b 81       	ldd	r25, Y+3	; 0x03
		}
}
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	ff 90       	pop	r15
    488a:	ef 90       	pop	r14
    488c:	df 90       	pop	r13
    488e:	cf 90       	pop	r12
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
		} else {
			model->setWindAlarmTriggered(false);
    4890:	0c 94 ad 2e 	jmp	0x5d5a	; 0x5d5a <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>

00004894 <_ZN6AnchorD1Ev>:

	this->model=model;
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
}

Anchor::~Anchor(){
    4894:	20 e3       	ldi	r18, 0x30	; 48
    4896:	32 e0       	ldi	r19, 0x02	; 2
    4898:	fc 01       	movw	r30, r24
    489a:	31 83       	std	Z+1, r19	; 0x01
    489c:	20 83       	st	Z, r18
    489e:	08 95       	ret

000048a0 <_ZN6AnchorD0Ev>:
    48a0:	20 e3       	ldi	r18, 0x30	; 48
    48a2:	32 e0       	ldi	r19, 0x02	; 2
    48a4:	fc 01       	movw	r30, r24
    48a6:	31 83       	std	Z+1, r19	; 0x01
    48a8:	20 83       	st	Z, r18

}
    48aa:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

000048ae <_ZN6Anchor15updateAnchorBoxEff>:


/* Adjust the size of the anchor box. Will not go smaller than MINMTRS */
void Anchor::updateAnchorBox(float laty, float lonx) {
    48ae:	2f 92       	push	r2
    48b0:	3f 92       	push	r3
    48b2:	4f 92       	push	r4
    48b4:	5f 92       	push	r5
    48b6:	6f 92       	push	r6
    48b8:	7f 92       	push	r7
    48ba:	8f 92       	push	r8
    48bc:	9f 92       	push	r9
    48be:	af 92       	push	r10
    48c0:	bf 92       	push	r11
    48c2:	cf 92       	push	r12
    48c4:	df 92       	push	r13
    48c6:	ef 92       	push	r14
    48c8:	ff 92       	push	r15
    48ca:	0f 93       	push	r16
    48cc:	1f 93       	push	r17
    48ce:	cf 93       	push	r28
    48d0:	df 93       	push	r29
    48d2:	00 d0       	rcall	.+0      	; 0x48d4 <_ZN6Anchor15updateAnchorBoxEff+0x26>
    48d4:	00 d0       	rcall	.+0      	; 0x48d6 <_ZN6Anchor15updateAnchorBoxEff+0x28>
    48d6:	00 d0       	rcall	.+0      	; 0x48d8 <_ZN6Anchor15updateAnchorBoxEff+0x2a>
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
    48dc:	9e 83       	std	Y+6, r25	; 0x06
    48de:	8d 83       	std	Y+5, r24	; 0x05
    48e0:	4a 01       	movw	r8, r20
    48e2:	5b 01       	movw	r10, r22
    48e4:	68 01       	movw	r12, r16
    48e6:	79 01       	movw	r14, r18
	//TODO: error testing around 0, 90, 180deg

	float n = laty + model->getAnchorRadiusDeg();
    48e8:	fc 01       	movw	r30, r24
    48ea:	82 81       	ldd	r24, Z+2	; 0x02
    48ec:	93 81       	ldd	r25, Z+3	; 0x03
    48ee:	0e 94 3f 2b 	call	0x567e	; 0x567e <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    48f2:	9b 01       	movw	r18, r22
    48f4:	ac 01       	movw	r20, r24
    48f6:	c5 01       	movw	r24, r10
    48f8:	b4 01       	movw	r22, r8
    48fa:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    48fe:	69 83       	std	Y+1, r22	; 0x01
    4900:	7a 83       	std	Y+2, r23	; 0x02
    4902:	1c 01       	movw	r2, r24
	float s = laty - model->getAnchorRadiusDeg();
    4904:	ed 81       	ldd	r30, Y+5	; 0x05
    4906:	fe 81       	ldd	r31, Y+6	; 0x06
    4908:	82 81       	ldd	r24, Z+2	; 0x02
    490a:	93 81       	ldd	r25, Z+3	; 0x03
    490c:	0e 94 3f 2b 	call	0x567e	; 0x567e <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    4910:	9b 01       	movw	r18, r22
    4912:	ac 01       	movw	r20, r24
    4914:	c5 01       	movw	r24, r10
    4916:	b4 01       	movw	r22, r8
    4918:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    491c:	2b 01       	movw	r4, r22
    491e:	3c 01       	movw	r6, r24
	float e = lonx + model->getAnchorRadiusDeg();
    4920:	ed 81       	ldd	r30, Y+5	; 0x05
    4922:	fe 81       	ldd	r31, Y+6	; 0x06
    4924:	82 81       	ldd	r24, Z+2	; 0x02
    4926:	93 81       	ldd	r25, Z+3	; 0x03
    4928:	0e 94 3f 2b 	call	0x567e	; 0x567e <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    492c:	9b 01       	movw	r18, r22
    492e:	ac 01       	movw	r20, r24
    4930:	c7 01       	movw	r24, r14
    4932:	b6 01       	movw	r22, r12
    4934:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    4938:	4b 01       	movw	r8, r22
    493a:	5c 01       	movw	r10, r24
	float w = lonx - model->getAnchorRadiusDeg();
    493c:	ed 81       	ldd	r30, Y+5	; 0x05
    493e:	fe 81       	ldd	r31, Y+6	; 0x06
    4940:	82 81       	ldd	r24, Z+2	; 0x02
    4942:	93 81       	ldd	r25, Z+3	; 0x03
    4944:	0e 94 3f 2b 	call	0x567e	; 0x567e <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    4948:	9b 01       	movw	r18, r22
    494a:	ac 01       	movw	r20, r24
    494c:	c7 01       	movw	r24, r14
    494e:	b6 01       	movw	r22, r12
    4950:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    4954:	16 2f       	mov	r17, r22
    4956:	7b 83       	std	Y+3, r23	; 0x03
    4958:	8c 83       	std	Y+4, r24	; 0x04
    495a:	09 2f       	mov	r16, r25
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
    495c:	ed 81       	ldd	r30, Y+5	; 0x05
    495e:	fe 81       	ldd	r31, Y+6	; 0x06
    4960:	82 81       	ldd	r24, Z+2	; 0x02
    4962:	93 81       	ldd	r25, Z+3	; 0x03
    4964:	0e 94 49 2b 	call	0x5692	; 0x5692 <_ZN14FreeBoardModel10getAnchorSEv>
    4968:	6b 01       	movw	r12, r22
    496a:	7c 01       	movw	r14, r24
    496c:	24 e8       	ldi	r18, 0x84	; 132
    496e:	3a eb       	ldi	r19, 0xBA	; 186
    4970:	4c e3       	ldi	r20, 0x3C	; 60
    4972:	58 e3       	ldi	r21, 0x38	; 56
    4974:	b9 81       	ldd	r27, Y+1	; 0x01
    4976:	aa 81       	ldd	r26, Y+2	; 0x02
    4978:	6b 2f       	mov	r22, r27
    497a:	7a 2f       	mov	r23, r26
    497c:	82 2d       	mov	r24, r2
    497e:	93 2d       	mov	r25, r3
    4980:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    4984:	a7 01       	movw	r20, r14
    4986:	96 01       	movw	r18, r12
    4988:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    498c:	18 16       	cp	r1, r24
    498e:	94 f4       	brge	.+36     	; 0x49b4 <_ZN6Anchor15updateAnchorBoxEff+0x106>
    4990:	ed 81       	ldd	r30, Y+5	; 0x05
    4992:	fe 81       	ldd	r31, Y+6	; 0x06
    4994:	82 81       	ldd	r24, Z+2	; 0x02
    4996:	93 81       	ldd	r25, Z+3	; 0x03
    4998:	0e 94 29 2b 	call	0x5652	; 0x5652 <_ZN14FreeBoardModel10getAnchorNEv>
    499c:	9b 01       	movw	r18, r22
    499e:	ac 01       	movw	r20, r24
    49a0:	b9 81       	ldd	r27, Y+1	; 0x01
    49a2:	aa 81       	ldd	r26, Y+2	; 0x02
    49a4:	6b 2f       	mov	r22, r27
    49a6:	7a 2f       	mov	r23, r26
    49a8:	82 2d       	mov	r24, r2
    49aa:	93 2d       	mov	r25, r3
    49ac:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    49b0:	87 fd       	sbrc	r24, 7
    49b2:	7e c0       	rjmp	.+252    	; 0x4ab0 <_ZN6Anchor15updateAnchorBoxEff+0x202>
		model->setAnchorN(n);
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
    49b4:	ed 81       	ldd	r30, Y+5	; 0x05
    49b6:	fe 81       	ldd	r31, Y+6	; 0x06
    49b8:	82 81       	ldd	r24, Z+2	; 0x02
    49ba:	93 81       	ldd	r25, Z+3	; 0x03
    49bc:	0e 94 29 2b 	call	0x5652	; 0x5652 <_ZN14FreeBoardModel10getAnchorNEv>
    49c0:	6b 01       	movw	r12, r22
    49c2:	7c 01       	movw	r14, r24
    49c4:	24 e8       	ldi	r18, 0x84	; 132
    49c6:	3a eb       	ldi	r19, 0xBA	; 186
    49c8:	4c e3       	ldi	r20, 0x3C	; 60
    49ca:	58 e3       	ldi	r21, 0x38	; 56
    49cc:	64 2d       	mov	r22, r4
    49ce:	75 2d       	mov	r23, r5
    49d0:	86 2d       	mov	r24, r6
    49d2:	97 2d       	mov	r25, r7
    49d4:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    49d8:	a7 01       	movw	r20, r14
    49da:	96 01       	movw	r18, r12
    49dc:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    49e0:	87 ff       	sbrs	r24, 7
    49e2:	11 c0       	rjmp	.+34     	; 0x4a06 <_ZN6Anchor15updateAnchorBoxEff+0x158>
    49e4:	ed 81       	ldd	r30, Y+5	; 0x05
    49e6:	fe 81       	ldd	r31, Y+6	; 0x06
    49e8:	82 81       	ldd	r24, Z+2	; 0x02
    49ea:	93 81       	ldd	r25, Z+3	; 0x03
    49ec:	0e 94 49 2b 	call	0x5692	; 0x5692 <_ZN14FreeBoardModel10getAnchorSEv>
    49f0:	9b 01       	movw	r18, r22
    49f2:	ac 01       	movw	r20, r24
    49f4:	64 2d       	mov	r22, r4
    49f6:	75 2d       	mov	r23, r5
    49f8:	86 2d       	mov	r24, r6
    49fa:	97 2d       	mov	r25, r7
    49fc:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    4a00:	18 16       	cp	r1, r24
    4a02:	0c f4       	brge	.+2      	; 0x4a06 <_ZN6Anchor15updateAnchorBoxEff+0x158>
    4a04:	62 c0       	rjmp	.+196    	; 0x4aca <_ZN6Anchor15updateAnchorBoxEff+0x21c>
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
    4a06:	ed 81       	ldd	r30, Y+5	; 0x05
    4a08:	fe 81       	ldd	r31, Y+6	; 0x06
    4a0a:	82 81       	ldd	r24, Z+2	; 0x02
    4a0c:	93 81       	ldd	r25, Z+3	; 0x03
    4a0e:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <_ZN14FreeBoardModel10getAnchorWEv>
    4a12:	2b 01       	movw	r4, r22
    4a14:	3c 01       	movw	r6, r24
    4a16:	24 e8       	ldi	r18, 0x84	; 132
    4a18:	3a eb       	ldi	r19, 0xBA	; 186
    4a1a:	4c e3       	ldi	r20, 0x3C	; 60
    4a1c:	58 e3       	ldi	r21, 0x38	; 56
    4a1e:	68 2d       	mov	r22, r8
    4a20:	79 2d       	mov	r23, r9
    4a22:	8a 2d       	mov	r24, r10
    4a24:	9b 2d       	mov	r25, r11
    4a26:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    4a2a:	a3 01       	movw	r20, r6
    4a2c:	92 01       	movw	r18, r4
    4a2e:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    4a32:	18 16       	cp	r1, r24
    4a34:	84 f4       	brge	.+32     	; 0x4a56 <_ZN6Anchor15updateAnchorBoxEff+0x1a8>
    4a36:	ed 81       	ldd	r30, Y+5	; 0x05
    4a38:	fe 81       	ldd	r31, Y+6	; 0x06
    4a3a:	82 81       	ldd	r24, Z+2	; 0x02
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <_ZN14FreeBoardModel10getAnchorEEv>
    4a42:	9b 01       	movw	r18, r22
    4a44:	ac 01       	movw	r20, r24
    4a46:	68 2d       	mov	r22, r8
    4a48:	79 2d       	mov	r23, r9
    4a4a:	8a 2d       	mov	r24, r10
    4a4c:	9b 2d       	mov	r25, r11
    4a4e:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    4a52:	87 fd       	sbrc	r24, 7
    4a54:	45 c0       	rjmp	.+138    	; 0x4ae0 <_ZN6Anchor15updateAnchorBoxEff+0x232>
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
    4a56:	ed 81       	ldd	r30, Y+5	; 0x05
    4a58:	fe 81       	ldd	r31, Y+6	; 0x06
    4a5a:	82 81       	ldd	r24, Z+2	; 0x02
    4a5c:	93 81       	ldd	r25, Z+3	; 0x03
    4a5e:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <_ZN14FreeBoardModel10getAnchorEEv>
    4a62:	4b 01       	movw	r8, r22
    4a64:	5c 01       	movw	r10, r24
    4a66:	24 e8       	ldi	r18, 0x84	; 132
    4a68:	3a eb       	ldi	r19, 0xBA	; 186
    4a6a:	4c e3       	ldi	r20, 0x3C	; 60
    4a6c:	58 e3       	ldi	r21, 0x38	; 56
    4a6e:	ab 81       	ldd	r26, Y+3	; 0x03
    4a70:	fc 80       	ldd	r15, Y+4	; 0x04
    4a72:	61 2f       	mov	r22, r17
    4a74:	7a 2f       	mov	r23, r26
    4a76:	8f 2d       	mov	r24, r15
    4a78:	90 2f       	mov	r25, r16
    4a7a:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    4a7e:	a5 01       	movw	r20, r10
    4a80:	94 01       	movw	r18, r8
    4a82:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    4a86:	87 ff       	sbrs	r24, 7
    4a88:	5a c0       	rjmp	.+180    	; 0x4b3e <_ZN6Anchor15updateAnchorBoxEff+0x290>
    4a8a:	ed 81       	ldd	r30, Y+5	; 0x05
    4a8c:	fe 81       	ldd	r31, Y+6	; 0x06
    4a8e:	82 81       	ldd	r24, Z+2	; 0x02
    4a90:	93 81       	ldd	r25, Z+3	; 0x03
    4a92:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <_ZN14FreeBoardModel10getAnchorWEv>
    4a96:	9b 01       	movw	r18, r22
    4a98:	ac 01       	movw	r20, r24
    4a9a:	ab 81       	ldd	r26, Y+3	; 0x03
    4a9c:	fc 80       	ldd	r15, Y+4	; 0x04
    4a9e:	61 2f       	mov	r22, r17
    4aa0:	7a 2f       	mov	r23, r26
    4aa2:	8f 2d       	mov	r24, r15
    4aa4:	90 2f       	mov	r25, r16
    4aa6:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    4aaa:	18 16       	cp	r1, r24
    4aac:	24 f1       	brlt	.+72     	; 0x4af6 <_ZN6Anchor15updateAnchorBoxEff+0x248>
    4aae:	47 c0       	rjmp	.+142    	; 0x4b3e <_ZN6Anchor15updateAnchorBoxEff+0x290>
	float s = laty - model->getAnchorRadiusDeg();
	float e = lonx + model->getAnchorRadiusDeg();
	float w = lonx - model->getAnchorRadiusDeg();
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
		model->setAnchorN(n);
    4ab0:	39 81       	ldd	r19, Y+1	; 0x01
    4ab2:	2a 81       	ldd	r18, Y+2	; 0x02
    4ab4:	43 2f       	mov	r20, r19
    4ab6:	52 2f       	mov	r21, r18
    4ab8:	62 2d       	mov	r22, r2
    4aba:	73 2d       	mov	r23, r3
    4abc:	ed 81       	ldd	r30, Y+5	; 0x05
    4abe:	fe 81       	ldd	r31, Y+6	; 0x06
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <_ZN14FreeBoardModel10setAnchorNEf>
    4ac8:	75 cf       	rjmp	.-278    	; 0x49b4 <_ZN6Anchor15updateAnchorBoxEff+0x106>
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
    4aca:	44 2d       	mov	r20, r4
    4acc:	55 2d       	mov	r21, r5
    4ace:	66 2d       	mov	r22, r6
    4ad0:	77 2d       	mov	r23, r7
    4ad2:	ed 81       	ldd	r30, Y+5	; 0x05
    4ad4:	fe 81       	ldd	r31, Y+6	; 0x06
    4ad6:	82 81       	ldd	r24, Z+2	; 0x02
    4ad8:	93 81       	ldd	r25, Z+3	; 0x03
    4ada:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <_ZN14FreeBoardModel10setAnchorSEf>
    4ade:	93 cf       	rjmp	.-218    	; 0x4a06 <_ZN6Anchor15updateAnchorBoxEff+0x158>
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
    4ae0:	48 2d       	mov	r20, r8
    4ae2:	59 2d       	mov	r21, r9
    4ae4:	6a 2d       	mov	r22, r10
    4ae6:	7b 2d       	mov	r23, r11
    4ae8:	ed 81       	ldd	r30, Y+5	; 0x05
    4aea:	fe 81       	ldd	r31, Y+6	; 0x06
    4aec:	82 81       	ldd	r24, Z+2	; 0x02
    4aee:	93 81       	ldd	r25, Z+3	; 0x03
    4af0:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN14FreeBoardModel10setAnchorEEf>
    4af4:	b0 cf       	rjmp	.-160    	; 0x4a56 <_ZN6Anchor15updateAnchorBoxEff+0x1a8>
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    4af6:	2b 81       	ldd	r18, Y+3	; 0x03
    4af8:	9c 81       	ldd	r25, Y+4	; 0x04
    4afa:	41 2f       	mov	r20, r17
    4afc:	52 2f       	mov	r21, r18
    4afe:	69 2f       	mov	r22, r25
    4b00:	70 2f       	mov	r23, r16
    4b02:	ed 81       	ldd	r30, Y+5	; 0x05
    4b04:	fe 81       	ldd	r31, Y+6	; 0x06
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03

}
    4b0a:	26 96       	adiw	r28, 0x06	; 6
    4b0c:	0f b6       	in	r0, 0x3f	; 63
    4b0e:	f8 94       	cli
    4b10:	de bf       	out	0x3e, r29	; 62
    4b12:	0f be       	out	0x3f, r0	; 63
    4b14:	cd bf       	out	0x3d, r28	; 61
    4b16:	df 91       	pop	r29
    4b18:	cf 91       	pop	r28
    4b1a:	1f 91       	pop	r17
    4b1c:	0f 91       	pop	r16
    4b1e:	ff 90       	pop	r15
    4b20:	ef 90       	pop	r14
    4b22:	df 90       	pop	r13
    4b24:	cf 90       	pop	r12
    4b26:	bf 90       	pop	r11
    4b28:	af 90       	pop	r10
    4b2a:	9f 90       	pop	r9
    4b2c:	8f 90       	pop	r8
    4b2e:	7f 90       	pop	r7
    4b30:	6f 90       	pop	r6
    4b32:	5f 90       	pop	r5
    4b34:	4f 90       	pop	r4
    4b36:	3f 90       	pop	r3
    4b38:	2f 90       	pop	r2
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    4b3a:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <_ZN14FreeBoardModel10setAnchorWEf>

}
    4b3e:	26 96       	adiw	r28, 0x06	; 6
    4b40:	0f b6       	in	r0, 0x3f	; 63
    4b42:	f8 94       	cli
    4b44:	de bf       	out	0x3e, r29	; 62
    4b46:	0f be       	out	0x3f, r0	; 63
    4b48:	cd bf       	out	0x3d, r28	; 61
    4b4a:	df 91       	pop	r29
    4b4c:	cf 91       	pop	r28
    4b4e:	1f 91       	pop	r17
    4b50:	0f 91       	pop	r16
    4b52:	ff 90       	pop	r15
    4b54:	ef 90       	pop	r14
    4b56:	df 90       	pop	r13
    4b58:	cf 90       	pop	r12
    4b5a:	bf 90       	pop	r11
    4b5c:	af 90       	pop	r10
    4b5e:	9f 90       	pop	r9
    4b60:	8f 90       	pop	r8
    4b62:	7f 90       	pop	r7
    4b64:	6f 90       	pop	r6
    4b66:	5f 90       	pop	r5
    4b68:	4f 90       	pop	r4
    4b6a:	3f 90       	pop	r3
    4b6c:	2f 90       	pop	r2
    4b6e:	08 95       	ret

00004b70 <_ZN6Anchor14resetAnchorBoxEff>:

void Anchor::resetAnchorBox(float laty, float lonx) {
    4b70:	8f 92       	push	r8
    4b72:	9f 92       	push	r9
    4b74:	af 92       	push	r10
    4b76:	bf 92       	push	r11
    4b78:	cf 92       	push	r12
    4b7a:	df 92       	push	r13
    4b7c:	ef 92       	push	r14
    4b7e:	ff 92       	push	r15
    4b80:	0f 93       	push	r16
    4b82:	1f 93       	push	r17
    4b84:	cf 93       	push	r28
    4b86:	df 93       	push	r29
    4b88:	ec 01       	movw	r28, r24
    4b8a:	6a 01       	movw	r12, r20
    4b8c:	7b 01       	movw	r14, r22
    4b8e:	48 01       	movw	r8, r16
    4b90:	59 01       	movw	r10, r18
	model->setAnchorN(90.0);
    4b92:	40 e0       	ldi	r20, 0x00	; 0
    4b94:	50 e0       	ldi	r21, 0x00	; 0
    4b96:	64 eb       	ldi	r22, 0xB4	; 180
    4b98:	72 e4       	ldi	r23, 0x42	; 66
    4b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9e:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <_ZN14FreeBoardModel10setAnchorNEf>
	model->setAnchorS(-90.0);
    4ba2:	40 e0       	ldi	r20, 0x00	; 0
    4ba4:	50 e0       	ldi	r21, 0x00	; 0
    4ba6:	64 eb       	ldi	r22, 0xB4	; 180
    4ba8:	72 ec       	ldi	r23, 0xC2	; 194
    4baa:	8a 81       	ldd	r24, Y+2	; 0x02
    4bac:	9b 81       	ldd	r25, Y+3	; 0x03
    4bae:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <_ZN14FreeBoardModel10setAnchorSEf>
	model->setAnchorE(180.0);
    4bb2:	40 e0       	ldi	r20, 0x00	; 0
    4bb4:	50 e0       	ldi	r21, 0x00	; 0
    4bb6:	64 e3       	ldi	r22, 0x34	; 52
    4bb8:	73 e4       	ldi	r23, 0x43	; 67
    4bba:	8a 81       	ldd	r24, Y+2	; 0x02
    4bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bbe:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <_ZN14FreeBoardModel10setAnchorEEf>
	model->setAnchorW(-180.0);
    4bc2:	40 e0       	ldi	r20, 0x00	; 0
    4bc4:	50 e0       	ldi	r21, 0x00	; 0
    4bc6:	64 e3       	ldi	r22, 0x34	; 52
    4bc8:	73 ec       	ldi	r23, 0xC3	; 195
    4bca:	8a 81       	ldd	r24, Y+2	; 0x02
    4bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bce:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <_ZN14FreeBoardModel10setAnchorWEf>
	model->setAnchorRadiusDeg(model->getAnchorRadius() * LLMTRS);
    4bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd6:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4bda:	2d e9       	ldi	r18, 0x9D	; 157
    4bdc:	3b ef       	ldi	r19, 0xFB	; 251
    4bde:	46 e1       	ldi	r20, 0x16	; 22
    4be0:	57 e3       	ldi	r21, 0x37	; 55
    4be2:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    4be6:	ab 01       	movw	r20, r22
    4be8:	bc 01       	movw	r22, r24
    4bea:	8a 81       	ldd	r24, Y+2	; 0x02
    4bec:	9b 81       	ldd	r25, Y+3	; 0x03
    4bee:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN14FreeBoardModel18setAnchorRadiusDegEf>
	updateAnchorBox(laty, lonx);
    4bf2:	95 01       	movw	r18, r10
    4bf4:	84 01       	movw	r16, r8
    4bf6:	b7 01       	movw	r22, r14
    4bf8:	a6 01       	movw	r20, r12
    4bfa:	ce 01       	movw	r24, r28
    4bfc:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN6Anchor15updateAnchorBoxEff>
}
    4c00:	df 91       	pop	r29
    4c02:	cf 91       	pop	r28
    4c04:	1f 91       	pop	r17
    4c06:	0f 91       	pop	r16
    4c08:	ff 90       	pop	r15
    4c0a:	ef 90       	pop	r14
    4c0c:	df 90       	pop	r13
    4c0e:	cf 90       	pop	r12
    4c10:	bf 90       	pop	r11
    4c12:	af 90       	pop	r10
    4c14:	9f 90       	pop	r9
    4c16:	8f 90       	pop	r8
    4c18:	08 95       	ret

00004c1a <_ZN6AnchorC1EP14FreeBoardModel>:

#include "Anchor.h"



Anchor::Anchor(FreeBoardModel* model) {
    4c1a:	cf 92       	push	r12
    4c1c:	df 92       	push	r13
    4c1e:	ef 92       	push	r14
    4c20:	ff 92       	push	r15
    4c22:	0f 93       	push	r16
    4c24:	1f 93       	push	r17
    4c26:	cf 93       	push	r28
    4c28:	df 93       	push	r29
    4c2a:	00 d0       	rcall	.+0      	; 0x4c2c <_ZN6AnchorC1EP14FreeBoardModel+0x12>
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
    4c30:	6c 01       	movw	r12, r24
    4c32:	7b 01       	movw	r14, r22
    4c34:	80 e3       	ldi	r24, 0x30	; 48
    4c36:	92 e0       	ldi	r25, 0x02	; 2
    4c38:	f6 01       	movw	r30, r12
    4c3a:	91 83       	std	Z+1, r25	; 0x01
    4c3c:	80 83       	st	Z, r24


	this->model=model;
    4c3e:	73 83       	std	Z+3, r23	; 0x03
    4c40:	62 83       	std	Z+2, r22	; 0x02
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
    4c42:	cb 01       	movw	r24, r22
    4c44:	0e 94 13 2b 	call	0x5626	; 0x5626 <_ZN14FreeBoardModel12getAnchorLonEv>
    4c48:	8b 01       	movw	r16, r22
    4c4a:	9c 01       	movw	r18, r24
    4c4c:	c7 01       	movw	r24, r14
    4c4e:	29 83       	std	Y+1, r18	; 0x01
    4c50:	3a 83       	std	Y+2, r19	; 0x02
    4c52:	0e 94 07 2b 	call	0x560e	; 0x560e <_ZN14FreeBoardModel12getAnchorLatEv>
    4c56:	ab 01       	movw	r20, r22
    4c58:	bc 01       	movw	r22, r24
    4c5a:	29 81       	ldd	r18, Y+1	; 0x01
    4c5c:	3a 81       	ldd	r19, Y+2	; 0x02
    4c5e:	c6 01       	movw	r24, r12
    4c60:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <_ZN6Anchor14resetAnchorBoxEff>
}
    4c64:	0f 90       	pop	r0
    4c66:	0f 90       	pop	r0
    4c68:	df 91       	pop	r29
    4c6a:	cf 91       	pop	r28
    4c6c:	1f 91       	pop	r17
    4c6e:	0f 91       	pop	r16
    4c70:	ff 90       	pop	r15
    4c72:	ef 90       	pop	r14
    4c74:	df 90       	pop	r13
    4c76:	cf 90       	pop	r12
    4c78:	08 95       	ret

00004c7a <_ZN6Anchor11checkAnchorEv>:
		model->setAnchorW(model->getAnchorW() - change);

	}
}
/*calc all params, and set alarm buzzer state*/
void Anchor::checkAnchor() {
    4c7a:	8f 92       	push	r8
    4c7c:	9f 92       	push	r9
    4c7e:	af 92       	push	r10
    4c80:	bf 92       	push	r11
    4c82:	cf 92       	push	r12
    4c84:	df 92       	push	r13
    4c86:	ef 92       	push	r14
    4c88:	ff 92       	push	r15
    4c8a:	0f 93       	push	r16
    4c8c:	1f 93       	push	r17
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	00 d0       	rcall	.+0      	; 0x4c94 <_ZN6Anchor11checkAnchorEv+0x1a>
    4c94:	00 d0       	rcall	.+0      	; 0x4c96 <_ZN6Anchor11checkAnchorEv+0x1c>
    4c96:	cd b7       	in	r28, 0x3d	; 61
    4c98:	de b7       	in	r29, 0x3e	; 62
    4c9a:	4c 01       	movw	r8, r24

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	82 81       	ldd	r24, Z+2	; 0x02
    4ca0:	93 81       	ldd	r25, Z+3	; 0x03
    4ca2:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4ca6:	88 23       	and	r24, r24
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <_ZN6Anchor11checkAnchorEv+0x32>
    4caa:	cf c0       	rjmp	.+414    	; 0x4e4a <_ZN6Anchor11checkAnchorEv+0x1d0>
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4cac:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    4cb0:	6b 01       	movw	r12, r22
    4cb2:	7c 01       	movw	r14, r24
    4cb4:	f4 01       	movw	r30, r8
    4cb6:	82 81       	ldd	r24, Z+2	; 0x02
    4cb8:	93 81       	ldd	r25, Z+3	; 0x03
    4cba:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <_ZN14FreeBoardModel13getGpsLastFixEv>
    4cbe:	c6 1a       	sub	r12, r22
    4cc0:	d7 0a       	sbc	r13, r23
    4cc2:	e8 0a       	sbc	r14, r24
    4cc4:	f9 0a       	sbc	r15, r25
    4cc6:	f1 ee       	ldi	r31, 0xE1	; 225
    4cc8:	cf 16       	cp	r12, r31
    4cca:	f3 e9       	ldi	r31, 0x93	; 147
    4ccc:	df 06       	cpc	r13, r31
    4cce:	f4 e0       	ldi	r31, 0x04	; 4
    4cd0:	ef 06       	cpc	r14, r31
    4cd2:	f1 04       	cpc	r15, r1
    4cd4:	38 f0       	brcs	.+14     	; 0x4ce4 <_ZN6Anchor11checkAnchorEv+0x6a>
				&& model->isAnchorAlarmOn()) {
    4cd6:	f4 01       	movw	r30, r8
    4cd8:	82 81       	ldd	r24, Z+2	; 0x02
    4cda:	93 81       	ldd	r25, Z+3	; 0x03
    4cdc:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <_ZN14FreeBoardModel15isAnchorAlarmOnEv>

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4ce0:	81 11       	cpse	r24, r1
    4ce2:	84 c0       	rjmp	.+264    	; 0x4dec <_ZN6Anchor11checkAnchorEv+0x172>
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
			model->setAnchorAlarmTriggered(true);
		}
		//now check position
		if (model->getGpsStatus()) {
    4ce4:	f4 01       	movw	r30, r8
    4ce6:	82 81       	ldd	r24, Z+2	; 0x02
    4ce8:	93 81       	ldd	r25, Z+3	; 0x03
    4cea:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <_ZN14FreeBoardModel12getGpsStatusEv>
    4cee:	88 23       	and	r24, r24
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <_ZN6Anchor11checkAnchorEv+0x7a>
    4cf2:	ab c0       	rjmp	.+342    	; 0x4e4a <_ZN6Anchor11checkAnchorEv+0x1d0>
			model->setAnchorDistance(Gps::getMetersTo(model->getAnchorLat(), model->getAnchorLon(),model->getGpsLatitude(),model->getGpsLongitude()));
    4cf4:	f4 01       	movw	r30, r8
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	93 81       	ldd	r25, Z+3	; 0x03
    4cfa:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4cfe:	5b 01       	movw	r10, r22
    4d00:	6c 01       	movw	r12, r24
    4d02:	f4 01       	movw	r30, r8
    4d04:	82 81       	ldd	r24, Z+2	; 0x02
    4d06:	93 81       	ldd	r25, Z+3	; 0x03
    4d08:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4d0c:	7b 01       	movw	r14, r22
    4d0e:	8c 01       	movw	r16, r24
    4d10:	f4 01       	movw	r30, r8
    4d12:	82 81       	ldd	r24, Z+2	; 0x02
    4d14:	93 81       	ldd	r25, Z+3	; 0x03
    4d16:	0e 94 13 2b 	call	0x5626	; 0x5626 <_ZN14FreeBoardModel12getAnchorLonEv>
    4d1a:	9b 01       	movw	r18, r22
    4d1c:	ac 01       	movw	r20, r24
    4d1e:	f4 01       	movw	r30, r8
    4d20:	82 81       	ldd	r24, Z+2	; 0x02
    4d22:	93 81       	ldd	r25, Z+3	; 0x03
    4d24:	2b 83       	std	Y+3, r18	; 0x03
    4d26:	3c 83       	std	Y+4, r19	; 0x04
    4d28:	49 83       	std	Y+1, r20	; 0x01
    4d2a:	5a 83       	std	Y+2, r21	; 0x02
    4d2c:	0e 94 07 2b 	call	0x560e	; 0x560e <_ZN14FreeBoardModel12getAnchorLatEv>
    4d30:	2b 81       	ldd	r18, Y+3	; 0x03
    4d32:	3c 81       	ldd	r19, Y+4	; 0x04
    4d34:	49 81       	ldd	r20, Y+1	; 0x01
    4d36:	5a 81       	ldd	r21, Y+2	; 0x02
    4d38:	0e 94 5b 35 	call	0x6ab6	; 0x6ab6 <_ZN3Gps11getMetersToEffff>
    4d3c:	ab 01       	movw	r20, r22
    4d3e:	bc 01       	movw	r22, r24
    4d40:	f4 01       	movw	r30, r8
    4d42:	82 81       	ldd	r24, Z+2	; 0x02
    4d44:	93 81       	ldd	r25, Z+3	; 0x03
    4d46:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <_ZN14FreeBoardModel17setAnchorDistanceEf>
			if (model->getAnchorDistance() > model->getAnchorMaxDistance())
    4d4a:	f4 01       	movw	r30, r8
    4d4c:	82 81       	ldd	r24, Z+2	; 0x02
    4d4e:	93 81       	ldd	r25, Z+3	; 0x03
    4d50:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4d54:	6b 01       	movw	r12, r22
    4d56:	7c 01       	movw	r14, r24
    4d58:	f4 01       	movw	r30, r8
    4d5a:	82 81       	ldd	r24, Z+2	; 0x02
    4d5c:	93 81       	ldd	r25, Z+3	; 0x03
    4d5e:	0e 94 1f 2b 	call	0x563e	; 0x563e <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>
    4d62:	9b 01       	movw	r18, r22
    4d64:	ac 01       	movw	r20, r24
    4d66:	c7 01       	movw	r24, r14
    4d68:	b6 01       	movw	r22, r12
    4d6a:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    4d6e:	18 16       	cp	r1, r24
    4d70:	64 f4       	brge	.+24     	; 0x4d8a <_ZN6Anchor11checkAnchorEv+0x110>
				model->setAnchorMaxDistance(model->getAnchorDistance());
    4d72:	f4 01       	movw	r30, r8
    4d74:	82 81       	ldd	r24, Z+2	; 0x02
    4d76:	93 81       	ldd	r25, Z+3	; 0x03
    4d78:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4d7c:	ab 01       	movw	r20, r22
    4d7e:	bc 01       	movw	r22, r24
    4d80:	f4 01       	movw	r30, r8
    4d82:	82 81       	ldd	r24, Z+2	; 0x02
    4d84:	93 81       	ldd	r25, Z+3	; 0x03
    4d86:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

			//update the anchor box
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());
    4d8a:	f4 01       	movw	r30, r8
    4d8c:	82 81       	ldd	r24, Z+2	; 0x02
    4d8e:	93 81       	ldd	r25, Z+3	; 0x03
    4d90:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4d94:	8b 01       	movw	r16, r22
    4d96:	9c 01       	movw	r18, r24
    4d98:	f4 01       	movw	r30, r8
    4d9a:	82 81       	ldd	r24, Z+2	; 0x02
    4d9c:	93 81       	ldd	r25, Z+3	; 0x03
    4d9e:	2b 83       	std	Y+3, r18	; 0x03
    4da0:	3c 83       	std	Y+4, r19	; 0x04
    4da2:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4da6:	ab 01       	movw	r20, r22
    4da8:	bc 01       	movw	r22, r24
    4daa:	2b 81       	ldd	r18, Y+3	; 0x03
    4dac:	3c 81       	ldd	r19, Y+4	; 0x04
    4dae:	c4 01       	movw	r24, r8
    4db0:	0e 94 57 24 	call	0x48ae	; 0x48ae <_ZN6Anchor15updateAnchorBoxEff>

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
    4db4:	f4 01       	movw	r30, r8
    4db6:	82 81       	ldd	r24, Z+2	; 0x02
    4db8:	93 81       	ldd	r25, Z+3	; 0x03
    4dba:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4dbe:	88 23       	and	r24, r24
    4dc0:	71 f1       	breq	.+92     	; 0x4e1e <_ZN6Anchor11checkAnchorEv+0x1a4>
    4dc2:	f4 01       	movw	r30, r8
    4dc4:	82 81       	ldd	r24, Z+2	; 0x02
    4dc6:	93 81       	ldd	r25, Z+3	; 0x03
    4dc8:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4dcc:	6b 01       	movw	r12, r22
    4dce:	7c 01       	movw	r14, r24
    4dd0:	f4 01       	movw	r30, r8
    4dd2:	82 81       	ldd	r24, Z+2	; 0x02
    4dd4:	93 81       	ldd	r25, Z+3	; 0x03
    4dd6:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4dda:	9b 01       	movw	r18, r22
    4ddc:	ac 01       	movw	r20, r24
    4dde:	c7 01       	movw	r24, r14
    4de0:	b6 01       	movw	r22, r12
    4de2:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    4de6:	18 16       	cp	r1, r24
    4de8:	84 f0       	brlt	.+32     	; 0x4e0a <_ZN6Anchor11checkAnchorEv+0x190>
    4dea:	19 c0       	rjmp	.+50     	; 0x4e1e <_ZN6Anchor11checkAnchorEv+0x1a4>
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
    4dec:	40 e0       	ldi	r20, 0x00	; 0
    4dee:	50 e0       	ldi	r21, 0x00	; 0
    4df0:	ba 01       	movw	r22, r20
    4df2:	f4 01       	movw	r30, r8
    4df4:	82 81       	ldd	r24, Z+2	; 0x02
    4df6:	93 81       	ldd	r25, Z+3	; 0x03
    4df8:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
			model->setAnchorAlarmTriggered(true);
    4dfc:	61 e0       	ldi	r22, 0x01	; 1
    4dfe:	f4 01       	movw	r30, r8
    4e00:	82 81       	ldd	r24, Z+2	; 0x02
    4e02:	93 81       	ldd	r25, Z+3	; 0x03
    4e04:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
    4e08:	6d cf       	rjmp	.-294    	; 0x4ce4 <_ZN6Anchor11checkAnchorEv+0x6a>
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
    4e0a:	40 e0       	ldi	r20, 0x00	; 0
    4e0c:	50 e0       	ldi	r21, 0x00	; 0
    4e0e:	ba 01       	movw	r22, r20
    4e10:	f4 01       	movw	r30, r8
    4e12:	82 81       	ldd	r24, Z+2	; 0x02
    4e14:	93 81       	ldd	r25, Z+3	; 0x03
    4e16:	0e 94 64 2d 	call	0x5ac8	; 0x5ac8 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
				model->setAnchorAlarmTriggered(true);
    4e1a:	61 e0       	ldi	r22, 0x01	; 1
    4e1c:	01 c0       	rjmp	.+2      	; 0x4e20 <_ZN6Anchor11checkAnchorEv+0x1a6>
			} else {
				model->setAnchorAlarmTriggered(false);
    4e1e:	60 e0       	ldi	r22, 0x00	; 0
    4e20:	f4 01       	movw	r30, r8
    4e22:	82 81       	ldd	r24, Z+2	; 0x02
    4e24:	93 81       	ldd	r25, Z+3	; 0x03
			}
		}
	}

}
    4e26:	0f 90       	pop	r0
    4e28:	0f 90       	pop	r0
    4e2a:	0f 90       	pop	r0
    4e2c:	0f 90       	pop	r0
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	1f 91       	pop	r17
    4e34:	0f 91       	pop	r16
    4e36:	ff 90       	pop	r15
    4e38:	ef 90       	pop	r14
    4e3a:	df 90       	pop	r13
    4e3c:	cf 90       	pop	r12
    4e3e:	bf 90       	pop	r11
    4e40:	af 90       	pop	r10
    4e42:	9f 90       	pop	r9
    4e44:	8f 90       	pop	r8
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
				model->setAnchorAlarmTriggered(true);
			} else {
				model->setAnchorAlarmTriggered(false);
    4e46:	0c 94 6f 2d 	jmp	0x5ade	; 0x5ade <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
			}
		}
	}

}
    4e4a:	0f 90       	pop	r0
    4e4c:	0f 90       	pop	r0
    4e4e:	0f 90       	pop	r0
    4e50:	0f 90       	pop	r0
    4e52:	df 91       	pop	r29
    4e54:	cf 91       	pop	r28
    4e56:	1f 91       	pop	r17
    4e58:	0f 91       	pop	r16
    4e5a:	ff 90       	pop	r15
    4e5c:	ef 90       	pop	r14
    4e5e:	df 90       	pop	r13
    4e60:	cf 90       	pop	r12
    4e62:	bf 90       	pop	r11
    4e64:	af 90       	pop	r10
    4e66:	9f 90       	pop	r9
    4e68:	8f 90       	pop	r8
    4e6a:	08 95       	ret

00004e6c <_ZN6Anchor14setAnchorPointEv>:

/*Set anchor position*/
void Anchor::setAnchorPoint() {
    4e6c:	cf 93       	push	r28
    4e6e:	df 93       	push	r29
    4e70:	ec 01       	movw	r28, r24
	model->setAnchorLat(model->getGpsLatitude());
    4e72:	8a 81       	ldd	r24, Y+2	; 0x02
    4e74:	9b 81       	ldd	r25, Y+3	; 0x03
    4e76:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4e7a:	ab 01       	movw	r20, r22
    4e7c:	bc 01       	movw	r22, r24
    4e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e80:	9b 81       	ldd	r25, Y+3	; 0x03
    4e82:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <_ZN14FreeBoardModel12setAnchorLatEf>
	model->setAnchorLon(model->getGpsLongitude());
    4e86:	8a 81       	ldd	r24, Y+2	; 0x02
    4e88:	9b 81       	ldd	r25, Y+3	; 0x03
    4e8a:	0e 94 ee 2c 	call	0x59dc	; 0x59dc <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4e8e:	ab 01       	movw	r20, r22
    4e90:	bc 01       	movw	r22, r24
    4e92:	8a 81       	ldd	r24, Y+2	; 0x02
    4e94:	9b 81       	ldd	r25, Y+3	; 0x03
    4e96:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <_ZN14FreeBoardModel12setAnchorLonEf>
	model->setAnchorMaxDistance(0);
    4e9a:	40 e0       	ldi	r20, 0x00	; 0
    4e9c:	50 e0       	ldi	r21, 0x00	; 0
    4e9e:	ba 01       	movw	r22, r20
    4ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea2:	9b 81       	ldd	r25, Y+3	; 0x03

}
    4ea4:	df 91       	pop	r29
    4ea6:	cf 91       	pop	r28

/*Set anchor position*/
void Anchor::setAnchorPoint() {
	model->setAnchorLat(model->getGpsLatitude());
	model->setAnchorLon(model->getGpsLongitude());
	model->setAnchorMaxDistance(0);
    4ea8:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

00004eac <_ZN9AutopilotC1EP14FreeBoardModel>:
 * And lastly, if the second you enable the controller the output goes in the wrong direction and pegs at 0 or 100%, you've got the sign of the P_Param wrong.
 * That is, if you've got a 3 in there, make it -3.
 */
#include "Autopilot.h"

Autopilot::Autopilot(FreeBoardModel* model) {
    4eac:	6f 92       	push	r6
    4eae:	7f 92       	push	r7
    4eb0:	8f 92       	push	r8
    4eb2:	9f 92       	push	r9
    4eb4:	af 92       	push	r10
    4eb6:	bf 92       	push	r11
    4eb8:	cf 92       	push	r12
    4eba:	df 92       	push	r13
    4ebc:	ef 92       	push	r14
    4ebe:	ff 92       	push	r15
    4ec0:	0f 93       	push	r16
    4ec2:	1f 93       	push	r17
    4ec4:	cf 93       	push	r28
    4ec6:	df 93       	push	r29
    4ec8:	cd b7       	in	r28, 0x3d	; 61
    4eca:	de b7       	in	r29, 0x3e	; 62
    4ecc:	e7 97       	sbiw	r28, 0x37	; 55
    4ece:	0f b6       	in	r0, 0x3f	; 63
    4ed0:	f8 94       	cli
    4ed2:	de bf       	out	0x3e, r29	; 62
    4ed4:	0f be       	out	0x3f, r0	; 63
    4ed6:	cd bf       	out	0x3d, r28	; 61
    4ed8:	4c 01       	movw	r8, r24
    4eda:	8b 01       	movw	r16, r22
    4edc:	3c 01       	movw	r6, r24
    4ede:	83 e1       	ldi	r24, 0x13	; 19
    4ee0:	68 0e       	add	r6, r24
    4ee2:	71 1c       	adc	r7, r1
    4ee4:	c3 01       	movw	r24, r6
    4ee6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <_ZN3PIDC1Ev>
	this->model = model;
    4eea:	f4 01       	movw	r30, r8
    4eec:	12 8b       	std	Z+18, r17	; 0x12
    4eee:	01 8b       	std	Z+17, r16	; 0x11
	autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    4ef0:	c8 01       	movw	r24, r16
    4ef2:	0e 94 67 2b 	call	0x56ce	; 0x56ce <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	44 e3       	ldi	r20, 0x34	; 52
    4efc:	54 e4       	ldi	r21, 0x44	; 68
    4efe:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    4f02:	6b 01       	movw	r12, r22
    4f04:	7c 01       	movw	r14, r24
    4f06:	98 2f       	mov	r25, r24
    4f08:	4c 2d       	mov	r20, r12
    4f0a:	5d 2d       	mov	r21, r13
    4f0c:	69 2f       	mov	r22, r25
    4f0e:	7f 2d       	mov	r23, r15
    4f10:	f4 01       	movw	r30, r8
    4f12:	40 83       	st	Z, r20
    4f14:	51 83       	std	Z+1, r21	; 0x01
    4f16:	62 83       	std	Z+2, r22	; 0x02
    4f18:	73 83       	std	Z+3, r23	; 0x03
	autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    4f1a:	c8 01       	movw	r24, r16
    4f1c:	0e 94 85 2b 	call	0x570a	; 0x570a <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    4f20:	9b 01       	movw	r18, r22
    4f22:	ac 01       	movw	r20, r24
    4f24:	6c 2d       	mov	r22, r12
    4f26:	7d 2d       	mov	r23, r13
    4f28:	8e 2d       	mov	r24, r14
    4f2a:	9f 2d       	mov	r25, r15
    4f2c:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    4f30:	f4 01       	movw	r30, r8
    4f32:	64 83       	std	Z+4, r22	; 0x04
    4f34:	75 83       	std	Z+5, r23	; 0x05
    4f36:	86 83       	std	Z+6, r24	; 0x06
    4f38:	97 83       	std	Z+7, r25	; 0x07
	autopilotRudderCommand = model->getAutopilotRudderCommand();
    4f3a:	c8 01       	movw	r24, r16
    4f3c:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    4f40:	f4 01       	movw	r30, r8
    4f42:	60 87       	std	Z+8, r22	; 0x08
    4f44:	71 87       	std	Z+9, r23	; 0x09
    4f46:	82 87       	std	Z+10, r24	; 0x0a
    4f48:	93 87       	std	Z+11, r25	; 0x0b
	lastDirection=true;
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	80 8b       	std	Z+16, r24	; 0x10
	this->headingPid = PID(&autopilotCurrentHeading, &autopilotRudderCommand, &autopilotTargetHeading, P_Param, I_Param, D_Param, REVERSE);
    4f4e:	a4 01       	movw	r20, r8
    4f50:	48 5f       	subi	r20, 0xF8	; 248
    4f52:	5f 4f       	sbci	r21, 0xFF	; 255
    4f54:	b4 01       	movw	r22, r8
    4f56:	6c 5f       	subi	r22, 0xFC	; 252
    4f58:	7f 4f       	sbci	r23, 0xFF	; 255
    4f5a:	1f 92       	push	r1
    4f5c:	8f 93       	push	r24
    4f5e:	8f e3       	ldi	r24, 0x3F	; 63
    4f60:	8f 93       	push	r24
    4f62:	85 e0       	ldi	r24, 0x05	; 5
    4f64:	8f 93       	push	r24
    4f66:	8e e1       	ldi	r24, 0x1E	; 30
    4f68:	8f 93       	push	r24
    4f6a:	88 eb       	ldi	r24, 0xB8	; 184
    4f6c:	8f 93       	push	r24
    4f6e:	8a e0       	ldi	r24, 0x0A	; 10
    4f70:	a8 2e       	mov	r10, r24
    4f72:	87 ed       	ldi	r24, 0xD7	; 215
    4f74:	b8 2e       	mov	r11, r24
    4f76:	83 ea       	ldi	r24, 0xA3	; 163
    4f78:	c8 2e       	mov	r12, r24
    4f7a:	8d e3       	ldi	r24, 0x3D	; 61
    4f7c:	d8 2e       	mov	r13, r24
    4f7e:	16 e6       	ldi	r17, 0x66	; 102
    4f80:	e1 2e       	mov	r14, r17
    4f82:	fe 2c       	mov	r15, r14
    4f84:	06 ee       	ldi	r16, 0xE6	; 230
    4f86:	1e e3       	ldi	r17, 0x3E	; 62
    4f88:	94 01       	movw	r18, r8
    4f8a:	ce 01       	movw	r24, r28
    4f8c:	01 96       	adiw	r24, 0x01	; 1
    4f8e:	0e 94 39 1b 	call	0x3672	; 0x3672 <_ZN3PIDC1EPdS0_S0_dddi>
    4f92:	87 e3       	ldi	r24, 0x37	; 55
    4f94:	fe 01       	movw	r30, r28
    4f96:	31 96       	adiw	r30, 0x01	; 1
    4f98:	d3 01       	movw	r26, r6
    4f9a:	01 90       	ld	r0, Z+
    4f9c:	0d 92       	st	X+, r0
    4f9e:	8a 95       	dec	r24
    4fa0:	e1 f7       	brne	.-8      	; 0x4f9a <_ZN9AutopilotC1EP14FreeBoardModel+0xee>

	headingPid.SetOutputLimits(0.0, 66.0); //output limits
    4fa2:	00 e0       	ldi	r16, 0x00	; 0
    4fa4:	10 e0       	ldi	r17, 0x00	; 0
    4fa6:	24 e8       	ldi	r18, 0x84	; 132
    4fa8:	32 e4       	ldi	r19, 0x42	; 66
    4faa:	40 e0       	ldi	r20, 0x00	; 0
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	ba 01       	movw	r22, r20
    4fb0:	c3 01       	movw	r24, r6
    4fb2:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN3PID15SetOutputLimitsEdd>
	headingPid.SetSampleTime(100);
    4fb6:	64 e6       	ldi	r22, 0x64	; 100
    4fb8:	70 e0       	ldi	r23, 0x00	; 0
    4fba:	c3 01       	movw	r24, r6
    4fbc:	0e 94 d6 19 	call	0x33ac	; 0x33ac <_ZN3PID13SetSampleTimeEi>
    4fc0:	0f 90       	pop	r0
    4fc2:	0f 90       	pop	r0
    4fc4:	0f 90       	pop	r0
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0

}
    4fcc:	e7 96       	adiw	r28, 0x37	; 55
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	de bf       	out	0x3e, r29	; 62
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	cd bf       	out	0x3d, r28	; 61
    4fd8:	df 91       	pop	r29
    4fda:	cf 91       	pop	r28
    4fdc:	1f 91       	pop	r17
    4fde:	0f 91       	pop	r16
    4fe0:	ff 90       	pop	r15
    4fe2:	ef 90       	pop	r14
    4fe4:	df 90       	pop	r13
    4fe6:	cf 90       	pop	r12
    4fe8:	bf 90       	pop	r11
    4fea:	af 90       	pop	r10
    4fec:	9f 90       	pop	r9
    4fee:	8f 90       	pop	r8
    4ff0:	7f 90       	pop	r7
    4ff2:	6f 90       	pop	r6
    4ff4:	08 95       	ret

00004ff6 <_ZN9AutopilotD1Ev>:
Autopilot::~Autopilot() {
    4ff6:	08 95       	ret

00004ff8 <_ZN9Autopilot13calcAutoPilotEv>:

}

void Autopilot::calcAutoPilot() {
    4ff8:	8f 92       	push	r8
    4ffa:	9f 92       	push	r9
    4ffc:	af 92       	push	r10
    4ffe:	bf 92       	push	r11
    5000:	cf 92       	push	r12
    5002:	df 92       	push	r13
    5004:	ef 92       	push	r14
    5006:	ff 92       	push	r15
    5008:	0f 93       	push	r16
    500a:	1f 93       	push	r17
    500c:	cf 93       	push	r28
    500e:	df 93       	push	r29
    5010:	ec 01       	movw	r28, r24
	//we dont do this if the autopilot is MANUAL
	if (model->isAutopilotOn()) {
    5012:	89 89       	ldd	r24, Y+17	; 0x11
    5014:	9a 89       	ldd	r25, Y+18	; 0x12
    5016:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <_ZN14FreeBoardModel13isAutopilotOnEv>
    501a:	8e 01       	movw	r16, r28
    501c:	0d 5e       	subi	r16, 0xED	; 237
    501e:	1f 4f       	sbci	r17, 0xFF	; 255
    5020:	88 23       	and	r24, r24
    5022:	09 f4       	brne	.+2      	; 0x5026 <_ZN9Autopilot13calcAutoPilotEv+0x2e>
    5024:	cd c0       	rjmp	.+410    	; 0x51c0 <_ZN9Autopilot13calcAutoPilotEv+0x1c8>
		//does nothing if its already on, inits if off
		headingPid.SetMode(AUTOMATIC);
    5026:	61 e0       	ldi	r22, 0x01	; 1
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	c8 01       	movw	r24, r16
    502c:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <_ZN3PID7SetModeEi>
		autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    5030:	89 89       	ldd	r24, Y+17	; 0x11
    5032:	9a 89       	ldd	r25, Y+18	; 0x12
    5034:	0e 94 67 2b 	call	0x56ce	; 0x56ce <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    5038:	20 e0       	ldi	r18, 0x00	; 0
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	44 e3       	ldi	r20, 0x34	; 52
    503e:	54 e4       	ldi	r21, 0x44	; 68
    5040:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    5044:	6b 01       	movw	r12, r22
    5046:	7c 01       	movw	r14, r24
    5048:	98 2f       	mov	r25, r24
    504a:	4c 2d       	mov	r20, r12
    504c:	5d 2d       	mov	r21, r13
    504e:	69 2f       	mov	r22, r25
    5050:	7f 2d       	mov	r23, r15
    5052:	48 83       	st	Y, r20
    5054:	59 83       	std	Y+1, r21	; 0x01
    5056:	6a 83       	std	Y+2, r22	; 0x02
    5058:	7b 83       	std	Y+3, r23	; 0x03
		autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    505a:	89 89       	ldd	r24, Y+17	; 0x11
    505c:	9a 89       	ldd	r25, Y+18	; 0x12
    505e:	0e 94 85 2b 	call	0x570a	; 0x570a <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    5062:	9b 01       	movw	r18, r22
    5064:	ac 01       	movw	r20, r24
    5066:	6c 2d       	mov	r22, r12
    5068:	7d 2d       	mov	r23, r13
    506a:	8e 2d       	mov	r24, r14
    506c:	9f 2d       	mov	r25, r15
    506e:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    5072:	6c 83       	std	Y+4, r22	; 0x04
    5074:	7d 83       	std	Y+5, r23	; 0x05
    5076:	8e 83       	std	Y+6, r24	; 0x06
    5078:	9f 83       	std	Y+7, r25	; 0x07
		headingPid.Compute();
    507a:	c8 01       	movw	r24, r16
    507c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN3PID7ComputeEv>
		//check deadzone
		if (abs(autopilotRudderCommand - lastRudderCommand) > model->getAutopilotDeadZone()) {
    5080:	2c 85       	ldd	r18, Y+12	; 0x0c
    5082:	3d 85       	ldd	r19, Y+13	; 0x0d
    5084:	4e 85       	ldd	r20, Y+14	; 0x0e
    5086:	5f 85       	ldd	r21, Y+15	; 0x0f
    5088:	68 85       	ldd	r22, Y+8	; 0x08
    508a:	79 85       	ldd	r23, Y+9	; 0x09
    508c:	8a 85       	ldd	r24, Y+10	; 0x0a
    508e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5090:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    5094:	b6 2f       	mov	r27, r22
    5096:	a7 2f       	mov	r26, r23
    5098:	46 2f       	mov	r20, r22
    509a:	57 2f       	mov	r21, r23
    509c:	68 2f       	mov	r22, r24
    509e:	79 2f       	mov	r23, r25
    50a0:	4a 01       	movw	r8, r20
    50a2:	5b 01       	movw	r10, r22
    50a4:	20 e0       	ldi	r18, 0x00	; 0
    50a6:	30 e0       	ldi	r19, 0x00	; 0
    50a8:	a9 01       	movw	r20, r18
    50aa:	6b 2f       	mov	r22, r27
    50ac:	7a 2f       	mov	r23, r26
    50ae:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    50b2:	18 16       	cp	r1, r24
    50b4:	24 f0       	brlt	.+8      	; 0x50be <_ZN9Autopilot13calcAutoPilotEv+0xc6>
    50b6:	b7 fa       	bst	r11, 7
    50b8:	b0 94       	com	r11
    50ba:	b7 f8       	bld	r11, 7
    50bc:	b0 94       	com	r11
    50be:	89 89       	ldd	r24, Y+17	; 0x11
    50c0:	9a 89       	ldd	r25, Y+18	; 0x12
    50c2:	0e 94 ce 2c 	call	0x599c	; 0x599c <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>
    50c6:	bc 01       	movw	r22, r24
    50c8:	88 27       	eor	r24, r24
    50ca:	77 fd       	sbrc	r23, 7
    50cc:	80 95       	com	r24
    50ce:	98 2f       	mov	r25, r24
    50d0:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    50d4:	9b 01       	movw	r18, r22
    50d6:	ac 01       	movw	r20, r24
    50d8:	c5 01       	movw	r24, r10
    50da:	b4 01       	movw	r22, r8
    50dc:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    50e0:	18 16       	cp	r1, r24
    50e2:	0c f0       	brlt	.+2      	; 0x50e6 <_ZN9Autopilot13calcAutoPilotEv+0xee>
    50e4:	7e c0       	rjmp	.+252    	; 0x51e2 <_ZN9Autopilot13calcAutoPilotEv+0x1ea>
			//then we move the rudder.
			//is it changing movement direction, we need to compensate for slack
			if (lastDirection && autopilotRudderCommand > lastRudderCommand) {
    50e6:	88 89       	ldd	r24, Y+16	; 0x10
    50e8:	c8 84       	ldd	r12, Y+8	; 0x08
    50ea:	d9 84       	ldd	r13, Y+9	; 0x09
    50ec:	ea 84       	ldd	r14, Y+10	; 0x0a
    50ee:	fb 84       	ldd	r15, Y+11	; 0x0b
    50f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    50f2:	9d 84       	ldd	r9, Y+13	; 0x0d
    50f4:	ae 84       	ldd	r10, Y+14	; 0x0e
    50f6:	bf 84       	ldd	r11, Y+15	; 0x0f
    50f8:	a5 01       	movw	r20, r10
    50fa:	94 01       	movw	r18, r8
    50fc:	88 23       	and	r24, r24
    50fe:	11 f1       	breq	.+68     	; 0x5144 <_ZN9Autopilot13calcAutoPilotEv+0x14c>
    5100:	c7 01       	movw	r24, r14
    5102:	b6 01       	movw	r22, r12
    5104:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    5108:	18 16       	cp	r1, r24
    510a:	0c f4       	brge	.+2      	; 0x510e <_ZN9Autopilot13calcAutoPilotEv+0x116>
    510c:	21 c0       	rjmp	.+66     	; 0x5150 <_ZN9Autopilot13calcAutoPilotEv+0x158>
				//same direction to stbd, no slack
				lastRudderCommand = autopilotRudderCommand;
			}else if (lastDirection && autopilotRudderCommand < lastRudderCommand) {
    510e:	a5 01       	movw	r20, r10
    5110:	94 01       	movw	r18, r8
    5112:	c7 01       	movw	r24, r14
    5114:	b6 01       	movw	r22, r12
    5116:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    511a:	87 ff       	sbrs	r24, 7
    511c:	3d c0       	rjmp	.+122    	; 0x5198 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to port, subtract slack
				lastDirection = false;
    511e:	18 8a       	std	Y+16, r1	; 0x10
				lastRudderCommand = autopilotRudderCommand - model->getAutopilotSlack();
    5120:	89 89       	ldd	r24, Y+17	; 0x11
    5122:	9a 89       	ldd	r25, Y+18	; 0x12
    5124:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <_ZN14FreeBoardModel17getAutopilotSlackEv>
    5128:	bc 01       	movw	r22, r24
    512a:	88 27       	eor	r24, r24
    512c:	77 fd       	sbrc	r23, 7
    512e:	80 95       	com	r24
    5130:	98 2f       	mov	r25, r24
    5132:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    5136:	9b 01       	movw	r18, r22
    5138:	ac 01       	movw	r20, r24
    513a:	c7 01       	movw	r24, r14
    513c:	b6 01       	movw	r22, r12
    513e:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    5142:	26 c0       	rjmp	.+76     	; 0x5190 <_ZN9Autopilot13calcAutoPilotEv+0x198>
			}else if (!lastDirection && autopilotRudderCommand < lastRudderCommand) {
    5144:	c7 01       	movw	r24, r14
    5146:	b6 01       	movw	r22, r12
    5148:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    514c:	87 ff       	sbrs	r24, 7
    514e:	05 c0       	rjmp	.+10     	; 0x515a <_ZN9Autopilot13calcAutoPilotEv+0x162>
				//same direction to port
				lastRudderCommand = autopilotRudderCommand;
    5150:	cc 86       	std	Y+12, r12	; 0x0c
    5152:	dd 86       	std	Y+13, r13	; 0x0d
    5154:	ee 86       	std	Y+14, r14	; 0x0e
    5156:	ff 86       	std	Y+15, r15	; 0x0f
    5158:	1f c0       	rjmp	.+62     	; 0x5198 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
			}else if (!lastDirection && autopilotRudderCommand > lastRudderCommand) {
    515a:	a5 01       	movw	r20, r10
    515c:	94 01       	movw	r18, r8
    515e:	c7 01       	movw	r24, r14
    5160:	b6 01       	movw	r22, r12
    5162:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    5166:	18 16       	cp	r1, r24
    5168:	bc f4       	brge	.+46     	; 0x5198 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to stbd, add slack
				lastDirection = true;
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	88 8b       	std	Y+16, r24	; 0x10
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
    516e:	89 89       	ldd	r24, Y+17	; 0x11
    5170:	9a 89       	ldd	r25, Y+18	; 0x12
    5172:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <_ZN14FreeBoardModel17getAutopilotSlackEv>
    5176:	bc 01       	movw	r22, r24
    5178:	88 27       	eor	r24, r24
    517a:	77 fd       	sbrc	r23, 7
    517c:	80 95       	com	r24
    517e:	98 2f       	mov	r25, r24
    5180:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    5184:	9b 01       	movw	r18, r22
    5186:	ac 01       	movw	r20, r24
    5188:	c7 01       	movw	r24, r14
    518a:	b6 01       	movw	r22, r12
    518c:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    5190:	6c 87       	std	Y+12, r22	; 0x0c
    5192:	7d 87       	std	Y+13, r23	; 0x0d
    5194:	8e 87       	std	Y+14, r24	; 0x0e
    5196:	9f 87       	std	Y+15, r25	; 0x0f
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    5198:	4c 85       	ldd	r20, Y+12	; 0x0c
    519a:	5d 85       	ldd	r21, Y+13	; 0x0d
    519c:	6e 85       	ldd	r22, Y+14	; 0x0e
    519e:	7f 85       	ldd	r23, Y+15	; 0x0f
    51a0:	89 89       	ldd	r24, Y+17	; 0x11
    51a2:	9a 89       	ldd	r25, Y+18	; 0x12
		}

	} else {
		headingPid.SetMode(MANUAL);
	}
}
    51a4:	df 91       	pop	r29
    51a6:	cf 91       	pop	r28
    51a8:	1f 91       	pop	r17
    51aa:	0f 91       	pop	r16
    51ac:	ff 90       	pop	r15
    51ae:	ef 90       	pop	r14
    51b0:	df 90       	pop	r13
    51b2:	cf 90       	pop	r12
    51b4:	bf 90       	pop	r11
    51b6:	af 90       	pop	r10
    51b8:	9f 90       	pop	r9
    51ba:	8f 90       	pop	r8
				lastDirection = true;
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    51bc:	0c 94 e3 2d 	jmp	0x5bc6	; 0x5bc6 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>
		}

	} else {
		headingPid.SetMode(MANUAL);
    51c0:	60 e0       	ldi	r22, 0x00	; 0
    51c2:	70 e0       	ldi	r23, 0x00	; 0
    51c4:	c8 01       	movw	r24, r16
	}
}
    51c6:	df 91       	pop	r29
    51c8:	cf 91       	pop	r28
    51ca:	1f 91       	pop	r17
    51cc:	0f 91       	pop	r16
    51ce:	ff 90       	pop	r15
    51d0:	ef 90       	pop	r14
    51d2:	df 90       	pop	r13
    51d4:	cf 90       	pop	r12
    51d6:	bf 90       	pop	r11
    51d8:	af 90       	pop	r10
    51da:	9f 90       	pop	r9
    51dc:	8f 90       	pop	r8
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
		}

	} else {
		headingPid.SetMode(MANUAL);
    51de:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <_ZN3PID7SetModeEi>
	}
}
    51e2:	df 91       	pop	r29
    51e4:	cf 91       	pop	r28
    51e6:	1f 91       	pop	r17
    51e8:	0f 91       	pop	r16
    51ea:	ff 90       	pop	r15
    51ec:	ef 90       	pop	r14
    51ee:	df 90       	pop	r13
    51f0:	cf 90       	pop	r12
    51f2:	bf 90       	pop	r11
    51f4:	af 90       	pop	r10
    51f6:	9f 90       	pop	r9
    51f8:	8f 90       	pop	r8
    51fa:	08 95       	ret

000051fc <_ZN14FreeBoardModelC1Ev>:
 *      Author: robert
 */

#include "FreeBoardModel.h"

FreeBoardModel::FreeBoardModel() {
    51fc:	fc 01       	movw	r30, r24
	alarmLast = 0; //millis time of last beep state change
    51fe:	10 82       	st	Z, r1
    5200:	11 82       	std	Z+1, r1	; 0x01
    5202:	12 82       	std	Z+2, r1	; 0x02
    5204:	13 82       	std	Z+3, r1	; 0x03
	alarmSnooze = 0; //5 minute alarm snooze
    5206:	14 82       	std	Z+4, r1	; 0x04
    5208:	15 82       	std	Z+5, r1	; 0x05
    520a:	16 82       	std	Z+6, r1	; 0x06
    520c:	17 82       	std	Z+7, r1	; 0x07
	//unsigned long alarmTriggered ; //true if any alarm is triggered - derived

	//anchor
	//float anchorRadius; //anchor alarm radius in meters
	anchorState.anchorRadiusDeg = 0.0; //anchor alarm radius in decimal degrees, eg 1deg = 60NM.
    520e:	10 8a       	std	Z+16, r1	; 0x10
    5210:	11 8a       	std	Z+17, r1	; 0x11
    5212:	12 8a       	std	Z+18, r1	; 0x12
    5214:	13 8a       	std	Z+19, r1	; 0x13

	//anchor alarm data
	//float anchorLat; // variable for reading the anchor latitude
	//float anchorLon; // variable for reading the anchor longitude
	anchorState.anchorDistance = 0.0;
    5216:	14 8a       	std	Z+20, r1	; 0x14
    5218:	15 8a       	std	Z+21, r1	; 0x15
    521a:	16 8a       	std	Z+22, r1	; 0x16
    521c:	17 8a       	std	Z+23, r1	; 0x17
	anchorState.anchorMaxDistance = 0.0;
    521e:	10 8e       	std	Z+24, r1	; 0x18
    5220:	11 8e       	std	Z+25, r1	; 0x19
    5222:	12 8e       	std	Z+26, r1	; 0x1a
    5224:	13 8e       	std	Z+27, r1	; 0x1b
	//bool anchorAlarmOn; //flag to turn anchor alarm on/off toggle
	anchorState.anchorAlarmTriggered = false; //set to true to trigger anchor alarm
    5226:	14 8e       	std	Z+28, r1	; 0x1c

	//a box around the anchor, shrinks with every GPS reading to home in on the anchor itself
	anchorState.anchorN = 90.0;
    5228:	40 e0       	ldi	r20, 0x00	; 0
    522a:	50 e0       	ldi	r21, 0x00	; 0
    522c:	64 eb       	ldi	r22, 0xB4	; 180
    522e:	72 e4       	ldi	r23, 0x42	; 66
    5230:	45 8f       	std	Z+29, r20	; 0x1d
    5232:	56 8f       	std	Z+30, r21	; 0x1e
    5234:	67 8f       	std	Z+31, r22	; 0x1f
    5236:	70 a3       	std	Z+32, r23	; 0x20
	anchorState.anchorS = -90.0;
    5238:	40 e0       	ldi	r20, 0x00	; 0
    523a:	50 e0       	ldi	r21, 0x00	; 0
    523c:	64 eb       	ldi	r22, 0xB4	; 180
    523e:	72 ec       	ldi	r23, 0xC2	; 194
    5240:	41 a3       	std	Z+33, r20	; 0x21
    5242:	52 a3       	std	Z+34, r21	; 0x22
    5244:	63 a3       	std	Z+35, r22	; 0x23
    5246:	74 a3       	std	Z+36, r23	; 0x24
	anchorState.anchorE = 180.0;
    5248:	40 e0       	ldi	r20, 0x00	; 0
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	64 e3       	ldi	r22, 0x34	; 52
    524e:	73 e4       	ldi	r23, 0x43	; 67
    5250:	45 a3       	std	Z+37, r20	; 0x25
    5252:	56 a3       	std	Z+38, r21	; 0x26
    5254:	67 a3       	std	Z+39, r22	; 0x27
    5256:	70 a7       	std	Z+40, r23	; 0x28
	anchorState.anchorW = -180.0;
    5258:	40 e0       	ldi	r20, 0x00	; 0
    525a:	50 e0       	ldi	r21, 0x00	; 0
    525c:	64 e3       	ldi	r22, 0x34	; 52
    525e:	73 ec       	ldi	r23, 0xC3	; 195
    5260:	41 a7       	std	Z+41, r20	; 0x29
    5262:	52 a7       	std	Z+42, r21	; 0x2a
    5264:	63 a7       	std	Z+43, r22	; 0x2b
    5266:	74 a7       	std	Z+44, r23	; 0x2c

	//autopilot
	autopilotState.autopilotOn=false;
    5268:	15 a6       	std	Z+45, r1	; 0x2d
	//disengage the autopilot if we reboot!!
	//Dont want to go screaming off on wrong course.
	autopilotState.autopilotReference = AUTOPILOT_COMPASS;
    526a:	83 e4       	ldi	r24, 0x43	; 67
    526c:	82 ab       	std	Z+50, r24	; 0x32
	autopilotState.autopilotTargetHeading = 0; //Setpoint
    526e:	13 aa       	std	Z+51, r1	; 0x33
    5270:	14 aa       	std	Z+52, r1	; 0x34
    5272:	15 aa       	std	Z+53, r1	; 0x35
    5274:	16 aa       	std	Z+54, r1	; 0x36
	autopilotState.autopilotRudderCommand = 33; //Output (rudder central)
    5276:	40 e0       	ldi	r20, 0x00	; 0
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	64 e0       	ldi	r22, 0x04	; 4
    527c:	72 e4       	ldi	r23, 0x42	; 66
    527e:	47 ab       	std	Z+55, r20	; 0x37
    5280:	50 af       	std	Z+56, r21	; 0x38
    5282:	61 af       	std	Z+57, r22	; 0x39
    5284:	72 af       	std	Z+58, r23	; 0x3a
	//bool autopilotAlarmOn;
	autopilotState.autopilotAlarmTriggered = false;
    5286:	13 ae       	std	Z+59, r1	; 0x3b
	autopilotState.autopilotAlarmMaxXTError = 100; // +/- meters cross track error
    5288:	40 e0       	ldi	r20, 0x00	; 0
    528a:	50 e0       	ldi	r21, 0x00	; 0
    528c:	68 ec       	ldi	r22, 0xC8	; 200
    528e:	72 e4       	ldi	r23, 0x42	; 66
    5290:	44 af       	std	Z+60, r20	; 0x3c
    5292:	55 af       	std	Z+61, r21	; 0x3d
    5294:	66 af       	std	Z+62, r22	; 0x3e
    5296:	77 af       	std	Z+63, r23	; 0x3f
	autopilotState.autopilotAlarmMaxWindError = 10; // +/- wind angle change, for over 1 minute
    5298:	df 01       	movw	r26, r30
    529a:	a0 5c       	subi	r26, 0xC0	; 192
    529c:	bf 4f       	sbci	r27, 0xFF	; 255
    529e:	40 e0       	ldi	r20, 0x00	; 0
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	60 e2       	ldi	r22, 0x20	; 32
    52a4:	71 e4       	ldi	r23, 0x41	; 65
    52a6:	4d 93       	st	X+, r20
    52a8:	5d 93       	st	X+, r21
    52aa:	6d 93       	st	X+, r22
    52ac:	7c 93       	st	X, r23
    52ae:	13 97       	sbiw	r26, 0x03	; 3
	autopilotState.autopilotAlarmMaxCourseError = 10; // +/- course error, for over 1 minute
    52b0:	df 01       	movw	r26, r30
    52b2:	ac 5b       	subi	r26, 0xBC	; 188
    52b4:	bf 4f       	sbci	r27, 0xFF	; 255
    52b6:	4d 93       	st	X+, r20
    52b8:	5d 93       	st	X+, r21
    52ba:	6d 93       	st	X+, r22
    52bc:	7c 93       	st	X, r23
    52be:	13 97       	sbiw	r26, 0x03	; 3

	//compass
	magneticHeading=0;
    52c0:	10 86       	std	Z+8, r1	; 0x08
    52c2:	11 86       	std	Z+9, r1	; 0x09
    52c4:	12 86       	std	Z+10, r1	; 0x0a
    52c6:	13 86       	std	Z+11, r1	; 0x0b
	declination=0;
    52c8:	14 86       	std	Z+12, r1	; 0x0c
    52ca:	15 86       	std	Z+13, r1	; 0x0d
    52cc:	16 86       	std	Z+14, r1	; 0x0e
    52ce:	17 86       	std	Z+15, r1	; 0x0f
	//gps
	gpsState.gpsDecode = false; //flag to indicate a new sentence was decoded.
    52d0:	df 01       	movw	r26, r30
    52d2:	a8 5b       	subi	r26, 0xB8	; 184
    52d4:	bf 4f       	sbci	r27, 0xFF	; 255
    52d6:	1c 92       	st	X, r1
	gpsState.gpsLastFix = 0; //time of last good gps fix.
    52d8:	df 01       	movw	r26, r30
    52da:	a7 5b       	subi	r26, 0xB7	; 183
    52dc:	bf 4f       	sbci	r27, 0xFF	; 255
    52de:	1d 92       	st	X+, r1
    52e0:	1d 92       	st	X+, r1
    52e2:	1d 92       	st	X+, r1
    52e4:	1c 92       	st	X, r1
    52e6:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsUtc = 0; // decimal value of UTC term in last full GPRMC sentence
    52e8:	df 01       	movw	r26, r30
    52ea:	a3 5b       	subi	r26, 0xB3	; 179
    52ec:	bf 4f       	sbci	r27, 0xFF	; 255
    52ee:	1d 92       	st	X+, r1
    52f0:	1d 92       	st	X+, r1
    52f2:	1d 92       	st	X+, r1
    52f4:	1c 92       	st	X, r1
    52f6:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsStatus = 'V'; //  status character in last full GPRMC sentence ('A' or 'V')
    52f8:	df 01       	movw	r26, r30
    52fa:	af 5a       	subi	r26, 0xAF	; 175
    52fc:	bf 4f       	sbci	r27, 0xFF	; 255
    52fe:	86 e5       	ldi	r24, 0x56	; 86
    5300:	8c 93       	st	X, r24
	gpsState.gpsLatitude = 0.0; // signed degree-decimal value of latitude terms in last full GPRMC sentence
    5302:	df 01       	movw	r26, r30
    5304:	ae 5a       	subi	r26, 0xAE	; 174
    5306:	bf 4f       	sbci	r27, 0xFF	; 255
    5308:	1d 92       	st	X+, r1
    530a:	1d 92       	st	X+, r1
    530c:	1d 92       	st	X+, r1
    530e:	1c 92       	st	X, r1
    5310:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsLongitude = 0.0; // signed degree-decimal value of longitude terms in last full GPRMC sentence
    5312:	df 01       	movw	r26, r30
    5314:	aa 5a       	subi	r26, 0xAA	; 170
    5316:	bf 4f       	sbci	r27, 0xFF	; 255
    5318:	1d 92       	st	X+, r1
    531a:	1d 92       	st	X+, r1
    531c:	1d 92       	st	X+, r1
    531e:	1c 92       	st	X, r1
    5320:	13 97       	sbiw	r26, 0x03	; 3
	//float gpsSpeedUnit; //unit multiplier for gpsSpeed. 1.0 = KNT,1.1507794	=MPH, see nmea.h
	gpsState.gpsSpeed = 0.0; // speed-on-ground term in last full GPRMC sentence
    5322:	df 01       	movw	r26, r30
    5324:	a6 5a       	subi	r26, 0xA6	; 166
    5326:	bf 4f       	sbci	r27, 0xFF	; 255
    5328:	1d 92       	st	X+, r1
    532a:	1d 92       	st	X+, r1
    532c:	1d 92       	st	X+, r1
    532e:	1c 92       	st	X, r1
    5330:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsCourse = 0.0; // track-angle-made-good term in last full GPRMC sentence
    5332:	df 01       	movw	r26, r30
    5334:	a2 5a       	subi	r26, 0xA2	; 162
    5336:	bf 4f       	sbci	r27, 0xFF	; 255
    5338:	1d 92       	st	X+, r1
    533a:	1d 92       	st	X+, r1
    533c:	1d 92       	st	X+, r1
    533e:	1c 92       	st	X, r1
    5340:	13 97       	sbiw	r26, 0x03	; 3
	//bool gpsAlarmOn; //true to engage alarm
	gpsState.gpsAlarmTriggered = false; //set to true to trigger gps alarm
    5342:	df 01       	movw	r26, r30
    5344:	ae 59       	subi	r26, 0x9E	; 158
    5346:	bf 4f       	sbci	r27, 0xFF	; 255
    5348:	1c 92       	st	X, r1
	//double gpsAlarmFixTime; //max time in millis without fix

	//seatalk
	//volatile bool radarAlarmOn; //set to true to enable radar alarm
	radarAlarmTriggered = false; //set to true to trigger radar alarm
    534a:	df 01       	movw	r26, r30
    534c:	ad 59       	subi	r26, 0x9D	; 157
    534e:	bf 4f       	sbci	r27, 0xFF	; 255
    5350:	1c 92       	st	X, r1
	//volatile bool mobAlarmOn; //set to true to enable mob alarm
	mobAlarmTriggered = false; //set to true to trigger MOB alarm
    5352:	df 01       	movw	r26, r30
    5354:	ac 59       	subi	r26, 0x9C	; 156
    5356:	bf 4f       	sbci	r27, 0xFF	; 255
    5358:	1c 92       	st	X, r1

	//wind
	windState.windLastUpdate = 0;
    535a:	df 01       	movw	r26, r30
    535c:	ab 59       	subi	r26, 0x9B	; 155
    535e:	bf 4f       	sbci	r27, 0xFF	; 255
    5360:	1d 92       	st	X+, r1
    5362:	1d 92       	st	X+, r1
    5364:	1d 92       	st	X+, r1
    5366:	1c 92       	st	X, r1
    5368:	13 97       	sbiw	r26, 0x03	; 3
	windState.windAverage = 0.0;
    536a:	df 01       	movw	r26, r30
    536c:	a7 59       	subi	r26, 0x97	; 151
    536e:	bf 4f       	sbci	r27, 0xFF	; 255
    5370:	1d 92       	st	X+, r1
    5372:	1d 92       	st	X+, r1
    5374:	1d 92       	st	X+, r1
    5376:	1c 92       	st	X, r1
    5378:	13 97       	sbiw	r26, 0x03	; 3
	//windState.windFactor=0;
	windState.windMax = 0;
    537a:	df 01       	movw	r26, r30
    537c:	a3 59       	subi	r26, 0x93	; 147
    537e:	bf 4f       	sbci	r27, 0xFF	; 255
    5380:	1d 92       	st	X+, r1
    5382:	1c 92       	st	X, r1
	windState.windApparentDir = 0;
    5384:	df 01       	movw	r26, r30
    5386:	a1 59       	subi	r26, 0x91	; 145
    5388:	bf 4f       	sbci	r27, 0xFF	; 255
    538a:	1d 92       	st	X+, r1
    538c:	1c 92       	st	X, r1
	windState.windTrueDir=0;
    538e:	df 01       	movw	r26, r30
    5390:	af 58       	subi	r26, 0x8F	; 143
    5392:	bf 4f       	sbci	r27, 0xFF	; 255
    5394:	1d 92       	st	X+, r1
    5396:	1c 92       	st	X, r1
	//int windAlarmSpeed;
	//bool windAlarmOn;
	windState.windAlarmTriggered = false;
    5398:	df 01       	movw	r26, r30
    539a:	ad 58       	subi	r26, 0x8D	; 141
    539c:	bf 4f       	sbci	r27, 0xFF	; 255
    539e:	1c 92       	st	X, r1

	//struct Configuration{
	config.anchorLat = 0.0;
    53a0:	df 01       	movw	r26, r30
    53a2:	ac 58       	subi	r26, 0x8C	; 140
    53a4:	bf 4f       	sbci	r27, 0xFF	; 255
    53a6:	1d 92       	st	X+, r1
    53a8:	1d 92       	st	X+, r1
    53aa:	1d 92       	st	X+, r1
    53ac:	1c 92       	st	X, r1
    53ae:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorLon = 0.0;
    53b0:	df 01       	movw	r26, r30
    53b2:	a8 58       	subi	r26, 0x88	; 136
    53b4:	bf 4f       	sbci	r27, 0xFF	; 255
    53b6:	1d 92       	st	X+, r1
    53b8:	1d 92       	st	X+, r1
    53ba:	1d 92       	st	X+, r1
    53bc:	1c 92       	st	X, r1
    53be:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorRadius = 40.0;
    53c0:	df 01       	movw	r26, r30
    53c2:	a4 58       	subi	r26, 0x84	; 132
    53c4:	bf 4f       	sbci	r27, 0xFF	; 255
    53c6:	40 e0       	ldi	r20, 0x00	; 0
    53c8:	50 e0       	ldi	r21, 0x00	; 0
    53ca:	60 e2       	ldi	r22, 0x20	; 32
    53cc:	72 e4       	ldi	r23, 0x42	; 66
    53ce:	4d 93       	st	X+, r20
    53d0:	5d 93       	st	X+, r21
    53d2:	6d 93       	st	X+, r22
    53d4:	7c 93       	st	X, r23
    53d6:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorAlarmOn = false;
    53d8:	df 01       	movw	r26, r30
    53da:	a0 58       	subi	r26, 0x80	; 128
    53dc:	bf 4f       	sbci	r27, 0xFF	; 255
    53de:	1c 92       	st	X, r1
	config.autopilotAlarmOn = false;
    53e0:	df 01       	movw	r26, r30
    53e2:	af 57       	subi	r26, 0x7F	; 127
    53e4:	bf 4f       	sbci	r27, 0xFF	; 255
    53e6:	1c 92       	st	X, r1
	config.autopilotDeadZone = 0;
    53e8:	df 01       	movw	r26, r30
    53ea:	ae 57       	subi	r26, 0x7E	; 126
    53ec:	bf 4f       	sbci	r27, 0xFF	; 255
    53ee:	1d 92       	st	X+, r1
    53f0:	1c 92       	st	X, r1
	config.autopilotSlack = 0;
    53f2:	df 01       	movw	r26, r30
    53f4:	ac 57       	subi	r26, 0x7C	; 124
    53f6:	bf 4f       	sbci	r27, 0xFF	; 255
    53f8:	1d 92       	st	X+, r1
    53fa:	1c 92       	st	X, r1
	config.gpsSpeedUnit = KTS;
    53fc:	df 01       	movw	r26, r30
    53fe:	aa 57       	subi	r26, 0x7A	; 122
    5400:	bf 4f       	sbci	r27, 0xFF	; 255
    5402:	40 e0       	ldi	r20, 0x00	; 0
    5404:	50 e0       	ldi	r21, 0x00	; 0
    5406:	60 e8       	ldi	r22, 0x80	; 128
    5408:	7f e3       	ldi	r23, 0x3F	; 63
    540a:	4d 93       	st	X+, r20
    540c:	5d 93       	st	X+, r21
    540e:	6d 93       	st	X+, r22
    5410:	7c 93       	st	X, r23
    5412:	13 97       	sbiw	r26, 0x03	; 3
	config.gpsAlarmOn = false;
    5414:	df 01       	movw	r26, r30
    5416:	a6 57       	subi	r26, 0x76	; 118
    5418:	bf 4f       	sbci	r27, 0xFF	; 255
    541a:	1c 92       	st	X, r1
	config.gpsAlarmFixTime = 1000l * 60 * 5; //5 min
    541c:	df 01       	movw	r26, r30
    541e:	a5 57       	subi	r26, 0x75	; 117
    5420:	bf 4f       	sbci	r27, 0xFF	; 255
    5422:	40 ee       	ldi	r20, 0xE0	; 224
    5424:	53 e9       	ldi	r21, 0x93	; 147
    5426:	64 e0       	ldi	r22, 0x04	; 4
    5428:	70 e0       	ldi	r23, 0x00	; 0
    542a:	4d 93       	st	X+, r20
    542c:	5d 93       	st	X+, r21
    542e:	6d 93       	st	X+, r22
    5430:	7c 93       	st	X, r23
    5432:	13 97       	sbiw	r26, 0x03	; 3
	config.radarAlarmOn = false;
    5434:	df 01       	movw	r26, r30
    5436:	a1 57       	subi	r26, 0x71	; 113
    5438:	bf 4f       	sbci	r27, 0xFF	; 255
    543a:	1c 92       	st	X, r1
	config.mobAlarmOn = false;
    543c:	df 01       	movw	r26, r30
    543e:	a0 57       	subi	r26, 0x70	; 112
    5440:	bf 4f       	sbci	r27, 0xFF	; 255
    5442:	1c 92       	st	X, r1
	config.windAlarmSpeed = 99;
    5444:	df 01       	movw	r26, r30
    5446:	af 56       	subi	r26, 0x6F	; 111
    5448:	bf 4f       	sbci	r27, 0xFF	; 255
    544a:	83 e6       	ldi	r24, 0x63	; 99
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	8d 93       	st	X+, r24
    5450:	9c 93       	st	X, r25
	config.windAlarmOn = false;
    5452:	df 01       	movw	r26, r30
    5454:	ad 56       	subi	r26, 0x6D	; 109
    5456:	bf 4f       	sbci	r27, 0xFF	; 255
    5458:	1c 92       	st	X, r1
	config.windFactor = 10000.0;
    545a:	df 01       	movw	r26, r30
    545c:	ac 56       	subi	r26, 0x6C	; 108
    545e:	bf 4f       	sbci	r27, 0xFF	; 255
    5460:	40 e0       	ldi	r20, 0x00	; 0
    5462:	50 e4       	ldi	r21, 0x40	; 64
    5464:	6c e1       	ldi	r22, 0x1C	; 28
    5466:	76 e4       	ldi	r23, 0x46	; 70
    5468:	4d 93       	st	X+, r20
    546a:	5d 93       	st	X+, r21
    546c:	6d 93       	st	X+, r22
    546e:	7c 93       	st	X, r23
    5470:	13 97       	sbiw	r26, 0x03	; 3
	config.windZeroOffset = 0;
    5472:	df 01       	movw	r26, r30
    5474:	a8 56       	subi	r26, 0x68	; 104
    5476:	bf 4f       	sbci	r27, 0xFF	; 255
    5478:	1d 92       	st	X+, r1
    547a:	1c 92       	st	X, r1
	//ver6
	config.gpsModel= GPS_EM_406A;
    547c:	df 01       	movw	r26, r30
    547e:	a6 56       	subi	r26, 0x66	; 102
    5480:	bf 4f       	sbci	r27, 0xFF	; 255
    5482:	81 e0       	ldi	r24, 0x01	; 1
    5484:	90 e0       	ldi	r25, 0x00	; 0
    5486:	8d 93       	st	X+, r24
    5488:	9c 93       	st	X, r25
	config.serialBaud=38400l;
    548a:	df 01       	movw	r26, r30
    548c:	a4 56       	subi	r26, 0x64	; 100
    548e:	bf 4f       	sbci	r27, 0xFF	; 255
    5490:	40 e0       	ldi	r20, 0x00	; 0
    5492:	56 e9       	ldi	r21, 0x96	; 150
    5494:	60 e0       	ldi	r22, 0x00	; 0
    5496:	70 e0       	ldi	r23, 0x00	; 0
    5498:	4d 93       	st	X+, r20
    549a:	5d 93       	st	X+, r21
    549c:	6d 93       	st	X+, r22
    549e:	7c 93       	st	X, r23
    54a0:	13 97       	sbiw	r26, 0x03	; 3
	config.serialBaud1=38400l;
    54a2:	df 01       	movw	r26, r30
    54a4:	a0 56       	subi	r26, 0x60	; 96
    54a6:	bf 4f       	sbci	r27, 0xFF	; 255
    54a8:	4d 93       	st	X+, r20
    54aa:	5d 93       	st	X+, r21
    54ac:	6d 93       	st	X+, r22
    54ae:	7c 93       	st	X, r23
    54b0:	13 97       	sbiw	r26, 0x03	; 3
	config.serialBaud2=9600l; //seatalk?
    54b2:	df 01       	movw	r26, r30
    54b4:	ac 55       	subi	r26, 0x5C	; 92
    54b6:	bf 4f       	sbci	r27, 0xFF	; 255
    54b8:	40 e8       	ldi	r20, 0x80	; 128
    54ba:	55 e2       	ldi	r21, 0x25	; 37
    54bc:	60 e0       	ldi	r22, 0x00	; 0
    54be:	70 e0       	ldi	r23, 0x00	; 0
    54c0:	4d 93       	st	X+, r20
    54c2:	5d 93       	st	X+, r21
    54c4:	6d 93       	st	X+, r22
    54c6:	7c 93       	st	X, r23
    54c8:	13 97       	sbiw	r26, 0x03	; 3
	config.serialBaud3=9600l; //16 bytes
    54ca:	df 01       	movw	r26, r30
    54cc:	a8 55       	subi	r26, 0x58	; 88
    54ce:	bf 4f       	sbci	r27, 0xFF	; 255
    54d0:	4d 93       	st	X+, r20
    54d2:	5d 93       	st	X+, r21
    54d4:	6d 93       	st	X+, r22
    54d6:	7c 93       	st	X, r23
    54d8:	13 97       	sbiw	r26, 0x03	; 3
	config.seaTalk=false;
    54da:	df 01       	movw	r26, r30
    54dc:	a4 55       	subi	r26, 0x54	; 84
    54de:	bf 4f       	sbci	r27, 0xFF	; 255
    54e0:	1c 92       	st	X, r1
	//}config;

//we change this if we change the struct so we can tell before reloading incompatible versions
	version = EEPROM_VER;
    54e2:	e3 55       	subi	r30, 0x53	; 83
    54e4:	ff 4f       	sbci	r31, 0xFF	; 255
    54e6:	87 e0       	ldi	r24, 0x07	; 7
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	91 83       	std	Z+1, r25	; 0x01
    54ec:	80 83       	st	Z, r24
    54ee:	08 95       	ret

000054f0 <_ZN14FreeBoardModel10saveConfigEv>:
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
	return i;
}
void FreeBoardModel::saveConfig() {
    54f0:	0f 93       	push	r16
    54f2:	1f 93       	push	r17
    54f4:	cf 93       	push	r28
    54f6:	df 93       	push	r29
    54f8:	ec 01       	movw	r28, r24

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    54fa:	fc 01       	movw	r30, r24
    54fc:	e3 55       	subi	r30, 0x53	; 83
    54fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5500:	40 81       	ld	r20, Z
    5502:	60 e0       	ldi	r22, 0x00	; 0
    5504:	70 e0       	ldi	r23, 0x00	; 0
    5506:	8f e2       	ldi	r24, 0x2F	; 47
    5508:	99 e0       	ldi	r25, 0x09	; 9
    550a:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN11EEPROMClass5writeEih>
    550e:	fe 01       	movw	r30, r28
    5510:	e2 55       	subi	r30, 0x52	; 82
    5512:	ff 4f       	sbci	r31, 0xFF	; 255
    5514:	40 81       	ld	r20, Z
    5516:	61 e0       	ldi	r22, 0x01	; 1
    5518:	70 e0       	ldi	r23, 0x00	; 0
    551a:	8f e2       	ldi	r24, 0x2F	; 47
    551c:	99 e0       	ldi	r25, 0x09	; 9
    551e:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN11EEPROMClass5writeEih>
}
void FreeBoardModel::saveConfig() {
	//write out a current version
	EEPROM_writeAnything(0, version);
	//write data
	EEPROM_writeAnything(EEPROM_DATA, config);
    5522:	cc 58       	subi	r28, 0x8C	; 140
    5524:	df 4f       	sbci	r29, 0xFF	; 255
    5526:	64 e0       	ldi	r22, 0x04	; 4
    5528:	70 e0       	ldi	r23, 0x00	; 0

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    552a:	49 91       	ld	r20, Y+
    552c:	8b 01       	movw	r16, r22
    552e:	0f 5f       	subi	r16, 0xFF	; 255
    5530:	1f 4f       	sbci	r17, 0xFF	; 255
    5532:	8f e2       	ldi	r24, 0x2F	; 47
    5534:	99 e0       	ldi	r25, 0x09	; 9
    5536:	0e 94 fa 20 	call	0x41f4	; 0x41f4 <_ZN11EEPROMClass5writeEih>
    553a:	b8 01       	movw	r22, r16
}

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    553c:	0d 33       	cpi	r16, 0x3D	; 61
    553e:	11 05       	cpc	r17, r1
    5540:	a1 f7       	brne	.-24     	; 0x552a <_ZN14FreeBoardModel10saveConfigEv+0x3a>
void FreeBoardModel::saveConfig() {
	//write out a current version
	EEPROM_writeAnything(0, version);
	//write data
	EEPROM_writeAnything(EEPROM_DATA, config);
}
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	1f 91       	pop	r17
    5548:	0f 91       	pop	r16
    554a:	08 95       	ret

0000554c <_ZN14FreeBoardModel10readConfigEv>:

void FreeBoardModel::readConfig() {
    554c:	ef 92       	push	r14
    554e:	ff 92       	push	r15
    5550:	0f 93       	push	r16
    5552:	1f 93       	push	r17
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	00 d0       	rcall	.+0      	; 0x555a <_ZN14FreeBoardModel10readConfigEv+0xe>
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
    555e:	8c 01       	movw	r16, r24
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    5560:	60 e0       	ldi	r22, 0x00	; 0
    5562:	70 e0       	ldi	r23, 0x00	; 0
    5564:	8f e2       	ldi	r24, 0x2F	; 47
    5566:	99 e0       	ldi	r25, 0x09	; 9
    5568:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN11EEPROMClass4readEi>
    556c:	89 83       	std	Y+1, r24	; 0x01
    556e:	61 e0       	ldi	r22, 0x01	; 1
    5570:	70 e0       	ldi	r23, 0x00	; 0
    5572:	8f e2       	ldi	r24, 0x2F	; 47
    5574:	99 e0       	ldi	r25, 0x09	; 9
    5576:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN11EEPROMClass4readEi>
    557a:	8a 83       	std	Y+2, r24	; 0x02

void FreeBoardModel::readConfig() {
	//check versions here
	int ver;
	EEPROM_readAnything(0, ver);
	if (ver != version) {
    557c:	f8 01       	movw	r30, r16
    557e:	e3 55       	subi	r30, 0x53	; 83
    5580:	ff 4f       	sbci	r31, 0xFF	; 255
    5582:	29 81       	ldd	r18, Y+1	; 0x01
    5584:	3a 81       	ldd	r19, Y+2	; 0x02
    5586:	80 81       	ld	r24, Z
    5588:	91 81       	ldd	r25, Z+1	; 0x01
    558a:	28 17       	cp	r18, r24
    558c:	39 07       	cpc	r19, r25
    558e:	19 f0       	breq	.+6      	; 0x5596 <_ZN14FreeBoardModel10readConfigEv+0x4a>
		//save a default config, since we cant read the old one safely
		saveConfig();
    5590:	c8 01       	movw	r24, r16
    5592:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <_ZN14FreeBoardModel10saveConfigEv>
	}

	//now we know its compatible
	EEPROM_readAnything(EEPROM_DATA, config);
    5596:	0c 58       	subi	r16, 0x8C	; 140
    5598:	1f 4f       	sbci	r17, 0xFF	; 255
    559a:	64 e0       	ldi	r22, 0x04	; 4
    559c:	70 e0       	ldi	r23, 0x00	; 0
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    559e:	7b 01       	movw	r14, r22
    55a0:	8f ef       	ldi	r24, 0xFF	; 255
    55a2:	e8 1a       	sub	r14, r24
    55a4:	f8 0a       	sbc	r15, r24
    55a6:	8f e2       	ldi	r24, 0x2F	; 47
    55a8:	99 e0       	ldi	r25, 0x09	; 9
    55aa:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN11EEPROMClass4readEi>
    55ae:	f8 01       	movw	r30, r16
    55b0:	81 93       	st	Z+, r24
    55b2:	8f 01       	movw	r16, r30
    55b4:	b7 01       	movw	r22, r14
}
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    55b6:	6d 33       	cpi	r22, 0x3D	; 61
    55b8:	71 05       	cpc	r23, r1
    55ba:	89 f7       	brne	.-30     	; 0x559e <_ZN14FreeBoardModel10readConfigEv+0x52>
	}

	//now we know its compatible
	EEPROM_readAnything(EEPROM_DATA, config);

}
    55bc:	0f 90       	pop	r0
    55be:	0f 90       	pop	r0
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
    55c4:	1f 91       	pop	r17
    55c6:	0f 91       	pop	r16
    55c8:	ff 90       	pop	r15
    55ca:	ef 90       	pop	r14
    55cc:	08 95       	ret

000055ce <_ZN14FreeBoardModel12getAlarmLastEv>:
//accessors
bool FreeBoardModel::isWindAlarmTriggered() {
	return windState.windAlarmTriggered;
}

unsigned long FreeBoardModel::getAlarmLast() {
    55ce:	fc 01       	movw	r30, r24
	return alarmLast;
    55d0:	60 81       	ld	r22, Z
    55d2:	71 81       	ldd	r23, Z+1	; 0x01
}
    55d4:	82 81       	ldd	r24, Z+2	; 0x02
    55d6:	93 81       	ldd	r25, Z+3	; 0x03
    55d8:	08 95       	ret

000055da <_ZN14FreeBoardModel14getAlarmSnoozeEv>:

unsigned long FreeBoardModel::getAlarmSnooze() {
    55da:	fc 01       	movw	r30, r24
	return alarmSnooze;
    55dc:	64 81       	ldd	r22, Z+4	; 0x04
    55de:	75 81       	ldd	r23, Z+5	; 0x05
}
    55e0:	86 81       	ldd	r24, Z+6	; 0x06
    55e2:	97 81       	ldd	r25, Z+7	; 0x07
    55e4:	08 95       	ret

000055e6 <_ZN14FreeBoardModel17getAnchorDistanceEv>:

float FreeBoardModel::getAnchorDistance() {
    55e6:	fc 01       	movw	r30, r24
	return anchorState.anchorDistance;
}
    55e8:	54 89       	ldd	r21, Z+20	; 0x14
    55ea:	45 89       	ldd	r20, Z+21	; 0x15
    55ec:	36 89       	ldd	r19, Z+22	; 0x16
    55ee:	27 89       	ldd	r18, Z+23	; 0x17
    55f0:	65 2f       	mov	r22, r21
    55f2:	74 2f       	mov	r23, r20
    55f4:	83 2f       	mov	r24, r19
    55f6:	92 2f       	mov	r25, r18
    55f8:	08 95       	ret

000055fa <_ZN14FreeBoardModel10getAnchorEEv>:

float FreeBoardModel::getAnchorE() {
    55fa:	fc 01       	movw	r30, r24
	return anchorState.anchorE;
}
    55fc:	55 a1       	ldd	r21, Z+37	; 0x25
    55fe:	46 a1       	ldd	r20, Z+38	; 0x26
    5600:	37 a1       	ldd	r19, Z+39	; 0x27
    5602:	20 a5       	ldd	r18, Z+40	; 0x28
    5604:	65 2f       	mov	r22, r21
    5606:	74 2f       	mov	r23, r20
    5608:	83 2f       	mov	r24, r19
    560a:	92 2f       	mov	r25, r18
    560c:	08 95       	ret

0000560e <_ZN14FreeBoardModel12getAnchorLatEv>:

float FreeBoardModel::getAnchorLat() {
	return config.anchorLat;
    560e:	fc 01       	movw	r30, r24
    5610:	ec 58       	subi	r30, 0x8C	; 140
    5612:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5614:	50 81       	ld	r21, Z
    5616:	41 81       	ldd	r20, Z+1	; 0x01
    5618:	32 81       	ldd	r19, Z+2	; 0x02
    561a:	23 81       	ldd	r18, Z+3	; 0x03
    561c:	65 2f       	mov	r22, r21
    561e:	74 2f       	mov	r23, r20
    5620:	83 2f       	mov	r24, r19
    5622:	92 2f       	mov	r25, r18
    5624:	08 95       	ret

00005626 <_ZN14FreeBoardModel12getAnchorLonEv>:

float FreeBoardModel::getAnchorLon() {
	return config.anchorLon;
    5626:	fc 01       	movw	r30, r24
    5628:	e8 58       	subi	r30, 0x88	; 136
    562a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    562c:	50 81       	ld	r21, Z
    562e:	41 81       	ldd	r20, Z+1	; 0x01
    5630:	32 81       	ldd	r19, Z+2	; 0x02
    5632:	23 81       	ldd	r18, Z+3	; 0x03
    5634:	65 2f       	mov	r22, r21
    5636:	74 2f       	mov	r23, r20
    5638:	83 2f       	mov	r24, r19
    563a:	92 2f       	mov	r25, r18
    563c:	08 95       	ret

0000563e <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>:

float FreeBoardModel::getAnchorMaxDistance() {
    563e:	fc 01       	movw	r30, r24
	return anchorState.anchorMaxDistance;
}
    5640:	50 8d       	ldd	r21, Z+24	; 0x18
    5642:	41 8d       	ldd	r20, Z+25	; 0x19
    5644:	32 8d       	ldd	r19, Z+26	; 0x1a
    5646:	23 8d       	ldd	r18, Z+27	; 0x1b
    5648:	65 2f       	mov	r22, r21
    564a:	74 2f       	mov	r23, r20
    564c:	83 2f       	mov	r24, r19
    564e:	92 2f       	mov	r25, r18
    5650:	08 95       	ret

00005652 <_ZN14FreeBoardModel10getAnchorNEv>:

float FreeBoardModel::getAnchorN() {
    5652:	fc 01       	movw	r30, r24
	return anchorState.anchorN;
}
    5654:	55 8d       	ldd	r21, Z+29	; 0x1d
    5656:	46 8d       	ldd	r20, Z+30	; 0x1e
    5658:	37 8d       	ldd	r19, Z+31	; 0x1f
    565a:	20 a1       	ldd	r18, Z+32	; 0x20
    565c:	65 2f       	mov	r22, r21
    565e:	74 2f       	mov	r23, r20
    5660:	83 2f       	mov	r24, r19
    5662:	92 2f       	mov	r25, r18
    5664:	08 95       	ret

00005666 <_ZN14FreeBoardModel15getAnchorRadiusEv>:

float FreeBoardModel::getAnchorRadius() {
	return config.anchorRadius;
    5666:	fc 01       	movw	r30, r24
    5668:	e4 58       	subi	r30, 0x84	; 132
    566a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    566c:	50 81       	ld	r21, Z
    566e:	41 81       	ldd	r20, Z+1	; 0x01
    5670:	32 81       	ldd	r19, Z+2	; 0x02
    5672:	23 81       	ldd	r18, Z+3	; 0x03
    5674:	65 2f       	mov	r22, r21
    5676:	74 2f       	mov	r23, r20
    5678:	83 2f       	mov	r24, r19
    567a:	92 2f       	mov	r25, r18
    567c:	08 95       	ret

0000567e <_ZN14FreeBoardModel18getAnchorRadiusDegEv>:

float FreeBoardModel::getAnchorRadiusDeg() {
    567e:	fc 01       	movw	r30, r24
	return anchorState.anchorRadiusDeg;
}
    5680:	50 89       	ldd	r21, Z+16	; 0x10
    5682:	41 89       	ldd	r20, Z+17	; 0x11
    5684:	32 89       	ldd	r19, Z+18	; 0x12
    5686:	23 89       	ldd	r18, Z+19	; 0x13
    5688:	65 2f       	mov	r22, r21
    568a:	74 2f       	mov	r23, r20
    568c:	83 2f       	mov	r24, r19
    568e:	92 2f       	mov	r25, r18
    5690:	08 95       	ret

00005692 <_ZN14FreeBoardModel10getAnchorSEv>:

float FreeBoardModel::getAnchorS() {
    5692:	fc 01       	movw	r30, r24
	return anchorState.anchorS;
}
    5694:	51 a1       	ldd	r21, Z+33	; 0x21
    5696:	42 a1       	ldd	r20, Z+34	; 0x22
    5698:	33 a1       	ldd	r19, Z+35	; 0x23
    569a:	24 a1       	ldd	r18, Z+36	; 0x24
    569c:	65 2f       	mov	r22, r21
    569e:	74 2f       	mov	r23, r20
    56a0:	83 2f       	mov	r24, r19
    56a2:	92 2f       	mov	r25, r18
    56a4:	08 95       	ret

000056a6 <_ZN14FreeBoardModel10getAnchorWEv>:

float FreeBoardModel::getAnchorW() {
    56a6:	fc 01       	movw	r30, r24
	return anchorState.anchorW;
}
    56a8:	51 a5       	ldd	r21, Z+41	; 0x29
    56aa:	42 a5       	ldd	r20, Z+42	; 0x2a
    56ac:	33 a5       	ldd	r19, Z+43	; 0x2b
    56ae:	24 a5       	ldd	r18, Z+44	; 0x2c
    56b0:	65 2f       	mov	r22, r21
    56b2:	74 2f       	mov	r23, r20
    56b4:	83 2f       	mov	r24, r19
    56b6:	92 2f       	mov	r25, r18
    56b8:	08 95       	ret

000056ba <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>:

double FreeBoardModel::getAutopilotAlarmMaxXtError() {
	return autopilotState.autopilotAlarmMaxXTError;
}

double FreeBoardModel::getAutopilotRudderCommand() {
    56ba:	fc 01       	movw	r30, r24
	return autopilotState.autopilotRudderCommand;
}
    56bc:	57 a9       	ldd	r21, Z+55	; 0x37
    56be:	40 ad       	ldd	r20, Z+56	; 0x38
    56c0:	31 ad       	ldd	r19, Z+57	; 0x39
    56c2:	22 ad       	ldd	r18, Z+58	; 0x3a
    56c4:	65 2f       	mov	r22, r21
    56c6:	74 2f       	mov	r23, r20
    56c8:	83 2f       	mov	r24, r19
    56ca:	92 2f       	mov	r25, r18
    56cc:	08 95       	ret

000056ce <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>:

double FreeBoardModel::getAutopilotTargetHeading() {
    56ce:	fc 01       	movw	r30, r24
	return autopilotState.autopilotTargetHeading;
}
    56d0:	53 a9       	ldd	r21, Z+51	; 0x33
    56d2:	44 a9       	ldd	r20, Z+52	; 0x34
    56d4:	35 a9       	ldd	r19, Z+53	; 0x35
    56d6:	26 a9       	ldd	r18, Z+54	; 0x36
    56d8:	65 2f       	mov	r22, r21
    56da:	74 2f       	mov	r23, r20
    56dc:	83 2f       	mov	r24, r19
    56de:	92 2f       	mov	r25, r18
    56e0:	08 95       	ret

000056e2 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>:
double FreeBoardModel::getAutopilotCurrentHeading() {
    56e2:	fc 01       	movw	r30, r24
	if(autopilotState.autopilotReference == AUTOPILOT_WIND){
    56e4:	82 a9       	ldd	r24, Z+50	; 0x32
    56e6:	87 35       	cpi	r24, 0x57	; 87
    56e8:	59 f4       	brne	.+22     	; 0x5700 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x1e>
		return windState.windApparentDir;
    56ea:	e1 59       	subi	r30, 0x91	; 145
    56ec:	ff 4f       	sbci	r31, 0xFF	; 255
    56ee:	60 81       	ld	r22, Z
    56f0:	71 81       	ldd	r23, Z+1	; 0x01
    56f2:	88 27       	eor	r24, r24
    56f4:	77 fd       	sbrc	r23, 7
    56f6:	80 95       	com	r24
    56f8:	98 2f       	mov	r25, r24
    56fa:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    56fe:	04 c0       	rjmp	.+8      	; 0x5708 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x26>
	}
	//default option - compass
	return magneticHeading;
    5700:	60 85       	ldd	r22, Z+8	; 0x08
    5702:	71 85       	ldd	r23, Z+9	; 0x09
    5704:	82 85       	ldd	r24, Z+10	; 0x0a
    5706:	93 85       	ldd	r25, Z+11	; 0x0b
}
    5708:	08 95       	ret

0000570a <_ZN14FreeBoardModel21getAutopilotOffCourseEv>:
}

/*
 * Returns -179 to +180 as the degrees off course
 */
double FreeBoardModel::getAutopilotOffCourse() {
    570a:	ef 92       	push	r14
    570c:	ff 92       	push	r15
    570e:	0f 93       	push	r16
    5710:	1f 93       	push	r17
    5712:	cf 93       	push	r28
    5714:	df 93       	push	r29
    5716:	ec 01       	movw	r28, r24
	//get degrees between
	autopilotState.autopilotOffCourse = getAutopilotTargetHeading()	- getAutopilotCurrentHeading();
    5718:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    571c:	9b 01       	movw	r18, r22
    571e:	ac 01       	movw	r20, r24
    5720:	6b a9       	ldd	r22, Y+51	; 0x33
    5722:	7c a9       	ldd	r23, Y+52	; 0x34
    5724:	8d a9       	ldd	r24, Y+53	; 0x35
    5726:	9e a9       	ldd	r25, Y+54	; 0x36
    5728:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    572c:	7b 01       	movw	r14, r22
    572e:	8c 01       	movw	r16, r24
	autopilotState.autopilotOffCourse += (autopilotState.autopilotOffCourse>180) ? -360 : (autopilotState.autopilotOffCourse<-180) ? 360 : 0;
    5730:	20 e0       	ldi	r18, 0x00	; 0
    5732:	30 e0       	ldi	r19, 0x00	; 0
    5734:	44 e3       	ldi	r20, 0x34	; 52
    5736:	53 e4       	ldi	r21, 0x43	; 67
    5738:	7f 2d       	mov	r23, r15
    573a:	91 2f       	mov	r25, r17
    573c:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    5740:	18 16       	cp	r1, r24
    5742:	8c f0       	brlt	.+34     	; 0x5766 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x5c>
    5744:	20 e0       	ldi	r18, 0x00	; 0
    5746:	30 e0       	ldi	r19, 0x00	; 0
    5748:	44 e3       	ldi	r20, 0x34	; 52
    574a:	53 ec       	ldi	r21, 0xC3	; 195
    574c:	6e 2d       	mov	r22, r14
    574e:	7f 2d       	mov	r23, r15
    5750:	80 2f       	mov	r24, r16
    5752:	91 2f       	mov	r25, r17
    5754:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    5758:	87 ff       	sbrs	r24, 7
    575a:	0a c0       	rjmp	.+20     	; 0x5770 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x66>
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	44 eb       	ldi	r20, 0xB4	; 180
    5762:	53 e4       	ldi	r21, 0x43	; 67
    5764:	08 c0       	rjmp	.+16     	; 0x5776 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    5766:	20 e0       	ldi	r18, 0x00	; 0
    5768:	30 e0       	ldi	r19, 0x00	; 0
    576a:	44 eb       	ldi	r20, 0xB4	; 180
    576c:	53 ec       	ldi	r21, 0xC3	; 195
    576e:	03 c0       	rjmp	.+6      	; 0x5776 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    5770:	20 e0       	ldi	r18, 0x00	; 0
    5772:	30 e0       	ldi	r19, 0x00	; 0
    5774:	a9 01       	movw	r20, r18
    5776:	6e 2d       	mov	r22, r14
    5778:	7f 2d       	mov	r23, r15
    577a:	80 2f       	mov	r24, r16
    577c:	91 2f       	mov	r25, r17
    577e:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    5782:	9b 01       	movw	r18, r22
    5784:	46 2f       	mov	r20, r22
    5786:	53 2f       	mov	r21, r19
    5788:	68 2f       	mov	r22, r24
    578a:	79 2f       	mov	r23, r25
    578c:	4e a7       	std	Y+46, r20	; 0x2e
    578e:	5f a7       	std	Y+47, r21	; 0x2f
    5790:	68 ab       	std	Y+48, r22	; 0x30
    5792:	79 ab       	std	Y+49, r23	; 0x31

	return autopilotState.autopilotOffCourse;
}
    5794:	62 2f       	mov	r22, r18
    5796:	73 2f       	mov	r23, r19
    5798:	df 91       	pop	r29
    579a:	cf 91       	pop	r28
    579c:	1f 91       	pop	r17
    579e:	0f 91       	pop	r16
    57a0:	ff 90       	pop	r15
    57a2:	ef 90       	pop	r14
    57a4:	08 95       	ret

000057a6 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>:
	return i;

}


int FreeBoardModel::writeSimple(HardwareSerial ser) {
    57a6:	ef 92       	push	r14
    57a8:	ff 92       	push	r15
    57aa:	0f 93       	push	r16
    57ac:	1f 93       	push	r17
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	8c 01       	movw	r16, r24
    57b4:	d6 2f       	mov	r29, r22
    57b6:	c7 2f       	mov	r28, r23
	//ArduIMU output format
	//!!VER:1.9,RLL:-0.52,PCH:0.06,YAW:80.24,IMUH:253,MGX:44,MGY:-254,MGZ:-257,MGH:80.11,LAT:-412937350,LON:1732472000,ALT:14,COG:116,SOG:0,FIX:1,SAT:5,TOW:22504700,

	ser.print("!!VER:1.9,");
    57b8:	64 e5       	ldi	r22, 0x54	; 84
    57ba:	72 e0       	ldi	r23, 0x02	; 2
    57bc:	8d 2f       	mov	r24, r29
    57be:	9c 2f       	mov	r25, r28
    57c0:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print("UID:MEGA,APX:");
    57c4:	6f e5       	ldi	r22, 0x5F	; 95
    57c6:	72 e0       	ldi	r23, 0x02	; 2
    57c8:	8d 2f       	mov	r24, r29
    57ca:	9c 2f       	mov	r25, r28
    57cc:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(autopilotState.autopilotOn);
    57d0:	f8 01       	movw	r30, r16
    57d2:	65 a5       	ldd	r22, Z+45	; 0x2d
    57d4:	4a e0       	ldi	r20, 0x0A	; 10
    57d6:	50 e0       	ldi	r21, 0x00	; 0
    57d8:	70 e0       	ldi	r23, 0x00	; 0
    57da:	8d 2f       	mov	r24, r29
    57dc:	9c 2f       	mov	r25, r28
    57de:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	ser.print(",APS:");
    57e2:	6d e6       	ldi	r22, 0x6D	; 109
    57e4:	72 e0       	ldi	r23, 0x02	; 2
    57e6:	8d 2f       	mov	r24, r29
    57e8:	9c 2f       	mov	r25, r28
    57ea:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(autopilotState.autopilotReference);
    57ee:	f8 01       	movw	r30, r16
    57f0:	62 a9       	ldd	r22, Z+50	; 0x32
    57f2:	8d 2f       	mov	r24, r29
    57f4:	9c 2f       	mov	r25, r28
    57f6:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
	//if autopilot on, send autopilot data
	if (autopilotState.autopilotOn) {
    57fa:	f8 01       	movw	r30, r16
    57fc:	85 a5       	ldd	r24, Z+45	; 0x2d
    57fe:	88 23       	and	r24, r24
    5800:	d9 f1       	breq	.+118    	; 0x5878 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0xd2>
		ser.print(",APT:");
    5802:	63 e7       	ldi	r22, 0x73	; 115
    5804:	72 e0       	ldi	r23, 0x02	; 2
    5806:	8d 2f       	mov	r24, r29
    5808:	9c 2f       	mov	r25, r28
    580a:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(getAutopilotTargetHeading());
    580e:	f8 01       	movw	r30, r16
    5810:	43 a9       	ldd	r20, Z+51	; 0x33
    5812:	54 a9       	ldd	r21, Z+52	; 0x34
    5814:	65 a9       	ldd	r22, Z+53	; 0x35
    5816:	76 a9       	ldd	r23, Z+54	; 0x36
    5818:	22 e0       	ldi	r18, 0x02	; 2
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	8d 2f       	mov	r24, r29
    581e:	9c 2f       	mov	r25, r28
    5820:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",APC:");
    5824:	69 e7       	ldi	r22, 0x79	; 121
    5826:	72 e0       	ldi	r23, 0x02	; 2
    5828:	8d 2f       	mov	r24, r29
    582a:	9c 2f       	mov	r25, r28
    582c:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(getAutopilotCurrentHeading());
    5830:	c8 01       	movw	r24, r16
    5832:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    5836:	ab 01       	movw	r20, r22
    5838:	bc 01       	movw	r22, r24
    583a:	22 e0       	ldi	r18, 0x02	; 2
    583c:	30 e0       	ldi	r19, 0x00	; 0
    583e:	8d 2f       	mov	r24, r29
    5840:	9c 2f       	mov	r25, r28
    5842:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",APR:");
    5846:	6f e7       	ldi	r22, 0x7F	; 127
    5848:	72 e0       	ldi	r23, 0x02	; 2
    584a:	8d 2f       	mov	r24, r29
    584c:	9c 2f       	mov	r25, r28
    584e:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(autopilotState.autopilotRudderCommand-33.0);// 0-66 in model
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	44 e0       	ldi	r20, 0x04	; 4
    5858:	52 e4       	ldi	r21, 0x42	; 66
    585a:	f8 01       	movw	r30, r16
    585c:	67 a9       	ldd	r22, Z+55	; 0x37
    585e:	70 ad       	ldd	r23, Z+56	; 0x38
    5860:	81 ad       	ldd	r24, Z+57	; 0x39
    5862:	92 ad       	ldd	r25, Z+58	; 0x3a
    5864:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    5868:	ab 01       	movw	r20, r22
    586a:	bc 01       	movw	r22, r24
    586c:	22 e0       	ldi	r18, 0x02	; 2
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	8d 2f       	mov	r24, r29
    5872:	9c 2f       	mov	r25, r28
    5874:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	}
	//if anchor alarm on, send data
	ser.print(",AAX:");
    5878:	65 e8       	ldi	r22, 0x85	; 133
    587a:	72 e0       	ldi	r23, 0x02	; 2
    587c:	8d 2f       	mov	r24, r29
    587e:	9c 2f       	mov	r25, r28
    5880:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.anchorAlarmOn);
    5884:	78 01       	movw	r14, r16
    5886:	f0 e8       	ldi	r31, 0x80	; 128
    5888:	ef 0e       	add	r14, r31
    588a:	f1 1c       	adc	r15, r1
    588c:	f7 01       	movw	r30, r14
    588e:	60 81       	ld	r22, Z
    5890:	4a e0       	ldi	r20, 0x0A	; 10
    5892:	50 e0       	ldi	r21, 0x00	; 0
    5894:	70 e0       	ldi	r23, 0x00	; 0
    5896:	8d 2f       	mov	r24, r29
    5898:	9c 2f       	mov	r25, r28
    589a:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	ser.print(",AAR:");
    589e:	6b e8       	ldi	r22, 0x8B	; 139
    58a0:	72 e0       	ldi	r23, 0x02	; 2
    58a2:	8d 2f       	mov	r24, r29
    58a4:	9c 2f       	mov	r25, r28
    58a6:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.anchorRadius);
    58aa:	f8 01       	movw	r30, r16
    58ac:	e4 58       	subi	r30, 0x84	; 132
    58ae:	ff 4f       	sbci	r31, 0xFF	; 255
    58b0:	40 81       	ld	r20, Z
    58b2:	51 81       	ldd	r21, Z+1	; 0x01
    58b4:	62 81       	ldd	r22, Z+2	; 0x02
    58b6:	73 81       	ldd	r23, Z+3	; 0x03
    58b8:	22 e0       	ldi	r18, 0x02	; 2
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	8d 2f       	mov	r24, r29
    58be:	9c 2f       	mov	r25, r28
    58c0:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	if (config.anchorAlarmOn) {
    58c4:	f7 01       	movw	r30, r14
    58c6:	80 81       	ld	r24, Z
    58c8:	88 23       	and	r24, r24
    58ca:	b9 f1       	breq	.+110    	; 0x593a <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0x194>
		ser.print(",AAN:");
    58cc:	61 e9       	ldi	r22, 0x91	; 145
    58ce:	72 e0       	ldi	r23, 0x02	; 2
    58d0:	8d 2f       	mov	r24, r29
    58d2:	9c 2f       	mov	r25, r28
    58d4:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(config.anchorLat);
    58d8:	f8 01       	movw	r30, r16
    58da:	ec 58       	subi	r30, 0x8C	; 140
    58dc:	ff 4f       	sbci	r31, 0xFF	; 255
    58de:	40 81       	ld	r20, Z
    58e0:	51 81       	ldd	r21, Z+1	; 0x01
    58e2:	62 81       	ldd	r22, Z+2	; 0x02
    58e4:	73 81       	ldd	r23, Z+3	; 0x03
    58e6:	22 e0       	ldi	r18, 0x02	; 2
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	8d 2f       	mov	r24, r29
    58ec:	9c 2f       	mov	r25, r28
    58ee:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",AAE:");
    58f2:	67 e9       	ldi	r22, 0x97	; 151
    58f4:	72 e0       	ldi	r23, 0x02	; 2
    58f6:	8d 2f       	mov	r24, r29
    58f8:	9c 2f       	mov	r25, r28
    58fa:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(config.anchorLon);
    58fe:	f8 01       	movw	r30, r16
    5900:	e8 58       	subi	r30, 0x88	; 136
    5902:	ff 4f       	sbci	r31, 0xFF	; 255
    5904:	40 81       	ld	r20, Z
    5906:	51 81       	ldd	r21, Z+1	; 0x01
    5908:	62 81       	ldd	r22, Z+2	; 0x02
    590a:	73 81       	ldd	r23, Z+3	; 0x03
    590c:	22 e0       	ldi	r18, 0x02	; 2
    590e:	30 e0       	ldi	r19, 0x00	; 0
    5910:	8d 2f       	mov	r24, r29
    5912:	9c 2f       	mov	r25, r28
    5914:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
		ser.print(",AAD:");
    5918:	6d e9       	ldi	r22, 0x9D	; 157
    591a:	72 e0       	ldi	r23, 0x02	; 2
    591c:	8d 2f       	mov	r24, r29
    591e:	9c 2f       	mov	r25, r28
    5920:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		ser.print(getAnchorDistance());
    5924:	f8 01       	movw	r30, r16
    5926:	44 89       	ldd	r20, Z+20	; 0x14
    5928:	55 89       	ldd	r21, Z+21	; 0x15
    592a:	66 89       	ldd	r22, Z+22	; 0x16
    592c:	77 89       	ldd	r23, Z+23	; 0x17
    592e:	22 e0       	ldi	r18, 0x02	; 2
    5930:	30 e0       	ldi	r19, 0x00	; 0
    5932:	8d 2f       	mov	r24, r29
    5934:	9c 2f       	mov	r25, r28
    5936:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	}
	//if wind alarm on, send data
	ser.print(",WSX:");
    593a:	63 ea       	ldi	r22, 0xA3	; 163
    593c:	72 e0       	ldi	r23, 0x02	; 2
    593e:	8d 2f       	mov	r24, r29
    5940:	9c 2f       	mov	r25, r28
    5942:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.windAlarmOn);
    5946:	f8 01       	movw	r30, r16
    5948:	ed 56       	subi	r30, 0x6D	; 109
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	60 81       	ld	r22, Z
    594e:	4a e0       	ldi	r20, 0x0A	; 10
    5950:	50 e0       	ldi	r21, 0x00	; 0
    5952:	70 e0       	ldi	r23, 0x00	; 0
    5954:	8d 2f       	mov	r24, r29
    5956:	9c 2f       	mov	r25, r28
    5958:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	ser.print(",WSK:");
    595c:	69 ea       	ldi	r22, 0xA9	; 169
    595e:	72 e0       	ldi	r23, 0x02	; 2
    5960:	8d 2f       	mov	r24, r29
    5962:	9c 2f       	mov	r25, r28
    5964:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	ser.print(config.windAlarmSpeed);
    5968:	f8 01       	movw	r30, r16
    596a:	ef 56       	subi	r30, 0x6F	; 111
    596c:	ff 4f       	sbci	r31, 0xFF	; 255
    596e:	60 81       	ld	r22, Z
    5970:	71 81       	ldd	r23, Z+1	; 0x01
    5972:	4a e0       	ldi	r20, 0x0A	; 10
    5974:	50 e0       	ldi	r21, 0x00	; 0
    5976:	8d 2f       	mov	r24, r29
    5978:	9c 2f       	mov	r25, r28
    597a:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>

	ser.println(",");
    597e:	67 ef       	ldi	r22, 0xF7	; 247
    5980:	74 e0       	ldi	r23, 0x04	; 4
    5982:	8d 2f       	mov	r24, r29
    5984:	9c 2f       	mov	r25, r28
    5986:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	return 0;
}
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	1f 91       	pop	r17
    5994:	0f 91       	pop	r16
    5996:	ff 90       	pop	r15
    5998:	ef 90       	pop	r14
    599a:	08 95       	ret

0000599c <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>:
	//default option - compass
	return magneticHeading;
}

int FreeBoardModel::getAutopilotDeadZone(){
	return this->config.autopilotDeadZone;
    599c:	fc 01       	movw	r30, r24
    599e:	ee 57       	subi	r30, 0x7E	; 126
    59a0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    59a2:	80 81       	ld	r24, Z
    59a4:	91 81       	ldd	r25, Z+1	; 0x01
    59a6:	08 95       	ret

000059a8 <_ZN14FreeBoardModel17getAutopilotSlackEv>:
int FreeBoardModel::getAutopilotSlack(){
	return this->config.autopilotSlack;
    59a8:	fc 01       	movw	r30, r24
    59aa:	ec 57       	subi	r30, 0x7C	; 124
    59ac:	ff 4f       	sbci	r31, 0xFF	; 255
}
    59ae:	80 81       	ld	r24, Z
    59b0:	91 81       	ldd	r25, Z+1	; 0x01
    59b2:	08 95       	ret

000059b4 <_ZN14FreeBoardModel13getGpsLastFixEv>:
float FreeBoardModel::getGpsCourse() {
	return gpsState.gpsCourse;
}

unsigned long FreeBoardModel::getGpsLastFix() {
	return gpsState.gpsLastFix;
    59b4:	fc 01       	movw	r30, r24
    59b6:	e7 5b       	subi	r30, 0xB7	; 183
    59b8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ba:	60 81       	ld	r22, Z
    59bc:	71 81       	ldd	r23, Z+1	; 0x01
}
    59be:	82 81       	ldd	r24, Z+2	; 0x02
    59c0:	93 81       	ldd	r25, Z+3	; 0x03
    59c2:	08 95       	ret

000059c4 <_ZN14FreeBoardModel14getGpsLatitudeEv>:

float FreeBoardModel::getGpsLatitude() {
	return gpsState.gpsLatitude;
    59c4:	fc 01       	movw	r30, r24
    59c6:	ee 5a       	subi	r30, 0xAE	; 174
    59c8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    59ca:	50 81       	ld	r21, Z
    59cc:	41 81       	ldd	r20, Z+1	; 0x01
    59ce:	32 81       	ldd	r19, Z+2	; 0x02
    59d0:	23 81       	ldd	r18, Z+3	; 0x03
    59d2:	65 2f       	mov	r22, r21
    59d4:	74 2f       	mov	r23, r20
    59d6:	83 2f       	mov	r24, r19
    59d8:	92 2f       	mov	r25, r18
    59da:	08 95       	ret

000059dc <_ZN14FreeBoardModel15getGpsLongitudeEv>:

float FreeBoardModel::getGpsLongitude() {
	return gpsState.gpsLongitude;
    59dc:	fc 01       	movw	r30, r24
    59de:	ea 5a       	subi	r30, 0xAA	; 170
    59e0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    59e2:	50 81       	ld	r21, Z
    59e4:	41 81       	ldd	r20, Z+1	; 0x01
    59e6:	32 81       	ldd	r19, Z+2	; 0x02
    59e8:	23 81       	ldd	r18, Z+3	; 0x03
    59ea:	65 2f       	mov	r22, r21
    59ec:	74 2f       	mov	r23, r20
    59ee:	83 2f       	mov	r24, r19
    59f0:	92 2f       	mov	r25, r18
    59f2:	08 95       	ret

000059f4 <_ZN14FreeBoardModel15getGpsSpeedUnitEv>:
float FreeBoardModel::getGpsSpeed() {
	return gpsState.gpsSpeed;
}

float FreeBoardModel::getGpsSpeedUnit() {
	return config.gpsSpeedUnit;
    59f4:	fc 01       	movw	r30, r24
    59f6:	ea 57       	subi	r30, 0x7A	; 122
    59f8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    59fa:	50 81       	ld	r21, Z
    59fc:	41 81       	ldd	r20, Z+1	; 0x01
    59fe:	32 81       	ldd	r19, Z+2	; 0x02
    5a00:	23 81       	ldd	r18, Z+3	; 0x03
    5a02:	65 2f       	mov	r22, r21
    5a04:	74 2f       	mov	r23, r20
    5a06:	83 2f       	mov	r24, r19
    5a08:	92 2f       	mov	r25, r18
    5a0a:	08 95       	ret

00005a0c <_ZN14FreeBoardModel12getGpsStatusEv>:

char FreeBoardModel::getGpsStatus() {
	return gpsState.gpsStatus;
    5a0c:	8f 5a       	subi	r24, 0xAF	; 175
    5a0e:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5a10:	fc 01       	movw	r30, r24
    5a12:	80 81       	ld	r24, Z
    5a14:	08 95       	ret

00005a16 <_ZN14FreeBoardModel18getMagneticHeadingEv>:

float FreeBoardModel::getGpsUtc() {
	return gpsState.gpsUtc;
}

float FreeBoardModel::getMagneticHeading(){
    5a16:	fc 01       	movw	r30, r24
	return this->magneticHeading;
}
    5a18:	50 85       	ldd	r21, Z+8	; 0x08
    5a1a:	41 85       	ldd	r20, Z+9	; 0x09
    5a1c:	32 85       	ldd	r19, Z+10	; 0x0a
    5a1e:	23 85       	ldd	r18, Z+11	; 0x0b
    5a20:	65 2f       	mov	r22, r21
    5a22:	74 2f       	mov	r23, r20
    5a24:	83 2f       	mov	r24, r19
    5a26:	92 2f       	mov	r25, r18
    5a28:	08 95       	ret

00005a2a <_ZN14FreeBoardModel14getDeclinationEv>:
float FreeBoardModel::getDeclination(){
    5a2a:	fc 01       	movw	r30, r24
	return declination;
}
    5a2c:	54 85       	ldd	r21, Z+12	; 0x0c
    5a2e:	45 85       	ldd	r20, Z+13	; 0x0d
    5a30:	36 85       	ldd	r19, Z+14	; 0x0e
    5a32:	27 85       	ldd	r18, Z+15	; 0x0f
    5a34:	65 2f       	mov	r22, r21
    5a36:	74 2f       	mov	r23, r20
    5a38:	83 2f       	mov	r24, r19
    5a3a:	92 2f       	mov	r25, r18
    5a3c:	08 95       	ret

00005a3e <_ZN14FreeBoardModel17getWindZeroOffsetEv>:
volatile bool FreeBoardModel::isRadarAlarmTriggered() {
	return radarAlarmTriggered;
}

int FreeBoardModel::getWindZeroOffset() {
	return config.windZeroOffset;
    5a3e:	fc 01       	movw	r30, r24
    5a40:	e8 56       	subi	r30, 0x68	; 104
    5a42:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5a44:	80 81       	ld	r24, Z
    5a46:	91 81       	ldd	r25, Z+1	; 0x01
    5a48:	08 95       	ret

00005a4a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>:

int FreeBoardModel::getWindAlarmSpeed() {
	return config.windAlarmSpeed;
    5a4a:	fc 01       	movw	r30, r24
    5a4c:	ef 56       	subi	r30, 0x6F	; 111
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5a50:	80 81       	ld	r24, Z
    5a52:	91 81       	ldd	r25, Z+1	; 0x01
    5a54:	08 95       	ret

00005a56 <_ZN14FreeBoardModel18getWindApparentDirEv>:

int FreeBoardModel::getWindApparentDir() {
	return windState.windApparentDir;
    5a56:	fc 01       	movw	r30, r24
    5a58:	e1 59       	subi	r30, 0x91	; 145
    5a5a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5a5c:	80 81       	ld	r24, Z
    5a5e:	91 81       	ldd	r25, Z+1	; 0x01
    5a60:	08 95       	ret

00005a62 <_ZN14FreeBoardModel14getWindAverageEv>:
int FreeBoardModel::getWindTrueDir() {
	return windState.windTrueDir;
}

float FreeBoardModel::getWindAverage() {
	return windState.windAverage;
    5a62:	fc 01       	movw	r30, r24
    5a64:	e7 59       	subi	r30, 0x97	; 151
    5a66:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5a68:	50 81       	ld	r21, Z
    5a6a:	41 81       	ldd	r20, Z+1	; 0x01
    5a6c:	32 81       	ldd	r19, Z+2	; 0x02
    5a6e:	23 81       	ldd	r18, Z+3	; 0x03
    5a70:	65 2f       	mov	r22, r21
    5a72:	74 2f       	mov	r23, r20
    5a74:	83 2f       	mov	r24, r19
    5a76:	92 2f       	mov	r25, r18
    5a78:	08 95       	ret

00005a7a <_ZN14FreeBoardModel13getWindFactorEv>:

float FreeBoardModel::getWindFactor() {
	return config.windFactor;
    5a7a:	fc 01       	movw	r30, r24
    5a7c:	ec 56       	subi	r30, 0x6C	; 108
    5a7e:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5a80:	50 81       	ld	r21, Z
    5a82:	41 81       	ldd	r20, Z+1	; 0x01
    5a84:	32 81       	ldd	r19, Z+2	; 0x02
    5a86:	23 81       	ldd	r18, Z+3	; 0x03
    5a88:	65 2f       	mov	r22, r21
    5a8a:	74 2f       	mov	r23, r20
    5a8c:	83 2f       	mov	r24, r19
    5a8e:	92 2f       	mov	r25, r18
    5a90:	08 95       	ret

00005a92 <_ZN14FreeBoardModel10getWindMaxEv>:
unsigned long FreeBoardModel::getWindLastUpdate() {
	return windState.windLastUpdate;
}

int FreeBoardModel::getWindMax() {
	return windState.windMax;
    5a92:	fc 01       	movw	r30, r24
    5a94:	e3 59       	subi	r30, 0x93	; 147
    5a96:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5a98:	80 81       	ld	r24, Z
    5a9a:	91 81       	ldd	r25, Z+1	; 0x01
    5a9c:	08 95       	ret

00005a9e <_ZN14FreeBoardModel15isAnchorAlarmOnEv>:

bool FreeBoardModel::isAnchorAlarmOn() {
	return config.anchorAlarmOn;
    5a9e:	80 58       	subi	r24, 0x80	; 128
    5aa0:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	80 81       	ld	r24, Z
    5aa6:	08 95       	ret

00005aa8 <_ZN14FreeBoardModel11isGpsDecodeEv>:
bool FreeBoardModel::isGpsAlarmTriggered() {
	return gpsState.gpsAlarmTriggered;
}

bool FreeBoardModel::isGpsDecode() {
	return gpsState.gpsDecode;
    5aa8:	88 5b       	subi	r24, 0xB8	; 184
    5aaa:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5aac:	fc 01       	movw	r30, r24
    5aae:	80 81       	ld	r24, Z
    5ab0:	08 95       	ret

00005ab2 <_ZN14FreeBoardModel13isWindAlarmOnEv>:

bool FreeBoardModel::isWindAlarmOn() {
	return config.windAlarmOn;
    5ab2:	8d 56       	subi	r24, 0x6D	; 109
    5ab4:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5ab6:	fc 01       	movw	r30, r24
    5ab8:	80 81       	ld	r24, Z
    5aba:	08 95       	ret

00005abc <_ZN14FreeBoardModel12setAlarmLastEm>:

void FreeBoardModel::setAlarmLast(unsigned long alarmLast) {
	this->alarmLast = alarmLast;
    5abc:	fc 01       	movw	r30, r24
    5abe:	40 83       	st	Z, r20
    5ac0:	51 83       	std	Z+1, r21	; 0x01
    5ac2:	62 83       	std	Z+2, r22	; 0x02
    5ac4:	73 83       	std	Z+3, r23	; 0x03
    5ac6:	08 95       	ret

00005ac8 <_ZN14FreeBoardModel14setAlarmSnoozeEm>:
}

void FreeBoardModel::setAlarmSnooze(unsigned long alarmSnooze) {
	this->alarmSnooze = alarmSnooze;
    5ac8:	fc 01       	movw	r30, r24
    5aca:	44 83       	std	Z+4, r20	; 0x04
    5acc:	55 83       	std	Z+5, r21	; 0x05
    5ace:	66 83       	std	Z+6, r22	; 0x06
    5ad0:	77 83       	std	Z+7, r23	; 0x07
    5ad2:	08 95       	ret

00005ad4 <_ZN14FreeBoardModel16setAnchorAlarmOnEb>:
}

void FreeBoardModel::setAnchorAlarmOn(bool anchorAlarmOn) {
	this->config.anchorAlarmOn = anchorAlarmOn;
    5ad4:	80 58       	subi	r24, 0x80	; 128
    5ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad8:	fc 01       	movw	r30, r24
    5ada:	60 83       	st	Z, r22
    5adc:	08 95       	ret

00005ade <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>:
}

void FreeBoardModel::setAnchorAlarmTriggered(bool anchorAlarmTriggered) {
	this->anchorState.anchorAlarmTriggered = anchorAlarmTriggered;
    5ade:	fc 01       	movw	r30, r24
    5ae0:	64 8f       	std	Z+28, r22	; 0x1c
    5ae2:	08 95       	ret

00005ae4 <_ZN14FreeBoardModel17setAnchorDistanceEf>:
}

void FreeBoardModel::setAnchorDistance(float anchorDistance) {
	this->anchorState.anchorDistance = anchorDistance;
    5ae4:	fc 01       	movw	r30, r24
    5ae6:	44 8b       	std	Z+20, r20	; 0x14
    5ae8:	55 8b       	std	Z+21, r21	; 0x15
    5aea:	66 8b       	std	Z+22, r22	; 0x16
    5aec:	77 8b       	std	Z+23, r23	; 0x17
    5aee:	08 95       	ret

00005af0 <_ZN14FreeBoardModel10setAnchorEEf>:
}

void FreeBoardModel::setAnchorE(float anchorE) {
	this->anchorState.anchorE = anchorE;
    5af0:	fc 01       	movw	r30, r24
    5af2:	45 a3       	std	Z+37, r20	; 0x25
    5af4:	56 a3       	std	Z+38, r21	; 0x26
    5af6:	67 a3       	std	Z+39, r22	; 0x27
    5af8:	70 a7       	std	Z+40, r23	; 0x28
    5afa:	08 95       	ret

00005afc <_ZN14FreeBoardModel12setAnchorLatEf>:
}

void FreeBoardModel::setAnchorLat(float anchorLat) {
	this->config.anchorLat = anchorLat;
    5afc:	8c 58       	subi	r24, 0x8C	; 140
    5afe:	9f 4f       	sbci	r25, 0xFF	; 255
    5b00:	fc 01       	movw	r30, r24
    5b02:	40 83       	st	Z, r20
    5b04:	51 83       	std	Z+1, r21	; 0x01
    5b06:	62 83       	std	Z+2, r22	; 0x02
    5b08:	73 83       	std	Z+3, r23	; 0x03
    5b0a:	08 95       	ret

00005b0c <_ZN14FreeBoardModel12setAnchorLonEf>:
}

void FreeBoardModel::setAnchorLon(float anchorLon) {
	this->config.anchorLon = anchorLon;
    5b0c:	88 58       	subi	r24, 0x88	; 136
    5b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b10:	fc 01       	movw	r30, r24
    5b12:	40 83       	st	Z, r20
    5b14:	51 83       	std	Z+1, r21	; 0x01
    5b16:	62 83       	std	Z+2, r22	; 0x02
    5b18:	73 83       	std	Z+3, r23	; 0x03
    5b1a:	08 95       	ret

00005b1c <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>:
}

void FreeBoardModel::setAnchorMaxDistance(float anchorMaxDistance) {
	this->anchorState.anchorMaxDistance = anchorMaxDistance;
    5b1c:	fc 01       	movw	r30, r24
    5b1e:	40 8f       	std	Z+24, r20	; 0x18
    5b20:	51 8f       	std	Z+25, r21	; 0x19
    5b22:	62 8f       	std	Z+26, r22	; 0x1a
    5b24:	73 8f       	std	Z+27, r23	; 0x1b
    5b26:	08 95       	ret

00005b28 <_ZN14FreeBoardModel10setAnchorNEf>:
}

void FreeBoardModel::setAnchorN(float anchorN) {
	this->anchorState.anchorN = anchorN;
    5b28:	fc 01       	movw	r30, r24
    5b2a:	45 8f       	std	Z+29, r20	; 0x1d
    5b2c:	56 8f       	std	Z+30, r21	; 0x1e
    5b2e:	67 8f       	std	Z+31, r22	; 0x1f
    5b30:	70 a3       	std	Z+32, r23	; 0x20
    5b32:	08 95       	ret

00005b34 <_ZN14FreeBoardModel15setAnchorRadiusEf>:
}

void FreeBoardModel::setAnchorRadius(float anchorRadius) {
	this->config.anchorRadius = anchorRadius;
    5b34:	84 58       	subi	r24, 0x84	; 132
    5b36:	9f 4f       	sbci	r25, 0xFF	; 255
    5b38:	fc 01       	movw	r30, r24
    5b3a:	40 83       	st	Z, r20
    5b3c:	51 83       	std	Z+1, r21	; 0x01
    5b3e:	62 83       	std	Z+2, r22	; 0x02
    5b40:	73 83       	std	Z+3, r23	; 0x03
    5b42:	08 95       	ret

00005b44 <_ZN14FreeBoardModel18setAnchorRadiusDegEf>:
}

void FreeBoardModel::setAnchorRadiusDeg(float anchorRadiusDeg) {
	this->anchorState.anchorRadiusDeg = anchorRadiusDeg;
    5b44:	fc 01       	movw	r30, r24
    5b46:	40 8b       	std	Z+16, r20	; 0x10
    5b48:	51 8b       	std	Z+17, r21	; 0x11
    5b4a:	62 8b       	std	Z+18, r22	; 0x12
    5b4c:	73 8b       	std	Z+19, r23	; 0x13
    5b4e:	08 95       	ret

00005b50 <_ZN14FreeBoardModel10setAnchorSEf>:
}

void FreeBoardModel::setAnchorS(float anchorS) {
	this->anchorState.anchorS = anchorS;
    5b50:	fc 01       	movw	r30, r24
    5b52:	41 a3       	std	Z+33, r20	; 0x21
    5b54:	52 a3       	std	Z+34, r21	; 0x22
    5b56:	63 a3       	std	Z+35, r22	; 0x23
    5b58:	74 a3       	std	Z+36, r23	; 0x24
    5b5a:	08 95       	ret

00005b5c <_ZN14FreeBoardModel10setAnchorWEf>:
}

void FreeBoardModel::setAnchorW(float anchorW) {
	this->anchorState.anchorW = anchorW;
    5b5c:	fc 01       	movw	r30, r24
    5b5e:	41 a7       	std	Z+41, r20	; 0x29
    5b60:	52 a7       	std	Z+42, r21	; 0x2a
    5b62:	63 a7       	std	Z+43, r22	; 0x2b
    5b64:	74 a7       	std	Z+44, r23	; 0x2c
    5b66:	08 95       	ret

00005b68 <_ZN14FreeBoardModel21setAutopilotReferenceEc>:
}

void FreeBoardModel::setAutopilotReference(char autopilotReference) {
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	ec 01       	movw	r28, r24

	if(autopilotReference != AUTOPILOT_WIND && autopilotReference != AUTOPILOT_COMPASS) return;
    5b6e:	67 35       	cpi	r22, 0x57	; 87
    5b70:	11 f0       	breq	.+4      	; 0x5b76 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0xe>
    5b72:	63 34       	cpi	r22, 0x43	; 67
    5b74:	29 f5       	brne	.+74     	; 0x5bc0 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x58>
	this->autopilotState.autopilotReference = autopilotReference;
    5b76:	6a ab       	std	Y+50, r22	; 0x32
	if(autopilotState.autopilotReference ==AUTOPILOT_WIND){
    5b78:	67 35       	cpi	r22, 0x57	; 87
    5b7a:	81 f4       	brne	.+32     	; 0x5b9c <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x34>
			autopilotState.autopilotTargetHeading=windState.windApparentDir;
    5b7c:	fe 01       	movw	r30, r28
    5b7e:	e1 59       	subi	r30, 0x91	; 145
    5b80:	ff 4f       	sbci	r31, 0xFF	; 255
    5b82:	60 81       	ld	r22, Z
    5b84:	71 81       	ldd	r23, Z+1	; 0x01
    5b86:	88 27       	eor	r24, r24
    5b88:	77 fd       	sbrc	r23, 7
    5b8a:	80 95       	com	r24
    5b8c:	98 2f       	mov	r25, r24
    5b8e:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    5b92:	6b ab       	std	Y+51, r22	; 0x33
    5b94:	7c ab       	std	Y+52, r23	; 0x34
    5b96:	8d ab       	std	Y+53, r24	; 0x35
    5b98:	9e ab       	std	Y+54, r25	; 0x36
    5b9a:	0a c0       	rjmp	.+20     	; 0x5bb0 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
	}
	if(autopilotState.autopilotReference == AUTOPILOT_COMPASS){
    5b9c:	63 34       	cpi	r22, 0x43	; 67
    5b9e:	41 f4       	brne	.+16     	; 0x5bb0 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
		autopilotState.autopilotTargetHeading=magneticHeading;
    5ba0:	48 85       	ldd	r20, Y+8	; 0x08
    5ba2:	59 85       	ldd	r21, Y+9	; 0x09
    5ba4:	6a 85       	ldd	r22, Y+10	; 0x0a
    5ba6:	7b 85       	ldd	r23, Y+11	; 0x0b
    5ba8:	4b ab       	std	Y+51, r20	; 0x33
    5baa:	5c ab       	std	Y+52, r21	; 0x34
    5bac:	6d ab       	std	Y+53, r22	; 0x35
    5bae:	7e ab       	std	Y+54, r23	; 0x36
	}
	//and netralise the rudder position too.
	this->autopilotState.autopilotRudderCommand=33;
    5bb0:	40 e0       	ldi	r20, 0x00	; 0
    5bb2:	50 e0       	ldi	r21, 0x00	; 0
    5bb4:	64 e0       	ldi	r22, 0x04	; 4
    5bb6:	72 e4       	ldi	r23, 0x42	; 66
    5bb8:	4f ab       	std	Y+55, r20	; 0x37
    5bba:	58 af       	std	Y+56, r21	; 0x38
    5bbc:	69 af       	std	Y+57, r22	; 0x39
    5bbe:	7a af       	std	Y+58, r23	; 0x3a
}
    5bc0:	df 91       	pop	r29
    5bc2:	cf 91       	pop	r28
    5bc4:	08 95       	ret

00005bc6 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>:
	this->autopilotState.autopilotAlarmTriggered = autopilotAlarmTriggered;
}


void FreeBoardModel::setAutopilotRudderCommand(double autopilotRudderCommand) {
	this->autopilotState.autopilotRudderCommand = autopilotRudderCommand;
    5bc6:	fc 01       	movw	r30, r24
    5bc8:	47 ab       	std	Z+55, r20	; 0x37
    5bca:	50 af       	std	Z+56, r21	; 0x38
    5bcc:	61 af       	std	Z+57, r22	; 0x39
    5bce:	72 af       	std	Z+58, r23	; 0x3a
    5bd0:	08 95       	ret

00005bd2 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>:
/**
 * For magnetic it will be 0-360degM
 * For wind it will be -180 to +180 from bow.
 * Since this matches with target heading, and we convert in autopilot to 0-360, alls good?
 */
void FreeBoardModel::setAutopilotTargetHeading(double autopilotTargetHeading) {
    5bd2:	cf 93       	push	r28
    5bd4:	df 93       	push	r29
    5bd6:	ec 01       	movw	r28, r24
	//make this 0-360 range only
		this->autopilotState.autopilotTargetHeading = (double)(((int)autopilotTargetHeading+360) % 360);
    5bd8:	cb 01       	movw	r24, r22
    5bda:	ba 01       	movw	r22, r20
    5bdc:	0e 94 7a 42 	call	0x84f4	; 0x84f4 <__fixsfsi>
    5be0:	cb 01       	movw	r24, r22
    5be2:	88 59       	subi	r24, 0x98	; 152
    5be4:	9e 4f       	sbci	r25, 0xFE	; 254
    5be6:	68 e6       	ldi	r22, 0x68	; 104
    5be8:	71 e0       	ldi	r23, 0x01	; 1
    5bea:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <__divmodhi4>
    5bee:	bc 01       	movw	r22, r24
    5bf0:	88 27       	eor	r24, r24
    5bf2:	77 fd       	sbrc	r23, 7
    5bf4:	80 95       	com	r24
    5bf6:	98 2f       	mov	r25, r24
    5bf8:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    5bfc:	6b ab       	std	Y+51, r22	; 0x33
    5bfe:	7c ab       	std	Y+52, r23	; 0x34
    5c00:	8d ab       	std	Y+53, r24	; 0x35
    5c02:	9e ab       	std	Y+54, r25	; 0x36
}
    5c04:	df 91       	pop	r29
    5c06:	cf 91       	pop	r28
    5c08:	08 95       	ret

00005c0a <_ZN14FreeBoardModel12setGpsCourseEf>:
void FreeBoardModel::setGpsAlarmTriggered(bool gpsAlarmTriggered) {
	this->gpsState.gpsAlarmTriggered = gpsAlarmTriggered;
}

void FreeBoardModel::setGpsCourse(float gpsCourse) {
	this->gpsState.gpsCourse = gpsCourse;
    5c0a:	82 5a       	subi	r24, 0xA2	; 162
    5c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0e:	fc 01       	movw	r30, r24
    5c10:	40 83       	st	Z, r20
    5c12:	51 83       	std	Z+1, r21	; 0x01
    5c14:	62 83       	std	Z+2, r22	; 0x02
    5c16:	73 83       	std	Z+3, r23	; 0x03
    5c18:	08 95       	ret

00005c1a <_ZN14FreeBoardModel12setGpsDecodeEb>:
}

void FreeBoardModel::setGpsDecode(bool gpsDecode) {
	this->gpsState.gpsDecode = gpsDecode;
    5c1a:	88 5b       	subi	r24, 0xB8	; 184
    5c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c1e:	fc 01       	movw	r30, r24
    5c20:	60 83       	st	Z, r22
    5c22:	08 95       	ret

00005c24 <_ZN14FreeBoardModel13setGpsLastFixEm>:
}

void FreeBoardModel::setGpsLastFix(unsigned long gpsLastFix) {
	this->gpsState.gpsLastFix = gpsLastFix;
    5c24:	87 5b       	subi	r24, 0xB7	; 183
    5c26:	9f 4f       	sbci	r25, 0xFF	; 255
    5c28:	fc 01       	movw	r30, r24
    5c2a:	40 83       	st	Z, r20
    5c2c:	51 83       	std	Z+1, r21	; 0x01
    5c2e:	62 83       	std	Z+2, r22	; 0x02
    5c30:	73 83       	std	Z+3, r23	; 0x03
    5c32:	08 95       	ret

00005c34 <_ZN14FreeBoardModel14setGpsLatitudeEf>:
}

void FreeBoardModel::setGpsLatitude(float gpsLatitude) {
	this->gpsState.gpsLatitude = gpsLatitude;
    5c34:	8e 5a       	subi	r24, 0xAE	; 174
    5c36:	9f 4f       	sbci	r25, 0xFF	; 255
    5c38:	fc 01       	movw	r30, r24
    5c3a:	40 83       	st	Z, r20
    5c3c:	51 83       	std	Z+1, r21	; 0x01
    5c3e:	62 83       	std	Z+2, r22	; 0x02
    5c40:	73 83       	std	Z+3, r23	; 0x03
    5c42:	08 95       	ret

00005c44 <_ZN14FreeBoardModel15setGpsLongitudeEf>:
}

void FreeBoardModel::setGpsLongitude(float gpsLongitude) {
	this->gpsState.gpsLongitude = gpsLongitude;
    5c44:	8a 5a       	subi	r24, 0xAA	; 170
    5c46:	9f 4f       	sbci	r25, 0xFF	; 255
    5c48:	fc 01       	movw	r30, r24
    5c4a:	40 83       	st	Z, r20
    5c4c:	51 83       	std	Z+1, r21	; 0x01
    5c4e:	62 83       	std	Z+2, r22	; 0x02
    5c50:	73 83       	std	Z+3, r23	; 0x03
    5c52:	08 95       	ret

00005c54 <_ZN14FreeBoardModel11setGpsSpeedEf>:
}

void FreeBoardModel::setGpsSpeed(float gpsSpeed) {
	this->gpsState.gpsSpeed = gpsSpeed;
    5c54:	86 5a       	subi	r24, 0xA6	; 166
    5c56:	9f 4f       	sbci	r25, 0xFF	; 255
    5c58:	fc 01       	movw	r30, r24
    5c5a:	40 83       	st	Z, r20
    5c5c:	51 83       	std	Z+1, r21	; 0x01
    5c5e:	62 83       	std	Z+2, r22	; 0x02
    5c60:	73 83       	std	Z+3, r23	; 0x03
    5c62:	08 95       	ret

00005c64 <_ZN14FreeBoardModel12setGpsStatusEc>:
void FreeBoardModel::setGpsSpeedUnit(float gpsSpeedUnit) {
	this->config.gpsSpeedUnit = gpsSpeedUnit;
}

void FreeBoardModel::setGpsStatus(char gpsStatus) {
	this->gpsState.gpsStatus = gpsStatus;
    5c64:	8f 5a       	subi	r24, 0xAF	; 175
    5c66:	9f 4f       	sbci	r25, 0xFF	; 255
    5c68:	fc 01       	movw	r30, r24
    5c6a:	60 83       	st	Z, r22
    5c6c:	08 95       	ret

00005c6e <_ZN14FreeBoardModel9setGpsUtcEf>:
}

void FreeBoardModel::setGpsUtc(float gpsUtc) {
	this->gpsState.gpsUtc = gpsUtc;
    5c6e:	83 5b       	subi	r24, 0xB3	; 179
    5c70:	9f 4f       	sbci	r25, 0xFF	; 255
    5c72:	fc 01       	movw	r30, r24
    5c74:	40 83       	st	Z, r20
    5c76:	51 83       	std	Z+1, r21	; 0x01
    5c78:	62 83       	std	Z+2, r22	; 0x02
    5c7a:	73 83       	std	Z+3, r23	; 0x03
    5c7c:	08 95       	ret

00005c7e <_ZN14FreeBoardModel18setMagneticHeadingEf>:
}

void FreeBoardModel::setMagneticHeading(float magneticHeading){
	this->magneticHeading=magneticHeading;
    5c7e:	fc 01       	movw	r30, r24
    5c80:	40 87       	std	Z+8, r20	; 0x08
    5c82:	51 87       	std	Z+9, r21	; 0x09
    5c84:	62 87       	std	Z+10, r22	; 0x0a
    5c86:	73 87       	std	Z+11, r23	; 0x0b
    5c88:	08 95       	ret

00005c8a <_ZN14FreeBoardModel14setDeclinationEf>:
}

void FreeBoardModel::setDeclination(float declination){
	this->declination=declination;
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	44 87       	std	Z+12, r20	; 0x0c
    5c8e:	55 87       	std	Z+13, r21	; 0x0d
    5c90:	66 87       	std	Z+14, r22	; 0x0e
    5c92:	77 87       	std	Z+15, r23	; 0x0f
    5c94:	08 95       	ret

00005c96 <_ZN14FreeBoardModel17setWindZeroOffsetEi>:
void FreeBoardModel::setRadarAlarmTriggered(volatile bool radarAlarmTriggered) {
	this->radarAlarmTriggered = radarAlarmTriggered;
}

void FreeBoardModel::setWindZeroOffset(int windZeroOffset) {
	this->config.windZeroOffset = windZeroOffset;
    5c96:	88 56       	subi	r24, 0x68	; 104
    5c98:	9f 4f       	sbci	r25, 0xFF	; 255
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	71 83       	std	Z+1, r23	; 0x01
    5c9e:	60 83       	st	Z, r22
    5ca0:	08 95       	ret

00005ca2 <_ZN14FreeBoardModel14setWindAlarmOnEb>:
}

void FreeBoardModel::setWindAlarmOn(bool windAlarmOn) {
	this->config.windAlarmOn = windAlarmOn;
    5ca2:	8d 56       	subi	r24, 0x6D	; 109
    5ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca6:	fc 01       	movw	r30, r24
    5ca8:	60 83       	st	Z, r22
    5caa:	08 95       	ret

00005cac <_ZN14FreeBoardModel17setWindAlarmSpeedEi>:
}

void FreeBoardModel::setWindAlarmSpeed(int windAlarmSpeed) {
	this->config.windAlarmSpeed = windAlarmSpeed;
    5cac:	8f 56       	subi	r24, 0x6F	; 111
    5cae:	9f 4f       	sbci	r25, 0xFF	; 255
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	71 83       	std	Z+1, r23	; 0x01
    5cb4:	60 83       	st	Z, r22
    5cb6:	08 95       	ret

00005cb8 <_ZN14FreeBoardModel18setWindApparentDirEi>:
}

void FreeBoardModel::setWindApparentDir(int windApparentDir) {
	this->windState.windApparentDir = windApparentDir;
    5cb8:	81 59       	subi	r24, 0x91	; 145
    5cba:	9f 4f       	sbci	r25, 0xFF	; 255
    5cbc:	fc 01       	movw	r30, r24
    5cbe:	71 83       	std	Z+1, r23	; 0x01
    5cc0:	60 83       	st	Z, r22
    5cc2:	08 95       	ret

00005cc4 <_ZN14FreeBoardModel14setWindTrueDirEi>:
}
void FreeBoardModel::setWindTrueDir(int windTrueDir) {
	this->windState.windTrueDir = windTrueDir;
    5cc4:	8f 58       	subi	r24, 0x8F	; 143
    5cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc8:	fc 01       	movw	r30, r24
    5cca:	71 83       	std	Z+1, r23	; 0x01
    5ccc:	60 83       	st	Z, r22
    5cce:	08 95       	ret

00005cd0 <_ZN14FreeBoardModel14setWindAverageEf>:
}

void FreeBoardModel::setWindAverage(float windAverage) {
	this->windState.windAverage = windAverage;
    5cd0:	87 59       	subi	r24, 0x97	; 151
    5cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd4:	fc 01       	movw	r30, r24
    5cd6:	40 83       	st	Z, r20
    5cd8:	51 83       	std	Z+1, r21	; 0x01
    5cda:	62 83       	std	Z+2, r22	; 0x02
    5cdc:	73 83       	std	Z+3, r23	; 0x03
    5cde:	08 95       	ret

00005ce0 <_ZN14FreeBoardModel17setWindLastUpdateEm>:
void FreeBoardModel::setWindFactor(float windFactor) {
	this->config.windFactor = windFactor;
}

void FreeBoardModel::setWindLastUpdate(unsigned long windLastUpdate) {
	this->windState.windLastUpdate = windLastUpdate;
    5ce0:	8b 59       	subi	r24, 0x9B	; 155
    5ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce4:	fc 01       	movw	r30, r24
    5ce6:	40 83       	st	Z, r20
    5ce8:	51 83       	std	Z+1, r21	; 0x01
    5cea:	62 83       	std	Z+2, r22	; 0x02
    5cec:	73 83       	std	Z+3, r23	; 0x03
    5cee:	08 95       	ret

00005cf0 <_ZN14FreeBoardModel16isAlarmTriggeredEv>:
}

volatile bool FreeBoardModel::isAlarmTriggered() {
	return windState.windAlarmTriggered && radarAlarmTriggered
			&& gpsState.gpsAlarmTriggered && anchorState.anchorAlarmTriggered
			&& autopilotState.autopilotAlarmTriggered && mobAlarmTriggered;
    5cf0:	fc 01       	movw	r30, r24
    5cf2:	ed 58       	subi	r30, 0x8D	; 141
    5cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf6:	20 81       	ld	r18, Z
    5cf8:	22 23       	and	r18, r18
    5cfa:	b9 f0       	breq	.+46     	; 0x5d2a <_ZN14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    5cfc:	fc 01       	movw	r30, r24
    5cfe:	ed 59       	subi	r30, 0x9D	; 157
    5d00:	ff 4f       	sbci	r31, 0xFF	; 255
    5d02:	20 81       	ld	r18, Z
    5d04:	22 23       	and	r18, r18
    5d06:	89 f0       	breq	.+34     	; 0x5d2a <_ZN14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    5d08:	fc 01       	movw	r30, r24
    5d0a:	ee 59       	subi	r30, 0x9E	; 158
    5d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0e:	20 81       	ld	r18, Z
    5d10:	22 23       	and	r18, r18
    5d12:	59 f0       	breq	.+22     	; 0x5d2a <_ZN14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    5d14:	fc 01       	movw	r30, r24
    5d16:	24 8d       	ldd	r18, Z+28	; 0x1c
    5d18:	22 23       	and	r18, r18
    5d1a:	39 f0       	breq	.+14     	; 0x5d2a <_ZN14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    5d1c:	23 ad       	ldd	r18, Z+59	; 0x3b
    5d1e:	22 23       	and	r18, r18
    5d20:	21 f0       	breq	.+8      	; 0x5d2a <_ZN14FreeBoardModel16isAlarmTriggeredEv+0x3a>
    5d22:	ec 59       	subi	r30, 0x9C	; 156
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	80 81       	ld	r24, Z
    5d28:	08 95       	ret
    5d2a:	80 e0       	ldi	r24, 0x00	; 0
}
    5d2c:	08 95       	ret

00005d2e <_ZN14FreeBoardModel13isAutopilotOnEv>:
	this->config.mobAlarmOn = mobAlarmOn;
}

bool FreeBoardModel::isAutopilotOn() {
	return autopilotState.autopilotOn;
}
    5d2e:	fc 01       	movw	r30, r24
    5d30:	85 a5       	ldd	r24, Z+45	; 0x2d
    5d32:	08 95       	ret

00005d34 <_ZN14FreeBoardModel14setAutopilotOnEb>:

void FreeBoardModel::setAutopilotOn(bool autopilotOn) {
    5d34:	1f 93       	push	r17
    5d36:	cf 93       	push	r28
    5d38:	df 93       	push	r29
    5d3a:	ec 01       	movw	r28, r24
    5d3c:	16 2f       	mov	r17, r22
	//this is potentally dangerous, since we dont want the boat diving off on an old target heading.
	//ALWAYS reset target heading to current magnetic or wind dir here
	setAutopilotReference(getAutopilotReference());
    5d3e:	6a a9       	ldd	r22, Y+50	; 0x32
    5d40:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
	this->autopilotState.autopilotOn = autopilotOn;
    5d44:	1d a7       	std	Y+45, r17	; 0x2d
}
    5d46:	df 91       	pop	r29
    5d48:	cf 91       	pop	r28
    5d4a:	1f 91       	pop	r17
    5d4c:	08 95       	ret

00005d4e <_ZN14FreeBoardModel10setWindMaxEi>:
void FreeBoardModel::setRadarAlarmOn(volatile bool radarAlarmOn) {
	this->config.radarAlarmOn = radarAlarmOn;
}

void FreeBoardModel::setWindMax(int windMax) {
	this->windState.windMax = windMax;
    5d4e:	83 59       	subi	r24, 0x93	; 147
    5d50:	9f 4f       	sbci	r25, 0xFF	; 255
    5d52:	fc 01       	movw	r30, r24
    5d54:	71 83       	std	Z+1, r23	; 0x01
    5d56:	60 83       	st	Z, r22
    5d58:	08 95       	ret

00005d5a <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>:
}

void FreeBoardModel::setWindAlarmTriggered(bool windAlarmTriggered) {
	this->windState.windAlarmTriggered = windAlarmTriggered;
    5d5a:	8d 58       	subi	r24, 0x8D	; 141
    5d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d5e:	fc 01       	movw	r30, r24
    5d60:	60 83       	st	Z, r22
    5d62:	08 95       	ret

00005d64 <_ZN14FreeBoardModel11getGpsModelEv>:
}

short FreeBoardModel::getGpsModel(){
	return this->config.gpsModel;
    5d64:	fc 01       	movw	r30, r24
    5d66:	e6 56       	subi	r30, 0x66	; 102
    5d68:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5d6a:	80 81       	ld	r24, Z
    5d6c:	91 81       	ldd	r25, Z+1	; 0x01
    5d6e:	08 95       	ret

00005d70 <_ZN14FreeBoardModel11setGpsModelEs>:
void FreeBoardModel::setGpsModel(short gpsModel){
	this->config.gpsModel=gpsModel;
    5d70:	86 56       	subi	r24, 0x66	; 102
    5d72:	9f 4f       	sbci	r25, 0xFF	; 255
    5d74:	fc 01       	movw	r30, r24
    5d76:	71 83       	std	Z+1, r23	; 0x01
    5d78:	60 83       	st	Z, r22
    5d7a:	08 95       	ret

00005d7c <_ZN14FreeBoardModel13getSerialBaudEv>:
}
long FreeBoardModel::getSerialBaud(){
	return this->config.serialBaud;
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	e4 56       	subi	r30, 0x64	; 100
    5d80:	ff 4f       	sbci	r31, 0xFF	; 255
    5d82:	60 81       	ld	r22, Z
    5d84:	71 81       	ldd	r23, Z+1	; 0x01
}
    5d86:	82 81       	ldd	r24, Z+2	; 0x02
    5d88:	93 81       	ldd	r25, Z+3	; 0x03
    5d8a:	08 95       	ret

00005d8c <_ZN14FreeBoardModel13setSerialBaudEl>:
void FreeBoardModel::setSerialBaud(long serialBaud){
	this->config.serialBaud=serialBaud;
    5d8c:	84 56       	subi	r24, 0x64	; 100
    5d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d90:	fc 01       	movw	r30, r24
    5d92:	40 83       	st	Z, r20
    5d94:	51 83       	std	Z+1, r21	; 0x01
    5d96:	62 83       	std	Z+2, r22	; 0x02
    5d98:	73 83       	std	Z+3, r23	; 0x03
    5d9a:	08 95       	ret

00005d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>:
}
long FreeBoardModel::getSerialBaud1(){
	return this->config.serialBaud1;
    5d9c:	fc 01       	movw	r30, r24
    5d9e:	e0 56       	subi	r30, 0x60	; 96
    5da0:	ff 4f       	sbci	r31, 0xFF	; 255
    5da2:	60 81       	ld	r22, Z
    5da4:	71 81       	ldd	r23, Z+1	; 0x01
}
    5da6:	82 81       	ldd	r24, Z+2	; 0x02
    5da8:	93 81       	ldd	r25, Z+3	; 0x03
    5daa:	08 95       	ret

00005dac <_ZN14FreeBoardModel14setSerialBaud1El>:
void FreeBoardModel::setSerialBaud1(long serialBaud1){
	this->config.serialBaud1=serialBaud1;
    5dac:	80 56       	subi	r24, 0x60	; 96
    5dae:	9f 4f       	sbci	r25, 0xFF	; 255
    5db0:	fc 01       	movw	r30, r24
    5db2:	40 83       	st	Z, r20
    5db4:	51 83       	std	Z+1, r21	; 0x01
    5db6:	62 83       	std	Z+2, r22	; 0x02
    5db8:	73 83       	std	Z+3, r23	; 0x03
    5dba:	08 95       	ret

00005dbc <_ZN14FreeBoardModel14getSerialBaud2Ev>:
}
long FreeBoardModel::getSerialBaud2(){
	return this->config.serialBaud2;
    5dbc:	fc 01       	movw	r30, r24
    5dbe:	ec 55       	subi	r30, 0x5C	; 92
    5dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc2:	60 81       	ld	r22, Z
    5dc4:	71 81       	ldd	r23, Z+1	; 0x01
}
    5dc6:	82 81       	ldd	r24, Z+2	; 0x02
    5dc8:	93 81       	ldd	r25, Z+3	; 0x03
    5dca:	08 95       	ret

00005dcc <_ZN14FreeBoardModel14setSerialBaud2El>:
void FreeBoardModel::setSerialBaud2(long serialBaud2){
	this->config.serialBaud2=serialBaud2;
    5dcc:	8c 55       	subi	r24, 0x5C	; 92
    5dce:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd0:	fc 01       	movw	r30, r24
    5dd2:	40 83       	st	Z, r20
    5dd4:	51 83       	std	Z+1, r21	; 0x01
    5dd6:	62 83       	std	Z+2, r22	; 0x02
    5dd8:	73 83       	std	Z+3, r23	; 0x03
    5dda:	08 95       	ret

00005ddc <_ZN14FreeBoardModel14getSerialBaud3Ev>:
}
long FreeBoardModel::getSerialBaud3(){
	return this->config.serialBaud3;
    5ddc:	fc 01       	movw	r30, r24
    5dde:	e8 55       	subi	r30, 0x58	; 88
    5de0:	ff 4f       	sbci	r31, 0xFF	; 255
    5de2:	60 81       	ld	r22, Z
    5de4:	71 81       	ldd	r23, Z+1	; 0x01
}
    5de6:	82 81       	ldd	r24, Z+2	; 0x02
    5de8:	93 81       	ldd	r25, Z+3	; 0x03
    5dea:	08 95       	ret

00005dec <_ZN14FreeBoardModel14setSerialBaud3El>:
void FreeBoardModel::setSerialBaud3(long serialBaud3){
	this->config.serialBaud3=serialBaud3;
    5dec:	88 55       	subi	r24, 0x58	; 88
    5dee:	9f 4f       	sbci	r25, 0xFF	; 255
    5df0:	fc 01       	movw	r30, r24
    5df2:	40 83       	st	Z, r20
    5df4:	51 83       	std	Z+1, r21	; 0x01
    5df6:	62 83       	std	Z+2, r22	; 0x02
    5df8:	73 83       	std	Z+3, r23	; 0x03
    5dfa:	08 95       	ret

00005dfc <_ZN14FreeBoardModel10getSeaTalkEv>:
}
bool FreeBoardModel::getSeaTalk(){
	return this->config.seaTalk;
    5dfc:	84 55       	subi	r24, 0x54	; 84
    5dfe:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5e00:	fc 01       	movw	r30, r24
    5e02:	80 81       	ld	r24, Z
    5e04:	08 95       	ret

00005e06 <_ZN14FreeBoardModel10setSeaTalkEb>:
void FreeBoardModel::setSeaTalk(bool seaTalk){
	this->config.seaTalk=seaTalk;
    5e06:	84 55       	subi	r24, 0x54	; 84
    5e08:	9f 4f       	sbci	r25, 0xFF	; 255
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	60 83       	st	Z, r22
    5e0e:	08 95       	ret

00005e10 <_Z9calculatev>:
 * Timer interrupt driven method to do time sensitive calculations
 * The calc flag causes the main loop to execute other less sensitive calls.
 */
void calculate() {
	//we create 100ms pings here
	execute = true;
    5e10:	81 e0       	ldi	r24, 0x01	; 1
    5e12:	80 93 06 11 	sts	0x1106, r24
	//we record the ping count out to 2 secs
	interval++;
    5e16:	80 91 04 11 	lds	r24, 0x1104
    5e1a:	90 91 05 11 	lds	r25, 0x1105
    5e1e:	01 96       	adiw	r24, 0x01	; 1
    5e20:	90 93 05 11 	sts	0x1105, r25
    5e24:	80 93 04 11 	sts	0x1104, r24
	interval = interval % 20;
    5e28:	80 91 04 11 	lds	r24, 0x1104
    5e2c:	90 91 05 11 	lds	r25, 0x1105
    5e30:	64 e1       	ldi	r22, 0x14	; 20
    5e32:	70 e0       	ldi	r23, 0x00	; 0
    5e34:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <__divmodhi4>
    5e38:	90 93 05 11 	sts	0x1105, r25
    5e3c:	80 93 04 11 	sts	0x1104, r24
    5e40:	08 95       	ret

00005e42 <_Z7readWDDv>:
	wind.readWindDataSpeed();
}

void readWDD() {
	//intCnt++;
	wind.readWindDataDir();
    5e42:	89 e6       	ldi	r24, 0x69	; 105
    5e44:	9a e0       	ldi	r25, 0x0A	; 10
    5e46:	0c 94 01 3b 	jmp	0x7602	; 0x7602 <_ZN4Wind15readWindDataDirEv>

00005e4a <_Z7readWDSv>:
	interval = interval % 20;
}

void readWDS() {
	//intCnt++;
	wind.readWindDataSpeed();
    5e4a:	89 e6       	ldi	r24, 0x69	; 105
    5e4c:	9a e0       	ldi	r25, 0x0A	; 10
    5e4e:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <_ZN4Wind17readWindDataSpeedEv>

00005e52 <setup>:
boolean inputSerial1Complete = false; // whether the GPS string is complete
boolean inputSerial2Complete = false; // whether the string is complete
boolean inputSerial3Complete = false; // whether the string is complete

void setup() {
	model.readConfig();
    5e52:	85 e5       	ldi	r24, 0x55	; 85
    5e54:	90 e1       	ldi	r25, 0x10	; 16
    5e56:	0e 94 a6 2a 	call	0x554c	; 0x554c <_ZN14FreeBoardModel10readConfigEv>
	inputSerial.reserve(40);
    5e5a:	68 e2       	ldi	r22, 0x28	; 40
    5e5c:	70 e0       	ldi	r23, 0x00	; 0
    5e5e:	84 ef       	ldi	r24, 0xF4	; 244
    5e60:	99 e0       	ldi	r25, 0x09	; 9
    5e62:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_ZN6String7reserveEj>
	// initialize  serial ports:
	Serial.begin(model.getSerialBaud(), SERIAL_8N1);
    5e66:	85 e5       	ldi	r24, 0x55	; 85
    5e68:	90 e1       	ldi	r25, 0x10	; 16
    5e6a:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <_ZN14FreeBoardModel13getSerialBaudEv>
    5e6e:	ab 01       	movw	r20, r22
    5e70:	bc 01       	movw	r22, r24
    5e72:	26 e0       	ldi	r18, 0x06	; 6
    5e74:	84 ec       	ldi	r24, 0xC4	; 196
    5e76:	96 e0       	ldi	r25, 0x06	; 6
    5e78:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>
	if (DEBUG) Serial.println("Initializing..");
    5e7c:	6f ea       	ldi	r22, 0xAF	; 175
    5e7e:	72 e0       	ldi	r23, 0x02	; 2
    5e80:	84 ec       	ldi	r24, 0xC4	; 196
    5e82:	96 e0       	ldi	r25, 0x06	; 6
    5e84:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

	//start gps on serial1, autobaud
	if (DEBUG) Serial.println("Start gps..");
    5e88:	6e eb       	ldi	r22, 0xBE	; 190
    5e8a:	72 e0       	ldi	r23, 0x02	; 2
    5e8c:	84 ec       	ldi	r24, 0xC4	; 196
    5e8e:	96 e0       	ldi	r25, 0x06	; 6
    5e90:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	gps.setupGps();
    5e94:	83 e6       	ldi	r24, 0x63	; 99
    5e96:	9a e0       	ldi	r25, 0x0A	; 10
    5e98:	0e 94 e5 37 	call	0x6fca	; 0x6fca <_ZN3Gps8setupGpsEv>
	Serial1.begin(model.getSerialBaud1());
    5e9c:	85 e5       	ldi	r24, 0x55	; 85
    5e9e:	90 e1       	ldi	r25, 0x10	; 16
    5ea0:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>
    5ea4:	ab 01       	movw	r20, r22
    5ea6:	bc 01       	movw	r22, r24
    5ea8:	82 ea       	ldi	r24, 0xA2	; 162
    5eaa:	96 e0       	ldi	r25, 0x06	; 6
    5eac:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>

	if (DEBUG) Serial.println("Start seatalk - serial2..");
    5eb0:	6a ec       	ldi	r22, 0xCA	; 202
    5eb2:	72 e0       	ldi	r23, 0x02	; 2
    5eb4:	84 ec       	ldi	r24, 0xC4	; 196
    5eb6:	96 e0       	ldi	r25, 0x06	; 6
    5eb8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	if(model.getSeaTalk()){
    5ebc:	85 e5       	ldi	r24, 0x55	; 85
    5ebe:	90 e1       	ldi	r25, 0x10	; 16
    5ec0:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <_ZN14FreeBoardModel10getSeaTalkEv>
    5ec4:	88 23       	and	r24, r24
    5ec6:	31 f0       	breq	.+12     	; 0x5ed4 <setup+0x82>
		Serial2.begin(4800, SERIAL_9N1); //Seatalk interface
    5ec8:	27 e0       	ldi	r18, 0x07	; 7
    5eca:	40 ec       	ldi	r20, 0xC0	; 192
    5ecc:	52 e1       	ldi	r21, 0x12	; 18
    5ece:	60 e0       	ldi	r22, 0x00	; 0
    5ed0:	70 e0       	ldi	r23, 0x00	; 0
    5ed2:	07 c0       	rjmp	.+14     	; 0x5ee2 <setup+0x90>
	}else{
		Serial2.begin(model.getSerialBaud2(), SERIAL_8N1);
    5ed4:	85 e5       	ldi	r24, 0x55	; 85
    5ed6:	90 e1       	ldi	r25, 0x10	; 16
    5ed8:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <_ZN14FreeBoardModel14getSerialBaud2Ev>
    5edc:	ab 01       	movw	r20, r22
    5ede:	bc 01       	movw	r22, r24
    5ee0:	26 e0       	ldi	r18, 0x06	; 6
    5ee2:	80 e8       	ldi	r24, 0x80	; 128
    5ee4:	96 e0       	ldi	r25, 0x06	; 6
    5ee6:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>
	}

	if (DEBUG) Serial.println("Start nmea Rx - serial3..");
    5eea:	64 ee       	ldi	r22, 0xE4	; 228
    5eec:	72 e0       	ldi	r23, 0x02	; 2
    5eee:	84 ec       	ldi	r24, 0xC4	; 196
    5ef0:	96 e0       	ldi	r25, 0x06	; 6
    5ef2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial3.begin(model.getSerialBaud3(), SERIAL_8N1); //talker2
    5ef6:	85 e5       	ldi	r24, 0x55	; 85
    5ef8:	90 e1       	ldi	r25, 0x10	; 16
    5efa:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <_ZN14FreeBoardModel14getSerialBaud3Ev>
    5efe:	ab 01       	movw	r20, r22
    5f00:	bc 01       	movw	r22, r24
    5f02:	26 e0       	ldi	r18, 0x06	; 6
    5f04:	8e e5       	ldi	r24, 0x5E	; 94
    5f06:	96 e0       	ldi	r25, 0x06	; 6
    5f08:	0e 94 27 05 	call	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>

	if (DEBUG) Serial.println("Start nmea Tx..");
    5f0c:	6e ef       	ldi	r22, 0xFE	; 254
    5f0e:	72 e0       	ldi	r23, 0x02	; 2
    5f10:	84 ec       	ldi	r24, 0xC4	; 196
    5f12:	96 e0       	ldi	r25, 0x06	; 6
    5f14:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	pinMode(nmeaRxPin, INPUT);
    5f18:	60 e0       	ldi	r22, 0x00	; 0
    5f1a:	84 e3       	ldi	r24, 0x34	; 52
    5f1c:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	pinMode(nmeaTxPin, OUTPUT);
    5f20:	61 e0       	ldi	r22, 0x01	; 1
    5f22:	85 e3       	ldi	r24, 0x35	; 53
    5f24:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	nmea.begin(4800);
    5f28:	40 ec       	ldi	r20, 0xC0	; 192
    5f2a:	52 e1       	ldi	r21, 0x12	; 18
    5f2c:	60 e0       	ldi	r22, 0x00	; 0
    5f2e:	70 e0       	ldi	r23, 0x00	; 0
    5f30:	84 e1       	ldi	r24, 0x14	; 20
    5f32:	90 e1       	ldi	r25, 0x10	; 16
    5f34:	0e 94 31 38 	call	0x7062	; 0x7062 <_ZN10NmeaSerial5beginEl>

	//setup interrupts to windPins
	if (DEBUG) Serial.println("Start wind..");
    5f38:	6e e0       	ldi	r22, 0x0E	; 14
    5f3a:	73 e0       	ldi	r23, 0x03	; 3
    5f3c:	84 ec       	ldi	r24, 0xC4	; 196
    5f3e:	96 e0       	ldi	r25, 0x06	; 6
    5f40:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	pinMode(windSpeedPin, INPUT);
    5f44:	60 e0       	ldi	r22, 0x00	; 0
    5f46:	83 e0       	ldi	r24, 0x03	; 3
    5f48:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	attachInterrupt(windSpeedInterrupt, readWDS, CHANGE);
    5f4c:	41 e0       	ldi	r20, 0x01	; 1
    5f4e:	50 e0       	ldi	r21, 0x00	; 0
    5f50:	65 e2       	ldi	r22, 0x25	; 37
    5f52:	7f e2       	ldi	r23, 0x2F	; 47
    5f54:	81 e0       	ldi	r24, 0x01	; 1
    5f56:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <attachInterrupt>
	pinMode(windDirPin, INPUT);
    5f5a:	60 e0       	ldi	r22, 0x00	; 0
    5f5c:	82 e0       	ldi	r24, 0x02	; 2
    5f5e:	0e 94 20 17 	call	0x2e40	; 0x2e40 <pinMode>
	attachInterrupt(windDirInterrupt, readWDD, CHANGE);
    5f62:	41 e0       	ldi	r20, 0x01	; 1
    5f64:	50 e0       	ldi	r21, 0x00	; 0
    5f66:	61 e2       	ldi	r22, 0x21	; 33
    5f68:	7f e2       	ldi	r23, 0x2F	; 47
    5f6a:	80 e0       	ldi	r24, 0x00	; 0
    5f6c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <attachInterrupt>

//	//setup timers
	if (DEBUG) Serial.println("Start timer..");
    5f70:	6b e1       	ldi	r22, 0x1B	; 27
    5f72:	73 e0       	ldi	r23, 0x03	; 3
    5f74:	84 ec       	ldi	r24, 0xC4	; 196
    5f76:	96 e0       	ldi	r25, 0x06	; 6
    5f78:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	FlexiTimer2::set(100, calculate); // 100ms period
    5f7c:	48 e0       	ldi	r20, 0x08	; 8
    5f7e:	5f e2       	ldi	r21, 0x2F	; 47
    5f80:	64 e6       	ldi	r22, 0x64	; 100
    5f82:	70 e0       	ldi	r23, 0x00	; 0
    5f84:	80 e0       	ldi	r24, 0x00	; 0
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	0e 94 67 20 	call	0x40ce	; 0x40ce <_ZN11FlexiTimer23setEmPFvvE>
	FlexiTimer2::start();
    5f8c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN11FlexiTimer25startEv>
	//lcd.clearLcd();

	if (DEBUG) Serial.println("Setup complete..");
    5f90:	69 e2       	ldi	r22, 0x29	; 41
    5f92:	73 e0       	ldi	r23, 0x03	; 3
    5f94:	84 ec       	ldi	r24, 0xC4	; 196
    5f96:	96 e0       	ldi	r25, 0x06	; 6
    5f98:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

00005f9c <_Z12serialEvent1v>:

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5f9c:	1f c0       	rjmp	.+62     	; 0x5fdc <_Z12serialEvent1v+0x40>
		inputSerial1Complete = gps.decode(Serial1.read());
    5f9e:	82 ea       	ldi	r24, 0xA2	; 162
    5fa0:	96 e0       	ldi	r25, 0x06	; 6
    5fa2:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    5fa6:	68 2f       	mov	r22, r24
    5fa8:	83 e6       	ldi	r24, 0x63	; 99
    5faa:	9a e0       	ldi	r25, 0x0A	; 10
    5fac:	0e 94 65 36 	call	0x6cca	; 0x6cca <_ZN3Gps6decodeEh>
    5fb0:	80 93 f3 09 	sts	0x09F3, r24
		// read from port 1 (GPS), send to port 0:
		if (inputSerial1Complete) {
    5fb4:	88 23       	and	r24, r24
    5fb6:	91 f0       	breq	.+36     	; 0x5fdc <_Z12serialEvent1v+0x40>
			if (MUX) nmea.printNmea(gpsSource.sentence());
    5fb8:	8b ea       	ldi	r24, 0xAB	; 171
    5fba:	9e e0       	ldi	r25, 0x0E	; 14
    5fbc:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5fc0:	bc 01       	movw	r22, r24
    5fc2:	84 e1       	ldi	r24, 0x14	; 20
    5fc4:	90 e1       	ldi	r25, 0x10	; 16
    5fc6:	0e 94 42 38 	call	0x7084	; 0x7084 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(gpsSource.sentence());
    5fca:	8b ea       	ldi	r24, 0xAB	; 171
    5fcc:	9e e0       	ldi	r25, 0x0E	; 14
    5fce:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    5fd2:	bc 01       	movw	r22, r24
    5fd4:	84 ec       	ldi	r24, 0xC4	; 196
    5fd6:	96 e0       	ldi	r25, 0x06	; 6
    5fd8:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5fdc:	82 ea       	ldi	r24, 0xA2	; 162
    5fde:	96 e0       	ldi	r25, 0x06	; 6
    5fe0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    5fe4:	89 2b       	or	r24, r25
    5fe6:	d9 f6       	brne	.-74     	; 0x5f9e <_Z12serialEvent1v+0x2>
			Serial.println(gpsSource.sentence());
			//loop every sentence
			break;
		}
	}
}
    5fe8:	08 95       	ret

00005fea <_Z12serialEvent2v>:

void serialEvent2() {
	while (Serial2.available()) {
    5fea:	80 e8       	ldi	r24, 0x80	; 128
    5fec:	96 e0       	ldi	r25, 0x06	; 6
    5fee:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    5ff2:	89 2b       	or	r24, r25
    5ff4:	31 f1       	breq	.+76     	; 0x6042 <_Z12serialEvent2v+0x58>
		if(model.getSeaTalk()){
    5ff6:	85 e5       	ldi	r24, 0x55	; 85
    5ff8:	90 e1       	ldi	r25, 0x10	; 16
    5ffa:	0e 94 fe 2e 	call	0x5dfc	; 0x5dfc <_ZN14FreeBoardModel10getSeaTalkEv>
    5ffe:	88 23       	and	r24, r24
    6000:	51 f0       	breq	.+20     	; 0x6016 <_Z12serialEvent2v+0x2c>
			seatalk.processSeaTalkByte(Serial2.read());
    6002:	80 e8       	ldi	r24, 0x80	; 128
    6004:	96 e0       	ldi	r25, 0x06	; 6
    6006:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    600a:	68 2f       	mov	r22, r24
    600c:	8b ef       	ldi	r24, 0xFB	; 251
    600e:	99 e0       	ldi	r25, 0x09	; 9
    6010:	0e 94 6c 39 	call	0x72d8	; 0x72d8 <_ZN7Seatalk18processSeaTalkByteEh>
    6014:	ea cf       	rjmp	.-44     	; 0x5fea <_Z12serialEvent2v>
		}else{
			inputSerial2Complete = talker2.decode(Serial2.read());
    6016:	80 e8       	ldi	r24, 0x80	; 128
    6018:	96 e0       	ldi	r25, 0x06	; 6
    601a:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    601e:	68 2f       	mov	r22, r24
    6020:	89 ed       	ldi	r24, 0xD9	; 217
    6022:	9b e0       	ldi	r25, 0x0B	; 11
    6024:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA6decodeEc>
    6028:	80 93 f2 09 	sts	0x09F2, r24
			if (inputSerial2Complete) {
    602c:	88 23       	and	r24, r24
    602e:	e9 f2       	breq	.-70     	; 0x5fea <_Z12serialEvent2v>
				if (MUX) nmea.printNmea(talker2.sentence());
    6030:	89 ed       	ldi	r24, 0xD9	; 217
    6032:	9b e0       	ldi	r25, 0x0B	; 11
    6034:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    6038:	bc 01       	movw	r22, r24
    603a:	84 e1       	ldi	r24, 0x14	; 20
    603c:	90 e1       	ldi	r25, 0x10	; 16
    603e:	0c 94 42 38 	jmp	0x7084	; 0x7084 <_ZN10NmeaSerial9printNmeaEPc>
    6042:	08 95       	ret

00006044 <_Z12serialEvent3v>:
		}
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    6044:	1f c0       	rjmp	.+62     	; 0x6084 <_Z12serialEvent3v+0x40>
		inputSerial3Complete = talker3.decode(Serial3.read());
    6046:	8e e5       	ldi	r24, 0x5E	; 94
    6048:	96 e0       	ldi	r25, 0x06	; 6
    604a:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    604e:	68 2f       	mov	r22, r24
    6050:	80 e7       	ldi	r24, 0x70	; 112
    6052:	9a e0       	ldi	r25, 0x0A	; 10
    6054:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA6decodeEc>
    6058:	80 93 f1 09 	sts	0x09F1, r24
		if (inputSerial3Complete) {
    605c:	88 23       	and	r24, r24
    605e:	91 f0       	breq	.+36     	; 0x6084 <_Z12serialEvent3v+0x40>
			if (MUX) nmea.printNmea(talker3.sentence());
    6060:	80 e7       	ldi	r24, 0x70	; 112
    6062:	9a e0       	ldi	r25, 0x0A	; 10
    6064:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    6068:	bc 01       	movw	r22, r24
    606a:	84 e1       	ldi	r24, 0x14	; 20
    606c:	90 e1       	ldi	r25, 0x10	; 16
    606e:	0e 94 42 38 	call	0x7084	; 0x7084 <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(talker3.sentence());
    6072:	80 e7       	ldi	r24, 0x70	; 112
    6074:	9a e0       	ldi	r25, 0x0A	; 10
    6076:	0e 94 4d 1c 	call	0x389a	; 0x389a <_ZN4NMEA8sentenceEv>
    607a:	bc 01       	movw	r22, r24
    607c:	84 ec       	ldi	r24, 0xC4	; 196
    607e:	96 e0       	ldi	r25, 0x06	; 6
    6080:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		}
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    6084:	8e e5       	ldi	r24, 0x5E	; 94
    6086:	96 e0       	ldi	r25, 0x06	; 6
    6088:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    608c:	89 2b       	or	r24, r25
    608e:	d9 f6       	brne	.-74     	; 0x6046 <_Z12serialEvent3v+0x2>
			Serial.println(talker3.sentence());
			//loop every sentence
			break;
		}
	}
}
    6090:	08 95       	ret

00006092 <loop>:

void loop() {
    6092:	cf 93       	push	r28
    6094:	df 93       	push	r29
    6096:	cd b7       	in	r28, 0x3d	; 61
    6098:	de b7       	in	r29, 0x3e	; 62
    609a:	a2 97       	sbiw	r28, 0x22	; 34
    609c:	0f b6       	in	r0, 0x3f	; 63
    609e:	f8 94       	cli
    60a0:	de bf       	out	0x3e, r29	; 62
    60a2:	0f be       	out	0x3f, r0	; 63
    60a4:	cd bf       	out	0x3d, r28	; 61

	//if (DEBUG)
	//Serial.println("Looping..");

	if (execute) {
    60a6:	80 91 06 11 	lds	r24, 0x1106
    60aa:	88 23       	and	r24, r24
    60ac:	09 f4       	brne	.+2      	; 0x60b0 <loop+0x1e>
    60ae:	a6 c0       	rjmp	.+332    	; 0x61fc <loop+0x16a>
		//timer ping
		//do these every 100ms
		autopilot.calcAutoPilot();
    60b0:	89 e1       	ldi	r24, 0x19	; 25
    60b2:	9a e0       	ldi	r25, 0x0A	; 10
    60b4:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <_ZN9Autopilot13calcAutoPilotEv>

		if (interval % 2 == 0) {
    60b8:	80 91 04 11 	lds	r24, 0x1104
    60bc:	90 91 05 11 	lds	r25, 0x1105
			//do every 200ms
			//wind.calcWindSpeedAndDir();
		}
		if (interval % 5 == 0) {
    60c0:	80 91 04 11 	lds	r24, 0x1104
    60c4:	90 91 05 11 	lds	r25, 0x1105
    60c8:	65 e0       	ldi	r22, 0x05	; 5
    60ca:	70 e0       	ldi	r23, 0x00	; 0
    60cc:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <__divmodhi4>
    60d0:	89 2b       	or	r24, r25
    60d2:	09 f0       	breq	.+2      	; 0x60d6 <loop+0x44>
    60d4:	7b c0       	rjmp	.+246    	; 0x61cc <loop+0x13a>
			//do every 500ms
			wind.calcWindSpeedAndDir();
    60d6:	89 e6       	ldi	r24, 0x69	; 105
    60d8:	9a e0       	ldi	r25, 0x0A	; 10
    60da:	0e 94 47 3b 	call	0x768e	; 0x768e <_ZN4Wind19calcWindSpeedAndDirEv>
			wind.calcWindData();
    60de:	89 e6       	ldi	r24, 0x69	; 105
    60e0:	9a e0       	ldi	r25, 0x0A	; 10
    60e2:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <_ZN4Wind12calcWindDataEv>
			nmea.printWindNmea();
    60e6:	84 e1       	ldi	r24, 0x14	; 20
    60e8:	90 e1       	ldi	r25, 0x10	; 16
    60ea:	0e 94 44 38 	call	0x7088	; 0x7088 <_ZN10NmeaSerial13printWindNmeaEv>
			//fire any alarms
			alarm.checkAlarms();
    60ee:	8b e6       	ldi	r24, 0x6B	; 107
    60f0:	9a e0       	ldi	r25, 0x0A	; 10
    60f2:	0e 94 b3 23 	call	0x4766	; 0x4766 <_ZN5Alarm11checkAlarmsEv>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    60f6:	80 91 c6 06 	lds	r24, 0x06C6
    60fa:	90 91 c7 06 	lds	r25, 0x06C7
    60fe:	9c 83       	std	Y+4, r25	; 0x04
    6100:	8b 83       	std	Y+3, r24	; 0x03
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
    6102:	80 91 c8 06 	lds	r24, 0x06C8
    6106:	90 91 c9 06 	lds	r25, 0x06C9
    610a:	a0 91 ca 06 	lds	r26, 0x06CA
    610e:	b0 91 cb 06 	lds	r27, 0x06CB
    6112:	8d 83       	std	Y+5, r24	; 0x05
    6114:	9e 83       	std	Y+6, r25	; 0x06
    6116:	af 83       	std	Y+7, r26	; 0x07
    6118:	b8 87       	std	Y+8, r27	; 0x08
    611a:	80 91 cc 06 	lds	r24, 0x06CC
    611e:	90 91 cd 06 	lds	r25, 0x06CD
    6122:	a0 91 ce 06 	lds	r26, 0x06CE
    6126:	b0 91 cf 06 	lds	r27, 0x06CF
    612a:	89 87       	std	Y+9, r24	; 0x09
    612c:	9a 87       	std	Y+10, r25	; 0x0a
    612e:	ab 87       	std	Y+11, r26	; 0x0b
    6130:	bc 87       	std	Y+12, r27	; 0x0c

#include "Stream.h"

struct ring_buffer;

class HardwareSerial : public Stream
    6132:	84 e4       	ldi	r24, 0x44	; 68
    6134:	96 e0       	ldi	r25, 0x06	; 6
    6136:	9a 83       	std	Y+2, r25	; 0x02
    6138:	89 83       	std	Y+1, r24	; 0x01
    613a:	80 91 d0 06 	lds	r24, 0x06D0
    613e:	90 91 d1 06 	lds	r25, 0x06D1
    6142:	9e 87       	std	Y+14, r25	; 0x0e
    6144:	8d 87       	std	Y+13, r24	; 0x0d
    6146:	80 91 d2 06 	lds	r24, 0x06D2
    614a:	90 91 d3 06 	lds	r25, 0x06D3
    614e:	98 8b       	std	Y+16, r25	; 0x10
    6150:	8f 87       	std	Y+15, r24	; 0x0f
    6152:	80 91 d4 06 	lds	r24, 0x06D4
    6156:	90 91 d5 06 	lds	r25, 0x06D5
    615a:	9a 8b       	std	Y+18, r25	; 0x12
    615c:	89 8b       	std	Y+17, r24	; 0x11
    615e:	80 91 d6 06 	lds	r24, 0x06D6
    6162:	90 91 d7 06 	lds	r25, 0x06D7
    6166:	9c 8b       	std	Y+20, r25	; 0x14
    6168:	8b 8b       	std	Y+19, r24	; 0x13
    616a:	80 91 d8 06 	lds	r24, 0x06D8
    616e:	90 91 d9 06 	lds	r25, 0x06D9
    6172:	9e 8b       	std	Y+22, r25	; 0x16
    6174:	8d 8b       	std	Y+21, r24	; 0x15
    6176:	80 91 da 06 	lds	r24, 0x06DA
    617a:	90 91 db 06 	lds	r25, 0x06DB
    617e:	98 8f       	std	Y+24, r25	; 0x18
    6180:	8f 8b       	std	Y+23, r24	; 0x17
    6182:	80 91 dc 06 	lds	r24, 0x06DC
    6186:	90 91 dd 06 	lds	r25, 0x06DD
    618a:	9a 8f       	std	Y+26, r25	; 0x1a
    618c:	89 8f       	std	Y+25, r24	; 0x19
    618e:	80 91 de 06 	lds	r24, 0x06DE
    6192:	90 91 df 06 	lds	r25, 0x06DF
    6196:	9c 8f       	std	Y+28, r25	; 0x1c
    6198:	8b 8f       	std	Y+27, r24	; 0x1b
    619a:	80 91 e0 06 	lds	r24, 0x06E0
    619e:	8d 8f       	std	Y+29, r24	; 0x1d
    61a0:	80 91 e1 06 	lds	r24, 0x06E1
    61a4:	8e 8f       	std	Y+30, r24	; 0x1e
    61a6:	80 91 e2 06 	lds	r24, 0x06E2
    61aa:	8f 8f       	std	Y+31, r24	; 0x1f
    61ac:	80 91 e3 06 	lds	r24, 0x06E3
    61b0:	88 a3       	std	Y+32, r24	; 0x20
    61b2:	80 91 e4 06 	lds	r24, 0x06E4
    61b6:	89 a3       	std	Y+33, r24	; 0x21
    61b8:	80 91 e5 06 	lds	r24, 0x06E5
    61bc:	8a a3       	std	Y+34, r24	; 0x22
			model.writeSimple(Serial);
    61be:	be 01       	movw	r22, r28
    61c0:	6f 5f       	subi	r22, 0xFF	; 255
    61c2:	7f 4f       	sbci	r23, 0xFF	; 255
    61c4:	85 e5       	ldi	r24, 0x55	; 85
    61c6:	90 e1       	ldi	r25, 0x10	; 16
    61c8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>
		}
		if (interval % 10 == 0) {
    61cc:	80 91 04 11 	lds	r24, 0x1104
    61d0:	90 91 05 11 	lds	r25, 0x1105
    61d4:	6a e0       	ldi	r22, 0x0A	; 10
    61d6:	70 e0       	ldi	r23, 0x00	; 0
    61d8:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <__divmodhi4>
    61dc:	89 2b       	or	r24, r25
    61de:	61 f4       	brne	.+24     	; 0x61f8 <loop+0x166>
			//do every 1000ms
			anchor.checkAnchor();
    61e0:	85 e1       	ldi	r24, 0x15	; 21
    61e2:	9a e0       	ldi	r25, 0x0A	; 10
    61e4:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <_ZN6Anchor11checkAnchorEv>
			alarm.checkWindAlarm();
    61e8:	8b e6       	ldi	r24, 0x6B	; 107
    61ea:	9a e0       	ldi	r25, 0x0A	; 10
    61ec:	0e 94 10 24 	call	0x4820	; 0x4820 <_ZN5Alarm14checkWindAlarmEv>

			nmea.printTrueHeading();
    61f0:	84 e1       	ldi	r24, 0x14	; 20
    61f2:	90 e1       	ldi	r25, 0x10	; 16
    61f4:	0e 94 c4 38 	call	0x7188	; 0x7188 <_ZN10NmeaSerial16printTrueHeadingEv>
		}
		//if (interval % 20 == 0) {
		//do every 2000ms
		//}

		execute = false;
    61f8:	10 92 06 11 	sts	0x1106, r1
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    61fc:	a2 96       	adiw	r28, 0x22	; 34
    61fe:	0f b6       	in	r0, 0x3f	; 63
    6200:	f8 94       	cli
    6202:	de bf       	out	0x3e, r29	; 62
    6204:	0f be       	out	0x3f, r0	; 63
    6206:	cd bf       	out	0x3d, r28	; 61
    6208:	df 91       	pop	r29
    620a:	cf 91       	pop	r28
    620c:	08 95       	ret

0000620e <_Z7processPcc>:

void process(char * s, char parser) {
    620e:	4f 92       	push	r4
    6210:	5f 92       	push	r5
    6212:	6f 92       	push	r6
    6214:	7f 92       	push	r7
    6216:	8f 92       	push	r8
    6218:	9f 92       	push	r9
    621a:	af 92       	push	r10
    621c:	bf 92       	push	r11
    621e:	cf 92       	push	r12
    6220:	df 92       	push	r13
    6222:	ef 92       	push	r14
    6224:	ff 92       	push	r15
    6226:	0f 93       	push	r16
    6228:	1f 93       	push	r17
    622a:	cf 93       	push	r28
    622c:	df 93       	push	r29
    622e:	00 d0       	rcall	.+0      	; 0x6230 <_Z7processPcc+0x22>
    6230:	00 d0       	rcall	.+0      	; 0x6232 <_Z7processPcc+0x24>
    6232:	1f 92       	push	r1
    6234:	cd b7       	in	r28, 0x3d	; 61
    6236:	de b7       	in	r29, 0x3e	; 62
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6238:	6d b6       	in	r6, 0x3d	; 61
    623a:	7e b6       	in	r7, 0x3e	; 62
}

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
    623c:	67 ef       	ldi	r22, 0xF7	; 247
    623e:	74 e0       	ldi	r23, 0x04	; 4
    6240:	ec c1       	rjmp	.+984    	; 0x661a <_Z7processPcc+0x40c>
    6242:	5d b6       	in	r5, 0x3d	; 61
    6244:	4e b6       	in	r4, 0x3e	; 62
		char key[5];
		int l = strlen(cmd);
		bool save=false;
		if (cmd[0] == '#') {
			//
			strncpy(key, cmd, 4);
    6246:	44 e0       	ldi	r20, 0x04	; 4
    6248:	50 e0       	ldi	r21, 0x00	; 0
    624a:	b7 01       	movw	r22, r14
    624c:	ce 01       	movw	r24, r28
    624e:	01 96       	adiw	r24, 0x01	; 1
    6250:	0e 94 29 46 	call	0x8c52	; 0x8c52 <strncpy>
			key[4] = '\0';
    6254:	1d 82       	std	Y+5, r1	; 0x05
			char val[l - 4];
    6256:	48 01       	movw	r8, r16
    6258:	85 e0       	ldi	r24, 0x05	; 5
    625a:	88 1a       	sub	r8, r24
    625c:	91 08       	sbc	r9, r1
    625e:	68 01       	movw	r12, r16
    6260:	94 e0       	ldi	r25, 0x04	; 4
    6262:	c9 1a       	sub	r12, r25
    6264:	d1 08       	sbc	r13, r1
    6266:	ad b7       	in	r26, 0x3d	; 61
    6268:	be b7       	in	r27, 0x3e	; 62
    626a:	ac 19       	sub	r26, r12
    626c:	bd 09       	sbc	r27, r13
    626e:	0f b6       	in	r0, 0x3f	; 63
    6270:	f8 94       	cli
    6272:	be bf       	out	0x3e, r27	; 62
    6274:	0f be       	out	0x3f, r0	; 63
    6276:	ad bf       	out	0x3d, r26	; 61
    6278:	ad b6       	in	r10, 0x3d	; 61
    627a:	be b6       	in	r11, 0x3e	; 62
    627c:	ef ef       	ldi	r30, 0xFF	; 255
    627e:	ae 1a       	sub	r10, r30
    6280:	be 0a       	sbc	r11, r30
			memcpy(val, &cmd[5], l - 5);
    6282:	65 01       	movw	r12, r10
    6284:	f5 e0       	ldi	r31, 0x05	; 5
    6286:	ef 0e       	add	r14, r31
    6288:	f1 1c       	adc	r15, r1
    628a:	a4 01       	movw	r20, r8
    628c:	b7 01       	movw	r22, r14
    628e:	c5 01       	movw	r24, r10
    6290:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
			val[l - 5] = '\0';
    6294:	f5 01       	movw	r30, r10
    6296:	e8 0d       	add	r30, r8
    6298:	f9 1d       	adc	r31, r9
    629a:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);

			//anchor
			if (strcmp(key, ANCHOR_ALARM_STATE) == 0) {
    629c:	6a e3       	ldi	r22, 0x3A	; 58
    629e:	73 e0       	ldi	r23, 0x03	; 3
    62a0:	ce 01       	movw	r24, r28
    62a2:	01 96       	adiw	r24, 0x01	; 1
    62a4:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    62a8:	00 97       	sbiw	r24, 0x00	; 0
    62aa:	b1 f4       	brne	.+44     	; 0x62d8 <_Z7processPcc+0xca>
				//if (DEBUG) Serial.print("AA Entered..");
				model.setAnchorAlarmOn(atoi(val));
    62ac:	c5 01       	movw	r24, r10
    62ae:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    62b2:	61 e0       	ldi	r22, 0x01	; 1
    62b4:	89 2b       	or	r24, r25
    62b6:	09 f4       	brne	.+2      	; 0x62ba <_Z7processPcc+0xac>
    62b8:	60 e0       	ldi	r22, 0x00	; 0
    62ba:	85 e5       	ldi	r24, 0x55	; 85
    62bc:	90 e1       	ldi	r25, 0x10	; 16
    62be:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <_ZN14FreeBoardModel16setAnchorAlarmOnEb>
				if (atoi(val) == 1) {
    62c2:	c6 01       	movw	r24, r12
    62c4:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    62c8:	01 97       	sbiw	r24, 0x01	; 1
    62ca:	09 f0       	breq	.+2      	; 0x62ce <_Z7processPcc+0xc0>
    62cc:	39 c1       	rjmp	.+626    	; 0x6540 <_Z7processPcc+0x332>
					anchor.setAnchorPoint();
    62ce:	85 e1       	ldi	r24, 0x15	; 21
    62d0:	9a e0       	ldi	r25, 0x0A	; 10
    62d2:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <_ZN6Anchor14setAnchorPointEv>
    62d6:	34 c1       	rjmp	.+616    	; 0x6540 <_Z7processPcc+0x332>
				}
			} else if (strcmp(key, ANCHOR_ALARM_ADJUST) == 0) {
    62d8:	6f e3       	ldi	r22, 0x3F	; 63
    62da:	73 e0       	ldi	r23, 0x03	; 3
    62dc:	ce 01       	movw	r24, r28
    62de:	01 96       	adiw	r24, 0x01	; 1
    62e0:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    62e4:	00 97       	sbiw	r24, 0x00	; 0
    62e6:	b1 f4       	brne	.+44     	; 0x6314 <_Z7processPcc+0x106>
				model.setAnchorRadius(model.getAnchorRadius() + atof(val));
    62e8:	85 e5       	ldi	r24, 0x55	; 85
    62ea:	90 e1       	ldi	r25, 0x10	; 16
    62ec:	0e 94 33 2b 	call	0x5666	; 0x5666 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    62f0:	6b 01       	movw	r12, r22
    62f2:	7c 01       	movw	r14, r24
    62f4:	c5 01       	movw	r24, r10
    62f6:	0e 94 80 45 	call	0x8b00	; 0x8b00 <atof>
    62fa:	9b 01       	movw	r18, r22
    62fc:	ac 01       	movw	r20, r24
    62fe:	c7 01       	movw	r24, r14
    6300:	b6 01       	movw	r22, r12
    6302:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    6306:	ab 01       	movw	r20, r22
    6308:	bc 01       	movw	r22, r24
    630a:	85 e5       	ldi	r24, 0x55	; 85
    630c:	90 e1       	ldi	r25, 0x10	; 16
    630e:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <_ZN14FreeBoardModel15setAnchorRadiusEf>
    6312:	16 c1       	rjmp	.+556    	; 0x6540 <_Z7processPcc+0x332>
			} else if (strcmp(key, ANCHOR_ALARM_LAT) == 0) {
    6314:	64 e4       	ldi	r22, 0x44	; 68
    6316:	73 e0       	ldi	r23, 0x03	; 3
    6318:	ce 01       	movw	r24, r28
    631a:	01 96       	adiw	r24, 0x01	; 1
    631c:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    6320:	00 97       	sbiw	r24, 0x00	; 0
    6322:	51 f4       	brne	.+20     	; 0x6338 <_Z7processPcc+0x12a>
				model.setAnchorLat(atof(val));
    6324:	c5 01       	movw	r24, r10
    6326:	0e 94 80 45 	call	0x8b00	; 0x8b00 <atof>
    632a:	ab 01       	movw	r20, r22
    632c:	bc 01       	movw	r22, r24
    632e:	85 e5       	ldi	r24, 0x55	; 85
    6330:	90 e1       	ldi	r25, 0x10	; 16
    6332:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <_ZN14FreeBoardModel12setAnchorLatEf>
    6336:	04 c1       	rjmp	.+520    	; 0x6540 <_Z7processPcc+0x332>
			} else if (strcmp(key, ANCHOR_ALARM_LON) == 0) {
    6338:	69 e4       	ldi	r22, 0x49	; 73
    633a:	73 e0       	ldi	r23, 0x03	; 3
    633c:	ce 01       	movw	r24, r28
    633e:	01 96       	adiw	r24, 0x01	; 1
    6340:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    6344:	00 97       	sbiw	r24, 0x00	; 0
    6346:	51 f4       	brne	.+20     	; 0x635c <_Z7processPcc+0x14e>
				model.setAnchorLon(atof(val));
    6348:	c5 01       	movw	r24, r10
    634a:	0e 94 80 45 	call	0x8b00	; 0x8b00 <atof>
    634e:	ab 01       	movw	r20, r22
    6350:	bc 01       	movw	r22, r24
    6352:	85 e5       	ldi	r24, 0x55	; 85
    6354:	90 e1       	ldi	r25, 0x10	; 16
    6356:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <_ZN14FreeBoardModel12setAnchorLonEf>
    635a:	f2 c0       	rjmp	.+484    	; 0x6540 <_Z7processPcc+0x332>
			}
			//autopliot
			else if (strcmp(key, AUTOPILOT_STATE) == 0) {
    635c:	6e e4       	ldi	r22, 0x4E	; 78
    635e:	73 e0       	ldi	r23, 0x03	; 3
    6360:	ce 01       	movw	r24, r28
    6362:	01 96       	adiw	r24, 0x01	; 1
    6364:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    6368:	00 97       	sbiw	r24, 0x00	; 0
    636a:	61 f4       	brne	.+24     	; 0x6384 <_Z7processPcc+0x176>
				//if (DEBUG) Serial.print("AP Entered..");
				//if (DEBUG) Serial.println(val);
				//this is potentailly dangerous, since we dont want the boat diving off on an old target heading.
				//in model we ALWAYS reset to current magnetic or wind heading at this point
				model.setAutopilotOn(atoi(val));
    636c:	c5 01       	movw	r24, r10
    636e:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    6372:	61 e0       	ldi	r22, 0x01	; 1
    6374:	89 2b       	or	r24, r25
    6376:	09 f4       	brne	.+2      	; 0x637a <_Z7processPcc+0x16c>
    6378:	60 e0       	ldi	r22, 0x00	; 0
    637a:	85 e5       	ldi	r24, 0x55	; 85
    637c:	90 e1       	ldi	r25, 0x10	; 16
    637e:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <_ZN14FreeBoardModel14setAutopilotOnEb>
    6382:	de c0       	rjmp	.+444    	; 0x6540 <_Z7processPcc+0x332>
			} else if (strcmp(key, AUTOPILOT_ADJUST) == 0) {
    6384:	63 e5       	ldi	r22, 0x53	; 83
    6386:	73 e0       	ldi	r23, 0x03	; 3
    6388:	ce 01       	movw	r24, r28
    638a:	01 96       	adiw	r24, 0x01	; 1
    638c:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    6390:	00 97       	sbiw	r24, 0x00	; 0
    6392:	c1 f4       	brne	.+48     	; 0x63c4 <_Z7processPcc+0x1b6>
				model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + atol(val));
    6394:	85 e5       	ldi	r24, 0x55	; 85
    6396:	90 e1       	ldi	r25, 0x10	; 16
    6398:	0e 94 67 2b 	call	0x56ce	; 0x56ce <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    639c:	6b 01       	movw	r12, r22
    639e:	7c 01       	movw	r14, r24
    63a0:	c5 01       	movw	r24, r10
    63a2:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <atol>
    63a6:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    63aa:	9b 01       	movw	r18, r22
    63ac:	ac 01       	movw	r20, r24
    63ae:	c7 01       	movw	r24, r14
    63b0:	b6 01       	movw	r22, r12
    63b2:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    63b6:	ab 01       	movw	r20, r22
    63b8:	bc 01       	movw	r22, r24
    63ba:	85 e5       	ldi	r24, 0x55	; 85
    63bc:	90 e1       	ldi	r25, 0x10	; 16
    63be:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
    63c2:	be c0       	rjmp	.+380    	; 0x6540 <_Z7processPcc+0x332>
			} else if (strcmp(key, AUTOPILOT_SOURCE) == 0) {
    63c4:	68 e5       	ldi	r22, 0x58	; 88
    63c6:	73 e0       	ldi	r23, 0x03	; 3
    63c8:	ce 01       	movw	r24, r28
    63ca:	01 96       	adiw	r24, 0x01	; 1
    63cc:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    63d0:	00 97       	sbiw	r24, 0x00	; 0
    63d2:	39 f4       	brne	.+14     	; 0x63e2 <_Z7processPcc+0x1d4>
				model.setAutopilotReference(val[0]);
    63d4:	d5 01       	movw	r26, r10
    63d6:	6c 91       	ld	r22, X
    63d8:	85 e5       	ldi	r24, 0x55	; 85
    63da:	90 e1       	ldi	r25, 0x10	; 16
    63dc:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
    63e0:	af c0       	rjmp	.+350    	; 0x6540 <_Z7processPcc+0x332>
			}
			//wind
			else if (strcmp(key, WIND_SPEED_ALARM_STATE) == 0) {
    63e2:	6d e5       	ldi	r22, 0x5D	; 93
    63e4:	73 e0       	ldi	r23, 0x03	; 3
    63e6:	ce 01       	movw	r24, r28
    63e8:	01 96       	adiw	r24, 0x01	; 1
    63ea:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    63ee:	00 97       	sbiw	r24, 0x00	; 0
    63f0:	61 f4       	brne	.+24     	; 0x640a <_Z7processPcc+0x1fc>
				model.setWindAlarmOn(atoi(val));
    63f2:	c5 01       	movw	r24, r10
    63f4:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    63f8:	61 e0       	ldi	r22, 0x01	; 1
    63fa:	89 2b       	or	r24, r25
    63fc:	09 f4       	brne	.+2      	; 0x6400 <_Z7processPcc+0x1f2>
    63fe:	60 e0       	ldi	r22, 0x00	; 0
    6400:	85 e5       	ldi	r24, 0x55	; 85
    6402:	90 e1       	ldi	r25, 0x10	; 16
    6404:	0e 94 51 2e 	call	0x5ca2	; 0x5ca2 <_ZN14FreeBoardModel14setWindAlarmOnEb>
    6408:	9b c0       	rjmp	.+310    	; 0x6540 <_Z7processPcc+0x332>
			} else if (strcpy(key, WIND_ALARM_KNOTS) == 0) {
    640a:	62 e6       	ldi	r22, 0x62	; 98
    640c:	73 e0       	ldi	r23, 0x03	; 3
    640e:	ce 01       	movw	r24, r28
    6410:	01 96       	adiw	r24, 0x01	; 1
    6412:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    6416:	00 97       	sbiw	r24, 0x00	; 0
    6418:	49 f4       	brne	.+18     	; 0x642c <_Z7processPcc+0x21e>
				model.setWindAlarmSpeed(atoi(val));
    641a:	c5 01       	movw	r24, r10
    641c:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    6420:	bc 01       	movw	r22, r24
    6422:	85 e5       	ldi	r24, 0x55	; 85
    6424:	90 e1       	ldi	r25, 0x10	; 16
    6426:	0e 94 56 2e 	call	0x5cac	; 0x5cac <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
    642a:	8a c0       	rjmp	.+276    	; 0x6540 <_Z7processPcc+0x332>
			} else if (strcpy(key, WIND_ZERO_ADJUST) == 0) {
    642c:	67 e6       	ldi	r22, 0x67	; 103
    642e:	73 e0       	ldi	r23, 0x03	; 3
    6430:	ce 01       	movw	r24, r28
    6432:	01 96       	adiw	r24, 0x01	; 1
    6434:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    6438:	00 97       	sbiw	r24, 0x00	; 0
    643a:	49 f4       	brne	.+18     	; 0x644e <_Z7processPcc+0x240>
				model.setWindZeroOffset(atoi(val));
    643c:	c5 01       	movw	r24, r10
    643e:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    6442:	bc 01       	movw	r22, r24
    6444:	85 e5       	ldi	r24, 0x55	; 85
    6446:	90 e1       	ldi	r25, 0x10	; 16
    6448:	0e 94 4b 2e 	call	0x5c96	; 0x5c96 <_ZN14FreeBoardModel17setWindZeroOffsetEi>
    644c:	79 c0       	rjmp	.+242    	; 0x6540 <_Z7processPcc+0x332>
			}
			//gps,serial,seatalk
			else if (strcmp(key, GPS_MODEL) == 0) {
    644e:	6c e6       	ldi	r22, 0x6C	; 108
    6450:	73 e0       	ldi	r23, 0x03	; 3
    6452:	ce 01       	movw	r24, r28
    6454:	01 96       	adiw	r24, 0x01	; 1
    6456:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    645a:	00 97       	sbiw	r24, 0x00	; 0
    645c:	49 f4       	brne	.+18     	; 0x6470 <_Z7processPcc+0x262>
				model.setGpsModel(atoi(val));
    645e:	c5 01       	movw	r24, r10
    6460:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    6464:	bc 01       	movw	r22, r24
    6466:	85 e5       	ldi	r24, 0x55	; 85
    6468:	90 e1       	ldi	r25, 0x10	; 16
    646a:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <_ZN14FreeBoardModel11setGpsModelEs>
    646e:	e7 c0       	rjmp	.+462    	; 0x663e <_Z7processPcc+0x430>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD0) == 0) {
    6470:	61 e7       	ldi	r22, 0x71	; 113
    6472:	73 e0       	ldi	r23, 0x03	; 3
    6474:	ce 01       	movw	r24, r28
    6476:	01 96       	adiw	r24, 0x01	; 1
    6478:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    647c:	00 97       	sbiw	r24, 0x00	; 0
    647e:	69 f4       	brne	.+26     	; 0x649a <_Z7processPcc+0x28c>
				model.setSerialBaud(atoi(val));
    6480:	c5 01       	movw	r24, r10
    6482:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    6486:	ac 01       	movw	r20, r24
    6488:	66 27       	eor	r22, r22
    648a:	57 fd       	sbrc	r21, 7
    648c:	60 95       	com	r22
    648e:	76 2f       	mov	r23, r22
    6490:	85 e5       	ldi	r24, 0x55	; 85
    6492:	90 e1       	ldi	r25, 0x10	; 16
    6494:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <_ZN14FreeBoardModel13setSerialBaudEl>
    6498:	d2 c0       	rjmp	.+420    	; 0x663e <_Z7processPcc+0x430>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD1) == 0) {
    649a:	66 e7       	ldi	r22, 0x76	; 118
    649c:	73 e0       	ldi	r23, 0x03	; 3
    649e:	ce 01       	movw	r24, r28
    64a0:	01 96       	adiw	r24, 0x01	; 1
    64a2:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    64a6:	00 97       	sbiw	r24, 0x00	; 0
    64a8:	69 f4       	brne	.+26     	; 0x64c4 <_Z7processPcc+0x2b6>
				model.setSerialBaud1(atoi(val));
    64aa:	c5 01       	movw	r24, r10
    64ac:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    64b0:	ac 01       	movw	r20, r24
    64b2:	66 27       	eor	r22, r22
    64b4:	57 fd       	sbrc	r21, 7
    64b6:	60 95       	com	r22
    64b8:	76 2f       	mov	r23, r22
    64ba:	85 e5       	ldi	r24, 0x55	; 85
    64bc:	90 e1       	ldi	r25, 0x10	; 16
    64be:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <_ZN14FreeBoardModel14setSerialBaud1El>
    64c2:	bd c0       	rjmp	.+378    	; 0x663e <_Z7processPcc+0x430>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD2) == 0) {
    64c4:	6b e7       	ldi	r22, 0x7B	; 123
    64c6:	73 e0       	ldi	r23, 0x03	; 3
    64c8:	ce 01       	movw	r24, r28
    64ca:	01 96       	adiw	r24, 0x01	; 1
    64cc:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    64d0:	00 97       	sbiw	r24, 0x00	; 0
    64d2:	69 f4       	brne	.+26     	; 0x64ee <_Z7processPcc+0x2e0>
				model.setSerialBaud2(atoi(val));
    64d4:	c5 01       	movw	r24, r10
    64d6:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    64da:	ac 01       	movw	r20, r24
    64dc:	66 27       	eor	r22, r22
    64de:	57 fd       	sbrc	r21, 7
    64e0:	60 95       	com	r22
    64e2:	76 2f       	mov	r23, r22
    64e4:	85 e5       	ldi	r24, 0x55	; 85
    64e6:	90 e1       	ldi	r25, 0x10	; 16
    64e8:	0e 94 e6 2e 	call	0x5dcc	; 0x5dcc <_ZN14FreeBoardModel14setSerialBaud2El>
    64ec:	a8 c0       	rjmp	.+336    	; 0x663e <_Z7processPcc+0x430>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD3) == 0) {
    64ee:	60 e8       	ldi	r22, 0x80	; 128
    64f0:	73 e0       	ldi	r23, 0x03	; 3
    64f2:	ce 01       	movw	r24, r28
    64f4:	01 96       	adiw	r24, 0x01	; 1
    64f6:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    64fa:	00 97       	sbiw	r24, 0x00	; 0
    64fc:	69 f4       	brne	.+26     	; 0x6518 <_Z7processPcc+0x30a>
				model.setSerialBaud3(atoi(val));
    64fe:	c5 01       	movw	r24, r10
    6500:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    6504:	ac 01       	movw	r20, r24
    6506:	66 27       	eor	r22, r22
    6508:	57 fd       	sbrc	r21, 7
    650a:	60 95       	com	r22
    650c:	76 2f       	mov	r23, r22
    650e:	85 e5       	ldi	r24, 0x55	; 85
    6510:	90 e1       	ldi	r25, 0x10	; 16
    6512:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <_ZN14FreeBoardModel14setSerialBaud3El>
    6516:	93 c0       	rjmp	.+294    	; 0x663e <_Z7processPcc+0x430>
				save=true;
			} else if (strcpy(key, SEATALK) == 0) {
    6518:	65 e8       	ldi	r22, 0x85	; 133
    651a:	73 e0       	ldi	r23, 0x03	; 3
    651c:	ce 01       	movw	r24, r28
    651e:	01 96       	adiw	r24, 0x01	; 1
    6520:	0e 94 14 46 	call	0x8c28	; 0x8c28 <strcpy>
    6524:	00 97       	sbiw	r24, 0x00	; 0
    6526:	61 f4       	brne	.+24     	; 0x6540 <_Z7processPcc+0x332>
				model.setSeaTalk(atoi(val));
    6528:	c5 01       	movw	r24, r10
    652a:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    652e:	61 e0       	ldi	r22, 0x01	; 1
    6530:	89 2b       	or	r24, r25
    6532:	09 f4       	brne	.+2      	; 0x6536 <_Z7processPcc+0x328>
    6534:	60 e0       	ldi	r22, 0x00	; 0
    6536:	85 e5       	ldi	r24, 0x55	; 85
    6538:	90 e1       	ldi	r25, 0x10	; 16
    653a:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <_ZN14FreeBoardModel10setSeaTalkEb>
    653e:	7f c0       	rjmp	.+254    	; 0x663e <_Z7processPcc+0x430>
    6540:	92 01       	movw	r18, r4
    6542:	60 c0       	rjmp	.+192    	; 0x6604 <_Z7processPcc+0x3f6>
    6544:	8d b6       	in	r8, 0x3d	; 61
    6546:	9e b6       	in	r9, 0x3e	; 62
				save=true;
			}
			if(save)model.saveConfig();

		} else {
			strncpy(key, cmd, 3);
    6548:	43 e0       	ldi	r20, 0x03	; 3
    654a:	50 e0       	ldi	r21, 0x00	; 0
    654c:	b7 01       	movw	r22, r14
    654e:	ce 01       	movw	r24, r28
    6550:	01 96       	adiw	r24, 0x01	; 1
    6552:	0e 94 29 46 	call	0x8c52	; 0x8c52 <strncpy>
			key[3] = '\0';
    6556:	1c 82       	std	Y+4, r1	; 0x04
			char val[l - 3];
    6558:	58 01       	movw	r10, r16
    655a:	b4 e0       	ldi	r27, 0x04	; 4
    655c:	ab 1a       	sub	r10, r27
    655e:	b1 08       	sbc	r11, r1
    6560:	68 01       	movw	r12, r16
    6562:	e3 e0       	ldi	r30, 0x03	; 3
    6564:	ce 1a       	sub	r12, r30
    6566:	d1 08       	sbc	r13, r1
    6568:	8d b7       	in	r24, 0x3d	; 61
    656a:	9e b7       	in	r25, 0x3e	; 62
    656c:	8c 19       	sub	r24, r12
    656e:	9d 09       	sbc	r25, r13
    6570:	0f b6       	in	r0, 0x3f	; 63
    6572:	f8 94       	cli
    6574:	9e bf       	out	0x3e, r25	; 62
    6576:	0f be       	out	0x3f, r0	; 63
    6578:	8d bf       	out	0x3d, r24	; 61
    657a:	0d b7       	in	r16, 0x3d	; 61
    657c:	1e b7       	in	r17, 0x3e	; 62
    657e:	0f 5f       	subi	r16, 0xFF	; 255
    6580:	1f 4f       	sbci	r17, 0xFF	; 255
			memcpy(val, &cmd[4], l - 4);
    6582:	68 01       	movw	r12, r16
    6584:	94 e0       	ldi	r25, 0x04	; 4
    6586:	e9 0e       	add	r14, r25
    6588:	f1 1c       	adc	r15, r1
    658a:	a5 01       	movw	r20, r10
    658c:	b7 01       	movw	r22, r14
    658e:	c8 01       	movw	r24, r16
    6590:	0e 94 e5 45 	call	0x8bca	; 0x8bca <memcpy>
			val[l - 4] = '\0';
    6594:	f8 01       	movw	r30, r16
    6596:	ea 0d       	add	r30, r10
    6598:	fb 1d       	adc	r31, r11
    659a:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);
			// incoming data = WST,WSA,WDT,WDA,WSU,LAT,LON,COG,MGH,SOG,YAW
			if (strcmp(key, MGH) == 0) {
    659c:	6a e8       	ldi	r22, 0x8A	; 138
    659e:	73 e0       	ldi	r23, 0x03	; 3
    65a0:	ce 01       	movw	r24, r28
    65a2:	01 96       	adiw	r24, 0x01	; 1
    65a4:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    65a8:	00 97       	sbiw	r24, 0x00	; 0
    65aa:	49 f4       	brne	.+18     	; 0x65be <_Z7processPcc+0x3b0>
				model.setMagneticHeading(atof(val));
    65ac:	c8 01       	movw	r24, r16
    65ae:	0e 94 80 45 	call	0x8b00	; 0x8b00 <atof>
    65b2:	ab 01       	movw	r20, r22
    65b4:	bc 01       	movw	r22, r24
    65b6:	85 e5       	ldi	r24, 0x55	; 85
    65b8:	90 e1       	ldi	r25, 0x10	; 16
    65ba:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <_ZN14FreeBoardModel18setMagneticHeadingEf>
			}
			if (strcmp(key, DECL) == 0) {
    65be:	6e e8       	ldi	r22, 0x8E	; 142
    65c0:	73 e0       	ldi	r23, 0x03	; 3
    65c2:	ce 01       	movw	r24, r28
    65c4:	01 96       	adiw	r24, 0x01	; 1
    65c6:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    65ca:	00 97       	sbiw	r24, 0x00	; 0
    65cc:	49 f4       	brne	.+18     	; 0x65e0 <_Z7processPcc+0x3d2>
				model.setDeclination(atof(val));
    65ce:	c6 01       	movw	r24, r12
    65d0:	0e 94 80 45 	call	0x8b00	; 0x8b00 <atof>
    65d4:	ab 01       	movw	r20, r22
    65d6:	bc 01       	movw	r22, r24
    65d8:	85 e5       	ldi	r24, 0x55	; 85
    65da:	90 e1       	ldi	r25, 0x10	; 16
    65dc:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <_ZN14FreeBoardModel14setDeclinationEf>
			}
			if (strcmp(key, WDT) == 0) {
    65e0:	62 e9       	ldi	r22, 0x92	; 146
    65e2:	73 e0       	ldi	r23, 0x03	; 3
    65e4:	ce 01       	movw	r24, r28
    65e6:	01 96       	adiw	r24, 0x01	; 1
    65e8:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <strcmp>
    65ec:	00 97       	sbiw	r24, 0x00	; 0
    65ee:	41 f4       	brne	.+16     	; 0x6600 <_Z7processPcc+0x3f2>
				model.setWindTrueDir(atoi(val));
    65f0:	c6 01       	movw	r24, r12
    65f2:	0e 94 84 45 	call	0x8b08	; 0x8b08 <atoi>
    65f6:	bc 01       	movw	r22, r24
    65f8:	85 e5       	ldi	r24, 0x55	; 85
    65fa:	90 e1       	ldi	r25, 0x10	; 16
    65fc:	0e 94 62 2e 	call	0x5cc4	; 0x5cc4 <_ZN14FreeBoardModel14setWindTrueDirEi>
    6600:	38 2d       	mov	r19, r8
    6602:	29 2d       	mov	r18, r9
    6604:	83 2f       	mov	r24, r19
    6606:	92 2f       	mov	r25, r18
    6608:	0f b6       	in	r0, 0x3f	; 63
    660a:	f8 94       	cli
    660c:	9e bf       	out	0x3e, r25	; 62
    660e:	0f be       	out	0x3f, r0	; 63
    6610:	8d bf       	out	0x3d, r24	; 61
			}

		}
		//next token
		cmd = strtok(NULL, ",");
    6612:	67 ef       	ldi	r22, 0xF7	; 247
    6614:	74 e0       	ldi	r23, 0x04	; 4
    6616:	80 e0       	ldi	r24, 0x00	; 0
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	0e 94 e1 45 	call	0x8bc2	; 0x8bc2 <strtok>
    661e:	7c 01       	movw	r14, r24

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
	while (cmd != NULL && strlen(cmd) > 3) {
    6620:	00 97       	sbiw	r24, 0x00	; 0
    6622:	c1 f0       	breq	.+48     	; 0x6654 <_Z7processPcc+0x446>
    6624:	dc 01       	movw	r26, r24
    6626:	0d 90       	ld	r0, X+
    6628:	00 20       	and	r0, r0
    662a:	e9 f7       	brne	.-6      	; 0x6626 <_Z7processPcc+0x418>
    662c:	8d 01       	movw	r16, r26
    662e:	01 50       	subi	r16, 0x01	; 1
    6630:	11 09       	sbc	r17, r1
    6632:	08 1b       	sub	r16, r24
    6634:	19 0b       	sbc	r17, r25
    6636:	04 30       	cpi	r16, 0x04	; 4
    6638:	11 05       	cpc	r17, r1
    663a:	30 f4       	brcc	.+12     	; 0x6648 <_Z7processPcc+0x43a>
    663c:	0b c0       	rjmp	.+22     	; 0x6654 <_Z7processPcc+0x446>
				save=true;
			} else if (strcpy(key, SEATALK) == 0) {
				model.setSeaTalk(atoi(val));
				save=true;
			}
			if(save)model.saveConfig();
    663e:	85 e5       	ldi	r24, 0x55	; 85
    6640:	90 e1       	ldi	r25, 0x10	; 16
    6642:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <_ZN14FreeBoardModel10saveConfigEv>
    6646:	7c cf       	rjmp	.-264    	; 0x6540 <_Z7processPcc+0x332>
		//if (DEBUG) Serial.println(cmd);

		char key[5];
		int l = strlen(cmd);
		bool save=false;
		if (cmd[0] == '#') {
    6648:	fc 01       	movw	r30, r24
    664a:	80 81       	ld	r24, Z
    664c:	83 32       	cpi	r24, 0x23	; 35
    664e:	09 f0       	breq	.+2      	; 0x6652 <_Z7processPcc+0x444>
    6650:	79 cf       	rjmp	.-270    	; 0x6544 <_Z7processPcc+0x336>
    6652:	f7 cd       	rjmp	.-1042   	; 0x6242 <_Z7processPcc+0x34>
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6654:	0f b6       	in	r0, 0x3f	; 63
    6656:	f8 94       	cli
    6658:	7e be       	out	0x3e, r7	; 62
    665a:	0f be       	out	0x3f, r0	; 63
    665c:	6d be       	out	0x3d, r6	; 61
    665e:	0f 90       	pop	r0
    6660:	0f 90       	pop	r0
    6662:	0f 90       	pop	r0
    6664:	0f 90       	pop	r0
    6666:	0f 90       	pop	r0
    6668:	df 91       	pop	r29
    666a:	cf 91       	pop	r28
    666c:	1f 91       	pop	r17
    666e:	0f 91       	pop	r16
    6670:	ff 90       	pop	r15
    6672:	ef 90       	pop	r14
    6674:	df 90       	pop	r13
    6676:	cf 90       	pop	r12
    6678:	bf 90       	pop	r11
    667a:	af 90       	pop	r10
    667c:	9f 90       	pop	r9
    667e:	8f 90       	pop	r8
    6680:	7f 90       	pop	r7
    6682:	6f 90       	pop	r6
    6684:	5f 90       	pop	r5
    6686:	4f 90       	pop	r4
    6688:	08 95       	ret

0000668a <_Z11serialEventv>:
 SerialEvent occurs whenever a new data comes in the
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
    668a:	cf 92       	push	r12
    668c:	df 92       	push	r13
    668e:	ef 92       	push	r14
    6690:	ff 92       	push	r15
    6692:	0f 93       	push	r16
    6694:	1f 93       	push	r17
    6696:	cf 93       	push	r28
    6698:	df 93       	push	r29
    669a:	cd b7       	in	r28, 0x3d	; 61
    669c:	de b7       	in	r29, 0x3e	; 62
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    669e:	ed b6       	in	r14, 0x3d	; 61
    66a0:	fe b6       	in	r15, 0x3e	; 62
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    66a2:	39 c0       	rjmp	.+114    	; 0x6716 <_Z11serialEventv+0x8c>
		// get the new byte:
		char inChar = (char) Serial.read();
    66a4:	84 ec       	ldi	r24, 0xC4	; 196
    66a6:	96 e0       	ldi	r25, 0x06	; 6
    66a8:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    66ac:	18 2f       	mov	r17, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    66ae:	68 2f       	mov	r22, r24
    66b0:	84 ef       	ldi	r24, 0xF4	; 244
    66b2:	99 e0       	ldi	r25, 0x09	; 9
    66b4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN6String6concatEc>
		// add it to the inputString:
		inputSerial += inChar;
		if (inChar == '\n') {
    66b8:	1a 30       	cpi	r17, 0x0A	; 10
    66ba:	69 f5       	brne	.+90     	; 0x6716 <_Z11serialEventv+0x8c>
    66bc:	cd b6       	in	r12, 0x3d	; 61
    66be:	de b6       	in	r13, 0x3e	; 62
			//inputSerialComplete = true;
			char carray[inputSerial.length() + 1]; //determine size of the array
    66c0:	40 91 f8 09 	lds	r20, 0x09F8
    66c4:	50 91 f9 09 	lds	r21, 0x09F9
    66c8:	4f 5f       	subi	r20, 0xFF	; 255
    66ca:	5f 4f       	sbci	r21, 0xFF	; 255
    66cc:	8d b7       	in	r24, 0x3d	; 61
    66ce:	9e b7       	in	r25, 0x3e	; 62
    66d0:	84 1b       	sub	r24, r20
    66d2:	95 0b       	sbc	r25, r21
    66d4:	0f b6       	in	r0, 0x3f	; 63
    66d6:	f8 94       	cli
    66d8:	9e bf       	out	0x3e, r25	; 62
    66da:	0f be       	out	0x3f, r0	; 63
    66dc:	8d bf       	out	0x3d, r24	; 61
    66de:	0d b7       	in	r16, 0x3d	; 61
    66e0:	1e b7       	in	r17, 0x3e	; 62
    66e2:	0f 5f       	subi	r16, 0xFF	; 255
    66e4:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    66e6:	20 e0       	ldi	r18, 0x00	; 0
    66e8:	30 e0       	ldi	r19, 0x00	; 0
    66ea:	b8 01       	movw	r22, r16
    66ec:	84 ef       	ldi	r24, 0xF4	; 244
    66ee:	99 e0       	ldi	r25, 0x09	; 9
    66f0:	0e 94 85 10 	call	0x210a	; 0x210a <_ZNK6String8getBytesEPhjj>
			inputSerial.toCharArray(carray, sizeof(carray));
			process(carray, ',');
    66f4:	6c e2       	ldi	r22, 0x2C	; 44
    66f6:	c8 01       	movw	r24, r16
    66f8:	0e 94 07 31 	call	0x620e	; 0x620e <_Z7processPcc>
			inputSerial = "";
    66fc:	6e e3       	ldi	r22, 0x3E	; 62
    66fe:	74 e0       	ldi	r23, 0x04	; 4
    6700:	84 ef       	ldi	r24, 0xF4	; 244
    6702:	99 e0       	ldi	r25, 0x09	; 9
    6704:	0e 94 4a 0c 	call	0x1894	; 0x1894 <_ZN6StringaSEPKc>
    6708:	8c 2d       	mov	r24, r12
    670a:	9d 2d       	mov	r25, r13
    670c:	0f b6       	in	r0, 0x3f	; 63
    670e:	f8 94       	cli
    6710:	9e bf       	out	0x3e, r25	; 62
    6712:	0f be       	out	0x3f, r0	; 63
    6714:	8d bf       	out	0x3d, r24	; 61
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    6716:	84 ec       	ldi	r24, 0xC4	; 196
    6718:	96 e0       	ldi	r25, 0x06	; 6
    671a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    671e:	89 2b       	or	r24, r25
    6720:	09 f6       	brne	.-126    	; 0x66a4 <_Z11serialEventv+0x1a>
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    6722:	0f b6       	in	r0, 0x3f	; 63
    6724:	f8 94       	cli
    6726:	fe be       	out	0x3e, r15	; 62
    6728:	0f be       	out	0x3f, r0	; 63
    672a:	ed be       	out	0x3d, r14	; 61
    672c:	df 91       	pop	r29
    672e:	cf 91       	pop	r28
    6730:	1f 91       	pop	r17
    6732:	0f 91       	pop	r16
    6734:	ff 90       	pop	r15
    6736:	ef 90       	pop	r14
    6738:	df 90       	pop	r13
    673a:	cf 90       	pop	r12
    673c:	08 95       	ret

0000673e <_Z11getChecksumPc>:
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
	byte cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    673e:	fc 01       	movw	r30, r24
    6740:	01 90       	ld	r0, Z+
    6742:	00 20       	and	r0, r0
    6744:	e9 f7       	brne	.-6      	; 0x6740 <_Z11getChecksumPc+0x2>
    6746:	e8 1b       	sub	r30, r24
    6748:	f9 0b       	sbc	r31, r25
    674a:	32 97       	sbiw	r30, 0x02	; 2
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
    674c:	dc 01       	movw	r26, r24
    674e:	11 96       	adiw	r26, 0x01	; 1
	byte cs = 0; //clear any old checksum
    6750:	40 e0       	ldi	r20, 0x00	; 0
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    6752:	02 c0       	rjmp	.+4      	; 0x6758 <_Z11getChecksumPc+0x1a>
		cs ^= str[n]; //calculates the checksum
    6754:	2d 91       	ld	r18, X+
    6756:	42 27       	eor	r20, r18
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
	byte cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    6758:	9d 01       	movw	r18, r26
    675a:	28 1b       	sub	r18, r24
    675c:	39 0b       	sbc	r19, r25
    675e:	2e 17       	cp	r18, r30
    6760:	3f 07       	cpc	r19, r31
    6762:	c0 f3       	brcs	.-16     	; 0x6754 <_Z11getChecksumPc+0x16>
		cs ^= str[n]; //calculates the checksum
	}
	return cs;
}
    6764:	84 2f       	mov	r24, r20
    6766:	08 95       	ret

00006768 <_GLOBAL__sub_I_execute>:
int inByteSerial3;
char input;
//volatile int intCnt = 0;

//freeboard model
FreeBoardModel model;
    6768:	85 e5       	ldi	r24, 0x55	; 85
    676a:	90 e1       	ldi	r25, 0x10	; 16
    676c:	0e 94 fe 28 	call	0x51fc	; 0x51fc <_ZN14FreeBoardModelC1Ev>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6770:	10 92 17 10 	sts	0x1017, r1
    6774:	10 92 16 10 	sts	0x1016, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    6778:	88 ee       	ldi	r24, 0xE8	; 232
    677a:	93 e0       	ldi	r25, 0x03	; 3
    677c:	a0 e0       	ldi	r26, 0x00	; 0
    677e:	b0 e0       	ldi	r27, 0x00	; 0
    6780:	80 93 18 10 	sts	0x1018, r24
    6784:	90 93 19 10 	sts	0x1019, r25
    6788:	a0 93 1a 10 	sts	0x101A, r26
    678c:	b0 93 1b 10 	sts	0x101B, r27
#include "FreeBoardModel.h"
#include "FreeBoardPLC.h"

class NmeaSerial: AltSoftSerial {
public:
	NmeaSerial(FreeBoardModel* model):model(model){};
    6790:	8a e7       	ldi	r24, 0x7A	; 122
    6792:	95 e0       	ldi	r25, 0x05	; 5
    6794:	90 93 15 10 	sts	0x1015, r25
    6798:	80 93 14 10 	sts	0x1014, r24
    679c:	85 e5       	ldi	r24, 0x55	; 85
    679e:	90 e1       	ldi	r25, 0x10	; 16
    67a0:	90 93 21 10 	sts	0x1021, r25
    67a4:	80 93 20 10 	sts	0x1020, r24
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);

//NMEA ports
NMEA gpsSource(ALL);
    67a8:	60 e0       	ldi	r22, 0x00	; 0
    67aa:	70 e0       	ldi	r23, 0x00	; 0
    67ac:	8b ea       	ldi	r24, 0xAB	; 171
    67ae:	9e e0       	ldi	r25, 0x0E	; 14
    67b0:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>
NMEA talker0(ALL);
    67b4:	60 e0       	ldi	r22, 0x00	; 0
    67b6:	70 e0       	ldi	r23, 0x00	; 0
    67b8:	82 e4       	ldi	r24, 0x42	; 66
    67ba:	9d e0       	ldi	r25, 0x0D	; 13
    67bc:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>
NMEA talker2(ALL);
    67c0:	60 e0       	ldi	r22, 0x00	; 0
    67c2:	70 e0       	ldi	r23, 0x00	; 0
    67c4:	89 ed       	ldi	r24, 0xD9	; 217
    67c6:	9b e0       	ldi	r25, 0x0B	; 11
    67c8:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>
NMEA talker3(ALL);
    67cc:	60 e0       	ldi	r22, 0x00	; 0
    67ce:	70 e0       	ldi	r23, 0x00	; 0
    67d0:	80 e7       	ldi	r24, 0x70	; 112
    67d2:	9a e0       	ldi	r25, 0x0A	; 10
    67d4:	0e 94 b0 1b 	call	0x3760	; 0x3760 <_ZN4NMEAC1Ei>

//alarm
Alarm alarm(&model);
    67d8:	65 e5       	ldi	r22, 0x55	; 85
    67da:	70 e1       	ldi	r23, 0x10	; 16
    67dc:	8b e6       	ldi	r24, 0x6B	; 107
    67de:	9a e0       	ldi	r25, 0x0A	; 10
    67e0:	0e 94 71 23 	call	0x46e2	; 0x46e2 <_ZN5AlarmC1EP14FreeBoardModel>

//wind
Wind wind(&model);
    67e4:	65 e5       	ldi	r22, 0x55	; 85
    67e6:	70 e1       	ldi	r23, 0x10	; 16
    67e8:	89 e6       	ldi	r24, 0x69	; 105
    67ea:	9a e0       	ldi	r25, 0x0A	; 10
    67ec:	0e 94 7d 39 	call	0x72fa	; 0x72fa <_ZN4WindC1EP14FreeBoardModel>

//Gps
Gps gps(&gpsSource, &model);
    67f0:	45 e5       	ldi	r20, 0x55	; 85
    67f2:	50 e1       	ldi	r21, 0x10	; 16
    67f4:	6b ea       	ldi	r22, 0xAB	; 171
    67f6:	7e e0       	ldi	r23, 0x0E	; 14
    67f8:	83 e6       	ldi	r24, 0x63	; 99
    67fa:	9a e0       	ldi	r25, 0x0A	; 10
    67fc:	0e 94 3f 34 	call	0x687e	; 0x687e <_ZN3GpsC1EP4NMEAP14FreeBoardModel>

//Autopilot
Autopilot autopilot(&model);
    6800:	65 e5       	ldi	r22, 0x55	; 85
    6802:	70 e1       	ldi	r23, 0x10	; 16
    6804:	89 e1       	ldi	r24, 0x19	; 25
    6806:	9a e0       	ldi	r25, 0x0A	; 10
    6808:	0e 94 56 27 	call	0x4eac	; 0x4eac <_ZN9AutopilotC1EP14FreeBoardModel>

//Anchor
Anchor anchor(&model);
    680c:	65 e5       	ldi	r22, 0x55	; 85
    680e:	70 e1       	ldi	r23, 0x10	; 16
    6810:	85 e1       	ldi	r24, 0x15	; 21
    6812:	9a e0       	ldi	r25, 0x0A	; 10
    6814:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <_ZN6AnchorC1EP14FreeBoardModel>

Seatalk seatalk(&Serial2, &model);
    6818:	45 e5       	ldi	r20, 0x55	; 85
    681a:	50 e1       	ldi	r21, 0x10	; 16
    681c:	60 e8       	ldi	r22, 0x80	; 128
    681e:	76 e0       	ldi	r23, 0x06	; 6
    6820:	8b ef       	ldi	r24, 0xFB	; 251
    6822:	99 e0       	ldi	r25, 0x09	; 9
    6824:	0e 94 64 39 	call	0x72c8	; 0x72c8 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>

String inputSerial = ""; // a string to hold incoming data
    6828:	6e e3       	ldi	r22, 0x3E	; 62
    682a:	74 e0       	ldi	r23, 0x04	; 4
    682c:	84 ef       	ldi	r24, 0xF4	; 244
    682e:	99 e0       	ldi	r25, 0x09	; 9
    6830:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <_ZN6StringC1EPKc>

00006834 <_GLOBAL__sub_D_execute>:
    6834:	84 ef       	ldi	r24, 0xF4	; 244
    6836:	99 e0       	ldi	r25, 0x09	; 9
    6838:	0e 94 9b 0b 	call	0x1736	; 0x1736 <_ZN6StringD1Ev>

//Autopilot
Autopilot autopilot(&model);

//Anchor
Anchor anchor(&model);
    683c:	85 e1       	ldi	r24, 0x15	; 21
    683e:	9a e0       	ldi	r25, 0x0A	; 10
    6840:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN6AnchorD1Ev>

//Gps
Gps gps(&gpsSource, &model);

//Autopilot
Autopilot autopilot(&model);
    6844:	89 e1       	ldi	r24, 0x19	; 25
    6846:	9a e0       	ldi	r25, 0x0A	; 10
    6848:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <_ZN9AutopilotD1Ev>

//wind
Wind wind(&model);

//Gps
Gps gps(&gpsSource, &model);
    684c:	83 e6       	ldi	r24, 0x63	; 99
    684e:	9a e0       	ldi	r25, 0x0A	; 10
    6850:	0e 94 32 34 	call	0x6864	; 0x6864 <_ZN3GpsD1Ev>
NMEA talker0(ALL);
NMEA talker2(ALL);
NMEA talker3(ALL);

//alarm
Alarm alarm(&model);
    6854:	8b e6       	ldi	r24, 0x6B	; 107
    6856:	9a e0       	ldi	r25, 0x0A	; 10
    6858:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN5AlarmD1Ev>

//NMEA output - The arduino puts out TTL, NMEA is RS232. They are different V and amps. The +-5V levels may need inverting or you get
// garbage.
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);
    685c:	84 e1       	ldi	r24, 0x14	; 20
    685e:	90 e1       	ldi	r25, 0x10	; 16
    6860:	0c 94 1c 38 	jmp	0x7038	; 0x7038 <_ZN10NmeaSerialD1Ev>

00006864 <_ZN3GpsD1Ev>:
 */
#include "Gps.h"
char gpsBuffer[40];
PString gpsStr(gpsBuffer, sizeof(gpsBuffer));

Gps::~Gps() {
    6864:	22 e5       	ldi	r18, 0x52	; 82
    6866:	35 e0       	ldi	r19, 0x05	; 5
    6868:	fc 01       	movw	r30, r24
    686a:	31 83       	std	Z+1, r19	; 0x01
    686c:	20 83       	st	Z, r18
    686e:	08 95       	ret

00006870 <_ZN3GpsD0Ev>:
    6870:	22 e5       	ldi	r18, 0x52	; 82
    6872:	35 e0       	ldi	r19, 0x05	; 5
    6874:	fc 01       	movw	r30, r24
    6876:	31 83       	std	Z+1, r19	; 0x01
    6878:	20 83       	st	Z, r18
}
    687a:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

0000687e <_ZN3GpsC1EP4NMEAP14FreeBoardModel>:
Gps::Gps(NMEA* gpsSource, FreeBoardModel* model) {
    687e:	fc 01       	movw	r30, r24
    6880:	82 e5       	ldi	r24, 0x52	; 82
    6882:	95 e0       	ldi	r25, 0x05	; 5
    6884:	91 83       	std	Z+1, r25	; 0x01
    6886:	80 83       	st	Z, r24

	this->model = model;
    6888:	55 83       	std	Z+5, r21	; 0x05
    688a:	44 83       	std	Z+4, r20	; 0x04
	this->gpsSource = gpsSource;
    688c:	73 83       	std	Z+3, r23	; 0x03
    688e:	62 83       	std	Z+2, r22	; 0x02
    6890:	08 95       	ret

00006892 <_ZN3Gps7testMsgEv>:
	//setupGps();
}

bool Gps::testMsg() {
    6892:	cf 92       	push	r12
    6894:	df 92       	push	r13
    6896:	ef 92       	push	r14
    6898:	ff 92       	push	r15
    689a:	cf 93       	push	r28
    689c:	df 93       	push	r29
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    689e:	c5 e6       	ldi	r28, 0x65	; 101
    68a0:	d0 e0       	ldi	r29, 0x00	; 0
    68a2:	0a c0       	rjmp	.+20     	; 0x68b8 <_ZN3Gps7testMsgEv+0x26>
		if (Serial1.available()) {
    68a4:	82 ea       	ldi	r24, 0xA2	; 162
    68a6:	96 e0       	ldi	r25, 0x06	; 6
    68a8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    68ac:	89 2b       	or	r24, r25
    68ae:	d1 f3       	breq	.-12     	; 0x68a4 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
    68b0:	82 ea       	ldi	r24, 0xA2	; 162
    68b2:	96 e0       	ldi	r25, 0x06	; 6
    68b4:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
    68b8:	21 97       	sbiw	r28, 0x01	; 1
}

bool Gps::testMsg() {
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    68ba:	a1 f7       	brne	.-24     	; 0x68a4 <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
			x++;
		}
	}
	//5 secs
	unsigned long now = millis();
    68bc:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    68c0:	6b 01       	movw	r12, r22
    68c2:	7c 01       	movw	r14, r24
	bool valid = true;
    68c4:	c1 e0       	ldi	r28, 0x01	; 1
	while (now + 5000 > millis() && valid) {
    68c6:	88 e8       	ldi	r24, 0x88	; 136
    68c8:	c8 0e       	add	r12, r24
    68ca:	83 e1       	ldi	r24, 0x13	; 19
    68cc:	d8 1e       	adc	r13, r24
    68ce:	e1 1c       	adc	r14, r1
    68d0:	f1 1c       	adc	r15, r1
    68d2:	09 c0       	rjmp	.+18     	; 0x68e6 <_ZN3Gps7testMsgEv+0x54>
		if (Serial1.available()) {
			int c = Serial1.read();
    68d4:	82 ea       	ldi	r24, 0xA2	; 162
    68d6:	96 e0       	ldi	r25, 0x06	; 6
    68d8:	0e 94 aa 01 	call	0x354	; 0x354 <_ZN14HardwareSerial4readEv>
			//Serial.print(c);
			//Serial.print(",");
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
    68dc:	c1 e0       	ldi	r28, 0x01	; 1
    68de:	81 38       	cpi	r24, 0x81	; 129
    68e0:	91 05       	cpc	r25, r1
    68e2:	0c f0       	brlt	.+2      	; 0x68e6 <_ZN3Gps7testMsgEv+0x54>
    68e4:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
    68e6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    68ea:	6c 15       	cp	r22, r12
    68ec:	7d 05       	cpc	r23, r13
    68ee:	8e 05       	cpc	r24, r14
    68f0:	9f 05       	cpc	r25, r15
    68f2:	18 f4       	brcc	.+6      	; 0x68fa <_ZN3Gps7testMsgEv+0x68>
    68f4:	c1 11       	cpse	r28, r1
    68f6:	12 c0       	rjmp	.+36     	; 0x691c <_ZN3Gps7testMsgEv+0x8a>
    68f8:	09 c0       	rjmp	.+18     	; 0x690c <_ZN3Gps7testMsgEv+0x7a>
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
		}
	}
	if (DEBUG) {
		if (valid)
    68fa:	cc 23       	and	r28, r28
    68fc:	39 f0       	breq	.+14     	; 0x690c <_ZN3Gps7testMsgEv+0x7a>
			Serial.println("OK");
    68fe:	66 e9       	ldi	r22, 0x96	; 150
    6900:	73 e0       	ldi	r23, 0x03	; 3
    6902:	84 ec       	ldi	r24, 0xC4	; 196
    6904:	96 e0       	ldi	r25, 0x06	; 6
    6906:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    690a:	0f c0       	rjmp	.+30     	; 0x692a <_ZN3Gps7testMsgEv+0x98>
		else
			Serial.println("FAIL");
    690c:	69 e9       	ldi	r22, 0x99	; 153
    690e:	73 e0       	ldi	r23, 0x03	; 3
    6910:	84 ec       	ldi	r24, 0xC4	; 196
    6912:	96 e0       	ldi	r25, 0x06	; 6
    6914:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    6918:	c0 e0       	ldi	r28, 0x00	; 0
    691a:	07 c0       	rjmp	.+14     	; 0x692a <_ZN3Gps7testMsgEv+0x98>
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
		if (Serial1.available()) {
    691c:	82 ea       	ldi	r24, 0xA2	; 162
    691e:	96 e0       	ldi	r25, 0x06	; 6
    6920:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14HardwareSerial9availableEv>
    6924:	89 2b       	or	r24, r25
    6926:	f9 f2       	breq	.-66     	; 0x68e6 <_ZN3Gps7testMsgEv+0x54>
    6928:	d5 cf       	rjmp	.-86     	; 0x68d4 <_ZN3Gps7testMsgEv+0x42>
			Serial.println("OK");
		else
			Serial.println("FAIL");
	}
	return valid;
}
    692a:	8c 2f       	mov	r24, r28
    692c:	df 91       	pop	r29
    692e:	cf 91       	pop	r28
    6930:	ff 90       	pop	r15
    6932:	ef 90       	pop	r14
    6934:	df 90       	pop	r13
    6936:	cf 90       	pop	r12
    6938:	08 95       	ret

0000693a <_ZN3Gps8autoBaudEv>:


int Gps::autoBaud() {
    693a:	cf 93       	push	r28
    693c:	df 93       	push	r29
    693e:	ec 01       	movw	r28, r24
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]
	//start with saved default
	if (DEBUG){
		Serial.print("   try autobaud ");
    6940:	6e e9       	ldi	r22, 0x9E	; 158
    6942:	73 e0       	ldi	r23, 0x03	; 3
    6944:	84 ec       	ldi	r24, 0xC4	; 196
    6946:	96 e0       	ldi	r25, 0x06	; 6
    6948:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		Serial.print(model->getSerialBaud1());
    694c:	8c 81       	ldd	r24, Y+4	; 0x04
    694e:	9d 81       	ldd	r25, Y+5	; 0x05
    6950:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6954:	ab 01       	movw	r20, r22
    6956:	bc 01       	movw	r22, r24
    6958:	2a e0       	ldi	r18, 0x0A	; 10
    695a:	30 e0       	ldi	r19, 0x00	; 0
    695c:	84 ec       	ldi	r24, 0xC4	; 196
    695e:	96 e0       	ldi	r25, 0x06	; 6
    6960:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
		Serial.println("..");
    6964:	62 ef       	ldi	r22, 0xF2	; 242
    6966:	73 e0       	ldi	r23, 0x03	; 3
    6968:	84 ec       	ldi	r24, 0xC4	; 196
    696a:	96 e0       	ldi	r25, 0x06	; 6
    696c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	}

	Serial1.begin(model->getSerialBaud1());
    6970:	8c 81       	ldd	r24, Y+4	; 0x04
    6972:	9d 81       	ldd	r25, Y+5	; 0x05
    6974:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6978:	ab 01       	movw	r20, r22
    697a:	bc 01       	movw	r22, r24
    697c:	82 ea       	ldi	r24, 0xA2	; 162
    697e:	96 e0       	ldi	r25, 0x06	; 6
    6980:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return model->getSerialBaud1();
    6984:	ce 01       	movw	r24, r28
    6986:	0e 94 49 34 	call	0x6892	; 0x6892 <_ZN3Gps7testMsgEv>
    698a:	88 23       	and	r24, r24
    698c:	29 f0       	breq	.+10     	; 0x6998 <_ZN3Gps8autoBaudEv+0x5e>
    698e:	8c 81       	ldd	r24, Y+4	; 0x04
    6990:	9d 81       	ldd	r25, Y+5	; 0x05
    6992:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6996:	8b c0       	rjmp	.+278    	; 0x6aae <_ZN3Gps8autoBaudEv+0x174>
	Serial1.end();
    6998:	82 ea       	ldi	r24, 0xA2	; 162
    699a:	96 e0       	ldi	r25, 0x06	; 6
    699c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>

	if (DEBUG) Serial.println("   try autobaud 4800..");
    69a0:	6f ea       	ldi	r22, 0xAF	; 175
    69a2:	73 e0       	ldi	r23, 0x03	; 3
    69a4:	84 ec       	ldi	r24, 0xC4	; 196
    69a6:	96 e0       	ldi	r25, 0x06	; 6
    69a8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(4800);
    69ac:	40 ec       	ldi	r20, 0xC0	; 192
    69ae:	52 e1       	ldi	r21, 0x12	; 18
    69b0:	60 e0       	ldi	r22, 0x00	; 0
    69b2:	70 e0       	ldi	r23, 0x00	; 0
    69b4:	82 ea       	ldi	r24, 0xA2	; 162
    69b6:	96 e0       	ldi	r25, 0x06	; 6
    69b8:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 4800;
    69bc:	ce 01       	movw	r24, r28
    69be:	0e 94 49 34 	call	0x6892	; 0x6892 <_ZN3Gps7testMsgEv>
    69c2:	81 11       	cpse	r24, r1
    69c4:	66 c0       	rjmp	.+204    	; 0x6a92 <_ZN3Gps8autoBaudEv+0x158>
	Serial1.end();
    69c6:	82 ea       	ldi	r24, 0xA2	; 162
    69c8:	96 e0       	ldi	r25, 0x06	; 6
    69ca:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 9600..");
    69ce:	66 ec       	ldi	r22, 0xC6	; 198
    69d0:	73 e0       	ldi	r23, 0x03	; 3
    69d2:	84 ec       	ldi	r24, 0xC4	; 196
    69d4:	96 e0       	ldi	r25, 0x06	; 6
    69d6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(9600);
    69da:	40 e8       	ldi	r20, 0x80	; 128
    69dc:	55 e2       	ldi	r21, 0x25	; 37
    69de:	60 e0       	ldi	r22, 0x00	; 0
    69e0:	70 e0       	ldi	r23, 0x00	; 0
    69e2:	82 ea       	ldi	r24, 0xA2	; 162
    69e4:	96 e0       	ldi	r25, 0x06	; 6
    69e6:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 9600;
    69ea:	ce 01       	movw	r24, r28
    69ec:	0e 94 49 34 	call	0x6892	; 0x6892 <_ZN3Gps7testMsgEv>
    69f0:	81 11       	cpse	r24, r1
    69f2:	52 c0       	rjmp	.+164    	; 0x6a98 <_ZN3Gps8autoBaudEv+0x15e>
	Serial1.end();
    69f4:	82 ea       	ldi	r24, 0xA2	; 162
    69f6:	96 e0       	ldi	r25, 0x06	; 6
    69f8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 19200..");
    69fc:	6d ed       	ldi	r22, 0xDD	; 221
    69fe:	73 e0       	ldi	r23, 0x03	; 3
    6a00:	84 ec       	ldi	r24, 0xC4	; 196
    6a02:	96 e0       	ldi	r25, 0x06	; 6
    6a04:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(19200);
    6a08:	40 e0       	ldi	r20, 0x00	; 0
    6a0a:	5b e4       	ldi	r21, 0x4B	; 75
    6a0c:	60 e0       	ldi	r22, 0x00	; 0
    6a0e:	70 e0       	ldi	r23, 0x00	; 0
    6a10:	82 ea       	ldi	r24, 0xA2	; 162
    6a12:	96 e0       	ldi	r25, 0x06	; 6
    6a14:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 19200;
    6a18:	ce 01       	movw	r24, r28
    6a1a:	0e 94 49 34 	call	0x6892	; 0x6892 <_ZN3Gps7testMsgEv>
    6a1e:	81 11       	cpse	r24, r1
    6a20:	3e c0       	rjmp	.+124    	; 0x6a9e <_ZN3Gps8autoBaudEv+0x164>
	Serial1.end();
    6a22:	82 ea       	ldi	r24, 0xA2	; 162
    6a24:	96 e0       	ldi	r25, 0x06	; 6
    6a26:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 38400..");
    6a2a:	65 ef       	ldi	r22, 0xF5	; 245
    6a2c:	73 e0       	ldi	r23, 0x03	; 3
    6a2e:	84 ec       	ldi	r24, 0xC4	; 196
    6a30:	96 e0       	ldi	r25, 0x06	; 6
    6a32:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(38400);
    6a36:	40 e0       	ldi	r20, 0x00	; 0
    6a38:	56 e9       	ldi	r21, 0x96	; 150
    6a3a:	60 e0       	ldi	r22, 0x00	; 0
    6a3c:	70 e0       	ldi	r23, 0x00	; 0
    6a3e:	82 ea       	ldi	r24, 0xA2	; 162
    6a40:	96 e0       	ldi	r25, 0x06	; 6
    6a42:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 38400;
    6a46:	ce 01       	movw	r24, r28
    6a48:	0e 94 49 34 	call	0x6892	; 0x6892 <_ZN3Gps7testMsgEv>
    6a4c:	81 11       	cpse	r24, r1
    6a4e:	2a c0       	rjmp	.+84     	; 0x6aa4 <_ZN3Gps8autoBaudEv+0x16a>
	Serial1.end();
    6a50:	82 ea       	ldi	r24, 0xA2	; 162
    6a52:	96 e0       	ldi	r25, 0x06	; 6
    6a54:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 57600..");
    6a58:	6d e0       	ldi	r22, 0x0D	; 13
    6a5a:	74 e0       	ldi	r23, 0x04	; 4
    6a5c:	84 ec       	ldi	r24, 0xC4	; 196
    6a5e:	96 e0       	ldi	r25, 0x06	; 6
    6a60:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	Serial1.begin(57600);
    6a64:	40 e0       	ldi	r20, 0x00	; 0
    6a66:	51 ee       	ldi	r21, 0xE1	; 225
    6a68:	60 e0       	ldi	r22, 0x00	; 0
    6a6a:	70 e0       	ldi	r23, 0x00	; 0
    6a6c:	82 ea       	ldi	r24, 0xA2	; 162
    6a6e:	96 e0       	ldi	r25, 0x06	; 6
    6a70:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 57600;
    6a74:	ce 01       	movw	r24, r28
    6a76:	0e 94 49 34 	call	0x6892	; 0x6892 <_ZN3Gps7testMsgEv>
    6a7a:	81 11       	cpse	r24, r1
    6a7c:	16 c0       	rjmp	.+44     	; 0x6aaa <_ZN3Gps8autoBaudEv+0x170>
	Serial1.end();
    6a7e:	82 ea       	ldi	r24, 0xA2	; 162
    6a80:	96 e0       	ldi	r25, 0x06	; 6
    6a82:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   default to 4800..");
    6a86:	65 e2       	ldi	r22, 0x25	; 37
    6a88:	74 e0       	ldi	r23, 0x04	; 4
    6a8a:	84 ec       	ldi	r24, 0xC4	; 196
    6a8c:	96 e0       	ldi	r25, 0x06	; 6
    6a8e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	if (testMsg()) return model->getSerialBaud1();
	Serial1.end();

	if (DEBUG) Serial.println("   try autobaud 4800..");
	Serial1.begin(4800);
	if (testMsg()) return 4800;
    6a92:	60 ec       	ldi	r22, 0xC0	; 192
    6a94:	72 e1       	ldi	r23, 0x12	; 18
    6a96:	0b c0       	rjmp	.+22     	; 0x6aae <_ZN3Gps8autoBaudEv+0x174>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 9600..");
	Serial1.begin(9600);
	if (testMsg()) return 9600;
    6a98:	60 e8       	ldi	r22, 0x80	; 128
    6a9a:	75 e2       	ldi	r23, 0x25	; 37
    6a9c:	08 c0       	rjmp	.+16     	; 0x6aae <_ZN3Gps8autoBaudEv+0x174>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 19200..");
	Serial1.begin(19200);
	if (testMsg()) return 19200;
    6a9e:	60 e0       	ldi	r22, 0x00	; 0
    6aa0:	7b e4       	ldi	r23, 0x4B	; 75
    6aa2:	05 c0       	rjmp	.+10     	; 0x6aae <_ZN3Gps8autoBaudEv+0x174>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 38400..");
	Serial1.begin(38400);
	if (testMsg()) return 38400;
    6aa4:	60 e0       	ldi	r22, 0x00	; 0
    6aa6:	76 e9       	ldi	r23, 0x96	; 150
    6aa8:	02 c0       	rjmp	.+4      	; 0x6aae <_ZN3Gps8autoBaudEv+0x174>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 57600..");
	Serial1.begin(57600);
	if (testMsg()) return 57600;
    6aaa:	60 e0       	ldi	r22, 0x00	; 0
    6aac:	71 ee       	ldi	r23, 0xE1	; 225
	Serial1.end();
	if (DEBUG) Serial.println("   default to 4800..");
	return 4800;
}
    6aae:	cb 01       	movw	r24, r22
    6ab0:	df 91       	pop	r29
    6ab2:	cf 91       	pop	r28
    6ab4:	08 95       	ret

00006ab6 <_ZN3Gps11getMetersToEffff>:
	Serial1.flush();
	Serial1.end();
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
}

float Gps::getMetersTo(float targetLat, float targetLon, float currentLat, float currentLon) {
    6ab6:	2f 92       	push	r2
    6ab8:	3f 92       	push	r3
    6aba:	4f 92       	push	r4
    6abc:	5f 92       	push	r5
    6abe:	6f 92       	push	r6
    6ac0:	7f 92       	push	r7
    6ac2:	8f 92       	push	r8
    6ac4:	9f 92       	push	r9
    6ac6:	af 92       	push	r10
    6ac8:	bf 92       	push	r11
    6aca:	cf 92       	push	r12
    6acc:	df 92       	push	r13
    6ace:	ef 92       	push	r14
    6ad0:	ff 92       	push	r15
    6ad2:	0f 93       	push	r16
    6ad4:	1f 93       	push	r17
    6ad6:	cf 93       	push	r28
    6ad8:	df 93       	push	r29
    6ada:	cd b7       	in	r28, 0x3d	; 61
    6adc:	de b7       	in	r29, 0x3e	; 62
    6ade:	60 97       	sbiw	r28, 0x10	; 16
    6ae0:	0f b6       	in	r0, 0x3f	; 63
    6ae2:	f8 94       	cli
    6ae4:	de bf       	out	0x3e, r29	; 62
    6ae6:	0f be       	out	0x3f, r0	; 63
    6ae8:	cd bf       	out	0x3d, r28	; 61
    6aea:	69 83       	std	Y+1, r22	; 0x01
    6aec:	7a 83       	std	Y+2, r23	; 0x02
    6aee:	8b 83       	std	Y+3, r24	; 0x03
    6af0:	9c 83       	std	Y+4, r25	; 0x04
    6af2:	ca 01       	movw	r24, r20
    6af4:	b9 01       	movw	r22, r18
    6af6:	a6 01       	movw	r20, r12
    6af8:	95 01       	movw	r18, r10
	// returns distance in meters between two positions, both specified
	// as signed decimal-degrees latitude and longitude. Uses great-circle
	// distance computation for hypothised sphere of radius 6372795 meters.
	// Because Earth is no exact sphere, rounding errors may be upto 0.5%.
	float delta = radians(targetLon - currentLon);
    6afa:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    6afe:	25 e3       	ldi	r18, 0x35	; 53
    6b00:	3a ef       	ldi	r19, 0xFA	; 250
    6b02:	4e e8       	ldi	r20, 0x8E	; 142
    6b04:	5c e3       	ldi	r21, 0x3C	; 60
    6b06:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6b0a:	6b 01       	movw	r12, r22
    6b0c:	5c 01       	movw	r10, r24
	float sdlong = sin(delta);
    6b0e:	7d 2d       	mov	r23, r13
    6b10:	9b 2d       	mov	r25, r11
    6b12:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <sin>
    6b16:	2b 01       	movw	r4, r22
    6b18:	3c 01       	movw	r6, r24
	float cdlong = cos(delta);
    6b1a:	6c 2d       	mov	r22, r12
    6b1c:	7d 2d       	mov	r23, r13
    6b1e:	8a 2d       	mov	r24, r10
    6b20:	9b 2d       	mov	r25, r11
    6b22:	0e 94 0f 42 	call	0x841e	; 0x841e <cos>
    6b26:	6d 83       	std	Y+5, r22	; 0x05
    6b28:	7e 83       	std	Y+6, r23	; 0x06
    6b2a:	8f 83       	std	Y+7, r24	; 0x07
    6b2c:	98 87       	std	Y+8, r25	; 0x08
	targetLat = radians(targetLat);
    6b2e:	25 e3       	ldi	r18, 0x35	; 53
    6b30:	3a ef       	ldi	r19, 0xFA	; 250
    6b32:	4e e8       	ldi	r20, 0x8E	; 142
    6b34:	5c e3       	ldi	r21, 0x3C	; 60
    6b36:	69 81       	ldd	r22, Y+1	; 0x01
    6b38:	7a 81       	ldd	r23, Y+2	; 0x02
    6b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    6b3e:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6b42:	6b 01       	movw	r12, r22
    6b44:	89 83       	std	Y+1, r24	; 0x01
    6b46:	99 87       	std	Y+9, r25	; 0x09
	currentLat = radians(currentLat);
    6b48:	25 e3       	ldi	r18, 0x35	; 53
    6b4a:	3a ef       	ldi	r19, 0xFA	; 250
    6b4c:	4e e8       	ldi	r20, 0x8E	; 142
    6b4e:	5c e3       	ldi	r21, 0x3C	; 60
    6b50:	c8 01       	movw	r24, r16
    6b52:	b7 01       	movw	r22, r14
    6b54:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6b58:	16 2f       	mov	r17, r22
    6b5a:	07 2f       	mov	r16, r23
    6b5c:	38 2e       	mov	r3, r24
    6b5e:	29 2e       	mov	r2, r25
	float slat1 = sin(targetLat);
    6b60:	39 81       	ldd	r19, Y+1	; 0x01
    6b62:	29 85       	ldd	r18, Y+9	; 0x09
    6b64:	6c 2d       	mov	r22, r12
    6b66:	7d 2d       	mov	r23, r13
    6b68:	83 2f       	mov	r24, r19
    6b6a:	92 2f       	mov	r25, r18
    6b6c:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <sin>
    6b70:	4b 01       	movw	r8, r22
    6b72:	5c 01       	movw	r10, r24
	float clat1 = cos(targetLat);
    6b74:	39 81       	ldd	r19, Y+1	; 0x01
    6b76:	29 85       	ldd	r18, Y+9	; 0x09
    6b78:	6c 2d       	mov	r22, r12
    6b7a:	7d 2d       	mov	r23, r13
    6b7c:	83 2f       	mov	r24, r19
    6b7e:	92 2f       	mov	r25, r18
    6b80:	0e 94 0f 42 	call	0x841e	; 0x841e <cos>
    6b84:	69 83       	std	Y+1, r22	; 0x01
    6b86:	7a 83       	std	Y+2, r23	; 0x02
    6b88:	8b 83       	std	Y+3, r24	; 0x03
    6b8a:	9c 83       	std	Y+4, r25	; 0x04
	float slat2 = sin(currentLat);
    6b8c:	a8 01       	movw	r20, r16
    6b8e:	91 01       	movw	r18, r2
    6b90:	65 2f       	mov	r22, r21
    6b92:	74 2f       	mov	r23, r20
    6b94:	83 2f       	mov	r24, r19
    6b96:	92 2f       	mov	r25, r18
    6b98:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <sin>
    6b9c:	69 87       	std	Y+9, r22	; 0x09
    6b9e:	7a 87       	std	Y+10, r23	; 0x0a
    6ba0:	8b 87       	std	Y+11, r24	; 0x0b
    6ba2:	9c 87       	std	Y+12, r25	; 0x0c
	float clat2 = cos(currentLat);
    6ba4:	a8 01       	movw	r20, r16
    6ba6:	91 01       	movw	r18, r2
    6ba8:	65 2f       	mov	r22, r21
    6baa:	74 2f       	mov	r23, r20
    6bac:	83 2f       	mov	r24, r19
    6bae:	92 2f       	mov	r25, r18
    6bb0:	0e 94 0f 42 	call	0x841e	; 0x841e <cos>
    6bb4:	6b 01       	movw	r12, r22
    6bb6:	7c 01       	movw	r14, r24
	delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
    6bb8:	29 85       	ldd	r18, Y+9	; 0x09
    6bba:	3a 85       	ldd	r19, Y+10	; 0x0a
    6bbc:	4b 85       	ldd	r20, Y+11	; 0x0b
    6bbe:	5c 85       	ldd	r21, Y+12	; 0x0c
    6bc0:	69 81       	ldd	r22, Y+1	; 0x01
    6bc2:	7a 81       	ldd	r23, Y+2	; 0x02
    6bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    6bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    6bc8:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6bcc:	6d 87       	std	Y+13, r22	; 0x0d
    6bce:	7e 87       	std	Y+14, r23	; 0x0e
    6bd0:	8f 87       	std	Y+15, r24	; 0x0f
    6bd2:	98 8b       	std	Y+16, r25	; 0x10
    6bd4:	a7 01       	movw	r20, r14
    6bd6:	96 01       	movw	r18, r12
    6bd8:	c5 01       	movw	r24, r10
    6bda:	b4 01       	movw	r22, r8
    6bdc:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6be0:	2d 81       	ldd	r18, Y+5	; 0x05
    6be2:	3e 81       	ldd	r19, Y+6	; 0x06
    6be4:	4f 81       	ldd	r20, Y+7	; 0x07
    6be6:	58 85       	ldd	r21, Y+8	; 0x08
    6be8:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6bec:	9b 01       	movw	r18, r22
    6bee:	ac 01       	movw	r20, r24
    6bf0:	6d 85       	ldd	r22, Y+13	; 0x0d
    6bf2:	7e 85       	ldd	r23, Y+14	; 0x0e
    6bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bf6:	98 89       	ldd	r25, Y+16	; 0x10
    6bf8:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
	delta = sq(delta);
    6bfc:	26 2f       	mov	r18, r22
    6bfe:	37 2f       	mov	r19, r23
    6c00:	48 2f       	mov	r20, r24
    6c02:	59 2f       	mov	r21, r25
    6c04:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6c08:	36 2e       	mov	r3, r22
    6c0a:	27 2e       	mov	r2, r23
    6c0c:	18 2f       	mov	r17, r24
    6c0e:	09 2f       	mov	r16, r25
	delta += sq(clat2 * sdlong);
    6c10:	a3 01       	movw	r20, r6
    6c12:	92 01       	movw	r18, r4
    6c14:	c7 01       	movw	r24, r14
    6c16:	b6 01       	movw	r22, r12
    6c18:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6c1c:	26 2f       	mov	r18, r22
    6c1e:	37 2f       	mov	r19, r23
    6c20:	48 2f       	mov	r20, r24
    6c22:	59 2f       	mov	r21, r25
    6c24:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6c28:	9b 01       	movw	r18, r22
    6c2a:	ac 01       	movw	r20, r24
    6c2c:	d1 01       	movw	r26, r2
    6c2e:	f8 01       	movw	r30, r16
    6c30:	6b 2f       	mov	r22, r27
    6c32:	7a 2f       	mov	r23, r26
    6c34:	8f 2f       	mov	r24, r31
    6c36:	9e 2f       	mov	r25, r30
    6c38:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
	delta = sqrt(delta);
    6c3c:	0e 94 86 44 	call	0x890c	; 0x890c <sqrt>
    6c40:	2b 01       	movw	r4, r22
    6c42:	3c 01       	movw	r6, r24
	float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
    6c44:	29 85       	ldd	r18, Y+9	; 0x09
    6c46:	3a 85       	ldd	r19, Y+10	; 0x0a
    6c48:	4b 85       	ldd	r20, Y+11	; 0x0b
    6c4a:	5c 85       	ldd	r21, Y+12	; 0x0c
    6c4c:	c5 01       	movw	r24, r10
    6c4e:	b4 01       	movw	r22, r8
    6c50:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6c54:	4b 01       	movw	r8, r22
    6c56:	5c 01       	movw	r10, r24
    6c58:	a7 01       	movw	r20, r14
    6c5a:	96 01       	movw	r18, r12
    6c5c:	69 81       	ldd	r22, Y+1	; 0x01
    6c5e:	7a 81       	ldd	r23, Y+2	; 0x02
    6c60:	8b 81       	ldd	r24, Y+3	; 0x03
    6c62:	9c 81       	ldd	r25, Y+4	; 0x04
    6c64:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6c68:	2d 81       	ldd	r18, Y+5	; 0x05
    6c6a:	3e 81       	ldd	r19, Y+6	; 0x06
    6c6c:	4f 81       	ldd	r20, Y+7	; 0x07
    6c6e:	58 85       	ldd	r21, Y+8	; 0x08
    6c70:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    6c74:	9b 01       	movw	r18, r22
    6c76:	ac 01       	movw	r20, r24
    6c78:	c5 01       	movw	r24, r10
    6c7a:	b4 01       	movw	r22, r8
    6c7c:	0e 94 45 41 	call	0x828a	; 0x828a <__addsf3>
    6c80:	9b 01       	movw	r18, r22
    6c82:	ac 01       	movw	r20, r24
	delta = atan2(delta, denom);
    6c84:	c3 01       	movw	r24, r6
    6c86:	b2 01       	movw	r22, r4
    6c88:	0e 94 b8 41 	call	0x8370	; 0x8370 <atan2>
	return delta * 6372795 * MTR;
    6c8c:	26 e7       	ldi	r18, 0x76	; 118
    6c8e:	3b e7       	ldi	r19, 0x7B	; 123
    6c90:	42 ec       	ldi	r20, 0xC2	; 194
    6c92:	5a e4       	ldi	r21, 0x4A	; 74
    6c94:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
}
    6c98:	60 96       	adiw	r28, 0x10	; 16
    6c9a:	0f b6       	in	r0, 0x3f	; 63
    6c9c:	f8 94       	cli
    6c9e:	de bf       	out	0x3e, r29	; 62
    6ca0:	0f be       	out	0x3f, r0	; 63
    6ca2:	cd bf       	out	0x3d, r28	; 61
    6ca4:	df 91       	pop	r29
    6ca6:	cf 91       	pop	r28
    6ca8:	1f 91       	pop	r17
    6caa:	0f 91       	pop	r16
    6cac:	ff 90       	pop	r15
    6cae:	ef 90       	pop	r14
    6cb0:	df 90       	pop	r13
    6cb2:	cf 90       	pop	r12
    6cb4:	bf 90       	pop	r11
    6cb6:	af 90       	pop	r10
    6cb8:	9f 90       	pop	r9
    6cba:	8f 90       	pop	r8
    6cbc:	7f 90       	pop	r7
    6cbe:	6f 90       	pop	r6
    6cc0:	5f 90       	pop	r5
    6cc2:	4f 90       	pop	r4
    6cc4:	3f 90       	pop	r3
    6cc6:	2f 90       	pop	r2
    6cc8:	08 95       	ret

00006cca <_ZN3Gps6decodeEh>:

bool Gps::decode(byte inByte) {
    6cca:	cf 93       	push	r28
    6ccc:	df 93       	push	r29
    6cce:	ec 01       	movw	r28, r24
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
    6cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    6cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    6cd4:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <_ZN4NMEA6decodeEc>
    6cd8:	61 e0       	ldi	r22, 0x01	; 1
    6cda:	89 2b       	or	r24, r25
    6cdc:	09 f4       	brne	.+2      	; 0x6ce0 <_ZN3Gps6decodeEh+0x16>
    6cde:	60 e0       	ldi	r22, 0x00	; 0
    6ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    6ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    6ce4:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <_ZN14FreeBoardModel12setGpsDecodeEb>
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
    6ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    6cea:	9d 81       	ldd	r25, Y+5	; 0x05
    6cec:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN14FreeBoardModel11isGpsDecodeEv>
    6cf0:	88 23       	and	r24, r24
    6cf2:	69 f1       	breq	.+90     	; 0x6d4e <_ZN3Gps6decodeEh+0x84>
		model->setGpsStatus(gpsSource->gprmc_status());
    6cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    6cf8:	0e 94 18 1c 	call	0x3830	; 0x3830 <_ZN4NMEA12gprmc_statusEv>
    6cfc:	68 2f       	mov	r22, r24
    6cfe:	8c 81       	ldd	r24, Y+4	; 0x04
    6d00:	9d 81       	ldd	r25, Y+5	; 0x05
    6d02:	0e 94 32 2e 	call	0x5c64	; 0x5c64 <_ZN14FreeBoardModel12setGpsStatusEc>
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
    6d06:	8a 81       	ldd	r24, Y+2	; 0x02
    6d08:	9b 81       	ldd	r25, Y+3	; 0x03
    6d0a:	0e 94 18 1c 	call	0x3830	; 0x3830 <_ZN4NMEA12gprmc_statusEv>
    6d0e:	81 34       	cpi	r24, 0x41	; 65
    6d10:	f1 f4       	brne	.+60     	; 0x6d4e <_ZN3Gps6decodeEh+0x84>
    6d12:	60 e0       	ldi	r22, 0x00	; 0
    6d14:	70 e0       	ldi	r23, 0x00	; 0
    6d16:	8a 81       	ldd	r24, Y+2	; 0x02
    6d18:	9b 81       	ldd	r25, Y+3	; 0x03
    6d1a:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN4NMEA4termEi>
    6d1e:	fc 01       	movw	r30, r24
    6d20:	82 81       	ldd	r24, Z+2	; 0x02
    6d22:	82 35       	cpi	r24, 0x52	; 82
    6d24:	a1 f0       	breq	.+40     	; 0x6d4e <_ZN3Gps6decodeEh+0x84>
    6d26:	60 e0       	ldi	r22, 0x00	; 0
    6d28:	70 e0       	ldi	r23, 0x00	; 0
    6d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    6d2e:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN4NMEA4termEi>
    6d32:	fc 01       	movw	r30, r24
    6d34:	83 81       	ldd	r24, Z+3	; 0x03
    6d36:	8d 34       	cpi	r24, 0x4D	; 77
    6d38:	51 f0       	breq	.+20     	; 0x6d4e <_ZN3Gps6decodeEh+0x84>
    6d3a:	60 e0       	ldi	r22, 0x00	; 0
    6d3c:	70 e0       	ldi	r23, 0x00	; 0
    6d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d40:	9b 81       	ldd	r25, Y+3	; 0x03
    6d42:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <_ZN4NMEA4termEi>
    6d46:	fc 01       	movw	r30, r24
    6d48:	84 81       	ldd	r24, Z+4	; 0x04
    6d4a:	83 34       	cpi	r24, 0x43	; 67
    6d4c:	31 f4       	brne	.+12     	; 0x6d5a <_ZN3Gps6decodeEh+0x90>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6d4e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d50:	9d 81       	ldd	r25, Y+5	; 0x05
}
    6d52:	df 91       	pop	r29
    6d54:	cf 91       	pop	r28
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6d56:	0c 94 54 2d 	jmp	0x5aa8	; 0x5aa8 <_ZN14FreeBoardModel11isGpsDecodeEv>
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
			model->setGpsLastFix(millis());
    6d5a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    6d5e:	ab 01       	movw	r20, r22
    6d60:	bc 01       	movw	r22, r24
    6d62:	8c 81       	ldd	r24, Y+4	; 0x04
    6d64:	9d 81       	ldd	r25, Y+5	; 0x05
    6d66:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <_ZN14FreeBoardModel13setGpsLastFixEm>
			model->setGpsCourse(gpsSource->gprmc_course());
    6d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    6d6e:	0e 94 43 1c 	call	0x3886	; 0x3886 <_ZN4NMEA12gprmc_courseEv>
    6d72:	ab 01       	movw	r20, r22
    6d74:	bc 01       	movw	r22, r24
    6d76:	8c 81       	ldd	r24, Y+4	; 0x04
    6d78:	9d 81       	ldd	r25, Y+5	; 0x05
    6d7a:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <_ZN14FreeBoardModel12setGpsCourseEf>
			model->setGpsLatitude(gpsSource->gprmc_latitude());
    6d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d80:	9b 81       	ldd	r25, Y+3	; 0x03
    6d82:	0e 94 1b 1c 	call	0x3836	; 0x3836 <_ZN4NMEA14gprmc_latitudeEv>
    6d86:	ab 01       	movw	r20, r22
    6d88:	bc 01       	movw	r22, r24
    6d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    6d8e:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <_ZN14FreeBoardModel14setGpsLatitudeEf>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
    6d92:	8a 81       	ldd	r24, Y+2	; 0x02
    6d94:	9b 81       	ldd	r25, Y+3	; 0x03
    6d96:	0e 94 25 1c 	call	0x384a	; 0x384a <_ZN4NMEA15gprmc_longitudeEv>
    6d9a:	ab 01       	movw	r20, r22
    6d9c:	bc 01       	movw	r22, r24
    6d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    6da0:	9d 81       	ldd	r25, Y+5	; 0x05
    6da2:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <_ZN14FreeBoardModel15setGpsLongitudeEf>
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
    6da6:	8c 81       	ldd	r24, Y+4	; 0x04
    6da8:	9d 81       	ldd	r25, Y+5	; 0x05
    6daa:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <_ZN14FreeBoardModel15getGpsSpeedUnitEv>
    6dae:	ab 01       	movw	r20, r22
    6db0:	bc 01       	movw	r22, r24
    6db2:	8a 81       	ldd	r24, Y+2	; 0x02
    6db4:	9b 81       	ldd	r25, Y+3	; 0x03
    6db6:	0e 94 2f 1c 	call	0x385e	; 0x385e <_ZN4NMEA11gprmc_speedEf>
    6dba:	ab 01       	movw	r20, r22
    6dbc:	bc 01       	movw	r22, r24
    6dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    6dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    6dc2:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <_ZN14FreeBoardModel11setGpsSpeedEf>
			model->setGpsUtc(gpsSource->gprmc_utc());
    6dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    6dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    6dca:	0e 94 0e 1c 	call	0x381c	; 0x381c <_ZN4NMEA9gprmc_utcEv>
    6dce:	ab 01       	movw	r20, r22
    6dd0:	bc 01       	movw	r22, r24
    6dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    6dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    6dd6:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <_ZN14FreeBoardModel9setGpsUtcEf>
    6dda:	b9 cf       	rjmp	.-142    	; 0x6d4e <_ZN3Gps6decodeEh+0x84>

00006ddc <_ZN3Gps12setupGpsImplEv>:
}
/*
 * setup implementations for various models of GPS.
 * Define the GPS in GPS.h
 */
void Gps::setupGpsImpl(){
    6ddc:	ef 92       	push	r14
    6dde:	ff 92       	push	r15
    6de0:	0f 93       	push	r16
    6de2:	1f 93       	push	r17
    6de4:	cf 93       	push	r28
    6de6:	df 93       	push	r29
    6de8:	cd b7       	in	r28, 0x3d	; 61
    6dea:	de b7       	in	r29, 0x3e	; 62
    6dec:	6e 97       	sbiw	r28, 0x1e	; 30
    6dee:	0f b6       	in	r0, 0x3f	; 63
    6df0:	f8 94       	cli
    6df2:	de bf       	out	0x3e, r29	; 62
    6df4:	0f be       	out	0x3f, r0	; 63
    6df6:	cd bf       	out	0x3d, r28	; 61
    6df8:	8c 01       	movw	r16, r24
	//setup based on GPS type - probably wants a more modular way if many GPS types appear
	if(GPS_EM_406A == model->getGpsModel()){
    6dfa:	fc 01       	movw	r30, r24
    6dfc:	84 81       	ldd	r24, Z+4	; 0x04
    6dfe:	95 81       	ldd	r25, Z+5	; 0x05
    6e00:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <_ZN14FreeBoardModel11getGpsModelEv>
    6e04:	01 97       	sbiw	r24, 0x01	; 1
    6e06:	09 f0       	breq	.+2      	; 0x6e0a <_ZN3Gps12setupGpsImplEv+0x2e>
    6e08:	78 c0       	rjmp	.+240    	; 0x6efa <_ZN3Gps12setupGpsImplEv+0x11e>
		//Serial1.begin(38400, 8, 1, 0); //gps
		//set debug on
		Serial1.println("$PSRF105,1*3E");
    6e0a:	61 e4       	ldi	r22, 0x41	; 65
    6e0c:	74 e0       	ldi	r23, 0x04	; 4
    6e0e:	82 ea       	ldi	r24, 0xA2	; 162
    6e10:	96 e0       	ldi	r25, 0x06	; 6
    6e12:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

		//set VTG off -  Vector track an Speed over the Ground
		Serial1.println("$PSRF103,05,00,00,01*21");
    6e16:	6f e4       	ldi	r22, 0x4F	; 79
    6e18:	74 e0       	ldi	r23, 0x04	; 4
    6e1a:	82 ea       	ldi	r24, 0xA2	; 162
    6e1c:	96 e0       	ldi	r25, 0x06	; 6
    6e1e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GLL off -  Lat/Lon data
		Serial1.println("$PSRF103,01,00,00,01*25");
    6e22:	67 e6       	ldi	r22, 0x67	; 103
    6e24:	74 e0       	ldi	r23, 0x04	; 4
    6e26:	82 ea       	ldi	r24, 0xA2	; 162
    6e28:	96 e0       	ldi	r25, 0x06	; 6
    6e2a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GGA on, 5sec, constant -  Fix information
		Serial1.println("$PSRF103,00,00,05,01*21");
    6e2e:	6f e7       	ldi	r22, 0x7F	; 127
    6e30:	74 e0       	ldi	r23, 0x04	; 4
    6e32:	82 ea       	ldi	r24, 0xA2	; 162
    6e34:	96 e0       	ldi	r25, 0x06	; 6
    6e36:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GSA on, 5 sec, constant - Overall Satellite data
		Serial1.println("$PSRF103,02,00,05,01*23");
    6e3a:	67 e9       	ldi	r22, 0x97	; 151
    6e3c:	74 e0       	ldi	r23, 0x04	; 4
    6e3e:	82 ea       	ldi	r24, 0xA2	; 162
    6e40:	96 e0       	ldi	r25, 0x06	; 6
    6e42:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set GSV on, 20sec, constant -Detailed Satellite data
		Serial1.println("$PSRF103,03,00,20,01*25");
    6e46:	6f ea       	ldi	r22, 0xAF	; 175
    6e48:	74 e0       	ldi	r23, 0x04	; 4
    6e4a:	82 ea       	ldi	r24, 0xA2	; 162
    6e4c:	96 e0       	ldi	r25, 0x06	; 6
    6e4e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//set RMC on, 1sec, constant, Recommended minimum info
		Serial1.println("$PSRF103,04,00,01,01*21");
    6e52:	67 ec       	ldi	r22, 0xC7	; 199
    6e54:	74 e0       	ldi	r23, 0x04	; 4
    6e56:	82 ea       	ldi	r24, 0xA2	; 162
    6e58:	96 e0       	ldi	r25, 0x06	; 6
    6e5a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

		//debug off
		Serial1.println("$PSRF105,0*3F");
    6e5e:	6f ed       	ldi	r22, 0xDF	; 223
    6e60:	74 e0       	ldi	r23, 0x04	; 4
    6e62:	82 ea       	ldi	r24, 0xA2	; 162
    6e64:	96 e0       	ldi	r25, 0x06	; 6
    6e66:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    6e6a:	18 8e       	std	Y+24, r1	; 0x18
    6e6c:	1f 8a       	std	Y+23, r1	; 0x17
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6e6e:	88 e0       	ldi	r24, 0x08	; 8
    6e70:	92 e0       	ldi	r25, 0x02	; 2
    6e72:	9e 8b       	std	Y+22, r25	; 0x16
    6e74:	8d 8b       	std	Y+21, r24	; 0x15
    6e76:	ee 24       	eor	r14, r14
    6e78:	e3 94       	inc	r14
    6e7a:	f1 2c       	mov	r15, r1
    6e7c:	ec 0e       	add	r14, r28
    6e7e:	fd 1e       	adc	r15, r29
    6e80:	fa 8e       	std	Y+26, r15	; 0x1a
    6e82:	e9 8e       	std	Y+25, r14	; 0x19
    6e84:	84 e1       	ldi	r24, 0x14	; 20
    6e86:	90 e0       	ldi	r25, 0x00	; 0
    6e88:	9e 8f       	std	Y+30, r25	; 0x1e
    6e8a:	8d 8f       	std	Y+29, r24	; 0x1d
  { begin(); }
    6e8c:	ce 01       	movw	r24, r28
    6e8e:	45 96       	adiw	r24, 0x15	; 21
    6e90:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>
		//#define SIRF_BAUD_RATE_57600    "$PSRF100,1,57600,8,1,0*36\r\n"

		//$PSRF100,1,38400,8,1,0*3D\r\n
		char gpsSentence [20];
		PString str(gpsSentence, sizeof(gpsSentence));
		str.print("$PSRF100,1,");
    6e94:	6d ee       	ldi	r22, 0xED	; 237
    6e96:	74 e0       	ldi	r23, 0x04	; 4
    6e98:	ce 01       	movw	r24, r28
    6e9a:	45 96       	adiw	r24, 0x15	; 21
    6e9c:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		str.print(model->getSerialBaud1());
    6ea0:	f8 01       	movw	r30, r16
    6ea2:	84 81       	ldd	r24, Z+4	; 0x04
    6ea4:	95 81       	ldd	r25, Z+5	; 0x05
    6ea6:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6eaa:	ab 01       	movw	r20, r22
    6eac:	bc 01       	movw	r22, r24
    6eae:	2a e0       	ldi	r18, 0x0A	; 10
    6eb0:	30 e0       	ldi	r19, 0x00	; 0
    6eb2:	ce 01       	movw	r24, r28
    6eb4:	45 96       	adiw	r24, 0x15	; 21
    6eb6:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
		str.print(",8,1,0*");
    6eba:	69 ef       	ldi	r22, 0xF9	; 249
    6ebc:	74 e0       	ldi	r23, 0x04	; 4
    6ebe:	ce 01       	movw	r24, r28
    6ec0:	45 96       	adiw	r24, 0x15	; 21
    6ec2:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		//calculate the checksum
		byte cs = getChecksum(gpsSentence); //clear any old checksum
    6ec6:	c7 01       	movw	r24, r14
    6ec8:	0e 94 9f 33 	call	0x673e	; 0x673e <_Z11getChecksumPc>
    6ecc:	f8 2e       	mov	r15, r24
		//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
		if (cs < 0x10) str.print('0');
    6ece:	ff e0       	ldi	r31, 0x0F	; 15
    6ed0:	f8 17       	cp	r31, r24
    6ed2:	28 f0       	brcs	.+10     	; 0x6ede <_ZN3Gps12setupGpsImplEv+0x102>
    6ed4:	60 e3       	ldi	r22, 0x30	; 48
    6ed6:	ce 01       	movw	r24, r28
    6ed8:	45 96       	adiw	r24, 0x15	; 21
    6eda:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6ede:	40 e1       	ldi	r20, 0x10	; 16
    6ee0:	50 e0       	ldi	r21, 0x00	; 0
    6ee2:	6f 2d       	mov	r22, r15
    6ee4:	ce 01       	movw	r24, r28
    6ee6:	45 96       	adiw	r24, 0x15	; 21
    6ee8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN5Print5printEhi>
		Serial1.println(gpsSentence);
    6eec:	be 01       	movw	r22, r28
    6eee:	6f 5f       	subi	r22, 0xFF	; 255
    6ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ef2:	82 ea       	ldi	r24, 0xA2	; 162
    6ef4:	96 e0       	ldi	r25, 0x06	; 6
    6ef6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	}
	if(GPS_MTEK_3329 == model->getGpsModel()){
    6efa:	f8 01       	movw	r30, r16
    6efc:	84 81       	ldd	r24, Z+4	; 0x04
    6efe:	95 81       	ldd	r25, Z+5	; 0x05
    6f00:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <_ZN14FreeBoardModel11getGpsModelEv>
    6f04:	02 97       	sbiw	r24, 0x02	; 2
    6f06:	09 f0       	breq	.+2      	; 0x6f0a <_ZN3Gps12setupGpsImplEv+0x12e>
    6f08:	53 c0       	rjmp	.+166    	; 0x6fb0 <_ZN3Gps12setupGpsImplEv+0x1d4>

		//setting update rate to 1Hz
		Serial1.println("$PMTK220,1000*1F");
    6f0a:	61 e0       	ldi	r22, 0x01	; 1
    6f0c:	75 e0       	ldi	r23, 0x05	; 5
    6f0e:	82 ea       	ldi	r24, 0xA2	; 162
    6f10:	96 e0       	ldi	r25, 0x06	; 6
    6f12:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
		//setting the NMEA Output to get RMC, GGA, GSA & GSV.
		Serial1.println("$PMTK314,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0*28");
    6f16:	62 e1       	ldi	r22, 0x12	; 18
    6f18:	75 e0       	ldi	r23, 0x05	; 5
    6f1a:	82 ea       	ldi	r24, 0xA2	; 162
    6f1c:	96 e0       	ldi	r25, 0x06	; 6
    6f1e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
    6f22:	18 8e       	std	Y+24, r1	; 0x18
    6f24:	1f 8a       	std	Y+23, r1	; 0x17
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6f26:	88 e0       	ldi	r24, 0x08	; 8
    6f28:	92 e0       	ldi	r25, 0x02	; 2
    6f2a:	9e 8b       	std	Y+22, r25	; 0x16
    6f2c:	8d 8b       	std	Y+21, r24	; 0x15
    6f2e:	ee 24       	eor	r14, r14
    6f30:	e3 94       	inc	r14
    6f32:	f1 2c       	mov	r15, r1
    6f34:	ec 0e       	add	r14, r28
    6f36:	fd 1e       	adc	r15, r29
    6f38:	fa 8e       	std	Y+26, r15	; 0x1a
    6f3a:	e9 8e       	std	Y+25, r14	; 0x19
    6f3c:	84 e1       	ldi	r24, 0x14	; 20
    6f3e:	90 e0       	ldi	r25, 0x00	; 0
    6f40:	9e 8f       	std	Y+30, r25	; 0x1e
    6f42:	8d 8f       	std	Y+29, r24	; 0x1d
  { begin(); }
    6f44:	ce 01       	movw	r24, r28
    6f46:	45 96       	adiw	r24, 0x15	; 21
    6f48:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>
		You can also set the GPS to any desired baud rate speed by changing the value inside the string and generate a new checksum here: http://www.hhhh.org/wiml/proj/nmeaxor.html
		 */

		char gpsSentence [20];
		PString str(gpsSentence, sizeof(gpsSentence));
		str.print("$PMTK251,");
    6f4c:	64 e4       	ldi	r22, 0x44	; 68
    6f4e:	75 e0       	ldi	r23, 0x05	; 5
    6f50:	ce 01       	movw	r24, r28
    6f52:	45 96       	adiw	r24, 0x15	; 21
    6f54:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		str.print(model->getSerialBaud1());
    6f58:	f8 01       	movw	r30, r16
    6f5a:	84 81       	ldd	r24, Z+4	; 0x04
    6f5c:	95 81       	ldd	r25, Z+5	; 0x05
    6f5e:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6f62:	ab 01       	movw	r20, r22
    6f64:	bc 01       	movw	r22, r24
    6f66:	2a e0       	ldi	r18, 0x0A	; 10
    6f68:	30 e0       	ldi	r19, 0x00	; 0
    6f6a:	ce 01       	movw	r24, r28
    6f6c:	45 96       	adiw	r24, 0x15	; 21
    6f6e:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN5Print5printEli>
		str.print("*");
    6f72:	6f ef       	ldi	r22, 0xFF	; 255
    6f74:	74 e0       	ldi	r23, 0x04	; 4
    6f76:	ce 01       	movw	r24, r28
    6f78:	45 96       	adiw	r24, 0x15	; 21
    6f7a:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
		//calculate the checksum
		byte cs = getChecksum(gpsSentence); //clear any old checksum
    6f7e:	c7 01       	movw	r24, r14
    6f80:	0e 94 9f 33 	call	0x673e	; 0x673e <_Z11getChecksumPc>
    6f84:	18 2f       	mov	r17, r24
		//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
		if (cs < 0x10) str.print('0');
    6f86:	80 31       	cpi	r24, 0x10	; 16
    6f88:	28 f4       	brcc	.+10     	; 0x6f94 <_ZN3Gps12setupGpsImplEv+0x1b8>
    6f8a:	60 e3       	ldi	r22, 0x30	; 48
    6f8c:	ce 01       	movw	r24, r28
    6f8e:	45 96       	adiw	r24, 0x15	; 21
    6f90:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6f94:	40 e1       	ldi	r20, 0x10	; 16
    6f96:	50 e0       	ldi	r21, 0x00	; 0
    6f98:	61 2f       	mov	r22, r17
    6f9a:	ce 01       	movw	r24, r28
    6f9c:	45 96       	adiw	r24, 0x15	; 21
    6f9e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN5Print5printEhi>
		Serial1.println(gpsSentence);
    6fa2:	be 01       	movw	r22, r28
    6fa4:	6f 5f       	subi	r22, 0xFF	; 255
    6fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    6fa8:	82 ea       	ldi	r24, 0xA2	; 162
    6faa:	96 e0       	ldi	r25, 0x06	; 6
    6fac:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

	}
}
    6fb0:	6e 96       	adiw	r28, 0x1e	; 30
    6fb2:	0f b6       	in	r0, 0x3f	; 63
    6fb4:	f8 94       	cli
    6fb6:	de bf       	out	0x3e, r29	; 62
    6fb8:	0f be       	out	0x3f, r0	; 63
    6fba:	cd bf       	out	0x3d, r28	; 61
    6fbc:	df 91       	pop	r29
    6fbe:	cf 91       	pop	r28
    6fc0:	1f 91       	pop	r17
    6fc2:	0f 91       	pop	r16
    6fc4:	ff 90       	pop	r15
    6fc6:	ef 90       	pop	r14
    6fc8:	08 95       	ret

00006fca <_ZN3Gps8setupGpsEv>:
//	return gpsDecode;
//}
/*
 Set baud rate and various message frequencies.
 */
void Gps::setupGps() {
    6fca:	cf 93       	push	r28
    6fcc:	df 93       	push	r29
    6fce:	ec 01       	movw	r28, r24
	 6 MSS (If internal beacon is supported)
	 7 Not defined
	 8 ZDA (if 1PPS output is supported)
	 9 Not defined
	 */
	autoBaud();
    6fd0:	0e 94 9d 34 	call	0x693a	; 0x693a <_ZN3Gps8autoBaudEv>

	setupGpsImpl();
    6fd4:	ce 01       	movw	r24, r28
    6fd6:	0e 94 ee 36 	call	0x6ddc	; 0x6ddc <_ZN3Gps12setupGpsImplEv>
	//now flush and restart
	Serial1.flush();
    6fda:	82 ea       	ldi	r24, 0xA2	; 162
    6fdc:	96 e0       	ldi	r25, 0x06	; 6
    6fde:	0e 94 cc 01 	call	0x398	; 0x398 <_ZN14HardwareSerial5flushEv>
	Serial1.end();
    6fe2:	82 ea       	ldi	r24, 0xA2	; 162
    6fe4:	96 e0       	ldi	r25, 0x06	; 6
    6fe6:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN14HardwareSerial3endEv>
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
    6fea:	8c 81       	ldd	r24, Y+4	; 0x04
    6fec:	9d 81       	ldd	r25, Y+5	; 0x05
    6fee:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6ff2:	ab 01       	movw	r20, r22
    6ff4:	bc 01       	movw	r22, r24
    6ff6:	26 e0       	ldi	r18, 0x06	; 6
    6ff8:	82 ea       	ldi	r24, 0xA2	; 162
    6ffa:	96 e0       	ldi	r25, 0x06	; 6
}
    6ffc:	df 91       	pop	r29
    6ffe:	cf 91       	pop	r28

	setupGpsImpl();
	//now flush and restart
	Serial1.flush();
	Serial1.end();
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
    7000:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <_ZN14HardwareSerial5beginEmh>

00007004 <_GLOBAL__sub_I_gpsBuffer>:
    7004:	10 92 0a 11 	sts	0x110A, r1
    7008:	10 92 09 11 	sts	0x1109, r1
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    700c:	88 e0       	ldi	r24, 0x08	; 8
    700e:	92 e0       	ldi	r25, 0x02	; 2
    7010:	90 93 08 11 	sts	0x1108, r25
    7014:	80 93 07 11 	sts	0x1107, r24
    7018:	81 e1       	ldi	r24, 0x11	; 17
    701a:	91 e1       	ldi	r25, 0x11	; 17
    701c:	90 93 0c 11 	sts	0x110C, r25
    7020:	80 93 0b 11 	sts	0x110B, r24
    7024:	88 e2       	ldi	r24, 0x28	; 40
    7026:	90 e0       	ldi	r25, 0x00	; 0
    7028:	90 93 10 11 	sts	0x1110, r25
    702c:	80 93 0f 11 	sts	0x110F, r24
  { begin(); }
    7030:	87 e0       	ldi	r24, 0x07	; 7
    7032:	91 e1       	ldi	r25, 0x11	; 17
    7034:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>

00007038 <_ZN10NmeaSerialD1Ev>:

class AltSoftSerial : public Stream
{
public:
	AltSoftSerial() { }
	~AltSoftSerial() { end(); }
    7038:	28 e1       	ldi	r18, 0x18	; 24
    703a:	32 e0       	ldi	r19, 0x02	; 2
    703c:	fc 01       	movw	r30, r24
    703e:	31 83       	std	Z+1, r19	; 0x01
    7040:	20 83       	st	Z, r18
    7042:	0c 94 50 23 	jmp	0x46a0	; 0x46a0 <_ZN13AltSoftSerial3endEv>

00007046 <_ZN10NmeaSerialD0Ev>:
 *      Author: robert
 */

#include "NmeaSerial.h"

NmeaSerial::~NmeaSerial() {
    7046:	cf 93       	push	r28
    7048:	df 93       	push	r29
    704a:	ec 01       	movw	r28, r24
    704c:	88 e1       	ldi	r24, 0x18	; 24
    704e:	92 e0       	ldi	r25, 0x02	; 2
    7050:	99 83       	std	Y+1, r25	; 0x01
    7052:	88 83       	st	Y, r24
    7054:	0e 94 50 23 	call	0x46a0	; 0x46a0 <_ZN13AltSoftSerial3endEv>

}
    7058:	ce 01       	movw	r24, r28
    705a:	df 91       	pop	r29
    705c:	cf 91       	pop	r28
    705e:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <_ZdlPv>

00007062 <_ZN10NmeaSerial5beginEl>:
void NmeaSerial::begin(long speed) {
	//initialise the nmea output
	//pinMode(nmeaRxPin, INPUT);
	//pinMode(nmeaTxPin, OUTPUT);
	AltSoftSerial::begin(speed);
    7062:	9a 01       	movw	r18, r20
    7064:	ab 01       	movw	r20, r22
	static void begin(uint32_t baud) { init((F_CPU + baud / 2) / baud); }
    7066:	ca 01       	movw	r24, r20
    7068:	b9 01       	movw	r22, r18
    706a:	96 95       	lsr	r25
    706c:	87 95       	ror	r24
    706e:	77 95       	ror	r23
    7070:	67 95       	ror	r22
    7072:	7c 5d       	subi	r23, 0xDC	; 220
    7074:	8b 40       	sbci	r24, 0x0B	; 11
    7076:	9f 4f       	sbci	r25, 0xFF	; 255
    7078:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    707c:	ca 01       	movw	r24, r20
    707e:	b9 01       	movw	r22, r18
    7080:	0c 94 36 21 	jmp	0x426c	; 0x426c <_ZN13AltSoftSerial4initEm>

00007084 <_ZN10NmeaSerial9printNmeaEPc>:

void NmeaSerial::printNmea(char* sentence) {
	//sentence can be up to 80 chars
	//make it as perfect as possible, as the Raymarine C70 is very touchy
	// noInterrupts();
	println(sentence);
    7084:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>

00007088 <_ZN10NmeaSerial13printWindNmeaEv>:
 * 4. Wind Speed Units, K/M/N
 * 5. Status, A = Data Valid
 * 6. Checksum
 *
 */
void NmeaSerial::printWindNmea() {
    7088:	cf 92       	push	r12
    708a:	df 92       	push	r13
    708c:	ef 92       	push	r14
    708e:	ff 92       	push	r15
    7090:	0f 93       	push	r16
    7092:	1f 93       	push	r17
    7094:	cf 93       	push	r28
    7096:	df 93       	push	r29
    7098:	cd b7       	in	r28, 0x3d	; 61
    709a:	de b7       	in	r29, 0x3e	; 62
    709c:	2a 97       	sbiw	r28, 0x0a	; 10
    709e:	0f b6       	in	r0, 0x3f	; 63
    70a0:	f8 94       	cli
    70a2:	de bf       	out	0x3e, r29	; 62
    70a4:	0f be       	out	0x3f, r0	; 63
    70a6:	cd bf       	out	0x3d, r28	; 61
    70a8:	8c 01       	movw	r16, r24
	//Assemble a sentence of the various parts so that we can calculate the proper checksum

	PString str(windSentence, sizeof(windSentence));
    70aa:	7c 01       	movw	r14, r24
    70ac:	8e e0       	ldi	r24, 0x0E	; 14
    70ae:	e8 0e       	add	r14, r24
    70b0:	f1 1c       	adc	r15, r1
    70b2:	1c 82       	std	Y+4, r1	; 0x04
    70b4:	1b 82       	std	Y+3, r1	; 0x03
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    70b6:	88 e0       	ldi	r24, 0x08	; 8
    70b8:	92 e0       	ldi	r25, 0x02	; 2
    70ba:	9a 83       	std	Y+2, r25	; 0x02
    70bc:	89 83       	std	Y+1, r24	; 0x01
    70be:	fe 82       	std	Y+6, r15	; 0x06
    70c0:	ed 82       	std	Y+5, r14	; 0x05
    70c2:	8e e1       	ldi	r24, 0x1E	; 30
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	9a 87       	std	Y+10, r25	; 0x0a
    70c8:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    70ca:	ce 01       	movw	r24, r28
    70cc:	01 96       	adiw	r24, 0x01	; 1
    70ce:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>
	str.print("$WIMWV,");
    70d2:	66 e5       	ldi	r22, 0x56	; 86
    70d4:	75 e0       	ldi	r23, 0x05	; 5
    70d6:	ce 01       	movw	r24, r28
    70d8:	01 96       	adiw	r24, 0x01	; 1
    70da:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	str.print(model->getWindApparentDir());
    70de:	f8 01       	movw	r30, r16
    70e0:	84 85       	ldd	r24, Z+12	; 0x0c
    70e2:	95 85       	ldd	r25, Z+13	; 0x0d
    70e4:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <_ZN14FreeBoardModel18getWindApparentDirEv>
    70e8:	4a e0       	ldi	r20, 0x0A	; 10
    70ea:	50 e0       	ldi	r21, 0x00	; 0
    70ec:	bc 01       	movw	r22, r24
    70ee:	ce 01       	movw	r24, r28
    70f0:	01 96       	adiw	r24, 0x01	; 1
    70f2:	0e 94 3f 08 	call	0x107e	; 0x107e <_ZN5Print5printEii>
	str.print(".0,R,");
    70f6:	6e e5       	ldi	r22, 0x5E	; 94
    70f8:	75 e0       	ldi	r23, 0x05	; 5
    70fa:	ce 01       	movw	r24, r28
    70fc:	01 96       	adiw	r24, 0x01	; 1
    70fe:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	str.print(model->getWindAverage());
    7102:	f8 01       	movw	r30, r16
    7104:	84 85       	ldd	r24, Z+12	; 0x0c
    7106:	95 85       	ldd	r25, Z+13	; 0x0d
    7108:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN14FreeBoardModel14getWindAverageEv>
    710c:	ab 01       	movw	r20, r22
    710e:	bc 01       	movw	r22, r24
    7110:	22 e0       	ldi	r18, 0x02	; 2
    7112:	30 e0       	ldi	r19, 0x00	; 0
    7114:	ce 01       	movw	r24, r28
    7116:	01 96       	adiw	r24, 0x01	; 1
    7118:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	str.print(",N,A*");
    711c:	64 e6       	ldi	r22, 0x64	; 100
    711e:	75 e0       	ldi	r23, 0x05	; 5
    7120:	ce 01       	movw	r24, r28
    7122:	01 96       	adiw	r24, 0x01	; 1
    7124:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	//calculate the checksum

	cs = getChecksum(windSentence); //clear any old checksum
    7128:	c7 01       	movw	r24, r14
    712a:	0e 94 9f 33 	call	0x673e	; 0x673e <_Z11getChecksumPc>
    712e:	68 01       	movw	r12, r16
    7130:	f0 e4       	ldi	r31, 0x40	; 64
    7132:	cf 0e       	add	r12, r31
    7134:	d1 1c       	adc	r13, r1
    7136:	f6 01       	movw	r30, r12
    7138:	80 83       	st	Z, r24
	//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
	if (cs < 0x10) str.print('0');
    713a:	80 31       	cpi	r24, 0x10	; 16
    713c:	28 f4       	brcc	.+10     	; 0x7148 <_ZN10NmeaSerial13printWindNmeaEv+0xc0>
    713e:	60 e3       	ldi	r22, 0x30	; 48
    7140:	ce 01       	movw	r24, r28
    7142:	01 96       	adiw	r24, 0x01	; 1
    7144:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
	str.print(cs, HEX); // Assemble the final message and send it out the serial port
    7148:	40 e1       	ldi	r20, 0x10	; 16
    714a:	50 e0       	ldi	r21, 0x00	; 0
    714c:	f6 01       	movw	r30, r12
    714e:	60 81       	ld	r22, Z
    7150:	ce 01       	movw	r24, r28
    7152:	01 96       	adiw	r24, 0x01	; 1
    7154:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN5Print5printEhi>
	Serial.println(windSentence);
    7158:	b7 01       	movw	r22, r14
    715a:	84 ec       	ldi	r24, 0xC4	; 196
    715c:	96 e0       	ldi	r25, 0x06	; 6
    715e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	printNmea(windSentence);
    7162:	b7 01       	movw	r22, r14
    7164:	c8 01       	movw	r24, r16
    7166:	0e 94 42 38 	call	0x7084	; 0x7084 <_ZN10NmeaSerial9printNmeaEPc>

}
    716a:	2a 96       	adiw	r28, 0x0a	; 10
    716c:	0f b6       	in	r0, 0x3f	; 63
    716e:	f8 94       	cli
    7170:	de bf       	out	0x3e, r29	; 62
    7172:	0f be       	out	0x3f, r0	; 63
    7174:	cd bf       	out	0x3d, r28	; 61
    7176:	df 91       	pop	r29
    7178:	cf 91       	pop	r28
    717a:	1f 91       	pop	r17
    717c:	0f 91       	pop	r16
    717e:	ff 90       	pop	r15
    7180:	ef 90       	pop	r14
    7182:	df 90       	pop	r13
    7184:	cf 90       	pop	r12
    7186:	08 95       	ret

00007188 <_ZN10NmeaSerial16printTrueHeadingEv>:
 *Actual vessel heading in degrees Ture produced by any device or system producing true heading.
 *
 *$--HDT,x.x,T
 *x.x = Heading, degrees True
 */
void NmeaSerial::printTrueHeading() {
    7188:	af 92       	push	r10
    718a:	bf 92       	push	r11
    718c:	cf 92       	push	r12
    718e:	df 92       	push	r13
    7190:	ef 92       	push	r14
    7192:	ff 92       	push	r15
    7194:	0f 93       	push	r16
    7196:	1f 93       	push	r17
    7198:	cf 93       	push	r28
    719a:	df 93       	push	r29
    719c:	cd b7       	in	r28, 0x3d	; 61
    719e:	de b7       	in	r29, 0x3e	; 62
    71a0:	2a 97       	sbiw	r28, 0x0a	; 10
    71a2:	0f b6       	in	r0, 0x3f	; 63
    71a4:	f8 94       	cli
    71a6:	de bf       	out	0x3e, r29	; 62
    71a8:	0f be       	out	0x3f, r0	; 63
    71aa:	cd bf       	out	0x3d, r28	; 61
    71ac:	8c 01       	movw	r16, r24
	//Assemble a sentence of the various parts so that we can calculate the proper checksum
	// declination is positive when true N is west of MagN, eg subtract the declination
	if(model->getDeclination()==0.0)return;
    71ae:	fc 01       	movw	r30, r24
    71b0:	84 85       	ldd	r24, Z+12	; 0x0c
    71b2:	95 85       	ldd	r25, Z+13	; 0x0d
    71b4:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <_ZN14FreeBoardModel14getDeclinationEv>
    71b8:	20 e0       	ldi	r18, 0x00	; 0
    71ba:	30 e0       	ldi	r19, 0x00	; 0
    71bc:	a9 01       	movw	r20, r18
    71be:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    71c2:	88 23       	and	r24, r24
    71c4:	09 f4       	brne	.+2      	; 0x71c8 <_ZN10NmeaSerial16printTrueHeadingEv+0x40>
    71c6:	6f c0       	rjmp	.+222    	; 0x72a6 <_ZN10NmeaSerial16printTrueHeadingEv+0x11e>

	PString str(trueHeadingSentence, sizeof(trueHeadingSentence));
    71c8:	58 01       	movw	r10, r16
    71ca:	fc e2       	ldi	r31, 0x2C	; 44
    71cc:	af 0e       	add	r10, r31
    71ce:	b1 1c       	adc	r11, r1
    71d0:	1c 82       	std	Y+4, r1	; 0x04
    71d2:	1b 82       	std	Y+3, r1	; 0x03
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    71d4:	88 e0       	ldi	r24, 0x08	; 8
    71d6:	92 e0       	ldi	r25, 0x02	; 2
    71d8:	9a 83       	std	Y+2, r25	; 0x02
    71da:	89 83       	std	Y+1, r24	; 0x01
    71dc:	be 82       	std	Y+6, r11	; 0x06
    71de:	ad 82       	std	Y+5, r10	; 0x05
    71e0:	84 e1       	ldi	r24, 0x14	; 20
    71e2:	90 e0       	ldi	r25, 0x00	; 0
    71e4:	9a 87       	std	Y+10, r25	; 0x0a
    71e6:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    71e8:	ce 01       	movw	r24, r28
    71ea:	01 96       	adiw	r24, 0x01	; 1
    71ec:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <_ZN7PString5beginEv>
	str.print("$HCHDT,");
    71f0:	6a e6       	ldi	r22, 0x6A	; 106
    71f2:	75 e0       	ldi	r23, 0x05	; 5
    71f4:	ce 01       	movw	r24, r28
    71f6:	01 96       	adiw	r24, 0x01	; 1
    71f8:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	float trueHeading = model->getMagneticHeading()-model->getDeclination();
    71fc:	f8 01       	movw	r30, r16
    71fe:	84 85       	ldd	r24, Z+12	; 0x0c
    7200:	95 85       	ldd	r25, Z+13	; 0x0d
    7202:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <_ZN14FreeBoardModel18getMagneticHeadingEv>
    7206:	6b 01       	movw	r12, r22
    7208:	7c 01       	movw	r14, r24
    720a:	f8 01       	movw	r30, r16
    720c:	84 85       	ldd	r24, Z+12	; 0x0c
    720e:	95 85       	ldd	r25, Z+13	; 0x0d
    7210:	0e 94 15 2d 	call	0x5a2a	; 0x5a2a <_ZN14FreeBoardModel14getDeclinationEv>
    7214:	9b 01       	movw	r18, r22
    7216:	ac 01       	movw	r20, r24
    7218:	c7 01       	movw	r24, r14
    721a:	b6 01       	movw	r22, r12
    721c:	0e 94 44 41 	call	0x8288	; 0x8288 <__subsf3>
    7220:	ab 01       	movw	r20, r22
    7222:	bc 01       	movw	r22, r24
	str.print(trueHeading);
    7224:	22 e0       	ldi	r18, 0x02	; 2
    7226:	30 e0       	ldi	r19, 0x00	; 0
    7228:	ce 01       	movw	r24, r28
    722a:	01 96       	adiw	r24, 0x01	; 1
    722c:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN5Print5printEdi>
	str.print(",T*");
    7230:	62 e7       	ldi	r22, 0x72	; 114
    7232:	75 e0       	ldi	r23, 0x05	; 5
    7234:	ce 01       	movw	r24, r28
    7236:	01 96       	adiw	r24, 0x01	; 1
    7238:	0e 94 97 06 	call	0xd2e	; 0xd2e <_ZN5Print5printEPKc>
	//calculate the checksum

	cs = 0; //clear any old checksum
    723c:	f8 01       	movw	r30, r16
    723e:	e0 5c       	subi	r30, 0xC0	; 192
    7240:	ff 4f       	sbci	r31, 0xFF	; 255
    7242:	10 82       	st	Z, r1
	for (unsigned int n = 1; n < strlen(trueHeadingSentence) - 1; n++) {
    7244:	81 e0       	ldi	r24, 0x01	; 1
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	7f 01       	movw	r14, r30
    724a:	09 c0       	rjmp	.+18     	; 0x725e <_ZN10NmeaSerial16printTrueHeadingEv+0xd6>
 *Actual vessel heading in degrees Ture produced by any device or system producing true heading.
 *
 *$--HDT,x.x,T
 *x.x = Heading, degrees True
 */
void NmeaSerial::printTrueHeading() {
    724c:	f8 01       	movw	r30, r16
    724e:	e8 0f       	add	r30, r24
    7250:	f9 1f       	adc	r31, r25
	str.print(",T*");
	//calculate the checksum

	cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(trueHeadingSentence) - 1; n++) {
		cs ^= trueHeadingSentence[n]; //calculates the checksum
    7252:	24 a5       	ldd	r18, Z+44	; 0x2c
    7254:	f7 01       	movw	r30, r14
    7256:	30 81       	ld	r19, Z
    7258:	23 27       	eor	r18, r19
    725a:	20 83       	st	Z, r18
	str.print(trueHeading);
	str.print(",T*");
	//calculate the checksum

	cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(trueHeadingSentence) - 1; n++) {
    725c:	01 96       	adiw	r24, 0x01	; 1
    725e:	f5 01       	movw	r30, r10
    7260:	01 90       	ld	r0, Z+
    7262:	00 20       	and	r0, r0
    7264:	e9 f7       	brne	.-6      	; 0x7260 <_ZN10NmeaSerial16printTrueHeadingEv+0xd8>
    7266:	ea 19       	sub	r30, r10
    7268:	fb 09       	sbc	r31, r11
    726a:	32 97       	sbiw	r30, 0x02	; 2
    726c:	8e 17       	cp	r24, r30
    726e:	9f 07       	cpc	r25, r31
    7270:	68 f3       	brcs	.-38     	; 0x724c <_ZN10NmeaSerial16printTrueHeadingEv+0xc4>
		cs ^= trueHeadingSentence[n]; //calculates the checksum
	}
	//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
	if (cs < 0x10) str.print('0');
    7272:	f7 01       	movw	r30, r14
    7274:	80 81       	ld	r24, Z
    7276:	80 31       	cpi	r24, 0x10	; 16
    7278:	28 f4       	brcc	.+10     	; 0x7284 <_ZN10NmeaSerial16printTrueHeadingEv+0xfc>
    727a:	60 e3       	ldi	r22, 0x30	; 48
    727c:	ce 01       	movw	r24, r28
    727e:	01 96       	adiw	r24, 0x01	; 1
    7280:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEc>
	str.print(cs, HEX); // Assemble the final message and send it out the serial port
    7284:	40 e1       	ldi	r20, 0x10	; 16
    7286:	50 e0       	ldi	r21, 0x00	; 0
    7288:	f7 01       	movw	r30, r14
    728a:	60 81       	ld	r22, Z
    728c:	ce 01       	movw	r24, r28
    728e:	01 96       	adiw	r24, 0x01	; 1
    7290:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN5Print5printEhi>
	Serial.println(trueHeadingSentence);
    7294:	b5 01       	movw	r22, r10
    7296:	84 ec       	ldi	r24, 0xC4	; 196
    7298:	96 e0       	ldi	r25, 0x06	; 6
    729a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN5Print7printlnEPKc>
	printNmea(trueHeadingSentence);
    729e:	b5 01       	movw	r22, r10
    72a0:	c8 01       	movw	r24, r16
    72a2:	0e 94 42 38 	call	0x7084	; 0x7084 <_ZN10NmeaSerial9printNmeaEPc>

}
    72a6:	2a 96       	adiw	r28, 0x0a	; 10
    72a8:	0f b6       	in	r0, 0x3f	; 63
    72aa:	f8 94       	cli
    72ac:	de bf       	out	0x3e, r29	; 62
    72ae:	0f be       	out	0x3f, r0	; 63
    72b0:	cd bf       	out	0x3d, r28	; 61
    72b2:	df 91       	pop	r29
    72b4:	cf 91       	pop	r28
    72b6:	1f 91       	pop	r17
    72b8:	0f 91       	pop	r16
    72ba:	ff 90       	pop	r15
    72bc:	ef 90       	pop	r14
    72be:	df 90       	pop	r13
    72c0:	cf 90       	pop	r12
    72c2:	bf 90       	pop	r11
    72c4:	af 90       	pop	r10
    72c6:	08 95       	ret

000072c8 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>:

 */

#include "Seatalk.h"

	Seatalk::Seatalk( HardwareSerial* serial, FreeBoardModel* model) {
    72c8:	fc 01       	movw	r30, r24
	this->model=model;
    72ca:	57 8b       	std	Z+23, r21	; 0x17
    72cc:	46 8b       	std	Z+22, r20	; 0x16
	this->serial=serial;
    72ce:	71 8f       	std	Z+25, r23	; 0x19
    72d0:	60 8f       	std	Z+24, r22	; 0x18
	seaTalkPos = 0;
    72d2:	11 82       	std	Z+1, r1	; 0x01
    72d4:	10 82       	st	Z, r1
    72d6:	08 95       	ret

000072d8 <_ZN7Seatalk18processSeaTalkByteEh>:
	// Send 36  00  01      Cancel MOB (Man Over Board) condition
	serial->write9(0x36, true);
	serial->write9(0x00, false);
	serial->write9(0x01, false);
}
void Seatalk::processSeaTalkByte(byte inByte) {
    72d8:	fc 01       	movw	r30, r24
		processSeatalk(seatalkStream);
		seaTalkPos = 0;
		// Serial.print("Command:");
		inByte = inByte - 256;
	}
	seatalkStream[seaTalkPos] = inByte;
    72da:	a0 81       	ld	r26, Z
    72dc:	b1 81       	ldd	r27, Z+1	; 0x01
    72de:	a8 0f       	add	r26, r24
    72e0:	b9 1f       	adc	r27, r25
    72e2:	12 96       	adiw	r26, 0x02	; 2
    72e4:	6c 93       	st	X, r22
	if (seaTalkPos < 19)
    72e6:	80 81       	ld	r24, Z
    72e8:	91 81       	ldd	r25, Z+1	; 0x01
    72ea:	43 97       	sbiw	r24, 0x13	; 19
    72ec:	2c f4       	brge	.+10     	; 0x72f8 <_ZN7Seatalk18processSeaTalkByteEh+0x20>
		seaTalkPos++;
    72ee:	80 81       	ld	r24, Z
    72f0:	91 81       	ldd	r25, Z+1	; 0x01
    72f2:	01 96       	adiw	r24, 0x01	; 1
    72f4:	91 83       	std	Z+1, r25	; 0x01
    72f6:	80 83       	st	Z, r24
    72f8:	08 95       	ret

000072fa <_ZN4WindC1EP14FreeBoardModel>:
		57318, 57864, 58392, 58902, 59395, 59869, 60325, 60763, 61182, 61583, 61965, 62327, 62671, 62996, 63302, 63588, 63855, 64103, 64331, 64539, 64728,
		64897, 65047, 65176, 65286, 65375, 65445, 65495, 65525, 65535, };

AverageList<val> dirList = AverageList<val>(dirStorage, MAX_NUMBER_OF_READINGS);

Wind::Wind(FreeBoardModel* model) {
    72fa:	cf 93       	push	r28
    72fc:	df 93       	push	r29
    72fe:	eb 01       	movw	r28, r22
	this->model = model;
    7300:	fc 01       	movw	r30, r24
    7302:	71 83       	std	Z+1, r23	; 0x01
    7304:	60 83       	st	Z, r22
	//initialise the wind interrupt
	windSpeedMicros = micros();
    7306:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    730a:	60 93 76 11 	sts	0x1176, r22
    730e:	70 93 77 11 	sts	0x1177, r23
    7312:	80 93 78 11 	sts	0x1178, r24
    7316:	90 93 79 11 	sts	0x1179, r25
	windSpeedMicrosLast = windSpeedMicros;
    731a:	40 91 76 11 	lds	r20, 0x1176
    731e:	50 91 77 11 	lds	r21, 0x1177
    7322:	60 91 78 11 	lds	r22, 0x1178
    7326:	70 91 79 11 	lds	r23, 0x1179
    732a:	40 93 72 11 	sts	0x1172, r20
    732e:	50 93 73 11 	sts	0x1173, r21
    7332:	60 93 74 11 	sts	0x1174, r22
    7336:	70 93 75 11 	sts	0x1175, r23
	windDirDur = 0;
    733a:	10 92 62 11 	sts	0x1162, r1
    733e:	10 92 63 11 	sts	0x1163, r1
    7342:	10 92 64 11 	sts	0x1164, r1
    7346:	10 92 65 11 	sts	0x1165, r1
	windSpeedDur = 0;
    734a:	10 92 66 11 	sts	0x1166, r1
    734e:	10 92 67 11 	sts	0x1167, r1
    7352:	10 92 68 11 	sts	0x1168, r1
    7356:	10 92 69 11 	sts	0x1169, r1
	windSpeedFlag = true;
    735a:	81 e0       	ldi	r24, 0x01	; 1
    735c:	80 93 49 11 	sts	0x1149, r24
	windDirFlag = true;
    7360:	80 93 48 11 	sts	0x1148, r24
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
			currentSize = 0; 
    7364:	10 92 3c 11 	sts	0x113C, r1
			currentIndex = 0;
    7368:	10 92 3d 11 	sts	0x113D, r1
			for (byte i=0; i<size; i++){ values[i]=0; }
    736c:	80 91 39 11 	lds	r24, 0x1139
    7370:	90 91 3a 11 	lds	r25, 0x113A
    7374:	20 e0       	ldi	r18, 0x00	; 0
    7376:	09 c0       	rjmp	.+18     	; 0x738a <_ZN4WindC1EP14FreeBoardModel+0x90>
    7378:	fc 01       	movw	r30, r24
    737a:	32 e0       	ldi	r19, 0x02	; 2
    737c:	23 9f       	mul	r18, r19
    737e:	e0 0d       	add	r30, r0
    7380:	f1 1d       	adc	r31, r1
    7382:	11 24       	eor	r1, r1
    7384:	11 82       	std	Z+1, r1	; 0x01
    7386:	10 82       	st	Z, r1
    7388:	2f 5f       	subi	r18, 0xFF	; 255
    738a:	30 91 3b 11 	lds	r19, 0x113B
    738e:	23 17       	cp	r18, r19
    7390:	98 f3       	brcs	.-26     	; 0x7378 <_ZN4WindC1EP14FreeBoardModel+0x7e>
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
    7392:	ce 01       	movw	r24, r28
    7394:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    7398:	84 36       	cpi	r24, 0x64	; 100
    739a:	91 05       	cpc	r25, r1
    739c:	3c f0       	brlt	.+14     	; 0x73ac <_ZN4WindC1EP14FreeBoardModel+0xb2>
		model->setWindAlarmSpeed(99);
    739e:	63 e6       	ldi	r22, 0x63	; 99
    73a0:	70 e0       	ldi	r23, 0x00	; 0
    73a2:	ce 01       	movw	r24, r28
	}
}
    73a4:	df 91       	pop	r29
    73a6:	cf 91       	pop	r28
	windDirFlag = true;
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
		model->setWindAlarmSpeed(99);
    73a8:	0c 94 56 2e 	jmp	0x5cac	; 0x5cac <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
	}
}
    73ac:	df 91       	pop	r29
    73ae:	cf 91       	pop	r28
    73b0:	08 95       	ret

000073b2 <_ZN4Wind8isinLongEl>:

//routines for fast sin and cos

long Wind::isinLong(long x) {
    73b2:	cf 92       	push	r12
    73b4:	df 92       	push	r13
    73b6:	ef 92       	push	r14
    73b8:	ff 92       	push	r15
    73ba:	0f 93       	push	r16
    73bc:	1f 93       	push	r17
    73be:	cf 93       	push	r28
    73c0:	cb 01       	movw	r24, r22
    73c2:	ba 01       	movw	r22, r20
	boolean pos = true; // positive - keeps an eye on the sign.
	if (x < 0) {
    73c4:	97 ff       	sbrs	r25, 7
    73c6:	09 c0       	rjmp	.+18     	; 0x73da <_ZN4Wind8isinLongEl+0x28>
		x = -x;
    73c8:	90 95       	com	r25
    73ca:	80 95       	com	r24
    73cc:	70 95       	com	r23
    73ce:	61 95       	neg	r22
    73d0:	7f 4f       	sbci	r23, 0xFF	; 255
    73d2:	8f 4f       	sbci	r24, 0xFF	; 255
    73d4:	9f 4f       	sbci	r25, 0xFF	; 255
		pos = !pos;
    73d6:	c0 e0       	ldi	r28, 0x00	; 0
    73d8:	01 c0       	rjmp	.+2      	; 0x73dc <_ZN4Wind8isinLongEl+0x2a>
}

//routines for fast sin and cos

long Wind::isinLong(long x) {
	boolean pos = true; // positive - keeps an eye on the sign.
    73da:	c1 e0       	ldi	r28, 0x01	; 1
	if (x < 0) {
		x = -x;
		pos = !pos;
	}
	if (x >= 360) x %= 360;
    73dc:	68 36       	cpi	r22, 0x68	; 104
    73de:	21 e0       	ldi	r18, 0x01	; 1
    73e0:	72 07       	cpc	r23, r18
    73e2:	81 05       	cpc	r24, r1
    73e4:	91 05       	cpc	r25, r1
    73e6:	34 f0       	brlt	.+12     	; 0x73f4 <_ZN4Wind8isinLongEl+0x42>
    73e8:	28 e6       	ldi	r18, 0x68	; 104
    73ea:	31 e0       	ldi	r19, 0x01	; 1
    73ec:	40 e0       	ldi	r20, 0x00	; 0
    73ee:	50 e0       	ldi	r21, 0x00	; 0
    73f0:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divmodsi4>
	if (x > 180) {
    73f4:	65 3b       	cpi	r22, 0xB5	; 181
    73f6:	71 05       	cpc	r23, r1
    73f8:	81 05       	cpc	r24, r1
    73fa:	91 05       	cpc	r25, r1
    73fc:	34 f0       	brlt	.+12     	; 0x740a <_ZN4Wind8isinLongEl+0x58>
		x -= 180;
    73fe:	64 5b       	subi	r22, 0xB4	; 180
    7400:	71 09       	sbc	r23, r1
    7402:	81 09       	sbc	r24, r1
    7404:	91 09       	sbc	r25, r1
    7406:	21 e0       	ldi	r18, 0x01	; 1
    7408:	c2 27       	eor	r28, r18
		pos = !pos;
	}
	if (x > 90) x = 180 - x;
    740a:	6b 35       	cpi	r22, 0x5B	; 91
    740c:	71 05       	cpc	r23, r1
    740e:	81 05       	cpc	r24, r1
    7410:	91 05       	cpc	r25, r1
    7412:	64 f0       	brlt	.+24     	; 0x742c <_ZN4Wind8isinLongEl+0x7a>
    7414:	04 eb       	ldi	r16, 0xB4	; 180
    7416:	10 e0       	ldi	r17, 0x00	; 0
    7418:	20 e0       	ldi	r18, 0x00	; 0
    741a:	30 e0       	ldi	r19, 0x00	; 0
    741c:	68 01       	movw	r12, r16
    741e:	79 01       	movw	r14, r18
    7420:	c6 1a       	sub	r12, r22
    7422:	d7 0a       	sbc	r13, r23
    7424:	e8 0a       	sbc	r14, r24
    7426:	f9 0a       	sbc	r15, r25
    7428:	c7 01       	movw	r24, r14
    742a:	b6 01       	movw	r22, r12

	if (pos) return isinTable16[x]; // = /65535.0
    742c:	fb 01       	movw	r30, r22
    742e:	ee 0f       	add	r30, r30
    7430:	ff 1f       	adc	r31, r31
    7432:	e6 57       	subi	r30, 0x76	; 118
    7434:	fa 4f       	sbci	r31, 0xFA	; 250
    7436:	00 81       	ld	r16, Z
    7438:	11 81       	ldd	r17, Z+1	; 0x01
    743a:	c1 11       	cpse	r28, r1
    743c:	03 c0       	rjmp	.+6      	; 0x7444 <_ZN4Wind8isinLongEl+0x92>
	return 0 - isinTable16[x];
    743e:	11 95       	neg	r17
    7440:	01 95       	neg	r16
    7442:	11 09       	sbc	r17, r1
    7444:	20 e0       	ldi	r18, 0x00	; 0
    7446:	30 e0       	ldi	r19, 0x00	; 0
}
    7448:	b8 01       	movw	r22, r16
    744a:	c9 01       	movw	r24, r18
    744c:	cf 91       	pop	r28
    744e:	1f 91       	pop	r17
    7450:	0f 91       	pop	r16
    7452:	ff 90       	pop	r15
    7454:	ef 90       	pop	r14
    7456:	df 90       	pop	r13
    7458:	cf 90       	pop	r12
    745a:	08 95       	ret

0000745c <_ZN4Wind8icosLongEl>:
float Wind::isin(long x) {
	return isinLong(x) * 0.0000152590219;
}

long Wind::icosLong(long x) {
	return isinLong(x + 90);
    745c:	46 5a       	subi	r20, 0xA6	; 166
    745e:	5f 4f       	sbci	r21, 0xFF	; 255
    7460:	6f 4f       	sbci	r22, 0xFF	; 255
    7462:	7f 4f       	sbci	r23, 0xFF	; 255
    7464:	0c 94 d9 39 	jmp	0x73b2	; 0x73b2 <_ZN4Wind8isinLongEl>

00007468 <_ZN4Wind20getRotationalAverageEv>:

/*
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
    7468:	4f 92       	push	r4
    746a:	5f 92       	push	r5
    746c:	6f 92       	push	r6
    746e:	7f 92       	push	r7
    7470:	8f 92       	push	r8
    7472:	9f 92       	push	r9
    7474:	af 92       	push	r10
    7476:	bf 92       	push	r11
    7478:	cf 92       	push	r12
    747a:	df 92       	push	r13
    747c:	ef 92       	push	r14
    747e:	ff 92       	push	r15
    7480:	cf 93       	push	r28
    7482:	df 93       	push	r29
    7484:	3c 01       	movw	r6, r24
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    7486:	40 90 3c 11 	lds	r4, 0x113C
    748a:	c0 91 39 11 	lds	r28, 0x1139
    748e:	d0 91 3a 11 	lds	r29, 0x113A
int Wind::getRotationalAverage() {
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
    7492:	51 2c       	mov	r5, r1
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
	long x =0;
	long y = 0;
    7494:	81 2c       	mov	r8, r1
    7496:	91 2c       	mov	r9, r1
    7498:	54 01       	movw	r10, r8
/*
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
	long x =0;
    749a:	c1 2c       	mov	r12, r1
    749c:	d1 2c       	mov	r13, r1
    749e:	76 01       	movw	r14, r12
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    74a0:	19 c0       	rjmp	.+50     	; 0x74d4 <_ZN4Wind20getRotationalAverageEv+0x6c>
			return false;
		}
		//return the current index
		byte getCurrentIndex() { return currentIndex; }
		byte getCurrentSize() { return currentSize; }
		datatype getValue(byte x) { return values[x]; }
    74a2:	88 81       	ld	r24, Y
    74a4:	99 81       	ldd	r25, Y+1	; 0x01
		x += icosLong(dirList.getValue(i));
    74a6:	ac 01       	movw	r20, r24
    74a8:	60 e0       	ldi	r22, 0x00	; 0
    74aa:	70 e0       	ldi	r23, 0x00	; 0
    74ac:	c3 01       	movw	r24, r6
    74ae:	0e 94 2e 3a 	call	0x745c	; 0x745c <_ZN4Wind8icosLongEl>
    74b2:	c6 0e       	add	r12, r22
    74b4:	d7 1e       	adc	r13, r23
    74b6:	e8 1e       	adc	r14, r24
    74b8:	f9 1e       	adc	r15, r25
    74ba:	89 91       	ld	r24, Y+
    74bc:	99 91       	ld	r25, Y+
		y += isinLong(dirList.getValue(i));
    74be:	ac 01       	movw	r20, r24
    74c0:	60 e0       	ldi	r22, 0x00	; 0
    74c2:	70 e0       	ldi	r23, 0x00	; 0
    74c4:	c3 01       	movw	r24, r6
    74c6:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <_ZN4Wind8isinLongEl>
    74ca:	86 0e       	add	r8, r22
    74cc:	97 1e       	adc	r9, r23
    74ce:	a8 1e       	adc	r10, r24
    74d0:	b9 1e       	adc	r11, r25
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    74d2:	53 94       	inc	r5
    74d4:	54 10       	cpse	r5, r4
    74d6:	e5 cf       	rjmp	.-54     	; 0x74a2 <_ZN4Wind20getRotationalAverageEv+0x3a>
		y += isinLong(dirList.getValue(i));
		//Serial.print("DEBUG:angle=");
		//Serial.println(dirList.getValue(i));
	}
	//TODO:watch out for zeros
	if (x == 0l && y == 0l) {
    74d8:	c1 14       	cp	r12, r1
    74da:	d1 04       	cpc	r13, r1
    74dc:	e1 04       	cpc	r14, r1
    74de:	f1 04       	cpc	r15, r1
    74e0:	29 f4       	brne	.+10     	; 0x74ec <_ZN4Wind20getRotationalAverageEv+0x84>
    74e2:	81 14       	cp	r8, r1
    74e4:	91 04       	cpc	r9, r1
    74e6:	a1 04       	cpc	r10, r1
    74e8:	b1 04       	cpc	r11, r1
    74ea:	99 f1       	breq	.+102    	; 0x7552 <_ZN4Wind20getRotationalAverageEv+0xea>
		return 0l;
	}
	xf = (x* 0.0000152590219) / i;
    74ec:	64 2d       	mov	r22, r4
    74ee:	70 e0       	ldi	r23, 0x00	; 0
    74f0:	80 e0       	ldi	r24, 0x00	; 0
    74f2:	90 e0       	ldi	r25, 0x00	; 0
    74f4:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    74f8:	2b 01       	movw	r4, r22
    74fa:	3c 01       	movw	r6, r24
    74fc:	c7 01       	movw	r24, r14
    74fe:	b6 01       	movw	r22, r12
    7500:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    7504:	20 e8       	ldi	r18, 0x80	; 128
    7506:	30 e0       	ldi	r19, 0x00	; 0
    7508:	40 e8       	ldi	r20, 0x80	; 128
    750a:	57 e3       	ldi	r21, 0x37	; 55
    750c:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    7510:	a3 01       	movw	r20, r6
    7512:	92 01       	movw	r18, r4
    7514:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    7518:	6b 01       	movw	r12, r22
    751a:	7c 01       	movw	r14, r24
	yf = (y* 0.0000152590219) / i;
    751c:	c5 01       	movw	r24, r10
    751e:	b4 01       	movw	r22, r8
    7520:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    7524:	20 e8       	ldi	r18, 0x80	; 128
    7526:	30 e0       	ldi	r19, 0x00	; 0
    7528:	40 e8       	ldi	r20, 0x80	; 128
    752a:	57 e3       	ldi	r21, 0x37	; 55
    752c:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    7530:	a3 01       	movw	r20, r6
    7532:	92 01       	movw	r18, r4
    7534:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
	//Serial.print(", cos=");
	//Serial.print(xf);
	//Serial.print("sin=");
	//Serial.println(yf);

	return degrees(atan2(yf, xf));
    7538:	a7 01       	movw	r20, r14
    753a:	96 01       	movw	r18, r12
    753c:	0e 94 b8 41 	call	0x8370	; 0x8370 <atan2>
    7540:	21 ee       	ldi	r18, 0xE1	; 225
    7542:	3e e2       	ldi	r19, 0x2E	; 46
    7544:	45 e6       	ldi	r20, 0x65	; 101
    7546:	52 e4       	ldi	r21, 0x42	; 66
    7548:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    754c:	0e 94 7a 42 	call	0x84f4	; 0x84f4 <__fixsfsi>
    7550:	02 c0       	rjmp	.+4      	; 0x7556 <_ZN4Wind20getRotationalAverageEv+0xee>
		//Serial.print("DEBUG:angle=");
		//Serial.println(dirList.getValue(i));
	}
	//TODO:watch out for zeros
	if (x == 0l && y == 0l) {
		return 0l;
    7552:	60 e0       	ldi	r22, 0x00	; 0
    7554:	70 e0       	ldi	r23, 0x00	; 0
	//Serial.print("sin=");
	//Serial.println(yf);

	return degrees(atan2(yf, xf));

}
    7556:	cb 01       	movw	r24, r22
    7558:	df 91       	pop	r29
    755a:	cf 91       	pop	r28
    755c:	ff 90       	pop	r15
    755e:	ef 90       	pop	r14
    7560:	df 90       	pop	r13
    7562:	cf 90       	pop	r12
    7564:	bf 90       	pop	r11
    7566:	af 90       	pop	r10
    7568:	9f 90       	pop	r9
    756a:	8f 90       	pop	r8
    756c:	7f 90       	pop	r7
    756e:	6f 90       	pop	r6
    7570:	5f 90       	pop	r5
    7572:	4f 90       	pop	r4
    7574:	08 95       	ret

00007576 <_ZN4Wind17readWindDataSpeedEv>:

/* NMEA Wind routines and alarm
 */
void Wind::readWindDataSpeed() {
    7576:	0f 93       	push	r16
    7578:	1f 93       	push	r17
	//fastest rps = 15ms - avoid bounce
	if ((millis() - lastSpeedPulse) > 15) {
    757a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    757e:	00 91 82 11 	lds	r16, 0x1182
    7582:	10 91 83 11 	lds	r17, 0x1183
    7586:	20 91 84 11 	lds	r18, 0x1184
    758a:	30 91 85 11 	lds	r19, 0x1185
    758e:	60 1b       	sub	r22, r16
    7590:	71 0b       	sbc	r23, r17
    7592:	82 0b       	sbc	r24, r18
    7594:	93 0b       	sbc	r25, r19
    7596:	60 31       	cpi	r22, 0x10	; 16
    7598:	71 05       	cpc	r23, r1
    759a:	81 05       	cpc	r24, r1
    759c:	91 05       	cpc	r25, r1
    759e:	70 f1       	brcs	.+92     	; 0x75fc <_ZN4Wind17readWindDataSpeedEv+0x86>
		if (windSpeedFlag) {
    75a0:	80 91 49 11 	lds	r24, 0x1149
    75a4:	88 23       	and	r24, r24
    75a6:	e9 f0       	breq	.+58     	; 0x75e2 <_ZN4Wind17readWindDataSpeedEv+0x6c>
			//called by speed pin interrupt
			windSpeedMicrosLast = windSpeedMicros;
    75a8:	80 91 76 11 	lds	r24, 0x1176
    75ac:	90 91 77 11 	lds	r25, 0x1177
    75b0:	a0 91 78 11 	lds	r26, 0x1178
    75b4:	b0 91 79 11 	lds	r27, 0x1179
    75b8:	80 93 72 11 	sts	0x1172, r24
    75bc:	90 93 73 11 	sts	0x1173, r25
    75c0:	a0 93 74 11 	sts	0x1174, r26
    75c4:	b0 93 75 11 	sts	0x1175, r27
			windSpeedMicros = micros();
    75c8:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    75cc:	60 93 76 11 	sts	0x1176, r22
    75d0:	70 93 77 11 	sts	0x1177, r23
    75d4:	80 93 78 11 	sts	0x1178, r24
    75d8:	90 93 79 11 	sts	0x1179, r25
			windSpeedFlag = false;
    75dc:	10 92 49 11 	sts	0x1149, r1
    75e0:	03 c0       	rjmp	.+6      	; 0x75e8 <_ZN4Wind17readWindDataSpeedEv+0x72>
		} else {
			windSpeedFlag = true;
    75e2:	81 e0       	ldi	r24, 0x01	; 1
    75e4:	80 93 49 11 	sts	0x1149, r24
		}
		lastSpeedPulse = millis();
    75e8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    75ec:	60 93 82 11 	sts	0x1182, r22
    75f0:	70 93 83 11 	sts	0x1183, r23
    75f4:	80 93 84 11 	sts	0x1184, r24
    75f8:	90 93 85 11 	sts	0x1185, r25
	}
}
    75fc:	1f 91       	pop	r17
    75fe:	0f 91       	pop	r16
    7600:	08 95       	ret

00007602 <_ZN4Wind15readWindDataDirEv>:

void Wind::readWindDataDir() {
    7602:	0f 93       	push	r16
    7604:	1f 93       	push	r17
	if((millis() - lastDirPulse) > 15) {
    7606:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    760a:	00 91 7e 11 	lds	r16, 0x117E
    760e:	10 91 7f 11 	lds	r17, 0x117F
    7612:	20 91 80 11 	lds	r18, 0x1180
    7616:	30 91 81 11 	lds	r19, 0x1181
    761a:	60 1b       	sub	r22, r16
    761c:	71 0b       	sbc	r23, r17
    761e:	82 0b       	sbc	r24, r18
    7620:	93 0b       	sbc	r25, r19
    7622:	60 31       	cpi	r22, 0x10	; 16
    7624:	71 05       	cpc	r23, r1
    7626:	81 05       	cpc	r24, r1
    7628:	91 05       	cpc	r25, r1
    762a:	70 f1       	brcs	.+92     	; 0x7688 <_ZN4Wind15readWindDataDirEv+0x86>
		if (windDirFlag) {
    762c:	80 91 48 11 	lds	r24, 0x1148
    7630:	88 23       	and	r24, r24
    7632:	e9 f0       	breq	.+58     	; 0x766e <_ZN4Wind15readWindDataDirEv+0x6c>
			windDirMicrosLast = windDirMicros;
    7634:	80 91 6e 11 	lds	r24, 0x116E
    7638:	90 91 6f 11 	lds	r25, 0x116F
    763c:	a0 91 70 11 	lds	r26, 0x1170
    7640:	b0 91 71 11 	lds	r27, 0x1171
    7644:	80 93 6a 11 	sts	0x116A, r24
    7648:	90 93 6b 11 	sts	0x116B, r25
    764c:	a0 93 6c 11 	sts	0x116C, r26
    7650:	b0 93 6d 11 	sts	0x116D, r27
			windDirMicros = micros();
    7654:	0e 94 f6 15 	call	0x2bec	; 0x2bec <micros>
    7658:	60 93 6e 11 	sts	0x116E, r22
    765c:	70 93 6f 11 	sts	0x116F, r23
    7660:	80 93 70 11 	sts	0x1170, r24
    7664:	90 93 71 11 	sts	0x1171, r25
			windDirFlag = false;
    7668:	10 92 48 11 	sts	0x1148, r1
    766c:	03 c0       	rjmp	.+6      	; 0x7674 <_ZN4Wind15readWindDataDirEv+0x72>
		} else {
			windDirFlag = true;
    766e:	81 e0       	ldi	r24, 0x01	; 1
    7670:	80 93 48 11 	sts	0x1148, r24
		}
		lastDirPulse=millis();
    7674:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7678:	60 93 7e 11 	sts	0x117E, r22
    767c:	70 93 7f 11 	sts	0x117F, r23
    7680:	80 93 80 11 	sts	0x1180, r24
    7684:	90 93 81 11 	sts	0x1181, r25
	}
}
    7688:	1f 91       	pop	r17
    768a:	0f 91       	pop	r16
    768c:	08 95       	ret

0000768e <_ZN4Wind19calcWindSpeedAndDirEv>:

/*
 * The anemometer turns up to 60rps at 140knots - so min 16ms/16000us per turn
 * Mostly much lower :-)
 */
void Wind::calcWindSpeedAndDir() {
    768e:	4f 92       	push	r4
    7690:	5f 92       	push	r5
    7692:	6f 92       	push	r6
    7694:	7f 92       	push	r7
    7696:	8f 92       	push	r8
    7698:	9f 92       	push	r9
    769a:	af 92       	push	r10
    769c:	bf 92       	push	r11
    769e:	cf 92       	push	r12
    76a0:	df 92       	push	r13
    76a2:	ef 92       	push	r14
    76a4:	ff 92       	push	r15
    76a6:	cf 93       	push	r28
    76a8:	df 93       	push	r29
    76aa:	00 d0       	rcall	.+0      	; 0x76ac <_ZN4Wind19calcWindSpeedAndDirEv+0x1e>
    76ac:	00 d0       	rcall	.+0      	; 0x76ae <_ZN4Wind19calcWindSpeedAndDirEv+0x20>
    76ae:	cd b7       	in	r28, 0x3d	; 61
    76b0:	de b7       	in	r29, 0x3e	; 62
//grab data
// an interrupt could fire in here
	noInterrupts();
    76b2:	f8 94       	cli
	wsTempLast = windSpeedMicrosLast;
    76b4:	80 91 72 11 	lds	r24, 0x1172
    76b8:	90 91 73 11 	lds	r25, 0x1173
    76bc:	a0 91 74 11 	lds	r26, 0x1174
    76c0:	b0 91 75 11 	lds	r27, 0x1175
    76c4:	80 93 5e 11 	sts	0x115E, r24
    76c8:	90 93 5f 11 	sts	0x115F, r25
    76cc:	a0 93 60 11 	sts	0x1160, r26
    76d0:	b0 93 61 11 	sts	0x1161, r27
	wsTemp = windSpeedMicros;
    76d4:	80 91 76 11 	lds	r24, 0x1176
    76d8:	90 91 77 11 	lds	r25, 0x1177
    76dc:	a0 91 78 11 	lds	r26, 0x1178
    76e0:	b0 91 79 11 	lds	r27, 0x1179
    76e4:	80 93 5a 11 	sts	0x115A, r24
    76e8:	90 93 5b 11 	sts	0x115B, r25
    76ec:	a0 93 5c 11 	sts	0x115C, r26
    76f0:	b0 93 5d 11 	sts	0x115D, r27
	wdTemp = windDirMicros;
    76f4:	80 91 6e 11 	lds	r24, 0x116E
    76f8:	90 91 6f 11 	lds	r25, 0x116F
    76fc:	a0 91 70 11 	lds	r26, 0x1170
    7700:	b0 91 71 11 	lds	r27, 0x1171
    7704:	80 93 4e 11 	sts	0x114E, r24
    7708:	90 93 4f 11 	sts	0x114F, r25
    770c:	a0 93 50 11 	sts	0x1150, r26
    7710:	b0 93 51 11 	sts	0x1151, r27
	interrupts();
    7714:	78 94       	sei
	Serial.println(wsTemp);
	*/
//interrupts();
//micros resets every 50 min,
// avoid 0, bad data, rollover and too fast (bounce? <15ms)
	if (wsTempLast >= wsTemp || wsTemp - wsTempLast < 15000ul) {
    7716:	40 90 5e 11 	lds	r4, 0x115E
    771a:	50 90 5f 11 	lds	r5, 0x115F
    771e:	60 90 60 11 	lds	r6, 0x1160
    7722:	70 90 61 11 	lds	r7, 0x1161
    7726:	80 90 5a 11 	lds	r8, 0x115A
    772a:	90 90 5b 11 	lds	r9, 0x115B
    772e:	a0 90 5c 11 	lds	r10, 0x115C
    7732:	b0 90 5d 11 	lds	r11, 0x115D
    7736:	48 14       	cp	r4, r8
    7738:	59 04       	cpc	r5, r9
    773a:	6a 04       	cpc	r6, r10
    773c:	7b 04       	cpc	r7, r11
    773e:	08 f0       	brcs	.+2      	; 0x7742 <_ZN4Wind19calcWindSpeedAndDirEv+0xb4>
    7740:	e3 c1       	rjmp	.+966    	; 0x7b08 <_ZN4Wind19calcWindSpeedAndDirEv+0x47a>
    7742:	75 01       	movw	r14, r10
    7744:	64 01       	movw	r12, r8
    7746:	c4 18       	sub	r12, r4
    7748:	d5 08       	sbc	r13, r5
    774a:	e6 08       	sbc	r14, r6
    774c:	f7 08       	sbc	r15, r7
    774e:	88 e9       	ldi	r24, 0x98	; 152
    7750:	c8 16       	cp	r12, r24
    7752:	8a e3       	ldi	r24, 0x3A	; 58
    7754:	d8 06       	cpc	r13, r24
    7756:	e1 04       	cpc	r14, r1
    7758:	f1 04       	cpc	r15, r1
    775a:	08 f4       	brcc	.+2      	; 0x775e <_ZN4Wind19calcWindSpeedAndDirEv+0xd0>
    775c:	d5 c1       	rjmp	.+938    	; 0x7b08 <_ZN4Wind19calcWindSpeedAndDirEv+0x47a>
		//Serial.println("DEBUG:wsTempLast >= wsTemp || wsTemp - wsTempLast < 15000ul");
		return;
	}

//speed in micros
	wsNow = wsTemp - wsTempLast;
    775e:	c0 92 56 11 	sts	0x1156, r12
    7762:	d0 92 57 11 	sts	0x1157, r13
    7766:	e0 92 58 11 	sts	0x1158, r14
    776a:	f0 92 59 11 	sts	0x1159, r15
	if (windSpeedDur == 0) windSpeedDur = wsNow;
    776e:	80 91 66 11 	lds	r24, 0x1166
    7772:	90 91 67 11 	lds	r25, 0x1167
    7776:	a0 91 68 11 	lds	r26, 0x1168
    777a:	b0 91 69 11 	lds	r27, 0x1169
    777e:	89 2b       	or	r24, r25
    7780:	8a 2b       	or	r24, r26
    7782:	8b 2b       	or	r24, r27
    7784:	41 f4       	brne	.+16     	; 0x7796 <_ZN4Wind19calcWindSpeedAndDirEv+0x108>
    7786:	c0 92 66 11 	sts	0x1166, r12
    778a:	d0 92 67 11 	sts	0x1167, r13
    778e:	e0 92 68 11 	sts	0x1168, r14
    7792:	f0 92 69 11 	sts	0x1169, r15
	wsDiff = (wsNow * 100ul) / windSpeedDur;
    7796:	80 91 66 11 	lds	r24, 0x1166
    779a:	90 91 67 11 	lds	r25, 0x1167
    779e:	a0 91 68 11 	lds	r26, 0x1168
    77a2:	b0 91 69 11 	lds	r27, 0x1169
    77a6:	89 83       	std	Y+1, r24	; 0x01
    77a8:	9a 83       	std	Y+2, r25	; 0x02
    77aa:	ab 83       	std	Y+3, r26	; 0x03
    77ac:	bc 83       	std	Y+4, r27	; 0x04
    77ae:	a4 e6       	ldi	r26, 0x64	; 100
    77b0:	b0 e0       	ldi	r27, 0x00	; 0
    77b2:	a7 01       	movw	r20, r14
    77b4:	96 01       	movw	r18, r12
    77b6:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    77ba:	29 81       	ldd	r18, Y+1	; 0x01
    77bc:	3a 81       	ldd	r19, Y+2	; 0x02
    77be:	4b 81       	ldd	r20, Y+3	; 0x03
    77c0:	5c 81       	ldd	r21, Y+4	; 0x04
    77c2:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    77c6:	20 93 52 11 	sts	0x1152, r18
    77ca:	30 93 53 11 	sts	0x1153, r19
    77ce:	40 93 54 11 	sts	0x1154, r20
    77d2:	50 93 55 11 	sts	0x1155, r21

//can only change 10% per rev
	if (wsDiff < 90ul) {
    77d6:	2a 35       	cpi	r18, 0x5A	; 90
    77d8:	31 05       	cpc	r19, r1
    77da:	41 05       	cpc	r20, r1
    77dc:	51 05       	cpc	r21, r1
    77de:	58 f4       	brcc	.+22     	; 0x77f6 <_ZN4Wind19calcWindSpeedAndDirEv+0x168>
		windSpeedDur = (windSpeedDur * 9ul) / 10ul;
    77e0:	20 91 66 11 	lds	r18, 0x1166
    77e4:	30 91 67 11 	lds	r19, 0x1167
    77e8:	40 91 68 11 	lds	r20, 0x1168
    77ec:	50 91 69 11 	lds	r21, 0x1169
    77f0:	a9 e0       	ldi	r26, 0x09	; 9
    77f2:	b0 e0       	ldi	r27, 0x00	; 0
    77f4:	0f c0       	rjmp	.+30     	; 0x7814 <_ZN4Wind19calcWindSpeedAndDirEv+0x186>
	} else if (wsDiff > 110ul) {
    77f6:	2f 36       	cpi	r18, 0x6F	; 111
    77f8:	31 05       	cpc	r19, r1
    77fa:	41 05       	cpc	r20, r1
    77fc:	51 05       	cpc	r21, r1
    77fe:	d8 f0       	brcs	.+54     	; 0x7836 <_ZN4Wind19calcWindSpeedAndDirEv+0x1a8>
		windSpeedDur = (windSpeedDur * 11ul) / 10ul;
    7800:	20 91 66 11 	lds	r18, 0x1166
    7804:	30 91 67 11 	lds	r19, 0x1167
    7808:	40 91 68 11 	lds	r20, 0x1168
    780c:	50 91 69 11 	lds	r21, 0x1169
    7810:	ab e0       	ldi	r26, 0x0B	; 11
    7812:	b0 e0       	ldi	r27, 0x00	; 0
    7814:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7818:	2a e0       	ldi	r18, 0x0A	; 10
    781a:	30 e0       	ldi	r19, 0x00	; 0
    781c:	40 e0       	ldi	r20, 0x00	; 0
    781e:	50 e0       	ldi	r21, 0x00	; 0
    7820:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    7824:	20 93 66 11 	sts	0x1166, r18
    7828:	30 93 67 11 	sts	0x1167, r19
    782c:	40 93 68 11 	sts	0x1168, r20
    7830:	50 93 69 11 	sts	0x1169, r21
    7834:	49 c0       	rjmp	.+146    	; 0x78c8 <_ZN4Wind19calcWindSpeedAndDirEv+0x23a>
	} else {
		//running average, to avoid random errors, adjust by speed
		if (wsNow < 250000) {
			windSpeedDur = ((10ul * windSpeedDur) + wsNow) / 11ul;
    7836:	20 91 66 11 	lds	r18, 0x1166
    783a:	30 91 67 11 	lds	r19, 0x1167
    783e:	40 91 68 11 	lds	r20, 0x1168
    7842:	50 91 69 11 	lds	r21, 0x1169
		windSpeedDur = (windSpeedDur * 9ul) / 10ul;
	} else if (wsDiff > 110ul) {
		windSpeedDur = (windSpeedDur * 11ul) / 10ul;
	} else {
		//running average, to avoid random errors, adjust by speed
		if (wsNow < 250000) {
    7846:	90 e9       	ldi	r25, 0x90	; 144
    7848:	c9 16       	cp	r12, r25
    784a:	90 ed       	ldi	r25, 0xD0	; 208
    784c:	d9 06       	cpc	r13, r25
    784e:	93 e0       	ldi	r25, 0x03	; 3
    7850:	e9 06       	cpc	r14, r25
    7852:	f1 04       	cpc	r15, r1
    7854:	68 f4       	brcc	.+26     	; 0x7870 <_ZN4Wind19calcWindSpeedAndDirEv+0x1e2>
			windSpeedDur = ((10ul * windSpeedDur) + wsNow) / 11ul;
    7856:	aa e0       	ldi	r26, 0x0A	; 10
    7858:	b0 e0       	ldi	r27, 0x00	; 0
    785a:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    785e:	6c 0d       	add	r22, r12
    7860:	7d 1d       	adc	r23, r13
    7862:	8e 1d       	adc	r24, r14
    7864:	9f 1d       	adc	r25, r15
    7866:	2b e0       	ldi	r18, 0x0B	; 11
    7868:	30 e0       	ldi	r19, 0x00	; 0
    786a:	40 e0       	ldi	r20, 0x00	; 0
    786c:	50 e0       	ldi	r21, 0x00	; 0
    786e:	d8 cf       	rjmp	.-80     	; 0x7820 <_ZN4Wind19calcWindSpeedAndDirEv+0x192>
		} else if (wsNow < 500000) {
    7870:	a0 e2       	ldi	r26, 0x20	; 32
    7872:	ca 16       	cp	r12, r26
    7874:	a1 ea       	ldi	r26, 0xA1	; 161
    7876:	da 06       	cpc	r13, r26
    7878:	a7 e0       	ldi	r26, 0x07	; 7
    787a:	ea 06       	cpc	r14, r26
    787c:	f1 04       	cpc	r15, r1
    787e:	68 f4       	brcc	.+26     	; 0x789a <_ZN4Wind19calcWindSpeedAndDirEv+0x20c>
			windSpeedDur = ((6ul * windSpeedDur) + wsNow) / 7ul;
    7880:	a6 e0       	ldi	r26, 0x06	; 6
    7882:	b0 e0       	ldi	r27, 0x00	; 0
    7884:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7888:	6c 0d       	add	r22, r12
    788a:	7d 1d       	adc	r23, r13
    788c:	8e 1d       	adc	r24, r14
    788e:	9f 1d       	adc	r25, r15
    7890:	27 e0       	ldi	r18, 0x07	; 7
    7892:	30 e0       	ldi	r19, 0x00	; 0
    7894:	40 e0       	ldi	r20, 0x00	; 0
    7896:	50 e0       	ldi	r21, 0x00	; 0
    7898:	c3 cf       	rjmp	.-122    	; 0x7820 <_ZN4Wind19calcWindSpeedAndDirEv+0x192>
		} else {
			windSpeedDur = ((3ul * windSpeedDur) + wsNow) / 4ul;
    789a:	a3 e0       	ldi	r26, 0x03	; 3
    789c:	b0 e0       	ldi	r27, 0x00	; 0
    789e:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    78a2:	6c 0d       	add	r22, r12
    78a4:	7d 1d       	adc	r23, r13
    78a6:	8e 1d       	adc	r24, r14
    78a8:	9f 1d       	adc	r25, r15
    78aa:	32 e0       	ldi	r19, 0x02	; 2
    78ac:	96 95       	lsr	r25
    78ae:	87 95       	ror	r24
    78b0:	77 95       	ror	r23
    78b2:	67 95       	ror	r22
    78b4:	3a 95       	dec	r19
    78b6:	d1 f7       	brne	.-12     	; 0x78ac <_ZN4Wind19calcWindSpeedAndDirEv+0x21e>
    78b8:	60 93 66 11 	sts	0x1166, r22
    78bc:	70 93 67 11 	sts	0x1167, r23
    78c0:	80 93 68 11 	sts	0x1168, r24
    78c4:	90 93 69 11 	sts	0x1169, r25
	//	Serial.println(windSpeedDur);
//direction
//FROM ULTIMETER:
//AT 130 KNTS ABOUT 46US PER DEGREE OF ROTATION
//WE CAN USE  360*182041/1000 = 65535 INT ROLLOVER TO GIVE US DIR AVERAGING
	if (wdTemp > wsTemp) {
    78c8:	80 91 4e 11 	lds	r24, 0x114E
    78cc:	90 91 4f 11 	lds	r25, 0x114F
    78d0:	a0 91 50 11 	lds	r26, 0x1150
    78d4:	b0 91 51 11 	lds	r27, 0x1151
    78d8:	88 16       	cp	r8, r24
    78da:	99 06       	cpc	r9, r25
    78dc:	aa 06       	cpc	r10, r26
    78de:	bb 06       	cpc	r11, r27
    78e0:	28 f4       	brcc	.+10     	; 0x78ec <_ZN4Wind19calcWindSpeedAndDirEv+0x25e>
		wdTemp = wdTemp - wsTemp;
    78e2:	88 19       	sub	r24, r8
    78e4:	99 09       	sbc	r25, r9
    78e6:	aa 09       	sbc	r26, r10
    78e8:	bb 09       	sbc	r27, r11
    78ea:	04 c0       	rjmp	.+8      	; 0x78f4 <_ZN4Wind19calcWindSpeedAndDirEv+0x266>
	} else {
		wdTemp = wdTemp - wsTempLast;
    78ec:	84 19       	sub	r24, r4
    78ee:	95 09       	sbc	r25, r5
    78f0:	a6 09       	sbc	r26, r6
    78f2:	b7 09       	sbc	r27, r7
    78f4:	80 93 4e 11 	sts	0x114E, r24
    78f8:	90 93 4f 11 	sts	0x114F, r25
    78fc:	a0 93 50 11 	sts	0x1150, r26
    7900:	b0 93 51 11 	sts	0x1151, r27
	}
	//Serial.print("wdTemp=");
	//		Serial.print(wdTemp);
	if (wdTemp > 50 && wdTemp<wsNow) {
    7904:	80 90 4e 11 	lds	r8, 0x114E
    7908:	90 90 4f 11 	lds	r9, 0x114F
    790c:	a0 90 50 11 	lds	r10, 0x1150
    7910:	b0 90 51 11 	lds	r11, 0x1151
    7914:	b3 e3       	ldi	r27, 0x33	; 51
    7916:	8b 16       	cp	r8, r27
    7918:	91 04       	cpc	r9, r1
    791a:	a1 04       	cpc	r10, r1
    791c:	b1 04       	cpc	r11, r1
    791e:	08 f4       	brcc	.+2      	; 0x7922 <_ZN4Wind19calcWindSpeedAndDirEv+0x294>
    7920:	f3 c0       	rjmp	.+486    	; 0x7b08 <_ZN4Wind19calcWindSpeedAndDirEv+0x47a>
    7922:	8c 14       	cp	r8, r12
    7924:	9d 04       	cpc	r9, r13
    7926:	ae 04       	cpc	r10, r14
    7928:	bf 04       	cpc	r11, r15
    792a:	08 f0       	brcs	.+2      	; 0x792e <_ZN4Wind19calcWindSpeedAndDirEv+0x2a0>
    792c:	ed c0       	rjmp	.+474    	; 0x7b08 <_ZN4Wind19calcWindSpeedAndDirEv+0x47a>
		if (wdAvg == 0) wdAvg = wdTemp;
    792e:	80 91 4a 11 	lds	r24, 0x114A
    7932:	90 91 4b 11 	lds	r25, 0x114B
    7936:	a0 91 4c 11 	lds	r26, 0x114C
    793a:	b0 91 4d 11 	lds	r27, 0x114D
    793e:	89 2b       	or	r24, r25
    7940:	8a 2b       	or	r24, r26
    7942:	8b 2b       	or	r24, r27
    7944:	41 f4       	brne	.+16     	; 0x7956 <_ZN4Wind19calcWindSpeedAndDirEv+0x2c8>
    7946:	80 92 4a 11 	sts	0x114A, r8
    794a:	90 92 4b 11 	sts	0x114B, r9
    794e:	a0 92 4c 11 	sts	0x114C, r10
    7952:	b0 92 4d 11 	sts	0x114D, r11
		wsDiff = (wdTemp * 100ul) / wdAvg;
    7956:	40 90 4a 11 	lds	r4, 0x114A
    795a:	50 90 4b 11 	lds	r5, 0x114B
    795e:	60 90 4c 11 	lds	r6, 0x114C
    7962:	70 90 4d 11 	lds	r7, 0x114D
    7966:	a4 e6       	ldi	r26, 0x64	; 100
    7968:	b0 e0       	ldi	r27, 0x00	; 0
    796a:	a5 01       	movw	r20, r10
    796c:	94 01       	movw	r18, r8
    796e:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7972:	a3 01       	movw	r20, r6
    7974:	92 01       	movw	r18, r4
    7976:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    797a:	20 93 52 11 	sts	0x1152, r18
    797e:	30 93 53 11 	sts	0x1153, r19
    7982:	40 93 54 11 	sts	0x1154, r20
    7986:	50 93 55 11 	sts	0x1155, r21
		if (wsDiff < 90ul) {
    798a:	2a 35       	cpi	r18, 0x5A	; 90
    798c:	31 05       	cpc	r19, r1
    798e:	41 05       	cpc	r20, r1
    7990:	51 05       	cpc	r21, r1
    7992:	18 f4       	brcc	.+6      	; 0x799a <_ZN4Wind19calcWindSpeedAndDirEv+0x30c>
			wdAvg = (wdAvg * 9ul) / 10ul;
    7994:	a9 e0       	ldi	r26, 0x09	; 9
    7996:	b0 e0       	ldi	r27, 0x00	; 0
    7998:	07 c0       	rjmp	.+14     	; 0x79a8 <_ZN4Wind19calcWindSpeedAndDirEv+0x31a>
		} else if (wsDiff > 110ul) {
    799a:	2f 36       	cpi	r18, 0x6F	; 111
    799c:	31 05       	cpc	r19, r1
    799e:	41 05       	cpc	r20, r1
    79a0:	51 05       	cpc	r21, r1
    79a2:	a8 f0       	brcs	.+42     	; 0x79ce <_ZN4Wind19calcWindSpeedAndDirEv+0x340>
			wdAvg = (wdAvg * 11ul) / 10ul;
    79a4:	ab e0       	ldi	r26, 0x0B	; 11
    79a6:	b0 e0       	ldi	r27, 0x00	; 0
    79a8:	a3 01       	movw	r20, r6
    79aa:	92 01       	movw	r18, r4
    79ac:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    79b0:	2a e0       	ldi	r18, 0x0A	; 10
    79b2:	30 e0       	ldi	r19, 0x00	; 0
    79b4:	40 e0       	ldi	r20, 0x00	; 0
    79b6:	50 e0       	ldi	r21, 0x00	; 0
    79b8:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    79bc:	20 93 4a 11 	sts	0x114A, r18
    79c0:	30 93 4b 11 	sts	0x114B, r19
    79c4:	40 93 4c 11 	sts	0x114C, r20
    79c8:	50 93 4d 11 	sts	0x114D, r21
    79cc:	47 c0       	rjmp	.+142    	; 0x7a5c <_ZN4Wind19calcWindSpeedAndDirEv+0x3ce>
		} else {
			//average
			if (wsNow < 250000) {
    79ce:	e0 e9       	ldi	r30, 0x90	; 144
    79d0:	ce 16       	cp	r12, r30
    79d2:	e0 ed       	ldi	r30, 0xD0	; 208
    79d4:	de 06       	cpc	r13, r30
    79d6:	e3 e0       	ldi	r30, 0x03	; 3
    79d8:	ee 06       	cpc	r14, r30
    79da:	f1 04       	cpc	r15, r1
    79dc:	78 f4       	brcc	.+30     	; 0x79fc <_ZN4Wind19calcWindSpeedAndDirEv+0x36e>
				wdAvg = ((10ul * wdAvg) + wdTemp) / 11ul;
    79de:	aa e0       	ldi	r26, 0x0A	; 10
    79e0:	b0 e0       	ldi	r27, 0x00	; 0
    79e2:	a3 01       	movw	r20, r6
    79e4:	92 01       	movw	r18, r4
    79e6:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    79ea:	68 0d       	add	r22, r8
    79ec:	79 1d       	adc	r23, r9
    79ee:	8a 1d       	adc	r24, r10
    79f0:	9b 1d       	adc	r25, r11
    79f2:	2b e0       	ldi	r18, 0x0B	; 11
    79f4:	30 e0       	ldi	r19, 0x00	; 0
    79f6:	40 e0       	ldi	r20, 0x00	; 0
    79f8:	50 e0       	ldi	r21, 0x00	; 0
    79fa:	de cf       	rjmp	.-68     	; 0x79b8 <_ZN4Wind19calcWindSpeedAndDirEv+0x32a>
			} else if (wsNow < 500000) {
    79fc:	f0 e2       	ldi	r31, 0x20	; 32
    79fe:	cf 16       	cp	r12, r31
    7a00:	f1 ea       	ldi	r31, 0xA1	; 161
    7a02:	df 06       	cpc	r13, r31
    7a04:	f7 e0       	ldi	r31, 0x07	; 7
    7a06:	ef 06       	cpc	r14, r31
    7a08:	f1 04       	cpc	r15, r1
    7a0a:	78 f4       	brcc	.+30     	; 0x7a2a <_ZN4Wind19calcWindSpeedAndDirEv+0x39c>
				wdAvg = ((6ul * wdAvg) + wdTemp) / 7ul;
    7a0c:	a6 e0       	ldi	r26, 0x06	; 6
    7a0e:	b0 e0       	ldi	r27, 0x00	; 0
    7a10:	a3 01       	movw	r20, r6
    7a12:	92 01       	movw	r18, r4
    7a14:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7a18:	68 0d       	add	r22, r8
    7a1a:	79 1d       	adc	r23, r9
    7a1c:	8a 1d       	adc	r24, r10
    7a1e:	9b 1d       	adc	r25, r11
    7a20:	27 e0       	ldi	r18, 0x07	; 7
    7a22:	30 e0       	ldi	r19, 0x00	; 0
    7a24:	40 e0       	ldi	r20, 0x00	; 0
    7a26:	50 e0       	ldi	r21, 0x00	; 0
    7a28:	c7 cf       	rjmp	.-114    	; 0x79b8 <_ZN4Wind19calcWindSpeedAndDirEv+0x32a>
			} else {
				wdAvg = ((3ul * wdAvg) + wdTemp) / 4ul;
    7a2a:	a3 e0       	ldi	r26, 0x03	; 3
    7a2c:	b0 e0       	ldi	r27, 0x00	; 0
    7a2e:	a3 01       	movw	r20, r6
    7a30:	92 01       	movw	r18, r4
    7a32:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7a36:	68 0d       	add	r22, r8
    7a38:	79 1d       	adc	r23, r9
    7a3a:	8a 1d       	adc	r24, r10
    7a3c:	9b 1d       	adc	r25, r11
    7a3e:	22 e0       	ldi	r18, 0x02	; 2
    7a40:	96 95       	lsr	r25
    7a42:	87 95       	ror	r24
    7a44:	77 95       	ror	r23
    7a46:	67 95       	ror	r22
    7a48:	2a 95       	dec	r18
    7a4a:	d1 f7       	brne	.-12     	; 0x7a40 <_ZN4Wind19calcWindSpeedAndDirEv+0x3b2>
    7a4c:	60 93 4a 11 	sts	0x114A, r22
    7a50:	70 93 4b 11 	sts	0x114B, r23
    7a54:	80 93 4c 11 	sts	0x114C, r24
    7a58:	90 93 4d 11 	sts	0x114D, r25
			}
		}
		//convert to degrees

		windDirDur = (wdAvg * 360ul) / windSpeedDur;
    7a5c:	c0 90 66 11 	lds	r12, 0x1166
    7a60:	d0 90 67 11 	lds	r13, 0x1167
    7a64:	e0 90 68 11 	lds	r14, 0x1168
    7a68:	f0 90 69 11 	lds	r15, 0x1169
    7a6c:	20 91 4a 11 	lds	r18, 0x114A
    7a70:	30 91 4b 11 	lds	r19, 0x114B
    7a74:	40 91 4c 11 	lds	r20, 0x114C
    7a78:	50 91 4d 11 	lds	r21, 0x114D
    7a7c:	a8 e6       	ldi	r26, 0x68	; 104
    7a7e:	b1 e0       	ldi	r27, 0x01	; 1
    7a80:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7a84:	a7 01       	movw	r20, r14
    7a86:	96 01       	movw	r18, r12
    7a88:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    7a8c:	20 93 62 11 	sts	0x1162, r18
    7a90:	30 93 63 11 	sts	0x1163, r19
    7a94:	40 93 64 11 	sts	0x1164, r20
    7a98:	50 93 65 11 	sts	0x1165, r21
	/*	Serial.print(", wdAvg=");
		Serial.println(wdAvg);*/

		dirList.addValue(windDirDur);
    7a9c:	c0 90 62 11 	lds	r12, 0x1162
    7aa0:	d0 90 63 11 	lds	r13, 0x1163
    7aa4:	e0 90 64 11 	lds	r14, 0x1164
    7aa8:	f0 90 65 11 	lds	r15, 0x1165

		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
    7aac:	80 91 3d 11 	lds	r24, 0x113D
    7ab0:	8f 5f       	subi	r24, 0xFF	; 255
    7ab2:	80 93 3d 11 	sts	0x113D, r24
			if (currentSize<size){
    7ab6:	40 91 3c 11 	lds	r20, 0x113C
    7aba:	60 91 3b 11 	lds	r22, 0x113B
    7abe:	20 91 39 11 	lds	r18, 0x1139
    7ac2:	30 91 3a 11 	lds	r19, 0x113A
    7ac6:	46 17       	cp	r20, r22
    7ac8:	98 f4       	brcc	.+38     	; 0x7af0 <_ZN4Wind19calcWindSpeedAndDirEv+0x462>
				values[currentSize++] = value;
    7aca:	f9 01       	movw	r30, r18
    7acc:	82 e0       	ldi	r24, 0x02	; 2
    7ace:	48 9f       	mul	r20, r24
    7ad0:	e0 0d       	add	r30, r0
    7ad2:	f1 1d       	adc	r31, r1
    7ad4:	11 24       	eor	r1, r1
    7ad6:	d1 82       	std	Z+1, r13	; 0x01
    7ad8:	c0 82       	st	Z, r12
    7ada:	64 2f       	mov	r22, r20
    7adc:	6f 5f       	subi	r22, 0xFF	; 255
    7ade:	60 93 3c 11 	sts	0x113C, r22
				currentIndex = currentIndex % currentSize;
    7ae2:	80 91 3d 11 	lds	r24, 0x113D
    7ae6:	0e 94 fe 44 	call	0x89fc	; 0x89fc <__udivmodqi4>
    7aea:	90 93 3d 11 	sts	0x113D, r25
    7aee:	0c c0       	rjmp	.+24     	; 0x7b08 <_ZN4Wind19calcWindSpeedAndDirEv+0x47a>
			}else{
				currentIndex = currentIndex % size;
    7af0:	0e 94 fe 44 	call	0x89fc	; 0x89fc <__udivmodqi4>
    7af4:	90 93 3d 11 	sts	0x113D, r25
				values[currentIndex] = value; 
    7af8:	f9 01       	movw	r30, r18
    7afa:	a2 e0       	ldi	r26, 0x02	; 2
    7afc:	9a 9f       	mul	r25, r26
    7afe:	e0 0d       	add	r30, r0
    7b00:	f1 1d       	adc	r31, r1
    7b02:	11 24       	eor	r1, r1
    7b04:	d1 82       	std	Z+1, r13	; 0x01
    7b06:	c0 82       	st	Z, r12
	//Serial.print(",wsDiff,");
	//Serial.print(wsDiff);
	//Serial.print(",wdDirDir,");
	//Serial.println(windDirDur);

}
    7b08:	0f 90       	pop	r0
    7b0a:	0f 90       	pop	r0
    7b0c:	0f 90       	pop	r0
    7b0e:	0f 90       	pop	r0
    7b10:	df 91       	pop	r29
    7b12:	cf 91       	pop	r28
    7b14:	ff 90       	pop	r15
    7b16:	ef 90       	pop	r14
    7b18:	df 90       	pop	r13
    7b1a:	cf 90       	pop	r12
    7b1c:	bf 90       	pop	r11
    7b1e:	af 90       	pop	r10
    7b20:	9f 90       	pop	r9
    7b22:	8f 90       	pop	r8
    7b24:	7f 90       	pop	r7
    7b26:	6f 90       	pop	r6
    7b28:	5f 90       	pop	r5
    7b2a:	4f 90       	pop	r4
    7b2c:	08 95       	ret

00007b2e <_ZN4Wind12calcWindDataEv>:

/*
 * Calculates wind data. Direction is apparent, 0-360 deg off the bow, clockwise, in degrees.
 */
void Wind::calcWindData() {
    7b2e:	4f 92       	push	r4
    7b30:	5f 92       	push	r5
    7b32:	6f 92       	push	r6
    7b34:	7f 92       	push	r7
    7b36:	8f 92       	push	r8
    7b38:	9f 92       	push	r9
    7b3a:	af 92       	push	r10
    7b3c:	bf 92       	push	r11
    7b3e:	cf 92       	push	r12
    7b40:	df 92       	push	r13
    7b42:	ef 92       	push	r14
    7b44:	ff 92       	push	r15
    7b46:	0f 93       	push	r16
    7b48:	1f 93       	push	r17
    7b4a:	cf 93       	push	r28
    7b4c:	df 93       	push	r29
    7b4e:	00 d0       	rcall	.+0      	; 0x7b50 <_ZN4Wind12calcWindDataEv+0x22>
    7b50:	00 d0       	rcall	.+0      	; 0x7b52 <_ZN4Wind12calcWindDataEv+0x24>
    7b52:	cd b7       	in	r28, 0x3d	; 61
    7b54:	de b7       	in	r29, 0x3e	; 62
    7b56:	8c 01       	movw	r16, r24

//fix rollover
	if (millis() < lastSpeedPulse) lastSpeedPulse = millis();
    7b58:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7b5c:	c0 90 82 11 	lds	r12, 0x1182
    7b60:	d0 90 83 11 	lds	r13, 0x1183
    7b64:	e0 90 84 11 	lds	r14, 0x1184
    7b68:	f0 90 85 11 	lds	r15, 0x1185
    7b6c:	6c 15       	cp	r22, r12
    7b6e:	7d 05       	cpc	r23, r13
    7b70:	8e 05       	cpc	r24, r14
    7b72:	9f 05       	cpc	r25, r15
    7b74:	50 f4       	brcc	.+20     	; 0x7b8a <_ZN4Wind12calcWindDataEv+0x5c>
    7b76:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7b7a:	60 93 82 11 	sts	0x1182, r22
    7b7e:	70 93 83 11 	sts	0x1183, r23
    7b82:	80 93 84 11 	sts	0x1184, r24
    7b86:	90 93 85 11 	sts	0x1185, r25
	if (millis() < lastDirPulse) lastDirPulse = millis();
    7b8a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7b8e:	c0 90 7e 11 	lds	r12, 0x117E
    7b92:	d0 90 7f 11 	lds	r13, 0x117F
    7b96:	e0 90 80 11 	lds	r14, 0x1180
    7b9a:	f0 90 81 11 	lds	r15, 0x1181
    7b9e:	6c 15       	cp	r22, r12
    7ba0:	7d 05       	cpc	r23, r13
    7ba2:	8e 05       	cpc	r24, r14
    7ba4:	9f 05       	cpc	r25, r15
    7ba6:	50 f4       	brcc	.+20     	; 0x7bbc <_ZN4Wind12calcWindDataEv+0x8e>
    7ba8:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7bac:	60 93 7e 11 	sts	0x117E, r22
    7bb0:	70 93 7f 11 	sts	0x117F, r23
    7bb4:	80 93 80 11 	sts	0x1180, r24
    7bb8:	90 93 81 11 	sts	0x1181, r25

	model->setWindLastUpdate(millis());
    7bbc:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7bc0:	ab 01       	movw	r20, r22
    7bc2:	bc 01       	movw	r22, r24
    7bc4:	d8 01       	movw	r26, r16
    7bc6:	8d 91       	ld	r24, X+
    7bc8:	9c 91       	ld	r25, X
    7bca:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <_ZN14FreeBoardModel17setWindLastUpdateEm>

//convert to windAverage
	if (millis() - lastSpeedPulse > 3000) {
    7bce:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <millis>
    7bd2:	c0 90 82 11 	lds	r12, 0x1182
    7bd6:	d0 90 83 11 	lds	r13, 0x1183
    7bda:	e0 90 84 11 	lds	r14, 0x1184
    7bde:	f0 90 85 11 	lds	r15, 0x1185
    7be2:	6c 19       	sub	r22, r12
    7be4:	7d 09       	sbc	r23, r13
    7be6:	8e 09       	sbc	r24, r14
    7be8:	9f 09       	sbc	r25, r15
    7bea:	69 3b       	cpi	r22, 0xB9	; 185
    7bec:	7b 40       	sbci	r23, 0x0B	; 11
    7bee:	81 05       	cpc	r24, r1
    7bf0:	91 05       	cpc	r25, r1
    7bf2:	e0 f0       	brcs	.+56     	; 0x7c2c <_ZN4Wind12calcWindDataEv+0xfe>
		//no rotation, no wind
		model->setWindAverage(0);
    7bf4:	40 e0       	ldi	r20, 0x00	; 0
    7bf6:	50 e0       	ldi	r21, 0x00	; 0
    7bf8:	ba 01       	movw	r22, r20
    7bfa:	f8 01       	movw	r30, r16
    7bfc:	80 81       	ld	r24, Z
    7bfe:	91 81       	ldd	r25, Z+1	; 0x01
		if (dir < 0) {
			dir = 360 + dir;
		}
		model->setWindApparentDir(dir);
	}
}
    7c00:	0f 90       	pop	r0
    7c02:	0f 90       	pop	r0
    7c04:	0f 90       	pop	r0
    7c06:	0f 90       	pop	r0
    7c08:	df 91       	pop	r29
    7c0a:	cf 91       	pop	r28
    7c0c:	1f 91       	pop	r17
    7c0e:	0f 91       	pop	r16
    7c10:	ff 90       	pop	r15
    7c12:	ef 90       	pop	r14
    7c14:	df 90       	pop	r13
    7c16:	cf 90       	pop	r12
    7c18:	bf 90       	pop	r11
    7c1a:	af 90       	pop	r10
    7c1c:	9f 90       	pop	r9
    7c1e:	8f 90       	pop	r8
    7c20:	7f 90       	pop	r7
    7c22:	6f 90       	pop	r6
    7c24:	5f 90       	pop	r5
    7c26:	4f 90       	pop	r4
	model->setWindLastUpdate(millis());

//convert to windAverage
	if (millis() - lastSpeedPulse > 3000) {
		//no rotation, no wind
		model->setWindAverage(0);
    7c28:	0c 94 68 2e 	jmp	0x5cd0	; 0x5cd0 <_ZN14FreeBoardModel14setWindAverageEf>
		//Serial.println("Wind speed reset");
	} else {
		//windSpeedDur is type long -  max sensor value = 3000000 micros
		if (windSpeedDur > 0) {
    7c2c:	80 91 66 11 	lds	r24, 0x1166
    7c30:	90 91 67 11 	lds	r25, 0x1167
    7c34:	a0 91 68 11 	lds	r26, 0x1168
    7c38:	b0 91 69 11 	lds	r27, 0x1169
    7c3c:	89 2b       	or	r24, r25
    7c3e:	8a 2b       	or	r24, r26
    7c40:	8b 2b       	or	r24, r27
    7c42:	09 f4       	brne	.+2      	; 0x7c46 <_ZN4Wind12calcWindDataEv+0x118>
    7c44:	4b c1       	rjmp	.+662    	; 0x7edc <_ZN4Wind12calcWindDataEv+0x3ae>
			// arduino long = -2,147,483,648 to 2,147,483,647
			//1000 millis = 1 rps - this is 1000 x rps (for int arithmetic) range 333 - 33333
			windSpeedRps = 100000000 / windSpeedDur;
    7c46:	20 91 66 11 	lds	r18, 0x1166
    7c4a:	30 91 67 11 	lds	r19, 0x1167
    7c4e:	40 91 68 11 	lds	r20, 0x1168
    7c52:	50 91 69 11 	lds	r21, 0x1169
    7c56:	60 e0       	ldi	r22, 0x00	; 0
    7c58:	71 ee       	ldi	r23, 0xE1	; 225
    7c5a:	85 ef       	ldi	r24, 0xF5	; 245
    7c5c:	95 e0       	ldi	r25, 0x05	; 5
    7c5e:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    7c62:	20 93 7a 11 	sts	0x117A, r18
    7c66:	30 93 7b 11 	sts	0x117B, r19
    7c6a:	40 93 7c 11 	sts	0x117C, r20
    7c6e:	50 93 7d 11 	sts	0x117D, r21
			//NOTE:converted multipliers to KNTS
			//need to avoid div/0 errors
			if (windSpeedRps < 323) {
    7c72:	40 91 7a 11 	lds	r20, 0x117A
    7c76:	50 91 7b 11 	lds	r21, 0x117B
    7c7a:	60 91 7c 11 	lds	r22, 0x117C
    7c7e:	70 91 7d 11 	lds	r23, 0x117D
    7c82:	d8 01       	movw	r26, r16
    7c84:	ed 91       	ld	r30, X+
    7c86:	fc 91       	ld	r31, X
    7c88:	43 34       	cpi	r20, 0x43	; 67
    7c8a:	51 40       	sbci	r21, 0x01	; 1
    7c8c:	61 05       	cpc	r22, r1
    7c8e:	71 05       	cpc	r23, r1
    7c90:	0c f0       	brlt	.+2      	; 0x7c94 <_ZN4Wind12calcWindDataEv+0x166>
    7c92:	6a c0       	rjmp	.+212    	; 0x7d68 <_ZN4Wind12calcWindDataEv+0x23a>
				//need extra accuracy here, zero is very unlikely
				windSpeedRps = windSpeedRps * 10;
    7c94:	20 91 7a 11 	lds	r18, 0x117A
    7c98:	30 91 7b 11 	lds	r19, 0x117B
    7c9c:	40 91 7c 11 	lds	r20, 0x117C
    7ca0:	50 91 7d 11 	lds	r21, 0x117D
    7ca4:	aa e0       	ldi	r26, 0x0A	; 10
    7ca6:	b0 e0       	ldi	r27, 0x00	; 0
    7ca8:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7cac:	60 93 7a 11 	sts	0x117A, r22
    7cb0:	70 93 7b 11 	sts	0x117B, r23
    7cb4:	80 93 7c 11 	sts	0x117C, r24
    7cb8:	90 93 7d 11 	sts	0x117D, r25
				model->setWindAverage(((((windSpeedRps * windSpeedRps) / -105) + ((25476 * windSpeedRps) / 100) - 12260)) / model->getWindFactor() * 10);
    7cbc:	20 91 7a 11 	lds	r18, 0x117A
    7cc0:	30 91 7b 11 	lds	r19, 0x117B
    7cc4:	40 91 7c 11 	lds	r20, 0x117C
    7cc8:	50 91 7d 11 	lds	r21, 0x117D
    7ccc:	c0 90 7a 11 	lds	r12, 0x117A
    7cd0:	d0 90 7b 11 	lds	r13, 0x117B
    7cd4:	e0 90 7c 11 	lds	r14, 0x117C
    7cd8:	f0 90 7d 11 	lds	r15, 0x117D
    7cdc:	40 90 7a 11 	lds	r4, 0x117A
    7ce0:	50 90 7b 11 	lds	r5, 0x117B
    7ce4:	60 90 7c 11 	lds	r6, 0x117C
    7ce8:	70 90 7d 11 	lds	r7, 0x117D
    7cec:	cf 01       	movw	r24, r30
    7cee:	29 83       	std	Y+1, r18	; 0x01
    7cf0:	3a 83       	std	Y+2, r19	; 0x02
    7cf2:	4b 83       	std	Y+3, r20	; 0x03
    7cf4:	5c 83       	std	Y+4, r21	; 0x04
    7cf6:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <_ZN14FreeBoardModel13getWindFactorEv>
    7cfa:	4b 01       	movw	r8, r22
    7cfc:	5c 01       	movw	r10, r24
    7cfe:	29 81       	ldd	r18, Y+1	; 0x01
    7d00:	3a 81       	ldd	r19, Y+2	; 0x02
    7d02:	4b 81       	ldd	r20, Y+3	; 0x03
    7d04:	5c 81       	ldd	r21, Y+4	; 0x04
    7d06:	c7 01       	movw	r24, r14
    7d08:	b6 01       	movw	r22, r12
    7d0a:	0e 94 ee 44 	call	0x89dc	; 0x89dc <__mulsi3>
    7d0e:	27 e9       	ldi	r18, 0x97	; 151
    7d10:	3f ef       	ldi	r19, 0xFF	; 255
    7d12:	4f ef       	ldi	r20, 0xFF	; 255
    7d14:	5f ef       	ldi	r21, 0xFF	; 255
    7d16:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divmodsi4>
    7d1a:	69 01       	movw	r12, r18
    7d1c:	7a 01       	movw	r14, r20
    7d1e:	a4 e8       	ldi	r26, 0x84	; 132
    7d20:	b3 e6       	ldi	r27, 0x63	; 99
    7d22:	a3 01       	movw	r20, r6
    7d24:	92 01       	movw	r18, r4
    7d26:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7d2a:	24 e6       	ldi	r18, 0x64	; 100
    7d2c:	30 e0       	ldi	r19, 0x00	; 0
    7d2e:	40 e0       	ldi	r20, 0x00	; 0
    7d30:	50 e0       	ldi	r21, 0x00	; 0
    7d32:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divmodsi4>
    7d36:	c2 0e       	add	r12, r18
    7d38:	d3 1e       	adc	r13, r19
    7d3a:	e4 1e       	adc	r14, r20
    7d3c:	f5 1e       	adc	r15, r21
    7d3e:	e4 ee       	ldi	r30, 0xE4	; 228
    7d40:	ce 1a       	sub	r12, r30
    7d42:	ef e2       	ldi	r30, 0x2F	; 47
    7d44:	de 0a       	sbc	r13, r30
    7d46:	e1 08       	sbc	r14, r1
    7d48:	f1 08       	sbc	r15, r1
    7d4a:	c7 01       	movw	r24, r14
    7d4c:	b6 01       	movw	r22, r12
    7d4e:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    7d52:	a5 01       	movw	r20, r10
    7d54:	94 01       	movw	r18, r8
    7d56:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    7d5a:	20 e0       	ldi	r18, 0x00	; 0
    7d5c:	30 e0       	ldi	r19, 0x00	; 0
    7d5e:	40 e2       	ldi	r20, 0x20	; 32
    7d60:	51 e4       	ldi	r21, 0x41	; 65
    7d62:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    7d66:	5d c0       	rjmp	.+186    	; 0x7e22 <_ZN4Wind12calcWindDataEv+0x2f4>
			} else if (windSpeedRps < 5436) {
    7d68:	80 91 7a 11 	lds	r24, 0x117A
    7d6c:	90 91 7b 11 	lds	r25, 0x117B
    7d70:	a0 91 7c 11 	lds	r26, 0x117C
    7d74:	b0 91 7d 11 	lds	r27, 0x117D
    7d78:	8c 33       	cpi	r24, 0x3C	; 60
    7d7a:	95 41       	sbci	r25, 0x15	; 21
    7d7c:	a1 05       	cpc	r26, r1
    7d7e:	b1 05       	cpc	r27, r1
    7d80:	0c f0       	brlt	.+2      	; 0x7d84 <_ZN4Wind12calcWindDataEv+0x256>
    7d82:	55 c0       	rjmp	.+170    	; 0x7e2e <_ZN4Wind12calcWindDataEv+0x300>
				//rps2 = min 10426441, max 30,864,197, cant get div/0 here?
				model->setWindAverage((((windSpeedRps * windSpeedRps) / 2222) + ((19099 * windSpeedRps) / 100) + 9638) / model->getWindFactor());
    7d84:	20 91 7a 11 	lds	r18, 0x117A
    7d88:	30 91 7b 11 	lds	r19, 0x117B
    7d8c:	40 91 7c 11 	lds	r20, 0x117C
    7d90:	50 91 7d 11 	lds	r21, 0x117D
    7d94:	c0 90 7a 11 	lds	r12, 0x117A
    7d98:	d0 90 7b 11 	lds	r13, 0x117B
    7d9c:	e0 90 7c 11 	lds	r14, 0x117C
    7da0:	f0 90 7d 11 	lds	r15, 0x117D
    7da4:	40 90 7a 11 	lds	r4, 0x117A
    7da8:	50 90 7b 11 	lds	r5, 0x117B
    7dac:	60 90 7c 11 	lds	r6, 0x117C
    7db0:	70 90 7d 11 	lds	r7, 0x117D
    7db4:	cf 01       	movw	r24, r30
    7db6:	29 83       	std	Y+1, r18	; 0x01
    7db8:	3a 83       	std	Y+2, r19	; 0x02
    7dba:	4b 83       	std	Y+3, r20	; 0x03
    7dbc:	5c 83       	std	Y+4, r21	; 0x04
    7dbe:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <_ZN14FreeBoardModel13getWindFactorEv>
    7dc2:	4b 01       	movw	r8, r22
    7dc4:	5c 01       	movw	r10, r24
    7dc6:	29 81       	ldd	r18, Y+1	; 0x01
    7dc8:	3a 81       	ldd	r19, Y+2	; 0x02
    7dca:	4b 81       	ldd	r20, Y+3	; 0x03
    7dcc:	5c 81       	ldd	r21, Y+4	; 0x04
    7dce:	c7 01       	movw	r24, r14
    7dd0:	b6 01       	movw	r22, r12
    7dd2:	0e 94 ee 44 	call	0x89dc	; 0x89dc <__mulsi3>
    7dd6:	2e ea       	ldi	r18, 0xAE	; 174
    7dd8:	38 e0       	ldi	r19, 0x08	; 8
    7dda:	40 e0       	ldi	r20, 0x00	; 0
    7ddc:	50 e0       	ldi	r21, 0x00	; 0
    7dde:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divmodsi4>
    7de2:	69 01       	movw	r12, r18
    7de4:	7a 01       	movw	r14, r20
    7de6:	ab e9       	ldi	r26, 0x9B	; 155
    7de8:	ba e4       	ldi	r27, 0x4A	; 74
    7dea:	a3 01       	movw	r20, r6
    7dec:	92 01       	movw	r18, r4
    7dee:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7df2:	24 e6       	ldi	r18, 0x64	; 100
    7df4:	30 e0       	ldi	r19, 0x00	; 0
    7df6:	40 e0       	ldi	r20, 0x00	; 0
    7df8:	50 e0       	ldi	r21, 0x00	; 0
    7dfa:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divmodsi4>
    7dfe:	c2 0e       	add	r12, r18
    7e00:	d3 1e       	adc	r13, r19
    7e02:	e4 1e       	adc	r14, r20
    7e04:	f5 1e       	adc	r15, r21
    7e06:	86 ea       	ldi	r24, 0xA6	; 166
    7e08:	c8 0e       	add	r12, r24
    7e0a:	85 e2       	ldi	r24, 0x25	; 37
    7e0c:	d8 1e       	adc	r13, r24
    7e0e:	e1 1c       	adc	r14, r1
    7e10:	f1 1c       	adc	r15, r1
    7e12:	c7 01       	movw	r24, r14
    7e14:	b6 01       	movw	r22, r12
    7e16:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    7e1a:	a5 01       	movw	r20, r10
    7e1c:	94 01       	movw	r18, r8
    7e1e:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    7e22:	ab 01       	movw	r20, r22
    7e24:	bc 01       	movw	r22, r24
    7e26:	d8 01       	movw	r26, r16
    7e28:	8d 91       	ld	r24, X+
    7e2a:	9c 91       	ld	r25, X
    7e2c:	55 c0       	rjmp	.+170    	; 0x7ed8 <_ZN4Wind12calcWindDataEv+0x3aa>
			} else {
				model->setWindAverage(((((windSpeedRps * windSpeedRps) / 1042) * 100) - (8314700 * windSpeedRps) + 2866500) / model->getWindFactor());
    7e2e:	20 91 7a 11 	lds	r18, 0x117A
    7e32:	30 91 7b 11 	lds	r19, 0x117B
    7e36:	40 91 7c 11 	lds	r20, 0x117C
    7e3a:	50 91 7d 11 	lds	r21, 0x117D
    7e3e:	c0 90 7a 11 	lds	r12, 0x117A
    7e42:	d0 90 7b 11 	lds	r13, 0x117B
    7e46:	e0 90 7c 11 	lds	r14, 0x117C
    7e4a:	f0 90 7d 11 	lds	r15, 0x117D
    7e4e:	40 90 7a 11 	lds	r4, 0x117A
    7e52:	50 90 7b 11 	lds	r5, 0x117B
    7e56:	60 90 7c 11 	lds	r6, 0x117C
    7e5a:	70 90 7d 11 	lds	r7, 0x117D
    7e5e:	cf 01       	movw	r24, r30
    7e60:	29 83       	std	Y+1, r18	; 0x01
    7e62:	3a 83       	std	Y+2, r19	; 0x02
    7e64:	4b 83       	std	Y+3, r20	; 0x03
    7e66:	5c 83       	std	Y+4, r21	; 0x04
    7e68:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <_ZN14FreeBoardModel13getWindFactorEv>
    7e6c:	4b 01       	movw	r8, r22
    7e6e:	5c 01       	movw	r10, r24
    7e70:	29 81       	ldd	r18, Y+1	; 0x01
    7e72:	3a 81       	ldd	r19, Y+2	; 0x02
    7e74:	4b 81       	ldd	r20, Y+3	; 0x03
    7e76:	5c 81       	ldd	r21, Y+4	; 0x04
    7e78:	c7 01       	movw	r24, r14
    7e7a:	b6 01       	movw	r22, r12
    7e7c:	0e 94 ee 44 	call	0x89dc	; 0x89dc <__mulsi3>
    7e80:	22 e1       	ldi	r18, 0x12	; 18
    7e82:	34 e0       	ldi	r19, 0x04	; 4
    7e84:	40 e0       	ldi	r20, 0x00	; 0
    7e86:	50 e0       	ldi	r21, 0x00	; 0
    7e88:	0e 94 40 45 	call	0x8a80	; 0x8a80 <__divmodsi4>
    7e8c:	a4 e6       	ldi	r26, 0x64	; 100
    7e8e:	b0 e0       	ldi	r27, 0x00	; 0
    7e90:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    7e94:	6b 01       	movw	r12, r22
    7e96:	7c 01       	movw	r14, r24
    7e98:	a3 01       	movw	r20, r6
    7e9a:	92 01       	movw	r18, r4
    7e9c:	64 eb       	ldi	r22, 0xB4	; 180
    7e9e:	70 e2       	ldi	r23, 0x20	; 32
    7ea0:	81 e8       	ldi	r24, 0x81	; 129
    7ea2:	9f ef       	ldi	r25, 0xFF	; 255
    7ea4:	0e 94 ee 44 	call	0x89dc	; 0x89dc <__mulsi3>
    7ea8:	c6 0e       	add	r12, r22
    7eaa:	d7 1e       	adc	r13, r23
    7eac:	e8 1e       	adc	r14, r24
    7eae:	f9 1e       	adc	r15, r25
    7eb0:	b4 e4       	ldi	r27, 0x44	; 68
    7eb2:	cb 0e       	add	r12, r27
    7eb4:	bd eb       	ldi	r27, 0xBD	; 189
    7eb6:	db 1e       	adc	r13, r27
    7eb8:	bb e2       	ldi	r27, 0x2B	; 43
    7eba:	eb 1e       	adc	r14, r27
    7ebc:	f1 1c       	adc	r15, r1
    7ebe:	c7 01       	movw	r24, r14
    7ec0:	b6 01       	movw	r22, r12
    7ec2:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    7ec6:	a5 01       	movw	r20, r10
    7ec8:	94 01       	movw	r18, r8
    7eca:	0e 94 12 42 	call	0x8424	; 0x8424 <__divsf3>
    7ece:	ab 01       	movw	r20, r22
    7ed0:	bc 01       	movw	r22, r24
    7ed2:	f8 01       	movw	r30, r16
    7ed4:	80 81       	ld	r24, Z
    7ed6:	91 81       	ldd	r25, Z+1	; 0x01
    7ed8:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <_ZN14FreeBoardModel14setWindAverageEf>
			}
		}
		//update gusts
		if (model->getWindAverage() > model->getWindMax()) model->setWindMax(model->getWindAverage());
    7edc:	d8 01       	movw	r26, r16
    7ede:	8d 91       	ld	r24, X+
    7ee0:	9c 91       	ld	r25, X
    7ee2:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN14FreeBoardModel14getWindAverageEv>
    7ee6:	6b 01       	movw	r12, r22
    7ee8:	7c 01       	movw	r14, r24
    7eea:	f8 01       	movw	r30, r16
    7eec:	80 81       	ld	r24, Z
    7eee:	91 81       	ldd	r25, Z+1	; 0x01
    7ef0:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZN14FreeBoardModel10getWindMaxEv>
    7ef4:	bc 01       	movw	r22, r24
    7ef6:	88 27       	eor	r24, r24
    7ef8:	77 fd       	sbrc	r23, 7
    7efa:	80 95       	com	r24
    7efc:	98 2f       	mov	r25, r24
    7efe:	0e 94 ad 42 	call	0x855a	; 0x855a <__floatsisf>
    7f02:	9b 01       	movw	r18, r22
    7f04:	ac 01       	movw	r20, r24
    7f06:	c7 01       	movw	r24, r14
    7f08:	b6 01       	movw	r22, r12
    7f0a:	0e 94 0e 44 	call	0x881c	; 0x881c <__gesf2>
    7f0e:	18 16       	cp	r1, r24
    7f10:	64 f4       	brge	.+24     	; 0x7f2a <_ZN4Wind12calcWindDataEv+0x3fc>
    7f12:	d8 01       	movw	r26, r16
    7f14:	8d 91       	ld	r24, X+
    7f16:	9c 91       	ld	r25, X
    7f18:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <_ZN14FreeBoardModel14getWindAverageEv>
    7f1c:	0e 94 7a 42 	call	0x84f4	; 0x84f4 <__fixsfsi>
    7f20:	f8 01       	movw	r30, r16
    7f22:	80 81       	ld	r24, Z
    7f24:	91 81       	ldd	r25, Z+1	; 0x01
    7f26:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <_ZN14FreeBoardModel10setWindMaxEi>

		// calc direction, degrees clockwise
		//should round to int, min 1
		int dir = (int) getRotationalAverage();
    7f2a:	c8 01       	movw	r24, r16
    7f2c:	0e 94 34 3a 	call	0x7468	; 0x7468 <_ZN4Wind20getRotationalAverageEv>
    7f30:	7c 01       	movw	r14, r24
		//limit to +-360, after adjust zero
		//C = A – B * (A / B)
		dir = (dir + model->getWindZeroOffset()); // %360;
    7f32:	d8 01       	movw	r26, r16
    7f34:	8d 91       	ld	r24, X+
    7f36:	9c 91       	ld	r25, X
    7f38:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <_ZN14FreeBoardModel17getWindZeroOffsetEv>
    7f3c:	8e 0d       	add	r24, r14
    7f3e:	9f 1d       	adc	r25, r15
		if (dir != 0) {
    7f40:	00 97       	sbiw	r24, 0x00	; 0
    7f42:	41 f0       	breq	.+16     	; 0x7f54 <_ZN4Wind12calcWindDataEv+0x426>
			dir = dir - 360 * (dir / 360);
    7f44:	68 e6       	ldi	r22, 0x68	; 104
    7f46:	71 e0       	ldi	r23, 0x01	; 1
    7f48:	0e 94 0a 45 	call	0x8a14	; 0x8a14 <__divmodhi4>
		}
		//if minus, then reverse to +ve
		if (dir < 0) {
    7f4c:	97 ff       	sbrs	r25, 7
    7f4e:	02 c0       	rjmp	.+4      	; 0x7f54 <_ZN4Wind12calcWindDataEv+0x426>
			dir = 360 + dir;
    7f50:	88 59       	subi	r24, 0x98	; 152
    7f52:	9e 4f       	sbci	r25, 0xFE	; 254
		}
		model->setWindApparentDir(dir);
    7f54:	bc 01       	movw	r22, r24
    7f56:	f8 01       	movw	r30, r16
    7f58:	80 81       	ld	r24, Z
    7f5a:	91 81       	ldd	r25, Z+1	; 0x01
	}
}
    7f5c:	0f 90       	pop	r0
    7f5e:	0f 90       	pop	r0
    7f60:	0f 90       	pop	r0
    7f62:	0f 90       	pop	r0
    7f64:	df 91       	pop	r29
    7f66:	cf 91       	pop	r28
    7f68:	1f 91       	pop	r17
    7f6a:	0f 91       	pop	r16
    7f6c:	ff 90       	pop	r15
    7f6e:	ef 90       	pop	r14
    7f70:	df 90       	pop	r13
    7f72:	cf 90       	pop	r12
    7f74:	bf 90       	pop	r11
    7f76:	af 90       	pop	r10
    7f78:	9f 90       	pop	r9
    7f7a:	8f 90       	pop	r8
    7f7c:	7f 90       	pop	r7
    7f7e:	6f 90       	pop	r6
    7f80:	5f 90       	pop	r5
    7f82:	4f 90       	pop	r4
		}
		//if minus, then reverse to +ve
		if (dir < 0) {
			dir = 360 + dir;
		}
		model->setWindApparentDir(dir);
    7f84:	0c 94 5c 2e 	jmp	0x5cb8	; 0x5cb8 <_ZN14FreeBoardModel18setWindApparentDirEi>

00007f88 <_GLOBAL__sub_I_lastSpeedPulse>:

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    7f88:	8e e3       	ldi	r24, 0x3E	; 62
    7f8a:	91 e1       	ldi	r25, 0x11	; 17
    7f8c:	90 93 3a 11 	sts	0x113A, r25
    7f90:	80 93 39 11 	sts	0x1139, r24
    7f94:	85 e0       	ldi	r24, 0x05	; 5
    7f96:	80 93 3b 11 	sts	0x113B, r24
			currentSize = 0; 
    7f9a:	10 92 3c 11 	sts	0x113C, r1
			currentIndex = 0; 
    7f9e:	10 92 3d 11 	sts	0x113D, r1
    7fa2:	08 95       	ret

00007fa4 <_Z10store_charhP11ring_buffer>:
    7fa4:	fb 01       	movw	r30, r22
    7fa6:	e0 5c       	subi	r30, 0xC0	; 192
    7fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    7faa:	20 81       	ld	r18, Z
    7fac:	31 81       	ldd	r19, Z+1	; 0x01
    7fae:	2f 5f       	subi	r18, 0xFF	; 255
    7fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    7fb2:	2f 73       	andi	r18, 0x3F	; 63
    7fb4:	33 27       	eor	r19, r19
    7fb6:	db 01       	movw	r26, r22
    7fb8:	ae 5b       	subi	r26, 0xBE	; 190
    7fba:	bf 4f       	sbci	r27, 0xFF	; 255
    7fbc:	4d 91       	ld	r20, X+
    7fbe:	5c 91       	ld	r21, X
    7fc0:	24 17       	cp	r18, r20
    7fc2:	35 07       	cpc	r19, r21
    7fc4:	39 f0       	breq	.+14     	; 0x7fd4 <_Z10store_charhP11ring_buffer+0x30>
    7fc6:	a0 81       	ld	r26, Z
    7fc8:	b1 81       	ldd	r27, Z+1	; 0x01
    7fca:	a6 0f       	add	r26, r22
    7fcc:	b7 1f       	adc	r27, r23
    7fce:	8c 93       	st	X, r24
    7fd0:	31 83       	std	Z+1, r19	; 0x01
    7fd2:	20 83       	st	Z, r18
    7fd4:	08 95       	ret

00007fd6 <_GLOBAL__sub_I_rx_buffer>:
    7fd6:	cf 93       	push	r28
    7fd8:	10 92 c7 06 	sts	0x06C7, r1
    7fdc:	10 92 c6 06 	sts	0x06C6, r1
    7fe0:	88 ee       	ldi	r24, 0xE8	; 232
    7fe2:	93 e0       	ldi	r25, 0x03	; 3
    7fe4:	a0 e0       	ldi	r26, 0x00	; 0
    7fe6:	b0 e0       	ldi	r27, 0x00	; 0
    7fe8:	80 93 c8 06 	sts	0x06C8, r24
    7fec:	90 93 c9 06 	sts	0x06C9, r25
    7ff0:	a0 93 ca 06 	sts	0x06CA, r26
    7ff4:	b0 93 cb 06 	sts	0x06CB, r27
    7ff8:	24 e4       	ldi	r18, 0x44	; 68
    7ffa:	36 e0       	ldi	r19, 0x06	; 6
    7ffc:	30 93 c5 06 	sts	0x06C5, r19
    8000:	20 93 c4 06 	sts	0x06C4, r18
    8004:	42 ec       	ldi	r20, 0xC2	; 194
    8006:	58 e0       	ldi	r21, 0x08	; 8
    8008:	50 93 d1 06 	sts	0x06D1, r21
    800c:	40 93 d0 06 	sts	0x06D0, r20
    8010:	4e e7       	ldi	r20, 0x7E	; 126
    8012:	58 e0       	ldi	r21, 0x08	; 8
    8014:	50 93 d3 06 	sts	0x06D3, r21
    8018:	40 93 d2 06 	sts	0x06D2, r20
    801c:	45 ec       	ldi	r20, 0xC5	; 197
    801e:	50 e0       	ldi	r21, 0x00	; 0
    8020:	50 93 d5 06 	sts	0x06D5, r21
    8024:	40 93 d4 06 	sts	0x06D4, r20
    8028:	44 ec       	ldi	r20, 0xC4	; 196
    802a:	50 e0       	ldi	r21, 0x00	; 0
    802c:	50 93 d7 06 	sts	0x06D7, r21
    8030:	40 93 d6 06 	sts	0x06D6, r20
    8034:	40 ec       	ldi	r20, 0xC0	; 192
    8036:	50 e0       	ldi	r21, 0x00	; 0
    8038:	50 93 d9 06 	sts	0x06D9, r21
    803c:	40 93 d8 06 	sts	0x06D8, r20
    8040:	41 ec       	ldi	r20, 0xC1	; 193
    8042:	50 e0       	ldi	r21, 0x00	; 0
    8044:	50 93 db 06 	sts	0x06DB, r21
    8048:	40 93 da 06 	sts	0x06DA, r20
    804c:	42 ec       	ldi	r20, 0xC2	; 194
    804e:	50 e0       	ldi	r21, 0x00	; 0
    8050:	50 93 dd 06 	sts	0x06DD, r21
    8054:	40 93 dc 06 	sts	0x06DC, r20
    8058:	46 ec       	ldi	r20, 0xC6	; 198
    805a:	50 e0       	ldi	r21, 0x00	; 0
    805c:	50 93 df 06 	sts	0x06DF, r21
    8060:	40 93 de 06 	sts	0x06DE, r20
    8064:	c4 e0       	ldi	r28, 0x04	; 4
    8066:	c0 93 e0 06 	sts	0x06E0, r28
    806a:	f3 e0       	ldi	r31, 0x03	; 3
    806c:	f0 93 e1 06 	sts	0x06E1, r31
    8070:	e7 e0       	ldi	r30, 0x07	; 7
    8072:	e0 93 e2 06 	sts	0x06E2, r30
    8076:	75 e0       	ldi	r23, 0x05	; 5
    8078:	70 93 e3 06 	sts	0x06E3, r23
    807c:	61 e0       	ldi	r22, 0x01	; 1
    807e:	60 93 e4 06 	sts	0x06E4, r22
    8082:	10 92 a5 06 	sts	0x06A5, r1
    8086:	10 92 a4 06 	sts	0x06A4, r1
    808a:	80 93 a6 06 	sts	0x06A6, r24
    808e:	90 93 a7 06 	sts	0x06A7, r25
    8092:	a0 93 a8 06 	sts	0x06A8, r26
    8096:	b0 93 a9 06 	sts	0x06A9, r27
    809a:	30 93 a3 06 	sts	0x06A3, r19
    809e:	20 93 a2 06 	sts	0x06A2, r18
    80a2:	4a e3       	ldi	r20, 0x3A	; 58
    80a4:	58 e0       	ldi	r21, 0x08	; 8
    80a6:	50 93 af 06 	sts	0x06AF, r21
    80aa:	40 93 ae 06 	sts	0x06AE, r20
    80ae:	46 ef       	ldi	r20, 0xF6	; 246
    80b0:	57 e0       	ldi	r21, 0x07	; 7
    80b2:	50 93 b1 06 	sts	0x06B1, r21
    80b6:	40 93 b0 06 	sts	0x06B0, r20
    80ba:	4d ec       	ldi	r20, 0xCD	; 205
    80bc:	50 e0       	ldi	r21, 0x00	; 0
    80be:	50 93 b3 06 	sts	0x06B3, r21
    80c2:	40 93 b2 06 	sts	0x06B2, r20
    80c6:	4c ec       	ldi	r20, 0xCC	; 204
    80c8:	50 e0       	ldi	r21, 0x00	; 0
    80ca:	50 93 b5 06 	sts	0x06B5, r21
    80ce:	40 93 b4 06 	sts	0x06B4, r20
    80d2:	48 ec       	ldi	r20, 0xC8	; 200
    80d4:	50 e0       	ldi	r21, 0x00	; 0
    80d6:	50 93 b7 06 	sts	0x06B7, r21
    80da:	40 93 b6 06 	sts	0x06B6, r20
    80de:	49 ec       	ldi	r20, 0xC9	; 201
    80e0:	50 e0       	ldi	r21, 0x00	; 0
    80e2:	50 93 b9 06 	sts	0x06B9, r21
    80e6:	40 93 b8 06 	sts	0x06B8, r20
    80ea:	4a ec       	ldi	r20, 0xCA	; 202
    80ec:	50 e0       	ldi	r21, 0x00	; 0
    80ee:	50 93 bb 06 	sts	0x06BB, r21
    80f2:	40 93 ba 06 	sts	0x06BA, r20
    80f6:	4e ec       	ldi	r20, 0xCE	; 206
    80f8:	50 e0       	ldi	r21, 0x00	; 0
    80fa:	50 93 bd 06 	sts	0x06BD, r21
    80fe:	40 93 bc 06 	sts	0x06BC, r20
    8102:	c0 93 be 06 	sts	0x06BE, r28
    8106:	f0 93 bf 06 	sts	0x06BF, r31
    810a:	e0 93 c0 06 	sts	0x06C0, r30
    810e:	70 93 c1 06 	sts	0x06C1, r23
    8112:	60 93 c2 06 	sts	0x06C2, r22
    8116:	10 92 83 06 	sts	0x0683, r1
    811a:	10 92 82 06 	sts	0x0682, r1
    811e:	80 93 84 06 	sts	0x0684, r24
    8122:	90 93 85 06 	sts	0x0685, r25
    8126:	a0 93 86 06 	sts	0x0686, r26
    812a:	b0 93 87 06 	sts	0x0687, r27
    812e:	30 93 81 06 	sts	0x0681, r19
    8132:	20 93 80 06 	sts	0x0680, r18
    8136:	42 eb       	ldi	r20, 0xB2	; 178
    8138:	57 e0       	ldi	r21, 0x07	; 7
    813a:	50 93 8d 06 	sts	0x068D, r21
    813e:	40 93 8c 06 	sts	0x068C, r20
    8142:	4e e6       	ldi	r20, 0x6E	; 110
    8144:	57 e0       	ldi	r21, 0x07	; 7
    8146:	50 93 8f 06 	sts	0x068F, r21
    814a:	40 93 8e 06 	sts	0x068E, r20
    814e:	45 ed       	ldi	r20, 0xD5	; 213
    8150:	50 e0       	ldi	r21, 0x00	; 0
    8152:	50 93 91 06 	sts	0x0691, r21
    8156:	40 93 90 06 	sts	0x0690, r20
    815a:	44 ed       	ldi	r20, 0xD4	; 212
    815c:	50 e0       	ldi	r21, 0x00	; 0
    815e:	50 93 93 06 	sts	0x0693, r21
    8162:	40 93 92 06 	sts	0x0692, r20
    8166:	40 ed       	ldi	r20, 0xD0	; 208
    8168:	50 e0       	ldi	r21, 0x00	; 0
    816a:	50 93 95 06 	sts	0x0695, r21
    816e:	40 93 94 06 	sts	0x0694, r20
    8172:	41 ed       	ldi	r20, 0xD1	; 209
    8174:	50 e0       	ldi	r21, 0x00	; 0
    8176:	50 93 97 06 	sts	0x0697, r21
    817a:	40 93 96 06 	sts	0x0696, r20
    817e:	42 ed       	ldi	r20, 0xD2	; 210
    8180:	50 e0       	ldi	r21, 0x00	; 0
    8182:	50 93 99 06 	sts	0x0699, r21
    8186:	40 93 98 06 	sts	0x0698, r20
    818a:	46 ed       	ldi	r20, 0xD6	; 214
    818c:	50 e0       	ldi	r21, 0x00	; 0
    818e:	50 93 9b 06 	sts	0x069B, r21
    8192:	40 93 9a 06 	sts	0x069A, r20
    8196:	c0 93 9c 06 	sts	0x069C, r28
    819a:	f0 93 9d 06 	sts	0x069D, r31
    819e:	e0 93 9e 06 	sts	0x069E, r30
    81a2:	70 93 9f 06 	sts	0x069F, r23
    81a6:	60 93 a0 06 	sts	0x06A0, r22
    81aa:	10 92 61 06 	sts	0x0661, r1
    81ae:	10 92 60 06 	sts	0x0660, r1
    81b2:	80 93 62 06 	sts	0x0662, r24
    81b6:	90 93 63 06 	sts	0x0663, r25
    81ba:	a0 93 64 06 	sts	0x0664, r26
    81be:	b0 93 65 06 	sts	0x0665, r27
    81c2:	30 93 5f 06 	sts	0x065F, r19
    81c6:	20 93 5e 06 	sts	0x065E, r18
    81ca:	8a e2       	ldi	r24, 0x2A	; 42
    81cc:	97 e0       	ldi	r25, 0x07	; 7
    81ce:	90 93 6b 06 	sts	0x066B, r25
    81d2:	80 93 6a 06 	sts	0x066A, r24
    81d6:	86 ee       	ldi	r24, 0xE6	; 230
    81d8:	96 e0       	ldi	r25, 0x06	; 6
    81da:	90 93 6d 06 	sts	0x066D, r25
    81de:	80 93 6c 06 	sts	0x066C, r24
    81e2:	85 e3       	ldi	r24, 0x35	; 53
    81e4:	91 e0       	ldi	r25, 0x01	; 1
    81e6:	90 93 6f 06 	sts	0x066F, r25
    81ea:	80 93 6e 06 	sts	0x066E, r24
    81ee:	84 e3       	ldi	r24, 0x34	; 52
    81f0:	91 e0       	ldi	r25, 0x01	; 1
    81f2:	90 93 71 06 	sts	0x0671, r25
    81f6:	80 93 70 06 	sts	0x0670, r24
    81fa:	80 e3       	ldi	r24, 0x30	; 48
    81fc:	91 e0       	ldi	r25, 0x01	; 1
    81fe:	90 93 73 06 	sts	0x0673, r25
    8202:	80 93 72 06 	sts	0x0672, r24
    8206:	81 e3       	ldi	r24, 0x31	; 49
    8208:	91 e0       	ldi	r25, 0x01	; 1
    820a:	90 93 75 06 	sts	0x0675, r25
    820e:	80 93 74 06 	sts	0x0674, r24
    8212:	82 e3       	ldi	r24, 0x32	; 50
    8214:	91 e0       	ldi	r25, 0x01	; 1
    8216:	90 93 77 06 	sts	0x0677, r25
    821a:	80 93 76 06 	sts	0x0676, r24
    821e:	86 e3       	ldi	r24, 0x36	; 54
    8220:	91 e0       	ldi	r25, 0x01	; 1
    8222:	90 93 79 06 	sts	0x0679, r25
    8226:	80 93 78 06 	sts	0x0678, r24
    822a:	c0 93 7a 06 	sts	0x067A, r28
    822e:	f0 93 7b 06 	sts	0x067B, r31
    8232:	e0 93 7c 06 	sts	0x067C, r30
    8236:	70 93 7d 06 	sts	0x067D, r23
    823a:	60 93 7e 06 	sts	0x067E, r22
    823e:	cf 91       	pop	r28
    8240:	08 95       	ret

00008242 <_ZN5Print5writeEPKc>:
    8242:	61 15       	cp	r22, r1
    8244:	71 05       	cpc	r23, r1
    8246:	81 f0       	breq	.+32     	; 0x8268 <_ZN5Print5writeEPKc+0x26>
    8248:	db 01       	movw	r26, r22
    824a:	0d 90       	ld	r0, X+
    824c:	00 20       	and	r0, r0
    824e:	e9 f7       	brne	.-6      	; 0x824a <_ZN5Print5writeEPKc+0x8>
    8250:	ad 01       	movw	r20, r26
    8252:	41 50       	subi	r20, 0x01	; 1
    8254:	51 09       	sbc	r21, r1
    8256:	46 1b       	sub	r20, r22
    8258:	57 0b       	sbc	r21, r23
    825a:	dc 01       	movw	r26, r24
    825c:	ed 91       	ld	r30, X+
    825e:	fc 91       	ld	r31, X
    8260:	02 80       	ldd	r0, Z+2	; 0x02
    8262:	f3 81       	ldd	r31, Z+3	; 0x03
    8264:	e0 2d       	mov	r30, r0
    8266:	09 94       	ijmp
    8268:	80 e0       	ldi	r24, 0x00	; 0
    826a:	90 e0       	ldi	r25, 0x00	; 0
    826c:	08 95       	ret

0000826e <main>:
    826e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <init>
    8272:	0e 94 29 2f 	call	0x5e52	; 0x5e52 <setup>
    8276:	c7 e3       	ldi	r28, 0x37	; 55
    8278:	d3 e0       	ldi	r29, 0x03	; 3
    827a:	0e 94 49 30 	call	0x6092	; 0x6092 <loop>
    827e:	20 97       	sbiw	r28, 0x00	; 0
    8280:	e1 f3       	breq	.-8      	; 0x827a <main+0xc>
    8282:	0e 94 37 03 	call	0x66e	; 0x66e <_Z14serialEventRunv>
    8286:	f9 cf       	rjmp	.-14     	; 0x827a <main+0xc>

00008288 <__subsf3>:
    8288:	50 58       	subi	r21, 0x80	; 128

0000828a <__addsf3>:
    828a:	bb 27       	eor	r27, r27
    828c:	aa 27       	eor	r26, r26
    828e:	0e d0       	rcall	.+28     	; 0x82ac <__addsf3x>
    8290:	63 c2       	rjmp	.+1222   	; 0x8758 <__fp_round>
    8292:	2c d2       	rcall	.+1112   	; 0x86ec <__fp_pscA>
    8294:	30 f0       	brcs	.+12     	; 0x82a2 <__addsf3+0x18>
    8296:	31 d2       	rcall	.+1122   	; 0x86fa <__fp_pscB>
    8298:	20 f0       	brcs	.+8      	; 0x82a2 <__addsf3+0x18>
    829a:	31 f4       	brne	.+12     	; 0x82a8 <__addsf3+0x1e>
    829c:	9f 3f       	cpi	r25, 0xFF	; 255
    829e:	11 f4       	brne	.+4      	; 0x82a4 <__addsf3+0x1a>
    82a0:	1e f4       	brtc	.+6      	; 0x82a8 <__addsf3+0x1e>
    82a2:	fc c1       	rjmp	.+1016   	; 0x869c <__fp_nan>
    82a4:	0e f4       	brtc	.+2      	; 0x82a8 <__addsf3+0x1e>
    82a6:	e0 95       	com	r30
    82a8:	e7 fb       	bst	r30, 7
    82aa:	c9 c1       	rjmp	.+914    	; 0x863e <__fp_inf>

000082ac <__addsf3x>:
    82ac:	e9 2f       	mov	r30, r25
    82ae:	76 d2       	rcall	.+1260   	; 0x879c <__fp_split3>
    82b0:	80 f3       	brcs	.-32     	; 0x8292 <__addsf3+0x8>
    82b2:	ba 17       	cp	r27, r26
    82b4:	62 07       	cpc	r22, r18
    82b6:	73 07       	cpc	r23, r19
    82b8:	84 07       	cpc	r24, r20
    82ba:	95 07       	cpc	r25, r21
    82bc:	18 f0       	brcs	.+6      	; 0x82c4 <__addsf3x+0x18>
    82be:	71 f4       	brne	.+28     	; 0x82dc <__addsf3x+0x30>
    82c0:	9e f5       	brtc	.+102    	; 0x8328 <__addsf3x+0x7c>
    82c2:	a5 c2       	rjmp	.+1354   	; 0x880e <__fp_zero>
    82c4:	0e f4       	brtc	.+2      	; 0x82c8 <__addsf3x+0x1c>
    82c6:	e0 95       	com	r30
    82c8:	0b 2e       	mov	r0, r27
    82ca:	ba 2f       	mov	r27, r26
    82cc:	a0 2d       	mov	r26, r0
    82ce:	0b 01       	movw	r0, r22
    82d0:	b9 01       	movw	r22, r18
    82d2:	90 01       	movw	r18, r0
    82d4:	0c 01       	movw	r0, r24
    82d6:	ca 01       	movw	r24, r20
    82d8:	a0 01       	movw	r20, r0
    82da:	11 24       	eor	r1, r1
    82dc:	ff 27       	eor	r31, r31
    82de:	59 1b       	sub	r21, r25
    82e0:	99 f0       	breq	.+38     	; 0x8308 <__addsf3x+0x5c>
    82e2:	59 3f       	cpi	r21, 0xF9	; 249
    82e4:	50 f4       	brcc	.+20     	; 0x82fa <__addsf3x+0x4e>
    82e6:	50 3e       	cpi	r21, 0xE0	; 224
    82e8:	68 f1       	brcs	.+90     	; 0x8344 <__addsf3x+0x98>
    82ea:	1a 16       	cp	r1, r26
    82ec:	f0 40       	sbci	r31, 0x00	; 0
    82ee:	a2 2f       	mov	r26, r18
    82f0:	23 2f       	mov	r18, r19
    82f2:	34 2f       	mov	r19, r20
    82f4:	44 27       	eor	r20, r20
    82f6:	58 5f       	subi	r21, 0xF8	; 248
    82f8:	f3 cf       	rjmp	.-26     	; 0x82e0 <__addsf3x+0x34>
    82fa:	46 95       	lsr	r20
    82fc:	37 95       	ror	r19
    82fe:	27 95       	ror	r18
    8300:	a7 95       	ror	r26
    8302:	f0 40       	sbci	r31, 0x00	; 0
    8304:	53 95       	inc	r21
    8306:	c9 f7       	brne	.-14     	; 0x82fa <__addsf3x+0x4e>
    8308:	7e f4       	brtc	.+30     	; 0x8328 <__addsf3x+0x7c>
    830a:	1f 16       	cp	r1, r31
    830c:	ba 0b       	sbc	r27, r26
    830e:	62 0b       	sbc	r22, r18
    8310:	73 0b       	sbc	r23, r19
    8312:	84 0b       	sbc	r24, r20
    8314:	ba f0       	brmi	.+46     	; 0x8344 <__addsf3x+0x98>
    8316:	91 50       	subi	r25, 0x01	; 1
    8318:	a1 f0       	breq	.+40     	; 0x8342 <__addsf3x+0x96>
    831a:	ff 0f       	add	r31, r31
    831c:	bb 1f       	adc	r27, r27
    831e:	66 1f       	adc	r22, r22
    8320:	77 1f       	adc	r23, r23
    8322:	88 1f       	adc	r24, r24
    8324:	c2 f7       	brpl	.-16     	; 0x8316 <__addsf3x+0x6a>
    8326:	0e c0       	rjmp	.+28     	; 0x8344 <__addsf3x+0x98>
    8328:	ba 0f       	add	r27, r26
    832a:	62 1f       	adc	r22, r18
    832c:	73 1f       	adc	r23, r19
    832e:	84 1f       	adc	r24, r20
    8330:	48 f4       	brcc	.+18     	; 0x8344 <__addsf3x+0x98>
    8332:	87 95       	ror	r24
    8334:	77 95       	ror	r23
    8336:	67 95       	ror	r22
    8338:	b7 95       	ror	r27
    833a:	f7 95       	ror	r31
    833c:	9e 3f       	cpi	r25, 0xFE	; 254
    833e:	08 f0       	brcs	.+2      	; 0x8342 <__addsf3x+0x96>
    8340:	b3 cf       	rjmp	.-154    	; 0x82a8 <__addsf3+0x1e>
    8342:	93 95       	inc	r25
    8344:	88 0f       	add	r24, r24
    8346:	08 f0       	brcs	.+2      	; 0x834a <__addsf3x+0x9e>
    8348:	99 27       	eor	r25, r25
    834a:	ee 0f       	add	r30, r30
    834c:	97 95       	ror	r25
    834e:	87 95       	ror	r24
    8350:	08 95       	ret
    8352:	cc d1       	rcall	.+920    	; 0x86ec <__fp_pscA>
    8354:	58 f0       	brcs	.+22     	; 0x836c <__addsf3x+0xc0>
    8356:	80 e8       	ldi	r24, 0x80	; 128
    8358:	91 e0       	ldi	r25, 0x01	; 1
    835a:	09 f4       	brne	.+2      	; 0x835e <__addsf3x+0xb2>
    835c:	9e ef       	ldi	r25, 0xFE	; 254
    835e:	cd d1       	rcall	.+922    	; 0x86fa <__fp_pscB>
    8360:	28 f0       	brcs	.+10     	; 0x836c <__addsf3x+0xc0>
    8362:	40 e8       	ldi	r20, 0x80	; 128
    8364:	51 e0       	ldi	r21, 0x01	; 1
    8366:	59 f4       	brne	.+22     	; 0x837e <atan2+0xe>
    8368:	5e ef       	ldi	r21, 0xFE	; 254
    836a:	09 c0       	rjmp	.+18     	; 0x837e <atan2+0xe>
    836c:	97 c1       	rjmp	.+814    	; 0x869c <__fp_nan>
    836e:	4f c2       	rjmp	.+1182   	; 0x880e <__fp_zero>

00008370 <atan2>:
    8370:	e9 2f       	mov	r30, r25
    8372:	e0 78       	andi	r30, 0x80	; 128
    8374:	13 d2       	rcall	.+1062   	; 0x879c <__fp_split3>
    8376:	68 f3       	brcs	.-38     	; 0x8352 <__addsf3x+0xa6>
    8378:	09 2e       	mov	r0, r25
    837a:	05 2a       	or	r0, r21
    837c:	c1 f3       	breq	.-16     	; 0x836e <__addsf3x+0xc2>
    837e:	26 17       	cp	r18, r22
    8380:	37 07       	cpc	r19, r23
    8382:	48 07       	cpc	r20, r24
    8384:	59 07       	cpc	r21, r25
    8386:	38 f0       	brcs	.+14     	; 0x8396 <atan2+0x26>
    8388:	0e 2e       	mov	r0, r30
    838a:	07 f8       	bld	r0, 7
    838c:	e0 25       	eor	r30, r0
    838e:	69 f0       	breq	.+26     	; 0x83aa <atan2+0x3a>
    8390:	e0 25       	eor	r30, r0
    8392:	e0 64       	ori	r30, 0x40	; 64
    8394:	0a c0       	rjmp	.+20     	; 0x83aa <atan2+0x3a>
    8396:	ef 63       	ori	r30, 0x3F	; 63
    8398:	07 f8       	bld	r0, 7
    839a:	00 94       	com	r0
    839c:	07 fa       	bst	r0, 7
    839e:	db 01       	movw	r26, r22
    83a0:	b9 01       	movw	r22, r18
    83a2:	9d 01       	movw	r18, r26
    83a4:	dc 01       	movw	r26, r24
    83a6:	ca 01       	movw	r24, r20
    83a8:	ad 01       	movw	r20, r26
    83aa:	ef 93       	push	r30
    83ac:	4a d0       	rcall	.+148    	; 0x8442 <__divsf3_pse>
    83ae:	d4 d1       	rcall	.+936    	; 0x8758 <__fp_round>
    83b0:	0a d0       	rcall	.+20     	; 0x83c6 <atan>
    83b2:	5f 91       	pop	r21
    83b4:	55 23       	and	r21, r21
    83b6:	31 f0       	breq	.+12     	; 0x83c4 <atan2+0x54>
    83b8:	2b ed       	ldi	r18, 0xDB	; 219
    83ba:	3f e0       	ldi	r19, 0x0F	; 15
    83bc:	49 e4       	ldi	r20, 0x49	; 73
    83be:	50 fd       	sbrc	r21, 0
    83c0:	49 ec       	ldi	r20, 0xC9	; 201
    83c2:	63 cf       	rjmp	.-314    	; 0x828a <__addsf3>
    83c4:	08 95       	ret

000083c6 <atan>:
    83c6:	df 93       	push	r29
    83c8:	dd 27       	eor	r29, r29
    83ca:	b9 2f       	mov	r27, r25
    83cc:	bf 77       	andi	r27, 0x7F	; 127
    83ce:	40 e8       	ldi	r20, 0x80	; 128
    83d0:	5f e3       	ldi	r21, 0x3F	; 63
    83d2:	16 16       	cp	r1, r22
    83d4:	17 06       	cpc	r1, r23
    83d6:	48 07       	cpc	r20, r24
    83d8:	5b 07       	cpc	r21, r27
    83da:	10 f4       	brcc	.+4      	; 0x83e0 <atan+0x1a>
    83dc:	d9 2f       	mov	r29, r25
    83de:	22 d2       	rcall	.+1092   	; 0x8824 <inverse>
    83e0:	9f 93       	push	r25
    83e2:	8f 93       	push	r24
    83e4:	7f 93       	push	r23
    83e6:	6f 93       	push	r22
    83e8:	cf d2       	rcall	.+1438   	; 0x8988 <square>
    83ea:	e4 ee       	ldi	r30, 0xE4	; 228
    83ec:	f0 e0       	ldi	r31, 0x00	; 0
    83ee:	59 d1       	rcall	.+690    	; 0x86a2 <__fp_powser>
    83f0:	b3 d1       	rcall	.+870    	; 0x8758 <__fp_round>
    83f2:	2f 91       	pop	r18
    83f4:	3f 91       	pop	r19
    83f6:	4f 91       	pop	r20
    83f8:	5f 91       	pop	r21
    83fa:	27 d2       	rcall	.+1102   	; 0x884a <__mulsf3x>
    83fc:	dd 23       	and	r29, r29
    83fe:	49 f0       	breq	.+18     	; 0x8412 <atan+0x4c>
    8400:	90 58       	subi	r25, 0x80	; 128
    8402:	a2 ea       	ldi	r26, 0xA2	; 162
    8404:	2a ed       	ldi	r18, 0xDA	; 218
    8406:	3f e0       	ldi	r19, 0x0F	; 15
    8408:	49 ec       	ldi	r20, 0xC9	; 201
    840a:	5f e3       	ldi	r21, 0x3F	; 63
    840c:	d0 78       	andi	r29, 0x80	; 128
    840e:	5d 27       	eor	r21, r29
    8410:	4d df       	rcall	.-358    	; 0x82ac <__addsf3x>
    8412:	df 91       	pop	r29
    8414:	a1 c1       	rjmp	.+834    	; 0x8758 <__fp_round>

00008416 <__cmpsf2>:
    8416:	ef d0       	rcall	.+478    	; 0x85f6 <__fp_cmp>
    8418:	08 f4       	brcc	.+2      	; 0x841c <__cmpsf2+0x6>
    841a:	81 e0       	ldi	r24, 0x01	; 1
    841c:	08 95       	ret

0000841e <cos>:
    841e:	75 d1       	rcall	.+746    	; 0x870a <__fp_rempio2>
    8420:	e3 95       	inc	r30
    8422:	ab c1       	rjmp	.+854    	; 0x877a <__fp_sinus>

00008424 <__divsf3>:
    8424:	0c d0       	rcall	.+24     	; 0x843e <__divsf3x>
    8426:	98 c1       	rjmp	.+816    	; 0x8758 <__fp_round>
    8428:	68 d1       	rcall	.+720    	; 0x86fa <__fp_pscB>
    842a:	40 f0       	brcs	.+16     	; 0x843c <__divsf3+0x18>
    842c:	5f d1       	rcall	.+702    	; 0x86ec <__fp_pscA>
    842e:	30 f0       	brcs	.+12     	; 0x843c <__divsf3+0x18>
    8430:	21 f4       	brne	.+8      	; 0x843a <__divsf3+0x16>
    8432:	5f 3f       	cpi	r21, 0xFF	; 255
    8434:	19 f0       	breq	.+6      	; 0x843c <__divsf3+0x18>
    8436:	03 c1       	rjmp	.+518    	; 0x863e <__fp_inf>
    8438:	51 11       	cpse	r21, r1
    843a:	ea c1       	rjmp	.+980    	; 0x8810 <__fp_szero>
    843c:	2f c1       	rjmp	.+606    	; 0x869c <__fp_nan>

0000843e <__divsf3x>:
    843e:	ae d1       	rcall	.+860    	; 0x879c <__fp_split3>
    8440:	98 f3       	brcs	.-26     	; 0x8428 <__divsf3+0x4>

00008442 <__divsf3_pse>:
    8442:	99 23       	and	r25, r25
    8444:	c9 f3       	breq	.-14     	; 0x8438 <__divsf3+0x14>
    8446:	55 23       	and	r21, r21
    8448:	b1 f3       	breq	.-20     	; 0x8436 <__divsf3+0x12>
    844a:	95 1b       	sub	r25, r21
    844c:	55 0b       	sbc	r21, r21
    844e:	bb 27       	eor	r27, r27
    8450:	aa 27       	eor	r26, r26
    8452:	62 17       	cp	r22, r18
    8454:	73 07       	cpc	r23, r19
    8456:	84 07       	cpc	r24, r20
    8458:	38 f0       	brcs	.+14     	; 0x8468 <__divsf3_pse+0x26>
    845a:	9f 5f       	subi	r25, 0xFF	; 255
    845c:	5f 4f       	sbci	r21, 0xFF	; 255
    845e:	22 0f       	add	r18, r18
    8460:	33 1f       	adc	r19, r19
    8462:	44 1f       	adc	r20, r20
    8464:	aa 1f       	adc	r26, r26
    8466:	a9 f3       	breq	.-22     	; 0x8452 <__divsf3_pse+0x10>
    8468:	33 d0       	rcall	.+102    	; 0x84d0 <__divsf3_pse+0x8e>
    846a:	0e 2e       	mov	r0, r30
    846c:	3a f0       	brmi	.+14     	; 0x847c <__divsf3_pse+0x3a>
    846e:	e0 e8       	ldi	r30, 0x80	; 128
    8470:	30 d0       	rcall	.+96     	; 0x84d2 <__divsf3_pse+0x90>
    8472:	91 50       	subi	r25, 0x01	; 1
    8474:	50 40       	sbci	r21, 0x00	; 0
    8476:	e6 95       	lsr	r30
    8478:	00 1c       	adc	r0, r0
    847a:	ca f7       	brpl	.-14     	; 0x846e <__divsf3_pse+0x2c>
    847c:	29 d0       	rcall	.+82     	; 0x84d0 <__divsf3_pse+0x8e>
    847e:	fe 2f       	mov	r31, r30
    8480:	27 d0       	rcall	.+78     	; 0x84d0 <__divsf3_pse+0x8e>
    8482:	66 0f       	add	r22, r22
    8484:	77 1f       	adc	r23, r23
    8486:	88 1f       	adc	r24, r24
    8488:	bb 1f       	adc	r27, r27
    848a:	26 17       	cp	r18, r22
    848c:	37 07       	cpc	r19, r23
    848e:	48 07       	cpc	r20, r24
    8490:	ab 07       	cpc	r26, r27
    8492:	b0 e8       	ldi	r27, 0x80	; 128
    8494:	09 f0       	breq	.+2      	; 0x8498 <__divsf3_pse+0x56>
    8496:	bb 0b       	sbc	r27, r27
    8498:	80 2d       	mov	r24, r0
    849a:	bf 01       	movw	r22, r30
    849c:	ff 27       	eor	r31, r31
    849e:	93 58       	subi	r25, 0x83	; 131
    84a0:	5f 4f       	sbci	r21, 0xFF	; 255
    84a2:	2a f0       	brmi	.+10     	; 0x84ae <__divsf3_pse+0x6c>
    84a4:	9e 3f       	cpi	r25, 0xFE	; 254
    84a6:	51 05       	cpc	r21, r1
    84a8:	68 f0       	brcs	.+26     	; 0x84c4 <__divsf3_pse+0x82>
    84aa:	c9 c0       	rjmp	.+402    	; 0x863e <__fp_inf>
    84ac:	b1 c1       	rjmp	.+866    	; 0x8810 <__fp_szero>
    84ae:	5f 3f       	cpi	r21, 0xFF	; 255
    84b0:	ec f3       	brlt	.-6      	; 0x84ac <__divsf3_pse+0x6a>
    84b2:	98 3e       	cpi	r25, 0xE8	; 232
    84b4:	dc f3       	brlt	.-10     	; 0x84ac <__divsf3_pse+0x6a>
    84b6:	86 95       	lsr	r24
    84b8:	77 95       	ror	r23
    84ba:	67 95       	ror	r22
    84bc:	b7 95       	ror	r27
    84be:	f7 95       	ror	r31
    84c0:	9f 5f       	subi	r25, 0xFF	; 255
    84c2:	c9 f7       	brne	.-14     	; 0x84b6 <__divsf3_pse+0x74>
    84c4:	88 0f       	add	r24, r24
    84c6:	91 1d       	adc	r25, r1
    84c8:	96 95       	lsr	r25
    84ca:	87 95       	ror	r24
    84cc:	97 f9       	bld	r25, 7
    84ce:	08 95       	ret
    84d0:	e1 e0       	ldi	r30, 0x01	; 1
    84d2:	66 0f       	add	r22, r22
    84d4:	77 1f       	adc	r23, r23
    84d6:	88 1f       	adc	r24, r24
    84d8:	bb 1f       	adc	r27, r27
    84da:	62 17       	cp	r22, r18
    84dc:	73 07       	cpc	r23, r19
    84de:	84 07       	cpc	r24, r20
    84e0:	ba 07       	cpc	r27, r26
    84e2:	20 f0       	brcs	.+8      	; 0x84ec <__divsf3_pse+0xaa>
    84e4:	62 1b       	sub	r22, r18
    84e6:	73 0b       	sbc	r23, r19
    84e8:	84 0b       	sbc	r24, r20
    84ea:	ba 0b       	sbc	r27, r26
    84ec:	ee 1f       	adc	r30, r30
    84ee:	88 f7       	brcc	.-30     	; 0x84d2 <__divsf3_pse+0x90>
    84f0:	e0 95       	com	r30
    84f2:	08 95       	ret

000084f4 <__fixsfsi>:
    84f4:	04 d0       	rcall	.+8      	; 0x84fe <__fixunssfsi>
    84f6:	68 94       	set
    84f8:	b1 11       	cpse	r27, r1
    84fa:	8a c1       	rjmp	.+788    	; 0x8810 <__fp_szero>
    84fc:	08 95       	ret

000084fe <__fixunssfsi>:
    84fe:	56 d1       	rcall	.+684    	; 0x87ac <__fp_splitA>
    8500:	88 f0       	brcs	.+34     	; 0x8524 <__fixunssfsi+0x26>
    8502:	9f 57       	subi	r25, 0x7F	; 127
    8504:	90 f0       	brcs	.+36     	; 0x852a <__fixunssfsi+0x2c>
    8506:	b9 2f       	mov	r27, r25
    8508:	99 27       	eor	r25, r25
    850a:	b7 51       	subi	r27, 0x17	; 23
    850c:	a0 f0       	brcs	.+40     	; 0x8536 <__fixunssfsi+0x38>
    850e:	d1 f0       	breq	.+52     	; 0x8544 <__fixunssfsi+0x46>
    8510:	66 0f       	add	r22, r22
    8512:	77 1f       	adc	r23, r23
    8514:	88 1f       	adc	r24, r24
    8516:	99 1f       	adc	r25, r25
    8518:	1a f0       	brmi	.+6      	; 0x8520 <__fixunssfsi+0x22>
    851a:	ba 95       	dec	r27
    851c:	c9 f7       	brne	.-14     	; 0x8510 <__fixunssfsi+0x12>
    851e:	12 c0       	rjmp	.+36     	; 0x8544 <__fixunssfsi+0x46>
    8520:	b1 30       	cpi	r27, 0x01	; 1
    8522:	81 f0       	breq	.+32     	; 0x8544 <__fixunssfsi+0x46>
    8524:	74 d1       	rcall	.+744    	; 0x880e <__fp_zero>
    8526:	b1 e0       	ldi	r27, 0x01	; 1
    8528:	08 95       	ret
    852a:	71 c1       	rjmp	.+738    	; 0x880e <__fp_zero>
    852c:	67 2f       	mov	r22, r23
    852e:	78 2f       	mov	r23, r24
    8530:	88 27       	eor	r24, r24
    8532:	b8 5f       	subi	r27, 0xF8	; 248
    8534:	39 f0       	breq	.+14     	; 0x8544 <__fixunssfsi+0x46>
    8536:	b9 3f       	cpi	r27, 0xF9	; 249
    8538:	cc f3       	brlt	.-14     	; 0x852c <__fixunssfsi+0x2e>
    853a:	86 95       	lsr	r24
    853c:	77 95       	ror	r23
    853e:	67 95       	ror	r22
    8540:	b3 95       	inc	r27
    8542:	d9 f7       	brne	.-10     	; 0x853a <__fixunssfsi+0x3c>
    8544:	3e f4       	brtc	.+14     	; 0x8554 <__fixunssfsi+0x56>
    8546:	90 95       	com	r25
    8548:	80 95       	com	r24
    854a:	70 95       	com	r23
    854c:	61 95       	neg	r22
    854e:	7f 4f       	sbci	r23, 0xFF	; 255
    8550:	8f 4f       	sbci	r24, 0xFF	; 255
    8552:	9f 4f       	sbci	r25, 0xFF	; 255
    8554:	08 95       	ret

00008556 <__floatunsisf>:
    8556:	e8 94       	clt
    8558:	09 c0       	rjmp	.+18     	; 0x856c <__floatsisf+0x12>

0000855a <__floatsisf>:
    855a:	97 fb       	bst	r25, 7
    855c:	3e f4       	brtc	.+14     	; 0x856c <__floatsisf+0x12>
    855e:	90 95       	com	r25
    8560:	80 95       	com	r24
    8562:	70 95       	com	r23
    8564:	61 95       	neg	r22
    8566:	7f 4f       	sbci	r23, 0xFF	; 255
    8568:	8f 4f       	sbci	r24, 0xFF	; 255
    856a:	9f 4f       	sbci	r25, 0xFF	; 255
    856c:	99 23       	and	r25, r25
    856e:	a9 f0       	breq	.+42     	; 0x859a <__floatsisf+0x40>
    8570:	f9 2f       	mov	r31, r25
    8572:	96 e9       	ldi	r25, 0x96	; 150
    8574:	bb 27       	eor	r27, r27
    8576:	93 95       	inc	r25
    8578:	f6 95       	lsr	r31
    857a:	87 95       	ror	r24
    857c:	77 95       	ror	r23
    857e:	67 95       	ror	r22
    8580:	b7 95       	ror	r27
    8582:	f1 11       	cpse	r31, r1
    8584:	f8 cf       	rjmp	.-16     	; 0x8576 <__floatsisf+0x1c>
    8586:	fa f4       	brpl	.+62     	; 0x85c6 <__floatsisf+0x6c>
    8588:	bb 0f       	add	r27, r27
    858a:	11 f4       	brne	.+4      	; 0x8590 <__floatsisf+0x36>
    858c:	60 ff       	sbrs	r22, 0
    858e:	1b c0       	rjmp	.+54     	; 0x85c6 <__floatsisf+0x6c>
    8590:	6f 5f       	subi	r22, 0xFF	; 255
    8592:	7f 4f       	sbci	r23, 0xFF	; 255
    8594:	8f 4f       	sbci	r24, 0xFF	; 255
    8596:	9f 4f       	sbci	r25, 0xFF	; 255
    8598:	16 c0       	rjmp	.+44     	; 0x85c6 <__floatsisf+0x6c>
    859a:	88 23       	and	r24, r24
    859c:	11 f0       	breq	.+4      	; 0x85a2 <__floatsisf+0x48>
    859e:	96 e9       	ldi	r25, 0x96	; 150
    85a0:	11 c0       	rjmp	.+34     	; 0x85c4 <__floatsisf+0x6a>
    85a2:	77 23       	and	r23, r23
    85a4:	21 f0       	breq	.+8      	; 0x85ae <__floatsisf+0x54>
    85a6:	9e e8       	ldi	r25, 0x8E	; 142
    85a8:	87 2f       	mov	r24, r23
    85aa:	76 2f       	mov	r23, r22
    85ac:	05 c0       	rjmp	.+10     	; 0x85b8 <__floatsisf+0x5e>
    85ae:	66 23       	and	r22, r22
    85b0:	71 f0       	breq	.+28     	; 0x85ce <__floatsisf+0x74>
    85b2:	96 e8       	ldi	r25, 0x86	; 134
    85b4:	86 2f       	mov	r24, r22
    85b6:	70 e0       	ldi	r23, 0x00	; 0
    85b8:	60 e0       	ldi	r22, 0x00	; 0
    85ba:	2a f0       	brmi	.+10     	; 0x85c6 <__floatsisf+0x6c>
    85bc:	9a 95       	dec	r25
    85be:	66 0f       	add	r22, r22
    85c0:	77 1f       	adc	r23, r23
    85c2:	88 1f       	adc	r24, r24
    85c4:	da f7       	brpl	.-10     	; 0x85bc <__floatsisf+0x62>
    85c6:	88 0f       	add	r24, r24
    85c8:	96 95       	lsr	r25
    85ca:	87 95       	ror	r24
    85cc:	97 f9       	bld	r25, 7
    85ce:	08 95       	ret

000085d0 <floor>:
    85d0:	07 d1       	rcall	.+526    	; 0x87e0 <__fp_trunc>
    85d2:	80 f0       	brcs	.+32     	; 0x85f4 <floor+0x24>
    85d4:	9f 37       	cpi	r25, 0x7F	; 127
    85d6:	40 f4       	brcc	.+16     	; 0x85e8 <floor+0x18>
    85d8:	91 11       	cpse	r25, r1
    85da:	0e f0       	brts	.+2      	; 0x85de <floor+0xe>
    85dc:	19 c1       	rjmp	.+562    	; 0x8810 <__fp_szero>
    85de:	60 e0       	ldi	r22, 0x00	; 0
    85e0:	70 e0       	ldi	r23, 0x00	; 0
    85e2:	80 e8       	ldi	r24, 0x80	; 128
    85e4:	9f eb       	ldi	r25, 0xBF	; 191
    85e6:	08 95       	ret
    85e8:	26 f4       	brtc	.+8      	; 0x85f2 <floor+0x22>
    85ea:	1b 16       	cp	r1, r27
    85ec:	61 1d       	adc	r22, r1
    85ee:	71 1d       	adc	r23, r1
    85f0:	81 1d       	adc	r24, r1
    85f2:	2b c0       	rjmp	.+86     	; 0x864a <__fp_mintl>
    85f4:	45 c0       	rjmp	.+138    	; 0x8680 <__fp_mpack>

000085f6 <__fp_cmp>:
    85f6:	99 0f       	add	r25, r25
    85f8:	00 08       	sbc	r0, r0
    85fa:	55 0f       	add	r21, r21
    85fc:	aa 0b       	sbc	r26, r26
    85fe:	e0 e8       	ldi	r30, 0x80	; 128
    8600:	fe ef       	ldi	r31, 0xFE	; 254
    8602:	16 16       	cp	r1, r22
    8604:	17 06       	cpc	r1, r23
    8606:	e8 07       	cpc	r30, r24
    8608:	f9 07       	cpc	r31, r25
    860a:	c0 f0       	brcs	.+48     	; 0x863c <__fp_cmp+0x46>
    860c:	12 16       	cp	r1, r18
    860e:	13 06       	cpc	r1, r19
    8610:	e4 07       	cpc	r30, r20
    8612:	f5 07       	cpc	r31, r21
    8614:	98 f0       	brcs	.+38     	; 0x863c <__fp_cmp+0x46>
    8616:	62 1b       	sub	r22, r18
    8618:	73 0b       	sbc	r23, r19
    861a:	84 0b       	sbc	r24, r20
    861c:	95 0b       	sbc	r25, r21
    861e:	39 f4       	brne	.+14     	; 0x862e <__fp_cmp+0x38>
    8620:	0a 26       	eor	r0, r26
    8622:	61 f0       	breq	.+24     	; 0x863c <__fp_cmp+0x46>
    8624:	23 2b       	or	r18, r19
    8626:	24 2b       	or	r18, r20
    8628:	25 2b       	or	r18, r21
    862a:	21 f4       	brne	.+8      	; 0x8634 <__fp_cmp+0x3e>
    862c:	08 95       	ret
    862e:	0a 26       	eor	r0, r26
    8630:	09 f4       	brne	.+2      	; 0x8634 <__fp_cmp+0x3e>
    8632:	a1 40       	sbci	r26, 0x01	; 1
    8634:	a6 95       	lsr	r26
    8636:	8f ef       	ldi	r24, 0xFF	; 255
    8638:	81 1d       	adc	r24, r1
    863a:	81 1d       	adc	r24, r1
    863c:	08 95       	ret

0000863e <__fp_inf>:
    863e:	97 f9       	bld	r25, 7
    8640:	9f 67       	ori	r25, 0x7F	; 127
    8642:	80 e8       	ldi	r24, 0x80	; 128
    8644:	70 e0       	ldi	r23, 0x00	; 0
    8646:	60 e0       	ldi	r22, 0x00	; 0
    8648:	08 95       	ret

0000864a <__fp_mintl>:
    864a:	88 23       	and	r24, r24
    864c:	71 f4       	brne	.+28     	; 0x866a <__fp_mintl+0x20>
    864e:	77 23       	and	r23, r23
    8650:	21 f0       	breq	.+8      	; 0x865a <__fp_mintl+0x10>
    8652:	98 50       	subi	r25, 0x08	; 8
    8654:	87 2b       	or	r24, r23
    8656:	76 2f       	mov	r23, r22
    8658:	07 c0       	rjmp	.+14     	; 0x8668 <__fp_mintl+0x1e>
    865a:	66 23       	and	r22, r22
    865c:	11 f4       	brne	.+4      	; 0x8662 <__fp_mintl+0x18>
    865e:	99 27       	eor	r25, r25
    8660:	0d c0       	rjmp	.+26     	; 0x867c <__fp_mintl+0x32>
    8662:	90 51       	subi	r25, 0x10	; 16
    8664:	86 2b       	or	r24, r22
    8666:	70 e0       	ldi	r23, 0x00	; 0
    8668:	60 e0       	ldi	r22, 0x00	; 0
    866a:	2a f0       	brmi	.+10     	; 0x8676 <__fp_mintl+0x2c>
    866c:	9a 95       	dec	r25
    866e:	66 0f       	add	r22, r22
    8670:	77 1f       	adc	r23, r23
    8672:	88 1f       	adc	r24, r24
    8674:	da f7       	brpl	.-10     	; 0x866c <__fp_mintl+0x22>
    8676:	88 0f       	add	r24, r24
    8678:	96 95       	lsr	r25
    867a:	87 95       	ror	r24
    867c:	97 f9       	bld	r25, 7
    867e:	08 95       	ret

00008680 <__fp_mpack>:
    8680:	9f 3f       	cpi	r25, 0xFF	; 255
    8682:	31 f0       	breq	.+12     	; 0x8690 <__fp_mpack_finite+0xc>

00008684 <__fp_mpack_finite>:
    8684:	91 50       	subi	r25, 0x01	; 1
    8686:	20 f4       	brcc	.+8      	; 0x8690 <__fp_mpack_finite+0xc>
    8688:	87 95       	ror	r24
    868a:	77 95       	ror	r23
    868c:	67 95       	ror	r22
    868e:	b7 95       	ror	r27
    8690:	88 0f       	add	r24, r24
    8692:	91 1d       	adc	r25, r1
    8694:	96 95       	lsr	r25
    8696:	87 95       	ror	r24
    8698:	97 f9       	bld	r25, 7
    869a:	08 95       	ret

0000869c <__fp_nan>:
    869c:	9f ef       	ldi	r25, 0xFF	; 255
    869e:	80 ec       	ldi	r24, 0xC0	; 192
    86a0:	08 95       	ret

000086a2 <__fp_powser>:
    86a2:	df 93       	push	r29
    86a4:	cf 93       	push	r28
    86a6:	1f 93       	push	r17
    86a8:	0f 93       	push	r16
    86aa:	ff 92       	push	r15
    86ac:	ef 92       	push	r14
    86ae:	df 92       	push	r13
    86b0:	7b 01       	movw	r14, r22
    86b2:	8c 01       	movw	r16, r24
    86b4:	68 94       	set
    86b6:	05 c0       	rjmp	.+10     	; 0x86c2 <__fp_powser+0x20>
    86b8:	da 2e       	mov	r13, r26
    86ba:	ef 01       	movw	r28, r30
    86bc:	c6 d0       	rcall	.+396    	; 0x884a <__mulsf3x>
    86be:	fe 01       	movw	r30, r28
    86c0:	e8 94       	clt
    86c2:	a5 91       	lpm	r26, Z+
    86c4:	25 91       	lpm	r18, Z+
    86c6:	35 91       	lpm	r19, Z+
    86c8:	45 91       	lpm	r20, Z+
    86ca:	55 91       	lpm	r21, Z+
    86cc:	ae f3       	brts	.-22     	; 0x86b8 <__fp_powser+0x16>
    86ce:	ef 01       	movw	r28, r30
    86d0:	ed dd       	rcall	.-1062   	; 0x82ac <__addsf3x>
    86d2:	fe 01       	movw	r30, r28
    86d4:	97 01       	movw	r18, r14
    86d6:	a8 01       	movw	r20, r16
    86d8:	da 94       	dec	r13
    86da:	79 f7       	brne	.-34     	; 0x86ba <__fp_powser+0x18>
    86dc:	df 90       	pop	r13
    86de:	ef 90       	pop	r14
    86e0:	ff 90       	pop	r15
    86e2:	0f 91       	pop	r16
    86e4:	1f 91       	pop	r17
    86e6:	cf 91       	pop	r28
    86e8:	df 91       	pop	r29
    86ea:	08 95       	ret

000086ec <__fp_pscA>:
    86ec:	00 24       	eor	r0, r0
    86ee:	0a 94       	dec	r0
    86f0:	16 16       	cp	r1, r22
    86f2:	17 06       	cpc	r1, r23
    86f4:	18 06       	cpc	r1, r24
    86f6:	09 06       	cpc	r0, r25
    86f8:	08 95       	ret

000086fa <__fp_pscB>:
    86fa:	00 24       	eor	r0, r0
    86fc:	0a 94       	dec	r0
    86fe:	12 16       	cp	r1, r18
    8700:	13 06       	cpc	r1, r19
    8702:	14 06       	cpc	r1, r20
    8704:	05 06       	cpc	r0, r21
    8706:	08 95       	ret
    8708:	c9 cf       	rjmp	.-110    	; 0x869c <__fp_nan>

0000870a <__fp_rempio2>:
    870a:	50 d0       	rcall	.+160    	; 0x87ac <__fp_splitA>
    870c:	e8 f3       	brcs	.-6      	; 0x8708 <__fp_pscB+0xe>
    870e:	e8 94       	clt
    8710:	e0 e0       	ldi	r30, 0x00	; 0
    8712:	bb 27       	eor	r27, r27
    8714:	9f 57       	subi	r25, 0x7F	; 127
    8716:	f0 f0       	brcs	.+60     	; 0x8754 <__fp_rempio2+0x4a>
    8718:	2a ed       	ldi	r18, 0xDA	; 218
    871a:	3f e0       	ldi	r19, 0x0F	; 15
    871c:	49 ec       	ldi	r20, 0xC9	; 201
    871e:	06 c0       	rjmp	.+12     	; 0x872c <__fp_rempio2+0x22>
    8720:	ee 0f       	add	r30, r30
    8722:	bb 0f       	add	r27, r27
    8724:	66 1f       	adc	r22, r22
    8726:	77 1f       	adc	r23, r23
    8728:	88 1f       	adc	r24, r24
    872a:	28 f0       	brcs	.+10     	; 0x8736 <__fp_rempio2+0x2c>
    872c:	b2 3a       	cpi	r27, 0xA2	; 162
    872e:	62 07       	cpc	r22, r18
    8730:	73 07       	cpc	r23, r19
    8732:	84 07       	cpc	r24, r20
    8734:	28 f0       	brcs	.+10     	; 0x8740 <__fp_rempio2+0x36>
    8736:	b2 5a       	subi	r27, 0xA2	; 162
    8738:	62 0b       	sbc	r22, r18
    873a:	73 0b       	sbc	r23, r19
    873c:	84 0b       	sbc	r24, r20
    873e:	e3 95       	inc	r30
    8740:	9a 95       	dec	r25
    8742:	72 f7       	brpl	.-36     	; 0x8720 <__fp_rempio2+0x16>
    8744:	80 38       	cpi	r24, 0x80	; 128
    8746:	30 f4       	brcc	.+12     	; 0x8754 <__fp_rempio2+0x4a>
    8748:	9a 95       	dec	r25
    874a:	bb 0f       	add	r27, r27
    874c:	66 1f       	adc	r22, r22
    874e:	77 1f       	adc	r23, r23
    8750:	88 1f       	adc	r24, r24
    8752:	d2 f7       	brpl	.-12     	; 0x8748 <__fp_rempio2+0x3e>
    8754:	90 48       	sbci	r25, 0x80	; 128
    8756:	96 cf       	rjmp	.-212    	; 0x8684 <__fp_mpack_finite>

00008758 <__fp_round>:
    8758:	09 2e       	mov	r0, r25
    875a:	03 94       	inc	r0
    875c:	00 0c       	add	r0, r0
    875e:	11 f4       	brne	.+4      	; 0x8764 <__fp_round+0xc>
    8760:	88 23       	and	r24, r24
    8762:	52 f0       	brmi	.+20     	; 0x8778 <__fp_round+0x20>
    8764:	bb 0f       	add	r27, r27
    8766:	40 f4       	brcc	.+16     	; 0x8778 <__fp_round+0x20>
    8768:	bf 2b       	or	r27, r31
    876a:	11 f4       	brne	.+4      	; 0x8770 <__fp_round+0x18>
    876c:	60 ff       	sbrs	r22, 0
    876e:	04 c0       	rjmp	.+8      	; 0x8778 <__fp_round+0x20>
    8770:	6f 5f       	subi	r22, 0xFF	; 255
    8772:	7f 4f       	sbci	r23, 0xFF	; 255
    8774:	8f 4f       	sbci	r24, 0xFF	; 255
    8776:	9f 4f       	sbci	r25, 0xFF	; 255
    8778:	08 95       	ret

0000877a <__fp_sinus>:
    877a:	ef 93       	push	r30
    877c:	e0 ff       	sbrs	r30, 0
    877e:	06 c0       	rjmp	.+12     	; 0x878c <__fp_sinus+0x12>
    8780:	a2 ea       	ldi	r26, 0xA2	; 162
    8782:	2a ed       	ldi	r18, 0xDA	; 218
    8784:	3f e0       	ldi	r19, 0x0F	; 15
    8786:	49 ec       	ldi	r20, 0xC9	; 201
    8788:	5f eb       	ldi	r21, 0xBF	; 191
    878a:	90 dd       	rcall	.-1248   	; 0x82ac <__addsf3x>
    878c:	e5 df       	rcall	.-54     	; 0x8758 <__fp_round>
    878e:	0f 90       	pop	r0
    8790:	03 94       	inc	r0
    8792:	01 fc       	sbrc	r0, 1
    8794:	90 58       	subi	r25, 0x80	; 128
    8796:	e1 e1       	ldi	r30, 0x11	; 17
    8798:	f1 e0       	ldi	r31, 0x01	; 1
    879a:	04 c1       	rjmp	.+520    	; 0x89a4 <__fp_powsodd>

0000879c <__fp_split3>:
    879c:	57 fd       	sbrc	r21, 7
    879e:	90 58       	subi	r25, 0x80	; 128
    87a0:	44 0f       	add	r20, r20
    87a2:	55 1f       	adc	r21, r21
    87a4:	59 f0       	breq	.+22     	; 0x87bc <__fp_splitA+0x10>
    87a6:	5f 3f       	cpi	r21, 0xFF	; 255
    87a8:	71 f0       	breq	.+28     	; 0x87c6 <__fp_splitA+0x1a>
    87aa:	47 95       	ror	r20

000087ac <__fp_splitA>:
    87ac:	88 0f       	add	r24, r24
    87ae:	97 fb       	bst	r25, 7
    87b0:	99 1f       	adc	r25, r25
    87b2:	61 f0       	breq	.+24     	; 0x87cc <__fp_splitA+0x20>
    87b4:	9f 3f       	cpi	r25, 0xFF	; 255
    87b6:	79 f0       	breq	.+30     	; 0x87d6 <__fp_splitA+0x2a>
    87b8:	87 95       	ror	r24
    87ba:	08 95       	ret
    87bc:	12 16       	cp	r1, r18
    87be:	13 06       	cpc	r1, r19
    87c0:	14 06       	cpc	r1, r20
    87c2:	55 1f       	adc	r21, r21
    87c4:	f2 cf       	rjmp	.-28     	; 0x87aa <__fp_split3+0xe>
    87c6:	46 95       	lsr	r20
    87c8:	f1 df       	rcall	.-30     	; 0x87ac <__fp_splitA>
    87ca:	08 c0       	rjmp	.+16     	; 0x87dc <__fp_splitA+0x30>
    87cc:	16 16       	cp	r1, r22
    87ce:	17 06       	cpc	r1, r23
    87d0:	18 06       	cpc	r1, r24
    87d2:	99 1f       	adc	r25, r25
    87d4:	f1 cf       	rjmp	.-30     	; 0x87b8 <__fp_splitA+0xc>
    87d6:	86 95       	lsr	r24
    87d8:	71 05       	cpc	r23, r1
    87da:	61 05       	cpc	r22, r1
    87dc:	08 94       	sec
    87de:	08 95       	ret

000087e0 <__fp_trunc>:
    87e0:	e5 df       	rcall	.-54     	; 0x87ac <__fp_splitA>
    87e2:	a0 f0       	brcs	.+40     	; 0x880c <__fp_trunc+0x2c>
    87e4:	be e7       	ldi	r27, 0x7E	; 126
    87e6:	b9 17       	cp	r27, r25
    87e8:	88 f4       	brcc	.+34     	; 0x880c <__fp_trunc+0x2c>
    87ea:	bb 27       	eor	r27, r27
    87ec:	9f 38       	cpi	r25, 0x8F	; 143
    87ee:	60 f4       	brcc	.+24     	; 0x8808 <__fp_trunc+0x28>
    87f0:	16 16       	cp	r1, r22
    87f2:	b1 1d       	adc	r27, r1
    87f4:	67 2f       	mov	r22, r23
    87f6:	78 2f       	mov	r23, r24
    87f8:	88 27       	eor	r24, r24
    87fa:	98 5f       	subi	r25, 0xF8	; 248
    87fc:	f7 cf       	rjmp	.-18     	; 0x87ec <__fp_trunc+0xc>
    87fe:	86 95       	lsr	r24
    8800:	77 95       	ror	r23
    8802:	67 95       	ror	r22
    8804:	b1 1d       	adc	r27, r1
    8806:	93 95       	inc	r25
    8808:	96 39       	cpi	r25, 0x96	; 150
    880a:	c8 f3       	brcs	.-14     	; 0x87fe <__fp_trunc+0x1e>
    880c:	08 95       	ret

0000880e <__fp_zero>:
    880e:	e8 94       	clt

00008810 <__fp_szero>:
    8810:	bb 27       	eor	r27, r27
    8812:	66 27       	eor	r22, r22
    8814:	77 27       	eor	r23, r23
    8816:	cb 01       	movw	r24, r22
    8818:	97 f9       	bld	r25, 7
    881a:	08 95       	ret

0000881c <__gesf2>:
    881c:	ec de       	rcall	.-552    	; 0x85f6 <__fp_cmp>
    881e:	08 f4       	brcc	.+2      	; 0x8822 <__gesf2+0x6>
    8820:	8f ef       	ldi	r24, 0xFF	; 255
    8822:	08 95       	ret

00008824 <inverse>:
    8824:	9b 01       	movw	r18, r22
    8826:	ac 01       	movw	r20, r24
    8828:	60 e0       	ldi	r22, 0x00	; 0
    882a:	70 e0       	ldi	r23, 0x00	; 0
    882c:	80 e8       	ldi	r24, 0x80	; 128
    882e:	9f e3       	ldi	r25, 0x3F	; 63
    8830:	f9 cd       	rjmp	.-1038   	; 0x8424 <__divsf3>

00008832 <__mulsf3>:
    8832:	0b d0       	rcall	.+22     	; 0x884a <__mulsf3x>
    8834:	91 cf       	rjmp	.-222    	; 0x8758 <__fp_round>
    8836:	5a df       	rcall	.-332    	; 0x86ec <__fp_pscA>
    8838:	28 f0       	brcs	.+10     	; 0x8844 <__mulsf3+0x12>
    883a:	5f df       	rcall	.-322    	; 0x86fa <__fp_pscB>
    883c:	18 f0       	brcs	.+6      	; 0x8844 <__mulsf3+0x12>
    883e:	95 23       	and	r25, r21
    8840:	09 f0       	breq	.+2      	; 0x8844 <__mulsf3+0x12>
    8842:	fd ce       	rjmp	.-518    	; 0x863e <__fp_inf>
    8844:	2b cf       	rjmp	.-426    	; 0x869c <__fp_nan>
    8846:	11 24       	eor	r1, r1
    8848:	e3 cf       	rjmp	.-58     	; 0x8810 <__fp_szero>

0000884a <__mulsf3x>:
    884a:	a8 df       	rcall	.-176    	; 0x879c <__fp_split3>
    884c:	a0 f3       	brcs	.-24     	; 0x8836 <__mulsf3+0x4>

0000884e <__mulsf3_pse>:
    884e:	95 9f       	mul	r25, r21
    8850:	d1 f3       	breq	.-12     	; 0x8846 <__mulsf3+0x14>
    8852:	95 0f       	add	r25, r21
    8854:	50 e0       	ldi	r21, 0x00	; 0
    8856:	55 1f       	adc	r21, r21
    8858:	62 9f       	mul	r22, r18
    885a:	f0 01       	movw	r30, r0
    885c:	72 9f       	mul	r23, r18
    885e:	bb 27       	eor	r27, r27
    8860:	f0 0d       	add	r31, r0
    8862:	b1 1d       	adc	r27, r1
    8864:	63 9f       	mul	r22, r19
    8866:	aa 27       	eor	r26, r26
    8868:	f0 0d       	add	r31, r0
    886a:	b1 1d       	adc	r27, r1
    886c:	aa 1f       	adc	r26, r26
    886e:	64 9f       	mul	r22, r20
    8870:	66 27       	eor	r22, r22
    8872:	b0 0d       	add	r27, r0
    8874:	a1 1d       	adc	r26, r1
    8876:	66 1f       	adc	r22, r22
    8878:	82 9f       	mul	r24, r18
    887a:	22 27       	eor	r18, r18
    887c:	b0 0d       	add	r27, r0
    887e:	a1 1d       	adc	r26, r1
    8880:	62 1f       	adc	r22, r18
    8882:	73 9f       	mul	r23, r19
    8884:	b0 0d       	add	r27, r0
    8886:	a1 1d       	adc	r26, r1
    8888:	62 1f       	adc	r22, r18
    888a:	83 9f       	mul	r24, r19
    888c:	a0 0d       	add	r26, r0
    888e:	61 1d       	adc	r22, r1
    8890:	22 1f       	adc	r18, r18
    8892:	74 9f       	mul	r23, r20
    8894:	33 27       	eor	r19, r19
    8896:	a0 0d       	add	r26, r0
    8898:	61 1d       	adc	r22, r1
    889a:	23 1f       	adc	r18, r19
    889c:	84 9f       	mul	r24, r20
    889e:	60 0d       	add	r22, r0
    88a0:	21 1d       	adc	r18, r1
    88a2:	82 2f       	mov	r24, r18
    88a4:	76 2f       	mov	r23, r22
    88a6:	6a 2f       	mov	r22, r26
    88a8:	11 24       	eor	r1, r1
    88aa:	9f 57       	subi	r25, 0x7F	; 127
    88ac:	50 40       	sbci	r21, 0x00	; 0
    88ae:	8a f0       	brmi	.+34     	; 0x88d2 <__mulsf3_pse+0x84>
    88b0:	e1 f0       	breq	.+56     	; 0x88ea <__mulsf3_pse+0x9c>
    88b2:	88 23       	and	r24, r24
    88b4:	4a f0       	brmi	.+18     	; 0x88c8 <__mulsf3_pse+0x7a>
    88b6:	ee 0f       	add	r30, r30
    88b8:	ff 1f       	adc	r31, r31
    88ba:	bb 1f       	adc	r27, r27
    88bc:	66 1f       	adc	r22, r22
    88be:	77 1f       	adc	r23, r23
    88c0:	88 1f       	adc	r24, r24
    88c2:	91 50       	subi	r25, 0x01	; 1
    88c4:	50 40       	sbci	r21, 0x00	; 0
    88c6:	a9 f7       	brne	.-22     	; 0x88b2 <__mulsf3_pse+0x64>
    88c8:	9e 3f       	cpi	r25, 0xFE	; 254
    88ca:	51 05       	cpc	r21, r1
    88cc:	70 f0       	brcs	.+28     	; 0x88ea <__mulsf3_pse+0x9c>
    88ce:	b7 ce       	rjmp	.-658    	; 0x863e <__fp_inf>
    88d0:	9f cf       	rjmp	.-194    	; 0x8810 <__fp_szero>
    88d2:	5f 3f       	cpi	r21, 0xFF	; 255
    88d4:	ec f3       	brlt	.-6      	; 0x88d0 <__mulsf3_pse+0x82>
    88d6:	98 3e       	cpi	r25, 0xE8	; 232
    88d8:	dc f3       	brlt	.-10     	; 0x88d0 <__mulsf3_pse+0x82>
    88da:	86 95       	lsr	r24
    88dc:	77 95       	ror	r23
    88de:	67 95       	ror	r22
    88e0:	b7 95       	ror	r27
    88e2:	f7 95       	ror	r31
    88e4:	e7 95       	ror	r30
    88e6:	9f 5f       	subi	r25, 0xFF	; 255
    88e8:	c1 f7       	brne	.-16     	; 0x88da <__mulsf3_pse+0x8c>
    88ea:	fe 2b       	or	r31, r30
    88ec:	88 0f       	add	r24, r24
    88ee:	91 1d       	adc	r25, r1
    88f0:	96 95       	lsr	r25
    88f2:	87 95       	ror	r24
    88f4:	97 f9       	bld	r25, 7
    88f6:	08 95       	ret

000088f8 <sin>:
    88f8:	9f 93       	push	r25
    88fa:	07 df       	rcall	.-498    	; 0x870a <__fp_rempio2>
    88fc:	0f 90       	pop	r0
    88fe:	07 fc       	sbrc	r0, 7
    8900:	ee 5f       	subi	r30, 0xFE	; 254
    8902:	3b cf       	rjmp	.-394    	; 0x877a <__fp_sinus>
    8904:	11 f4       	brne	.+4      	; 0x890a <sin+0x12>
    8906:	0e f4       	brtc	.+2      	; 0x890a <sin+0x12>
    8908:	c9 ce       	rjmp	.-622    	; 0x869c <__fp_nan>
    890a:	ba ce       	rjmp	.-652    	; 0x8680 <__fp_mpack>

0000890c <sqrt>:
    890c:	4f df       	rcall	.-354    	; 0x87ac <__fp_splitA>
    890e:	d0 f3       	brcs	.-12     	; 0x8904 <sin+0xc>
    8910:	99 23       	and	r25, r25
    8912:	d9 f3       	breq	.-10     	; 0x890a <sin+0x12>
    8914:	ce f3       	brts	.-14     	; 0x8908 <sin+0x10>
    8916:	9f 57       	subi	r25, 0x7F	; 127
    8918:	55 0b       	sbc	r21, r21
    891a:	87 ff       	sbrs	r24, 7
    891c:	3c d0       	rcall	.+120    	; 0x8996 <__fp_norm2>
    891e:	00 24       	eor	r0, r0
    8920:	a0 e6       	ldi	r26, 0x60	; 96
    8922:	40 ea       	ldi	r20, 0xA0	; 160
    8924:	90 01       	movw	r18, r0
    8926:	80 58       	subi	r24, 0x80	; 128
    8928:	56 95       	lsr	r21
    892a:	97 95       	ror	r25
    892c:	28 f4       	brcc	.+10     	; 0x8938 <sqrt+0x2c>
    892e:	80 5c       	subi	r24, 0xC0	; 192
    8930:	66 0f       	add	r22, r22
    8932:	77 1f       	adc	r23, r23
    8934:	88 1f       	adc	r24, r24
    8936:	20 f0       	brcs	.+8      	; 0x8940 <sqrt+0x34>
    8938:	26 17       	cp	r18, r22
    893a:	37 07       	cpc	r19, r23
    893c:	48 07       	cpc	r20, r24
    893e:	30 f4       	brcc	.+12     	; 0x894c <sqrt+0x40>
    8940:	62 1b       	sub	r22, r18
    8942:	73 0b       	sbc	r23, r19
    8944:	84 0b       	sbc	r24, r20
    8946:	20 29       	or	r18, r0
    8948:	31 29       	or	r19, r1
    894a:	4a 2b       	or	r20, r26
    894c:	a6 95       	lsr	r26
    894e:	17 94       	ror	r1
    8950:	07 94       	ror	r0
    8952:	20 25       	eor	r18, r0
    8954:	31 25       	eor	r19, r1
    8956:	4a 27       	eor	r20, r26
    8958:	58 f7       	brcc	.-42     	; 0x8930 <sqrt+0x24>
    895a:	66 0f       	add	r22, r22
    895c:	77 1f       	adc	r23, r23
    895e:	88 1f       	adc	r24, r24
    8960:	20 f0       	brcs	.+8      	; 0x896a <sqrt+0x5e>
    8962:	26 17       	cp	r18, r22
    8964:	37 07       	cpc	r19, r23
    8966:	48 07       	cpc	r20, r24
    8968:	30 f4       	brcc	.+12     	; 0x8976 <sqrt+0x6a>
    896a:	62 0b       	sbc	r22, r18
    896c:	73 0b       	sbc	r23, r19
    896e:	84 0b       	sbc	r24, r20
    8970:	20 0d       	add	r18, r0
    8972:	31 1d       	adc	r19, r1
    8974:	41 1d       	adc	r20, r1
    8976:	a0 95       	com	r26
    8978:	81 f7       	brne	.-32     	; 0x895a <sqrt+0x4e>
    897a:	b9 01       	movw	r22, r18
    897c:	84 2f       	mov	r24, r20
    897e:	91 58       	subi	r25, 0x81	; 129
    8980:	88 0f       	add	r24, r24
    8982:	96 95       	lsr	r25
    8984:	87 95       	ror	r24
    8986:	08 95       	ret

00008988 <square>:
    8988:	9b 01       	movw	r18, r22
    898a:	ac 01       	movw	r20, r24
    898c:	52 cf       	rjmp	.-348    	; 0x8832 <__mulsf3>

0000898e <__unordsf2>:
    898e:	33 de       	rcall	.-922    	; 0x85f6 <__fp_cmp>
    8990:	88 0b       	sbc	r24, r24
    8992:	99 0b       	sbc	r25, r25
    8994:	08 95       	ret

00008996 <__fp_norm2>:
    8996:	91 50       	subi	r25, 0x01	; 1
    8998:	50 40       	sbci	r21, 0x00	; 0
    899a:	66 0f       	add	r22, r22
    899c:	77 1f       	adc	r23, r23
    899e:	88 1f       	adc	r24, r24
    89a0:	d2 f7       	brpl	.-12     	; 0x8996 <__fp_norm2>
    89a2:	08 95       	ret

000089a4 <__fp_powsodd>:
    89a4:	9f 93       	push	r25
    89a6:	8f 93       	push	r24
    89a8:	7f 93       	push	r23
    89aa:	6f 93       	push	r22
    89ac:	ff 93       	push	r31
    89ae:	ef 93       	push	r30
    89b0:	9b 01       	movw	r18, r22
    89b2:	ac 01       	movw	r20, r24
    89b4:	3e df       	rcall	.-388    	; 0x8832 <__mulsf3>
    89b6:	ef 91       	pop	r30
    89b8:	ff 91       	pop	r31
    89ba:	73 de       	rcall	.-794    	; 0x86a2 <__fp_powser>
    89bc:	2f 91       	pop	r18
    89be:	3f 91       	pop	r19
    89c0:	4f 91       	pop	r20
    89c2:	5f 91       	pop	r21
    89c4:	36 cf       	rjmp	.-404    	; 0x8832 <__mulsf3>

000089c6 <__muluhisi3>:
    89c6:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <__umulhisi3>
    89ca:	a5 9f       	mul	r26, r21
    89cc:	90 0d       	add	r25, r0
    89ce:	b4 9f       	mul	r27, r20
    89d0:	90 0d       	add	r25, r0
    89d2:	a4 9f       	mul	r26, r20
    89d4:	80 0d       	add	r24, r0
    89d6:	91 1d       	adc	r25, r1
    89d8:	11 24       	eor	r1, r1
    89da:	08 95       	ret

000089dc <__mulsi3>:
    89dc:	db 01       	movw	r26, r22
    89de:	8f 93       	push	r24
    89e0:	9f 93       	push	r25
    89e2:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    89e6:	bf 91       	pop	r27
    89e8:	af 91       	pop	r26
    89ea:	a2 9f       	mul	r26, r18
    89ec:	80 0d       	add	r24, r0
    89ee:	91 1d       	adc	r25, r1
    89f0:	a3 9f       	mul	r26, r19
    89f2:	90 0d       	add	r25, r0
    89f4:	b2 9f       	mul	r27, r18
    89f6:	90 0d       	add	r25, r0
    89f8:	11 24       	eor	r1, r1
    89fa:	08 95       	ret

000089fc <__udivmodqi4>:
    89fc:	99 1b       	sub	r25, r25
    89fe:	79 e0       	ldi	r23, 0x09	; 9
    8a00:	04 c0       	rjmp	.+8      	; 0x8a0a <__udivmodqi4_ep>

00008a02 <__udivmodqi4_loop>:
    8a02:	99 1f       	adc	r25, r25
    8a04:	96 17       	cp	r25, r22
    8a06:	08 f0       	brcs	.+2      	; 0x8a0a <__udivmodqi4_ep>
    8a08:	96 1b       	sub	r25, r22

00008a0a <__udivmodqi4_ep>:
    8a0a:	88 1f       	adc	r24, r24
    8a0c:	7a 95       	dec	r23
    8a0e:	c9 f7       	brne	.-14     	; 0x8a02 <__udivmodqi4_loop>
    8a10:	80 95       	com	r24
    8a12:	08 95       	ret

00008a14 <__divmodhi4>:
    8a14:	97 fb       	bst	r25, 7
    8a16:	07 2e       	mov	r0, r23
    8a18:	16 f4       	brtc	.+4      	; 0x8a1e <__divmodhi4+0xa>
    8a1a:	00 94       	com	r0
    8a1c:	07 d0       	rcall	.+14     	; 0x8a2c <__divmodhi4_neg1>
    8a1e:	77 fd       	sbrc	r23, 7
    8a20:	09 d0       	rcall	.+18     	; 0x8a34 <__divmodhi4_neg2>
    8a22:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <__udivmodhi4>
    8a26:	07 fc       	sbrc	r0, 7
    8a28:	05 d0       	rcall	.+10     	; 0x8a34 <__divmodhi4_neg2>
    8a2a:	3e f4       	brtc	.+14     	; 0x8a3a <__divmodhi4_exit>

00008a2c <__divmodhi4_neg1>:
    8a2c:	90 95       	com	r25
    8a2e:	81 95       	neg	r24
    8a30:	9f 4f       	sbci	r25, 0xFF	; 255
    8a32:	08 95       	ret

00008a34 <__divmodhi4_neg2>:
    8a34:	70 95       	com	r23
    8a36:	61 95       	neg	r22
    8a38:	7f 4f       	sbci	r23, 0xFF	; 255

00008a3a <__divmodhi4_exit>:
    8a3a:	08 95       	ret

00008a3c <__udivmodsi4>:
    8a3c:	a1 e2       	ldi	r26, 0x21	; 33
    8a3e:	1a 2e       	mov	r1, r26
    8a40:	aa 1b       	sub	r26, r26
    8a42:	bb 1b       	sub	r27, r27
    8a44:	fd 01       	movw	r30, r26
    8a46:	0d c0       	rjmp	.+26     	; 0x8a62 <__udivmodsi4_ep>

00008a48 <__udivmodsi4_loop>:
    8a48:	aa 1f       	adc	r26, r26
    8a4a:	bb 1f       	adc	r27, r27
    8a4c:	ee 1f       	adc	r30, r30
    8a4e:	ff 1f       	adc	r31, r31
    8a50:	a2 17       	cp	r26, r18
    8a52:	b3 07       	cpc	r27, r19
    8a54:	e4 07       	cpc	r30, r20
    8a56:	f5 07       	cpc	r31, r21
    8a58:	20 f0       	brcs	.+8      	; 0x8a62 <__udivmodsi4_ep>
    8a5a:	a2 1b       	sub	r26, r18
    8a5c:	b3 0b       	sbc	r27, r19
    8a5e:	e4 0b       	sbc	r30, r20
    8a60:	f5 0b       	sbc	r31, r21

00008a62 <__udivmodsi4_ep>:
    8a62:	66 1f       	adc	r22, r22
    8a64:	77 1f       	adc	r23, r23
    8a66:	88 1f       	adc	r24, r24
    8a68:	99 1f       	adc	r25, r25
    8a6a:	1a 94       	dec	r1
    8a6c:	69 f7       	brne	.-38     	; 0x8a48 <__udivmodsi4_loop>
    8a6e:	60 95       	com	r22
    8a70:	70 95       	com	r23
    8a72:	80 95       	com	r24
    8a74:	90 95       	com	r25
    8a76:	9b 01       	movw	r18, r22
    8a78:	ac 01       	movw	r20, r24
    8a7a:	bd 01       	movw	r22, r26
    8a7c:	cf 01       	movw	r24, r30
    8a7e:	08 95       	ret

00008a80 <__divmodsi4>:
    8a80:	05 2e       	mov	r0, r21
    8a82:	97 fb       	bst	r25, 7
    8a84:	16 f4       	brtc	.+4      	; 0x8a8a <__divmodsi4+0xa>
    8a86:	00 94       	com	r0
    8a88:	07 d0       	rcall	.+14     	; 0x8a98 <__divmodsi4_neg1>
    8a8a:	57 fd       	sbrc	r21, 7
    8a8c:	0d d0       	rcall	.+26     	; 0x8aa8 <__divmodsi4_neg2>
    8a8e:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    8a92:	07 fc       	sbrc	r0, 7
    8a94:	09 d0       	rcall	.+18     	; 0x8aa8 <__divmodsi4_neg2>
    8a96:	7e f4       	brtc	.+30     	; 0x8ab6 <__divmodsi4_exit>

00008a98 <__divmodsi4_neg1>:
    8a98:	90 95       	com	r25
    8a9a:	80 95       	com	r24
    8a9c:	70 95       	com	r23
    8a9e:	61 95       	neg	r22
    8aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    8aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    8aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    8aa6:	08 95       	ret

00008aa8 <__divmodsi4_neg2>:
    8aa8:	50 95       	com	r21
    8aaa:	40 95       	com	r20
    8aac:	30 95       	com	r19
    8aae:	21 95       	neg	r18
    8ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ab2:	4f 4f       	sbci	r20, 0xFF	; 255
    8ab4:	5f 4f       	sbci	r21, 0xFF	; 255

00008ab6 <__divmodsi4_exit>:
    8ab6:	08 95       	ret

00008ab8 <__umulhisi3>:
    8ab8:	a2 9f       	mul	r26, r18
    8aba:	b0 01       	movw	r22, r0
    8abc:	b3 9f       	mul	r27, r19
    8abe:	c0 01       	movw	r24, r0
    8ac0:	a3 9f       	mul	r26, r19
    8ac2:	01 d0       	rcall	.+2      	; 0x8ac6 <__umulhisi3+0xe>
    8ac4:	b2 9f       	mul	r27, r18
    8ac6:	70 0d       	add	r23, r0
    8ac8:	81 1d       	adc	r24, r1
    8aca:	11 24       	eor	r1, r1
    8acc:	91 1d       	adc	r25, r1
    8ace:	08 95       	ret

00008ad0 <__udivmodhi4>:
    8ad0:	aa 1b       	sub	r26, r26
    8ad2:	bb 1b       	sub	r27, r27
    8ad4:	51 e1       	ldi	r21, 0x11	; 17
    8ad6:	07 c0       	rjmp	.+14     	; 0x8ae6 <__udivmodhi4_ep>

00008ad8 <__udivmodhi4_loop>:
    8ad8:	aa 1f       	adc	r26, r26
    8ada:	bb 1f       	adc	r27, r27
    8adc:	a6 17       	cp	r26, r22
    8ade:	b7 07       	cpc	r27, r23
    8ae0:	10 f0       	brcs	.+4      	; 0x8ae6 <__udivmodhi4_ep>
    8ae2:	a6 1b       	sub	r26, r22
    8ae4:	b7 0b       	sbc	r27, r23

00008ae6 <__udivmodhi4_ep>:
    8ae6:	88 1f       	adc	r24, r24
    8ae8:	99 1f       	adc	r25, r25
    8aea:	5a 95       	dec	r21
    8aec:	a9 f7       	brne	.-22     	; 0x8ad8 <__udivmodhi4_loop>
    8aee:	80 95       	com	r24
    8af0:	90 95       	com	r25
    8af2:	bc 01       	movw	r22, r24
    8af4:	cd 01       	movw	r24, r26
    8af6:	08 95       	ret

00008af8 <__tablejump_elpm__>:
    8af8:	07 90       	elpm	r0, Z+
    8afa:	f6 91       	elpm	r31, Z+
    8afc:	e0 2d       	mov	r30, r0
    8afe:	09 94       	ijmp

00008b00 <atof>:
    8b00:	66 27       	eor	r22, r22
    8b02:	77 27       	eor	r23, r23
    8b04:	0c 94 47 47 	jmp	0x8e8e	; 0x8e8e <strtod>

00008b08 <atoi>:
    8b08:	fc 01       	movw	r30, r24
    8b0a:	88 27       	eor	r24, r24
    8b0c:	99 27       	eor	r25, r25
    8b0e:	e8 94       	clt
    8b10:	21 91       	ld	r18, Z+
    8b12:	20 32       	cpi	r18, 0x20	; 32
    8b14:	e9 f3       	breq	.-6      	; 0x8b10 <atoi+0x8>
    8b16:	29 30       	cpi	r18, 0x09	; 9
    8b18:	10 f0       	brcs	.+4      	; 0x8b1e <atoi+0x16>
    8b1a:	2e 30       	cpi	r18, 0x0E	; 14
    8b1c:	c8 f3       	brcs	.-14     	; 0x8b10 <atoi+0x8>
    8b1e:	2b 32       	cpi	r18, 0x2B	; 43
    8b20:	41 f0       	breq	.+16     	; 0x8b32 <atoi+0x2a>
    8b22:	2d 32       	cpi	r18, 0x2D	; 45
    8b24:	39 f4       	brne	.+14     	; 0x8b34 <atoi+0x2c>
    8b26:	68 94       	set
    8b28:	04 c0       	rjmp	.+8      	; 0x8b32 <atoi+0x2a>
    8b2a:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <__mulhi_const_10>
    8b2e:	82 0f       	add	r24, r18
    8b30:	91 1d       	adc	r25, r1
    8b32:	21 91       	ld	r18, Z+
    8b34:	20 53       	subi	r18, 0x30	; 48
    8b36:	2a 30       	cpi	r18, 0x0A	; 10
    8b38:	c0 f3       	brcs	.-16     	; 0x8b2a <atoi+0x22>
    8b3a:	1e f4       	brtc	.+6      	; 0x8b42 <atoi+0x3a>
    8b3c:	90 95       	com	r25
    8b3e:	81 95       	neg	r24
    8b40:	9f 4f       	sbci	r25, 0xFF	; 255
    8b42:	08 95       	ret

00008b44 <atol>:
    8b44:	1f 93       	push	r17
    8b46:	fc 01       	movw	r30, r24
    8b48:	99 27       	eor	r25, r25
    8b4a:	88 27       	eor	r24, r24
    8b4c:	bc 01       	movw	r22, r24
    8b4e:	e8 94       	clt
    8b50:	11 91       	ld	r17, Z+
    8b52:	10 32       	cpi	r17, 0x20	; 32
    8b54:	e9 f3       	breq	.-6      	; 0x8b50 <atol+0xc>
    8b56:	19 30       	cpi	r17, 0x09	; 9
    8b58:	10 f0       	brcs	.+4      	; 0x8b5e <atol+0x1a>
    8b5a:	1e 30       	cpi	r17, 0x0E	; 14
    8b5c:	c8 f3       	brcs	.-14     	; 0x8b50 <atol+0xc>
    8b5e:	1b 32       	cpi	r17, 0x2B	; 43
    8b60:	51 f0       	breq	.+20     	; 0x8b76 <atol+0x32>
    8b62:	1d 32       	cpi	r17, 0x2D	; 45
    8b64:	49 f4       	brne	.+18     	; 0x8b78 <atol+0x34>
    8b66:	68 94       	set
    8b68:	06 c0       	rjmp	.+12     	; 0x8b76 <atol+0x32>
    8b6a:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <__mulsi_const_10>
    8b6e:	61 0f       	add	r22, r17
    8b70:	71 1d       	adc	r23, r1
    8b72:	81 1d       	adc	r24, r1
    8b74:	91 1d       	adc	r25, r1
    8b76:	11 91       	ld	r17, Z+
    8b78:	10 53       	subi	r17, 0x30	; 48
    8b7a:	1a 30       	cpi	r17, 0x0A	; 10
    8b7c:	b0 f3       	brcs	.-20     	; 0x8b6a <atol+0x26>
    8b7e:	3e f4       	brtc	.+14     	; 0x8b8e <atol+0x4a>
    8b80:	90 95       	com	r25
    8b82:	80 95       	com	r24
    8b84:	70 95       	com	r23
    8b86:	61 95       	neg	r22
    8b88:	7f 4f       	sbci	r23, 0xFF	; 255
    8b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    8b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b8e:	1f 91       	pop	r17
    8b90:	08 95       	ret

00008b92 <isspace>:
    8b92:	91 11       	cpse	r25, r1
    8b94:	e1 c2       	rjmp	.+1474   	; 0x9158 <__ctype_isfalse>
    8b96:	80 32       	cpi	r24, 0x20	; 32
    8b98:	19 f0       	breq	.+6      	; 0x8ba0 <isspace+0xe>
    8b9a:	89 50       	subi	r24, 0x09	; 9
    8b9c:	85 50       	subi	r24, 0x05	; 5
    8b9e:	d0 f7       	brcc	.-12     	; 0x8b94 <isspace+0x2>
    8ba0:	08 95       	ret

00008ba2 <tolower>:
    8ba2:	91 11       	cpse	r25, r1
    8ba4:	08 95       	ret
    8ba6:	81 54       	subi	r24, 0x41	; 65
    8ba8:	8a 51       	subi	r24, 0x1A	; 26
    8baa:	08 f4       	brcc	.+2      	; 0x8bae <tolower+0xc>
    8bac:	80 5e       	subi	r24, 0xE0	; 224
    8bae:	85 5a       	subi	r24, 0xA5	; 165
    8bb0:	08 95       	ret

00008bb2 <toupper>:
    8bb2:	91 11       	cpse	r25, r1
    8bb4:	08 95       	ret
    8bb6:	81 56       	subi	r24, 0x61	; 97
    8bb8:	8a 51       	subi	r24, 0x1A	; 26
    8bba:	08 f4       	brcc	.+2      	; 0x8bbe <toupper+0xc>
    8bbc:	80 52       	subi	r24, 0x20	; 32
    8bbe:	85 58       	subi	r24, 0x85	; 133
    8bc0:	08 95       	ret

00008bc2 <strtok>:
    8bc2:	40 e2       	ldi	r20, 0x20	; 32
    8bc4:	59 e0       	ldi	r21, 0x09	; 9
    8bc6:	0c 94 5d 46 	jmp	0x8cba	; 0x8cba <strtok_r>

00008bca <memcpy>:
    8bca:	fb 01       	movw	r30, r22
    8bcc:	dc 01       	movw	r26, r24
    8bce:	02 c0       	rjmp	.+4      	; 0x8bd4 <memcpy+0xa>
    8bd0:	01 90       	ld	r0, Z+
    8bd2:	0d 92       	st	X+, r0
    8bd4:	41 50       	subi	r20, 0x01	; 1
    8bd6:	50 40       	sbci	r21, 0x00	; 0
    8bd8:	d8 f7       	brcc	.-10     	; 0x8bd0 <memcpy+0x6>
    8bda:	08 95       	ret

00008bdc <memmove>:
    8bdc:	68 17       	cp	r22, r24
    8bde:	79 07       	cpc	r23, r25
    8be0:	68 f4       	brcc	.+26     	; 0x8bfc <memmove+0x20>
    8be2:	fb 01       	movw	r30, r22
    8be4:	dc 01       	movw	r26, r24
    8be6:	e4 0f       	add	r30, r20
    8be8:	f5 1f       	adc	r31, r21
    8bea:	a4 0f       	add	r26, r20
    8bec:	b5 1f       	adc	r27, r21
    8bee:	02 c0       	rjmp	.+4      	; 0x8bf4 <memmove+0x18>
    8bf0:	02 90       	ld	r0, -Z
    8bf2:	0e 92       	st	-X, r0
    8bf4:	41 50       	subi	r20, 0x01	; 1
    8bf6:	50 40       	sbci	r21, 0x00	; 0
    8bf8:	d8 f7       	brcc	.-10     	; 0x8bf0 <memmove+0x14>
    8bfa:	08 95       	ret
    8bfc:	0c 94 e5 45 	jmp	0x8bca	; 0x8bca <memcpy>

00008c00 <strchr>:
    8c00:	fc 01       	movw	r30, r24
    8c02:	81 91       	ld	r24, Z+
    8c04:	86 17       	cp	r24, r22
    8c06:	21 f0       	breq	.+8      	; 0x8c10 <strchr+0x10>
    8c08:	88 23       	and	r24, r24
    8c0a:	d9 f7       	brne	.-10     	; 0x8c02 <strchr+0x2>
    8c0c:	99 27       	eor	r25, r25
    8c0e:	08 95       	ret
    8c10:	31 97       	sbiw	r30, 0x01	; 1
    8c12:	cf 01       	movw	r24, r30
    8c14:	08 95       	ret

00008c16 <strcmp>:
    8c16:	fb 01       	movw	r30, r22
    8c18:	dc 01       	movw	r26, r24
    8c1a:	8d 91       	ld	r24, X+
    8c1c:	01 90       	ld	r0, Z+
    8c1e:	80 19       	sub	r24, r0
    8c20:	01 10       	cpse	r0, r1
    8c22:	d9 f3       	breq	.-10     	; 0x8c1a <strcmp+0x4>
    8c24:	99 0b       	sbc	r25, r25
    8c26:	08 95       	ret

00008c28 <strcpy>:
    8c28:	fb 01       	movw	r30, r22
    8c2a:	dc 01       	movw	r26, r24
    8c2c:	01 90       	ld	r0, Z+
    8c2e:	0d 92       	st	X+, r0
    8c30:	00 20       	and	r0, r0
    8c32:	e1 f7       	brne	.-8      	; 0x8c2c <strcpy+0x4>
    8c34:	08 95       	ret

00008c36 <strncmp>:
    8c36:	fb 01       	movw	r30, r22
    8c38:	dc 01       	movw	r26, r24
    8c3a:	41 50       	subi	r20, 0x01	; 1
    8c3c:	50 40       	sbci	r21, 0x00	; 0
    8c3e:	30 f0       	brcs	.+12     	; 0x8c4c <strncmp+0x16>
    8c40:	8d 91       	ld	r24, X+
    8c42:	01 90       	ld	r0, Z+
    8c44:	80 19       	sub	r24, r0
    8c46:	19 f4       	brne	.+6      	; 0x8c4e <strncmp+0x18>
    8c48:	00 20       	and	r0, r0
    8c4a:	b9 f7       	brne	.-18     	; 0x8c3a <strncmp+0x4>
    8c4c:	88 1b       	sub	r24, r24
    8c4e:	99 0b       	sbc	r25, r25
    8c50:	08 95       	ret

00008c52 <strncpy>:
    8c52:	fb 01       	movw	r30, r22
    8c54:	dc 01       	movw	r26, r24
    8c56:	41 50       	subi	r20, 0x01	; 1
    8c58:	50 40       	sbci	r21, 0x00	; 0
    8c5a:	48 f0       	brcs	.+18     	; 0x8c6e <strncpy+0x1c>
    8c5c:	01 90       	ld	r0, Z+
    8c5e:	0d 92       	st	X+, r0
    8c60:	00 20       	and	r0, r0
    8c62:	c9 f7       	brne	.-14     	; 0x8c56 <strncpy+0x4>
    8c64:	01 c0       	rjmp	.+2      	; 0x8c68 <strncpy+0x16>
    8c66:	1d 92       	st	X+, r1
    8c68:	41 50       	subi	r20, 0x01	; 1
    8c6a:	50 40       	sbci	r21, 0x00	; 0
    8c6c:	e0 f7       	brcc	.-8      	; 0x8c66 <strncpy+0x14>
    8c6e:	08 95       	ret

00008c70 <strrchr>:
    8c70:	fc 01       	movw	r30, r24
    8c72:	81 e0       	ldi	r24, 0x01	; 1
    8c74:	90 e0       	ldi	r25, 0x00	; 0
    8c76:	01 90       	ld	r0, Z+
    8c78:	06 16       	cp	r0, r22
    8c7a:	09 f4       	brne	.+2      	; 0x8c7e <strrchr+0xe>
    8c7c:	cf 01       	movw	r24, r30
    8c7e:	00 20       	and	r0, r0
    8c80:	d1 f7       	brne	.-12     	; 0x8c76 <strrchr+0x6>
    8c82:	01 97       	sbiw	r24, 0x01	; 1
    8c84:	08 95       	ret

00008c86 <strstr>:
    8c86:	fb 01       	movw	r30, r22
    8c88:	51 91       	ld	r21, Z+
    8c8a:	55 23       	and	r21, r21
    8c8c:	a9 f0       	breq	.+42     	; 0x8cb8 <strstr+0x32>
    8c8e:	bf 01       	movw	r22, r30
    8c90:	dc 01       	movw	r26, r24
    8c92:	4d 91       	ld	r20, X+
    8c94:	45 17       	cp	r20, r21
    8c96:	41 11       	cpse	r20, r1
    8c98:	e1 f7       	brne	.-8      	; 0x8c92 <strstr+0xc>
    8c9a:	59 f4       	brne	.+22     	; 0x8cb2 <strstr+0x2c>
    8c9c:	cd 01       	movw	r24, r26
    8c9e:	01 90       	ld	r0, Z+
    8ca0:	00 20       	and	r0, r0
    8ca2:	49 f0       	breq	.+18     	; 0x8cb6 <strstr+0x30>
    8ca4:	4d 91       	ld	r20, X+
    8ca6:	40 15       	cp	r20, r0
    8ca8:	41 11       	cpse	r20, r1
    8caa:	c9 f3       	breq	.-14     	; 0x8c9e <strstr+0x18>
    8cac:	fb 01       	movw	r30, r22
    8cae:	41 11       	cpse	r20, r1
    8cb0:	ef cf       	rjmp	.-34     	; 0x8c90 <strstr+0xa>
    8cb2:	81 e0       	ldi	r24, 0x01	; 1
    8cb4:	90 e0       	ldi	r25, 0x00	; 0
    8cb6:	01 97       	sbiw	r24, 0x01	; 1
    8cb8:	08 95       	ret

00008cba <strtok_r>:
    8cba:	fa 01       	movw	r30, r20
    8cbc:	a1 91       	ld	r26, Z+
    8cbe:	b0 81       	ld	r27, Z
    8cc0:	00 97       	sbiw	r24, 0x00	; 0
    8cc2:	19 f4       	brne	.+6      	; 0x8cca <strtok_r+0x10>
    8cc4:	10 97       	sbiw	r26, 0x00	; 0
    8cc6:	e1 f0       	breq	.+56     	; 0x8d00 <strtok_r+0x46>
    8cc8:	cd 01       	movw	r24, r26
    8cca:	dc 01       	movw	r26, r24
    8ccc:	cd 01       	movw	r24, r26
    8cce:	0d 90       	ld	r0, X+
    8cd0:	00 20       	and	r0, r0
    8cd2:	11 f4       	brne	.+4      	; 0x8cd8 <strtok_r+0x1e>
    8cd4:	c0 01       	movw	r24, r0
    8cd6:	13 c0       	rjmp	.+38     	; 0x8cfe <strtok_r+0x44>
    8cd8:	fb 01       	movw	r30, r22
    8cda:	21 91       	ld	r18, Z+
    8cdc:	22 23       	and	r18, r18
    8cde:	19 f0       	breq	.+6      	; 0x8ce6 <strtok_r+0x2c>
    8ce0:	20 15       	cp	r18, r0
    8ce2:	d9 f7       	brne	.-10     	; 0x8cda <strtok_r+0x20>
    8ce4:	f3 cf       	rjmp	.-26     	; 0x8ccc <strtok_r+0x12>
    8ce6:	fb 01       	movw	r30, r22
    8ce8:	21 91       	ld	r18, Z+
    8cea:	20 15       	cp	r18, r0
    8cec:	19 f4       	brne	.+6      	; 0x8cf4 <strtok_r+0x3a>
    8cee:	1e 92       	st	-X, r1
    8cf0:	11 96       	adiw	r26, 0x01	; 1
    8cf2:	06 c0       	rjmp	.+12     	; 0x8d00 <strtok_r+0x46>
    8cf4:	22 23       	and	r18, r18
    8cf6:	c1 f7       	brne	.-16     	; 0x8ce8 <strtok_r+0x2e>
    8cf8:	0d 90       	ld	r0, X+
    8cfa:	00 20       	and	r0, r0
    8cfc:	a1 f7       	brne	.-24     	; 0x8ce6 <strtok_r+0x2c>
    8cfe:	d0 01       	movw	r26, r0
    8d00:	fa 01       	movw	r30, r20
    8d02:	a1 93       	st	Z+, r26
    8d04:	b0 83       	st	Z, r27
    8d06:	08 95       	ret

00008d08 <itoa>:
    8d08:	fb 01       	movw	r30, r22
    8d0a:	9f 01       	movw	r18, r30
    8d0c:	e8 94       	clt
    8d0e:	42 30       	cpi	r20, 0x02	; 2
    8d10:	c4 f0       	brlt	.+48     	; 0x8d42 <itoa+0x3a>
    8d12:	45 32       	cpi	r20, 0x25	; 37
    8d14:	b4 f4       	brge	.+44     	; 0x8d42 <itoa+0x3a>
    8d16:	4a 30       	cpi	r20, 0x0A	; 10
    8d18:	29 f4       	brne	.+10     	; 0x8d24 <itoa+0x1c>
    8d1a:	97 fb       	bst	r25, 7
    8d1c:	1e f4       	brtc	.+6      	; 0x8d24 <itoa+0x1c>
    8d1e:	90 95       	com	r25
    8d20:	81 95       	neg	r24
    8d22:	9f 4f       	sbci	r25, 0xFF	; 255
    8d24:	64 2f       	mov	r22, r20
    8d26:	77 27       	eor	r23, r23
    8d28:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <__udivmodhi4>
    8d2c:	80 5d       	subi	r24, 0xD0	; 208
    8d2e:	8a 33       	cpi	r24, 0x3A	; 58
    8d30:	0c f0       	brlt	.+2      	; 0x8d34 <itoa+0x2c>
    8d32:	89 5d       	subi	r24, 0xD9	; 217
    8d34:	81 93       	st	Z+, r24
    8d36:	cb 01       	movw	r24, r22
    8d38:	00 97       	sbiw	r24, 0x00	; 0
    8d3a:	a1 f7       	brne	.-24     	; 0x8d24 <itoa+0x1c>
    8d3c:	16 f4       	brtc	.+4      	; 0x8d42 <itoa+0x3a>
    8d3e:	5d e2       	ldi	r21, 0x2D	; 45
    8d40:	51 93       	st	Z+, r21
    8d42:	10 82       	st	Z, r1
    8d44:	c9 01       	movw	r24, r18
    8d46:	0c 94 c7 48 	jmp	0x918e	; 0x918e <strrev>

00008d4a <ltoa>:
    8d4a:	fa 01       	movw	r30, r20
    8d4c:	cf 93       	push	r28
    8d4e:	ff 93       	push	r31
    8d50:	ef 93       	push	r30
    8d52:	22 30       	cpi	r18, 0x02	; 2
    8d54:	44 f1       	brlt	.+80     	; 0x8da6 <ltoa+0x5c>
    8d56:	25 32       	cpi	r18, 0x25	; 37
    8d58:	34 f5       	brge	.+76     	; 0x8da6 <ltoa+0x5c>
    8d5a:	c2 2f       	mov	r28, r18
    8d5c:	e8 94       	clt
    8d5e:	ca 30       	cpi	r28, 0x0A	; 10
    8d60:	49 f4       	brne	.+18     	; 0x8d74 <ltoa+0x2a>
    8d62:	97 fb       	bst	r25, 7
    8d64:	3e f4       	brtc	.+14     	; 0x8d74 <ltoa+0x2a>
    8d66:	90 95       	com	r25
    8d68:	80 95       	com	r24
    8d6a:	70 95       	com	r23
    8d6c:	61 95       	neg	r22
    8d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    8d70:	8f 4f       	sbci	r24, 0xFF	; 255
    8d72:	9f 4f       	sbci	r25, 0xFF	; 255
    8d74:	2c 2f       	mov	r18, r28
    8d76:	33 27       	eor	r19, r19
    8d78:	44 27       	eor	r20, r20
    8d7a:	55 27       	eor	r21, r21
    8d7c:	ff 93       	push	r31
    8d7e:	ef 93       	push	r30
    8d80:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    8d84:	ef 91       	pop	r30
    8d86:	ff 91       	pop	r31
    8d88:	60 5d       	subi	r22, 0xD0	; 208
    8d8a:	6a 33       	cpi	r22, 0x3A	; 58
    8d8c:	0c f0       	brlt	.+2      	; 0x8d90 <ltoa+0x46>
    8d8e:	69 5d       	subi	r22, 0xD9	; 217
    8d90:	61 93       	st	Z+, r22
    8d92:	b9 01       	movw	r22, r18
    8d94:	ca 01       	movw	r24, r20
    8d96:	60 50       	subi	r22, 0x00	; 0
    8d98:	70 40       	sbci	r23, 0x00	; 0
    8d9a:	80 40       	sbci	r24, 0x00	; 0
    8d9c:	90 40       	sbci	r25, 0x00	; 0
    8d9e:	51 f7       	brne	.-44     	; 0x8d74 <ltoa+0x2a>
    8da0:	16 f4       	brtc	.+4      	; 0x8da6 <ltoa+0x5c>
    8da2:	cd e2       	ldi	r28, 0x2D	; 45
    8da4:	c1 93       	st	Z+, r28
    8da6:	10 82       	st	Z, r1
    8da8:	8f 91       	pop	r24
    8daa:	9f 91       	pop	r25
    8dac:	cf 91       	pop	r28
    8dae:	0c 94 c7 48 	jmp	0x918e	; 0x918e <strrev>

00008db2 <__mulsi_const_10>:
    8db2:	59 2f       	mov	r21, r25
    8db4:	48 2f       	mov	r20, r24
    8db6:	37 2f       	mov	r19, r23
    8db8:	26 2f       	mov	r18, r22
    8dba:	66 0f       	add	r22, r22
    8dbc:	77 1f       	adc	r23, r23
    8dbe:	88 1f       	adc	r24, r24
    8dc0:	99 1f       	adc	r25, r25
    8dc2:	66 0f       	add	r22, r22
    8dc4:	77 1f       	adc	r23, r23
    8dc6:	88 1f       	adc	r24, r24
    8dc8:	99 1f       	adc	r25, r25
    8dca:	62 0f       	add	r22, r18
    8dcc:	73 1f       	adc	r23, r19
    8dce:	84 1f       	adc	r24, r20
    8dd0:	95 1f       	adc	r25, r21
    8dd2:	66 0f       	add	r22, r22
    8dd4:	77 1f       	adc	r23, r23
    8dd6:	88 1f       	adc	r24, r24
    8dd8:	99 1f       	adc	r25, r25
    8dda:	08 95       	ret

00008ddc <__mulhi_const_10>:
    8ddc:	7a e0       	ldi	r23, 0x0A	; 10
    8dde:	97 9f       	mul	r25, r23
    8de0:	90 2d       	mov	r25, r0
    8de2:	87 9f       	mul	r24, r23
    8de4:	80 2d       	mov	r24, r0
    8de6:	91 0d       	add	r25, r1
    8de8:	11 24       	eor	r1, r1
    8dea:	08 95       	ret

00008dec <ultoa>:
    8dec:	fa 01       	movw	r30, r20
    8dee:	cf 93       	push	r28
    8df0:	ff 93       	push	r31
    8df2:	ef 93       	push	r30
    8df4:	22 30       	cpi	r18, 0x02	; 2
    8df6:	cc f0       	brlt	.+50     	; 0x8e2a <ultoa+0x3e>
    8df8:	25 32       	cpi	r18, 0x25	; 37
    8dfa:	bc f4       	brge	.+46     	; 0x8e2a <ultoa+0x3e>
    8dfc:	c2 2f       	mov	r28, r18
    8dfe:	2c 2f       	mov	r18, r28
    8e00:	33 27       	eor	r19, r19
    8e02:	44 27       	eor	r20, r20
    8e04:	55 27       	eor	r21, r21
    8e06:	ff 93       	push	r31
    8e08:	ef 93       	push	r30
    8e0a:	0e 94 1e 45 	call	0x8a3c	; 0x8a3c <__udivmodsi4>
    8e0e:	ef 91       	pop	r30
    8e10:	ff 91       	pop	r31
    8e12:	60 5d       	subi	r22, 0xD0	; 208
    8e14:	6a 33       	cpi	r22, 0x3A	; 58
    8e16:	0c f0       	brlt	.+2      	; 0x8e1a <ultoa+0x2e>
    8e18:	69 5d       	subi	r22, 0xD9	; 217
    8e1a:	61 93       	st	Z+, r22
    8e1c:	b9 01       	movw	r22, r18
    8e1e:	ca 01       	movw	r24, r20
    8e20:	60 50       	subi	r22, 0x00	; 0
    8e22:	70 40       	sbci	r23, 0x00	; 0
    8e24:	80 40       	sbci	r24, 0x00	; 0
    8e26:	90 40       	sbci	r25, 0x00	; 0
    8e28:	51 f7       	brne	.-44     	; 0x8dfe <ultoa+0x12>
    8e2a:	10 82       	st	Z, r1
    8e2c:	8f 91       	pop	r24
    8e2e:	9f 91       	pop	r25
    8e30:	cf 91       	pop	r28
    8e32:	0c 94 c7 48 	jmp	0x918e	; 0x918e <strrev>

00008e36 <utoa>:
    8e36:	fb 01       	movw	r30, r22
    8e38:	9f 01       	movw	r18, r30
    8e3a:	42 30       	cpi	r20, 0x02	; 2
    8e3c:	74 f0       	brlt	.+28     	; 0x8e5a <utoa+0x24>
    8e3e:	45 32       	cpi	r20, 0x25	; 37
    8e40:	64 f4       	brge	.+24     	; 0x8e5a <utoa+0x24>
    8e42:	64 2f       	mov	r22, r20
    8e44:	77 27       	eor	r23, r23
    8e46:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <__udivmodhi4>
    8e4a:	80 5d       	subi	r24, 0xD0	; 208
    8e4c:	8a 33       	cpi	r24, 0x3A	; 58
    8e4e:	0c f0       	brlt	.+2      	; 0x8e52 <utoa+0x1c>
    8e50:	89 5d       	subi	r24, 0xD9	; 217
    8e52:	81 93       	st	Z+, r24
    8e54:	cb 01       	movw	r24, r22
    8e56:	00 97       	sbiw	r24, 0x00	; 0
    8e58:	a1 f7       	brne	.-24     	; 0x8e42 <utoa+0xc>
    8e5a:	10 82       	st	Z, r1
    8e5c:	c9 01       	movw	r24, r18
    8e5e:	0c 94 c7 48 	jmp	0x918e	; 0x918e <strrev>

00008e62 <__eerd_byte_m1280>:
    8e62:	f9 99       	sbic	0x1f, 1	; 31
    8e64:	fe cf       	rjmp	.-4      	; 0x8e62 <__eerd_byte_m1280>
    8e66:	92 bd       	out	0x22, r25	; 34
    8e68:	81 bd       	out	0x21, r24	; 33
    8e6a:	f8 9a       	sbi	0x1f, 0	; 31
    8e6c:	99 27       	eor	r25, r25
    8e6e:	80 b5       	in	r24, 0x20	; 32
    8e70:	08 95       	ret

00008e72 <__eewr_byte_m1280>:
    8e72:	26 2f       	mov	r18, r22

00008e74 <__eewr_r18_m1280>:
    8e74:	f9 99       	sbic	0x1f, 1	; 31
    8e76:	fe cf       	rjmp	.-4      	; 0x8e74 <__eewr_r18_m1280>
    8e78:	1f ba       	out	0x1f, r1	; 31
    8e7a:	92 bd       	out	0x22, r25	; 34
    8e7c:	81 bd       	out	0x21, r24	; 33
    8e7e:	20 bd       	out	0x20, r18	; 32
    8e80:	0f b6       	in	r0, 0x3f	; 63
    8e82:	f8 94       	cli
    8e84:	fa 9a       	sbi	0x1f, 2	; 31
    8e86:	f9 9a       	sbi	0x1f, 1	; 31
    8e88:	0f be       	out	0x3f, r0	; 63
    8e8a:	01 96       	adiw	r24, 0x01	; 1
    8e8c:	08 95       	ret

00008e8e <strtod>:
    8e8e:	8f 92       	push	r8
    8e90:	9f 92       	push	r9
    8e92:	af 92       	push	r10
    8e94:	bf 92       	push	r11
    8e96:	cf 92       	push	r12
    8e98:	df 92       	push	r13
    8e9a:	ef 92       	push	r14
    8e9c:	ff 92       	push	r15
    8e9e:	0f 93       	push	r16
    8ea0:	1f 93       	push	r17
    8ea2:	cf 93       	push	r28
    8ea4:	df 93       	push	r29
    8ea6:	8b 01       	movw	r16, r22
    8ea8:	61 15       	cp	r22, r1
    8eaa:	71 05       	cpc	r23, r1
    8eac:	19 f0       	breq	.+6      	; 0x8eb4 <strtod+0x26>
    8eae:	fb 01       	movw	r30, r22
    8eb0:	80 83       	st	Z, r24
    8eb2:	91 83       	std	Z+1, r25	; 0x01
    8eb4:	7c 01       	movw	r14, r24
    8eb6:	f7 01       	movw	r30, r14
    8eb8:	c1 90       	ld	r12, Z+
    8eba:	7f 01       	movw	r14, r30
    8ebc:	ef 01       	movw	r28, r30
    8ebe:	8c 2d       	mov	r24, r12
    8ec0:	90 e0       	ldi	r25, 0x00	; 0
    8ec2:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <isspace>
    8ec6:	89 2b       	or	r24, r25
    8ec8:	b1 f7       	brne	.-20     	; 0x8eb6 <strtod+0x28>
    8eca:	fd e2       	ldi	r31, 0x2D	; 45
    8ecc:	cf 12       	cpse	r12, r31
    8ece:	04 c0       	rjmp	.+8      	; 0x8ed8 <strtod+0x4a>
    8ed0:	c9 90       	ld	r12, Y+
    8ed2:	dd 24       	eor	r13, r13
    8ed4:	d3 94       	inc	r13
    8ed6:	05 c0       	rjmp	.+10     	; 0x8ee2 <strtod+0x54>
    8ed8:	2b e2       	ldi	r18, 0x2B	; 43
    8eda:	c2 12       	cpse	r12, r18
    8edc:	01 c0       	rjmp	.+2      	; 0x8ee0 <strtod+0x52>
    8ede:	c9 90       	ld	r12, Y+
    8ee0:	d1 2c       	mov	r13, r1
    8ee2:	7e 01       	movw	r14, r28
    8ee4:	41 e0       	ldi	r20, 0x01	; 1
    8ee6:	e4 1a       	sub	r14, r20
    8ee8:	f1 08       	sbc	r15, r1
    8eea:	43 e0       	ldi	r20, 0x03	; 3
    8eec:	50 e0       	ldi	r21, 0x00	; 0
    8eee:	6f e4       	ldi	r22, 0x4F	; 79
    8ef0:	72 e0       	ldi	r23, 0x02	; 2
    8ef2:	c7 01       	movw	r24, r14
    8ef4:	0e 94 af 48 	call	0x915e	; 0x915e <strncasecmp_P>
    8ef8:	89 2b       	or	r24, r25
    8efa:	e9 f4       	brne	.+58     	; 0x8f36 <strtod+0xa8>
    8efc:	7e 01       	movw	r14, r28
    8efe:	82 e0       	ldi	r24, 0x02	; 2
    8f00:	e8 0e       	add	r14, r24
    8f02:	f1 1c       	adc	r15, r1
    8f04:	45 e0       	ldi	r20, 0x05	; 5
    8f06:	50 e0       	ldi	r21, 0x00	; 0
    8f08:	62 e5       	ldi	r22, 0x52	; 82
    8f0a:	72 e0       	ldi	r23, 0x02	; 2
    8f0c:	c7 01       	movw	r24, r14
    8f0e:	0e 94 af 48 	call	0x915e	; 0x915e <strncasecmp_P>
    8f12:	89 2b       	or	r24, r25
    8f14:	21 f4       	brne	.+8      	; 0x8f1e <strtod+0x90>
    8f16:	7e 01       	movw	r14, r28
    8f18:	e7 e0       	ldi	r30, 0x07	; 7
    8f1a:	ee 0e       	add	r14, r30
    8f1c:	f1 1c       	adc	r15, r1
    8f1e:	01 15       	cp	r16, r1
    8f20:	11 05       	cpc	r17, r1
    8f22:	19 f0       	breq	.+6      	; 0x8f2a <strtod+0x9c>
    8f24:	f8 01       	movw	r30, r16
    8f26:	f1 82       	std	Z+1, r15	; 0x01
    8f28:	e0 82       	st	Z, r14
    8f2a:	10 e0       	ldi	r17, 0x00	; 0
    8f2c:	d0 e0       	ldi	r29, 0x00	; 0
    8f2e:	c0 e8       	ldi	r28, 0x80	; 128
    8f30:	d1 10       	cpse	r13, r1
    8f32:	fb c0       	rjmp	.+502    	; 0x912a <strtod+0x29c>
    8f34:	ff c0       	rjmp	.+510    	; 0x9134 <strtod+0x2a6>
    8f36:	43 e0       	ldi	r20, 0x03	; 3
    8f38:	50 e0       	ldi	r21, 0x00	; 0
    8f3a:	67 e5       	ldi	r22, 0x57	; 87
    8f3c:	72 e0       	ldi	r23, 0x02	; 2
    8f3e:	c7 01       	movw	r24, r14
    8f40:	0e 94 af 48 	call	0x915e	; 0x915e <strncasecmp_P>
    8f44:	89 2b       	or	r24, r25
    8f46:	49 f4       	brne	.+18     	; 0x8f5a <strtod+0xcc>
    8f48:	01 15       	cp	r16, r1
    8f4a:	11 05       	cpc	r17, r1
    8f4c:	09 f4       	brne	.+2      	; 0x8f50 <strtod+0xc2>
    8f4e:	ef c0       	rjmp	.+478    	; 0x912e <strtod+0x2a0>
    8f50:	22 96       	adiw	r28, 0x02	; 2
    8f52:	f8 01       	movw	r30, r16
    8f54:	d1 83       	std	Z+1, r29	; 0x01
    8f56:	c0 83       	st	Z, r28
    8f58:	ea c0       	rjmp	.+468    	; 0x912e <strtod+0x2a0>
    8f5a:	60 e0       	ldi	r22, 0x00	; 0
    8f5c:	70 e0       	ldi	r23, 0x00	; 0
    8f5e:	cb 01       	movw	r24, r22
    8f60:	e1 2c       	mov	r14, r1
    8f62:	f1 2c       	mov	r15, r1
    8f64:	ec 2d       	mov	r30, r12
    8f66:	e0 53       	subi	r30, 0x30	; 48
    8f68:	ea 30       	cpi	r30, 0x0A	; 10
    8f6a:	48 f5       	brcc	.+82     	; 0x8fbe <strtod+0x130>
    8f6c:	fd 2d       	mov	r31, r13
    8f6e:	f2 60       	ori	r31, 0x02	; 2
    8f70:	2d 2d       	mov	r18, r13
    8f72:	28 70       	andi	r18, 0x08	; 8
    8f74:	d2 fe       	sbrs	r13, 2
    8f76:	06 c0       	rjmp	.+12     	; 0x8f84 <strtod+0xf6>
    8f78:	21 11       	cpse	r18, r1
    8f7a:	27 c0       	rjmp	.+78     	; 0x8fca <strtod+0x13c>
    8f7c:	2f ef       	ldi	r18, 0xFF	; 255
    8f7e:	e2 1a       	sub	r14, r18
    8f80:	f2 0a       	sbc	r15, r18
    8f82:	23 c0       	rjmp	.+70     	; 0x8fca <strtod+0x13c>
    8f84:	22 23       	and	r18, r18
    8f86:	19 f0       	breq	.+6      	; 0x8f8e <strtod+0x100>
    8f88:	41 e0       	ldi	r20, 0x01	; 1
    8f8a:	e4 1a       	sub	r14, r20
    8f8c:	f1 08       	sbc	r15, r1
    8f8e:	a5 e0       	ldi	r26, 0x05	; 5
    8f90:	b0 e0       	ldi	r27, 0x00	; 0
    8f92:	9b 01       	movw	r18, r22
    8f94:	ac 01       	movw	r20, r24
    8f96:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <__muluhisi3>
    8f9a:	66 0f       	add	r22, r22
    8f9c:	77 1f       	adc	r23, r23
    8f9e:	88 1f       	adc	r24, r24
    8fa0:	99 1f       	adc	r25, r25
    8fa2:	6e 0f       	add	r22, r30
    8fa4:	71 1d       	adc	r23, r1
    8fa6:	81 1d       	adc	r24, r1
    8fa8:	91 1d       	adc	r25, r1
    8faa:	68 39       	cpi	r22, 0x98	; 152
    8fac:	e9 e9       	ldi	r30, 0x99	; 153
    8fae:	7e 07       	cpc	r23, r30
    8fb0:	8e 07       	cpc	r24, r30
    8fb2:	e9 e1       	ldi	r30, 0x19	; 25
    8fb4:	9e 07       	cpc	r25, r30
    8fb6:	48 f0       	brcs	.+18     	; 0x8fca <strtod+0x13c>
    8fb8:	fd 2d       	mov	r31, r13
    8fba:	f6 60       	ori	r31, 0x06	; 6
    8fbc:	06 c0       	rjmp	.+12     	; 0x8fca <strtod+0x13c>
    8fbe:	ee 3f       	cpi	r30, 0xFE	; 254
    8fc0:	39 f4       	brne	.+14     	; 0x8fd0 <strtod+0x142>
    8fc2:	d3 fc       	sbrc	r13, 3
    8fc4:	3d c0       	rjmp	.+122    	; 0x9040 <strtod+0x1b2>
    8fc6:	fd 2d       	mov	r31, r13
    8fc8:	f8 60       	ori	r31, 0x08	; 8
    8fca:	c9 90       	ld	r12, Y+
    8fcc:	df 2e       	mov	r13, r31
    8fce:	ca cf       	rjmp	.-108    	; 0x8f64 <strtod+0xd6>
    8fd0:	e5 33       	cpi	r30, 0x35	; 53
    8fd2:	11 f0       	breq	.+4      	; 0x8fd8 <strtod+0x14a>
    8fd4:	e5 31       	cpi	r30, 0x15	; 21
    8fd6:	a1 f5       	brne	.+104    	; 0x9040 <strtod+0x1b2>
    8fd8:	a8 81       	ld	r26, Y
    8fda:	ad 32       	cpi	r26, 0x2D	; 45
    8fdc:	19 f4       	brne	.+6      	; 0x8fe4 <strtod+0x156>
    8fde:	f0 e1       	ldi	r31, 0x10	; 16
    8fe0:	df 2a       	or	r13, r31
    8fe2:	06 c0       	rjmp	.+12     	; 0x8ff0 <strtod+0x162>
    8fe4:	ab 32       	cpi	r26, 0x2B	; 43
    8fe6:	21 f0       	breq	.+8      	; 0x8ff0 <strtod+0x162>
    8fe8:	21 96       	adiw	r28, 0x01	; 1
    8fea:	21 e0       	ldi	r18, 0x01	; 1
    8fec:	30 e0       	ldi	r19, 0x00	; 0
    8fee:	04 c0       	rjmp	.+8      	; 0x8ff8 <strtod+0x16a>
    8ff0:	a9 81       	ldd	r26, Y+1	; 0x01
    8ff2:	22 96       	adiw	r28, 0x02	; 2
    8ff4:	22 e0       	ldi	r18, 0x02	; 2
    8ff6:	30 e0       	ldi	r19, 0x00	; 0
    8ff8:	a0 53       	subi	r26, 0x30	; 48
    8ffa:	aa 30       	cpi	r26, 0x0A	; 10
    8ffc:	18 f0       	brcs	.+6      	; 0x9004 <strtod+0x176>
    8ffe:	c2 1b       	sub	r28, r18
    9000:	d3 0b       	sbc	r29, r19
    9002:	1e c0       	rjmp	.+60     	; 0x9040 <strtod+0x1b2>
    9004:	fe 01       	movw	r30, r28
    9006:	20 e0       	ldi	r18, 0x00	; 0
    9008:	30 e0       	ldi	r19, 0x00	; 0
    900a:	20 38       	cpi	r18, 0x80	; 128
    900c:	4c e0       	ldi	r20, 0x0C	; 12
    900e:	34 07       	cpc	r19, r20
    9010:	5c f4       	brge	.+22     	; 0x9028 <strtod+0x19a>
    9012:	a9 01       	movw	r20, r18
    9014:	44 0f       	add	r20, r20
    9016:	55 1f       	adc	r21, r21
    9018:	44 0f       	add	r20, r20
    901a:	55 1f       	adc	r21, r21
    901c:	24 0f       	add	r18, r20
    901e:	35 1f       	adc	r19, r21
    9020:	22 0f       	add	r18, r18
    9022:	33 1f       	adc	r19, r19
    9024:	2a 0f       	add	r18, r26
    9026:	31 1d       	adc	r19, r1
    9028:	a1 91       	ld	r26, Z+
    902a:	a0 53       	subi	r26, 0x30	; 48
    902c:	ef 01       	movw	r28, r30
    902e:	aa 30       	cpi	r26, 0x0A	; 10
    9030:	60 f3       	brcs	.-40     	; 0x900a <strtod+0x17c>
    9032:	d4 fe       	sbrs	r13, 4
    9034:	03 c0       	rjmp	.+6      	; 0x903c <strtod+0x1ae>
    9036:	31 95       	neg	r19
    9038:	21 95       	neg	r18
    903a:	31 09       	sbc	r19, r1
    903c:	e2 0e       	add	r14, r18
    903e:	f3 1e       	adc	r15, r19
    9040:	d1 fe       	sbrs	r13, 1
    9042:	07 c0       	rjmp	.+14     	; 0x9052 <strtod+0x1c4>
    9044:	01 15       	cp	r16, r1
    9046:	11 05       	cpc	r17, r1
    9048:	21 f0       	breq	.+8      	; 0x9052 <strtod+0x1c4>
    904a:	21 97       	sbiw	r28, 0x01	; 1
    904c:	f8 01       	movw	r30, r16
    904e:	d1 83       	std	Z+1, r29	; 0x01
    9050:	c0 83       	st	Z, r28
    9052:	0e 94 ab 42 	call	0x8556	; 0x8556 <__floatunsisf>
    9056:	2d 2d       	mov	r18, r13
    9058:	23 70       	andi	r18, 0x03	; 3
    905a:	23 30       	cpi	r18, 0x03	; 3
    905c:	29 f0       	breq	.+10     	; 0x9068 <strtod+0x1da>
    905e:	16 2f       	mov	r17, r22
    9060:	d7 2f       	mov	r29, r23
    9062:	c8 2f       	mov	r28, r24
    9064:	09 2f       	mov	r16, r25
    9066:	07 c0       	rjmp	.+14     	; 0x9076 <strtod+0x1e8>
    9068:	dc 01       	movw	r26, r24
    906a:	cb 01       	movw	r24, r22
    906c:	b0 58       	subi	r27, 0x80	; 128
    906e:	18 2f       	mov	r17, r24
    9070:	d9 2f       	mov	r29, r25
    9072:	ca 2f       	mov	r28, r26
    9074:	0b 2f       	mov	r16, r27
    9076:	20 e0       	ldi	r18, 0x00	; 0
    9078:	30 e0       	ldi	r19, 0x00	; 0
    907a:	a9 01       	movw	r20, r18
    907c:	61 2f       	mov	r22, r17
    907e:	7d 2f       	mov	r23, r29
    9080:	8c 2f       	mov	r24, r28
    9082:	90 2f       	mov	r25, r16
    9084:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    9088:	88 23       	and	r24, r24
    908a:	09 f4       	brne	.+2      	; 0x908e <strtod+0x200>
    908c:	54 c0       	rjmp	.+168    	; 0x9136 <strtod+0x2a8>
    908e:	f7 fe       	sbrs	r15, 7
    9090:	08 c0       	rjmp	.+16     	; 0x90a2 <strtod+0x214>
    9092:	f1 94       	neg	r15
    9094:	e1 94       	neg	r14
    9096:	f1 08       	sbc	r15, r1
    9098:	36 e8       	ldi	r19, 0x86	; 134
    909a:	c3 2e       	mov	r12, r19
    909c:	32 e0       	ldi	r19, 0x02	; 2
    909e:	d3 2e       	mov	r13, r19
    90a0:	04 c0       	rjmp	.+8      	; 0x90aa <strtod+0x21c>
    90a2:	2e e6       	ldi	r18, 0x6E	; 110
    90a4:	c2 2e       	mov	r12, r18
    90a6:	22 e0       	ldi	r18, 0x02	; 2
    90a8:	d2 2e       	mov	r13, r18
    90aa:	46 01       	movw	r8, r12
    90ac:	f8 e1       	ldi	r31, 0x18	; 24
    90ae:	8f 1a       	sub	r8, r31
    90b0:	91 08       	sbc	r9, r1
    90b2:	90 e2       	ldi	r25, 0x20	; 32
    90b4:	a9 2e       	mov	r10, r25
    90b6:	b1 2c       	mov	r11, r1
    90b8:	15 c0       	rjmp	.+42     	; 0x90e4 <strtod+0x256>
    90ba:	f6 01       	movw	r30, r12
    90bc:	45 91       	lpm	r20, Z+
    90be:	55 91       	lpm	r21, Z+
    90c0:	65 91       	lpm	r22, Z+
    90c2:	74 91       	lpm	r23, Z+
    90c4:	24 2f       	mov	r18, r20
    90c6:	35 2f       	mov	r19, r21
    90c8:	46 2f       	mov	r20, r22
    90ca:	57 2f       	mov	r21, r23
    90cc:	61 2f       	mov	r22, r17
    90ce:	7d 2f       	mov	r23, r29
    90d0:	8c 2f       	mov	r24, r28
    90d2:	90 2f       	mov	r25, r16
    90d4:	0e 94 19 44 	call	0x8832	; 0x8832 <__mulsf3>
    90d8:	16 2f       	mov	r17, r22
    90da:	d7 2f       	mov	r29, r23
    90dc:	c8 2f       	mov	r28, r24
    90de:	09 2f       	mov	r16, r25
    90e0:	ea 18       	sub	r14, r10
    90e2:	fb 08       	sbc	r15, r11
    90e4:	ea 14       	cp	r14, r10
    90e6:	fb 04       	cpc	r15, r11
    90e8:	44 f7       	brge	.-48     	; 0x90ba <strtod+0x22c>
    90ea:	24 e0       	ldi	r18, 0x04	; 4
    90ec:	c2 1a       	sub	r12, r18
    90ee:	d1 08       	sbc	r13, r1
    90f0:	b5 94       	asr	r11
    90f2:	a7 94       	ror	r10
    90f4:	c8 14       	cp	r12, r8
    90f6:	d9 04       	cpc	r13, r9
    90f8:	a9 f7       	brne	.-22     	; 0x90e4 <strtod+0x256>
    90fa:	61 2f       	mov	r22, r17
    90fc:	7d 2f       	mov	r23, r29
    90fe:	8c 2f       	mov	r24, r28
    9100:	90 2f       	mov	r25, r16
    9102:	28 2f       	mov	r18, r24
    9104:	22 0f       	add	r18, r18
    9106:	29 2f       	mov	r18, r25
    9108:	22 1f       	adc	r18, r18
    910a:	2f 3f       	cpi	r18, 0xFF	; 255
    910c:	39 f0       	breq	.+14     	; 0x911c <strtod+0x28e>
    910e:	20 e0       	ldi	r18, 0x00	; 0
    9110:	30 e0       	ldi	r19, 0x00	; 0
    9112:	a9 01       	movw	r20, r18
    9114:	0e 94 0b 42 	call	0x8416	; 0x8416 <__cmpsf2>
    9118:	81 11       	cpse	r24, r1
    911a:	0d c0       	rjmp	.+26     	; 0x9136 <strtod+0x2a8>
    911c:	82 e2       	ldi	r24, 0x22	; 34
    911e:	90 e0       	ldi	r25, 0x00	; 0
    9120:	90 93 89 11 	sts	0x1189, r25
    9124:	80 93 88 11 	sts	0x1188, r24
    9128:	06 c0       	rjmp	.+12     	; 0x9136 <strtod+0x2a8>
    912a:	0f ef       	ldi	r16, 0xFF	; 255
    912c:	04 c0       	rjmp	.+8      	; 0x9136 <strtod+0x2a8>
    912e:	10 e0       	ldi	r17, 0x00	; 0
    9130:	d0 e0       	ldi	r29, 0x00	; 0
    9132:	c0 ec       	ldi	r28, 0xC0	; 192
    9134:	0f e7       	ldi	r16, 0x7F	; 127
    9136:	61 2f       	mov	r22, r17
    9138:	7d 2f       	mov	r23, r29
    913a:	8c 2f       	mov	r24, r28
    913c:	90 2f       	mov	r25, r16
    913e:	df 91       	pop	r29
    9140:	cf 91       	pop	r28
    9142:	1f 91       	pop	r17
    9144:	0f 91       	pop	r16
    9146:	ff 90       	pop	r15
    9148:	ef 90       	pop	r14
    914a:	df 90       	pop	r13
    914c:	cf 90       	pop	r12
    914e:	bf 90       	pop	r11
    9150:	af 90       	pop	r10
    9152:	9f 90       	pop	r9
    9154:	8f 90       	pop	r8
    9156:	08 95       	ret

00009158 <__ctype_isfalse>:
    9158:	99 27       	eor	r25, r25
    915a:	88 27       	eor	r24, r24

0000915c <__ctype_istrue>:
    915c:	08 95       	ret

0000915e <strncasecmp_P>:
    915e:	fb 01       	movw	r30, r22
    9160:	dc 01       	movw	r26, r24
    9162:	41 50       	subi	r20, 0x01	; 1
    9164:	50 40       	sbci	r21, 0x00	; 0
    9166:	88 f0       	brcs	.+34     	; 0x918a <strncasecmp_P+0x2c>
    9168:	8d 91       	ld	r24, X+
    916a:	81 34       	cpi	r24, 0x41	; 65
    916c:	1c f0       	brlt	.+6      	; 0x9174 <strncasecmp_P+0x16>
    916e:	8b 35       	cpi	r24, 0x5B	; 91
    9170:	0c f4       	brge	.+2      	; 0x9174 <strncasecmp_P+0x16>
    9172:	80 5e       	subi	r24, 0xE0	; 224
    9174:	65 91       	lpm	r22, Z+
    9176:	61 34       	cpi	r22, 0x41	; 65
    9178:	1c f0       	brlt	.+6      	; 0x9180 <strncasecmp_P+0x22>
    917a:	6b 35       	cpi	r22, 0x5B	; 91
    917c:	0c f4       	brge	.+2      	; 0x9180 <strncasecmp_P+0x22>
    917e:	60 5e       	subi	r22, 0xE0	; 224
    9180:	86 1b       	sub	r24, r22
    9182:	61 11       	cpse	r22, r1
    9184:	71 f3       	breq	.-36     	; 0x9162 <strncasecmp_P+0x4>
    9186:	99 0b       	sbc	r25, r25
    9188:	08 95       	ret
    918a:	88 1b       	sub	r24, r24
    918c:	fc cf       	rjmp	.-8      	; 0x9186 <strncasecmp_P+0x28>

0000918e <strrev>:
    918e:	dc 01       	movw	r26, r24
    9190:	fc 01       	movw	r30, r24
    9192:	67 2f       	mov	r22, r23
    9194:	71 91       	ld	r23, Z+
    9196:	77 23       	and	r23, r23
    9198:	e1 f7       	brne	.-8      	; 0x9192 <strrev+0x4>
    919a:	32 97       	sbiw	r30, 0x02	; 2
    919c:	04 c0       	rjmp	.+8      	; 0x91a6 <strrev+0x18>
    919e:	7c 91       	ld	r23, X
    91a0:	6d 93       	st	X+, r22
    91a2:	70 83       	st	Z, r23
    91a4:	62 91       	ld	r22, -Z
    91a6:	ae 17       	cp	r26, r30
    91a8:	bf 07       	cpc	r27, r31
    91aa:	c8 f3       	brcs	.-14     	; 0x919e <strrev+0x10>
    91ac:	08 95       	ret

000091ae <__do_global_dtors>:
    91ae:	12 e0       	ldi	r17, 0x02	; 2
    91b0:	c2 e9       	ldi	r28, 0x92	; 146
    91b2:	d2 e0       	ldi	r29, 0x02	; 2
    91b4:	00 e0       	ldi	r16, 0x00	; 0
    91b6:	06 c0       	rjmp	.+12     	; 0x91c4 <__do_global_dtors+0x16>
    91b8:	22 97       	sbiw	r28, 0x02	; 2
    91ba:	01 09       	sbc	r16, r1
    91bc:	fe 01       	movw	r30, r28
    91be:	0b bf       	out	0x3b, r16	; 59
    91c0:	0e 94 7c 45 	call	0x8af8	; 0x8af8 <__tablejump_elpm__>
    91c4:	c4 39       	cpi	r28, 0x94	; 148
    91c6:	d1 07       	cpc	r29, r17
    91c8:	80 e0       	ldi	r24, 0x00	; 0
    91ca:	08 07       	cpc	r16, r24
    91cc:	a9 f7       	brne	.-22     	; 0x91b8 <__do_global_dtors+0xa>
    91ce:	f8 94       	cli

000091d0 <__stop_program>:
    91d0:	ff cf       	rjmp	.-2      	; 0x91d0 <__stop_program>
