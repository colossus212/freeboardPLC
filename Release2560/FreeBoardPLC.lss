
FreeBoardPLC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000474  00800200  00008eca  00008f5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008eca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b24  00800674  00800674  000093d2  2**0
                  ALLOC
  3 .stab         00013740  00000000  00000000  000093d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001e99d  00000000  00000000  0001cb14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0003b4b1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__dtors_end>
       4:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__vector_1>
       8:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_2>
       c:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_3>
      10:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <__vector_4>
      14:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_5>
      18:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__vector_6>
      1c:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <__vector_7>
      20:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <__vector_8>
      24:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      28:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      30:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      34:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      38:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      3c:	0c 94 9b 20 	jmp	0x4136	; 0x4136 <__vector_15>
      40:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      44:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      48:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      4c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      50:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      54:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      58:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      5c:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__vector_23>
      60:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      64:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_25>
      68:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_26>
      6c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      70:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      74:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      78:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      7c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      80:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      84:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      88:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      8c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      90:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_36>
      94:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_37>
      98:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      9c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      a0:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      a4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      a8:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      ac:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      b0:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      b4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      b8:	0c 94 27 22 	jmp	0x444e	; 0x444e <__vector_46>
      bc:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__vector_47>
      c0:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__vector_48>
      c4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      c8:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      cc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_51>
      d0:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_52>
      d4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      d8:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_54>
      dc:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_55>
      e0:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	std	Y+51, r6	; 0x33
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 05       	cpc	r19, r15
     112:	a8 4c       	sbci	r26, 0xC8	; 200
     114:	cd b2       	in	r12, 0x1d	; 29
     116:	d4 4e       	sbci	r29, 0xE4	; 228
     118:	b9 38       	cpi	r27, 0x89	; 137
     11a:	36 a9       	ldd	r19, Z+54	; 0x36
     11c:	02 0c       	add	r0, r2
     11e:	50 b9       	out	0x00, r21	; 0
     120:	91 86       	std	Z+9, r9	; 0x09
     122:	88 08       	sbc	r8, r8
     124:	3c a6       	std	Y+44, r3	; 0x2c
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	2a be       	out	0x3a, r2	; 58
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????

0000012f <digital_pin_to_timer_PGM>:
     12f:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     15b:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000175 <digital_pin_to_bit_mask_PGM>:
     175:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     185:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     195:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1a5:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1b5:	04 08 10 20 40 80                                   ... @.

000001bb <digital_pin_to_port_PGM>:
     1bb:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1cb:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1db:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1eb:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1fb:	0b 0b 0b 0b 0b 0b                                   ......

00000201 <port_to_input_PGM>:
     201:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     211:	00 01 00 00 03 01 06 01 09 01                       ..........

0000021b <port_to_output_PGM>:
     21b:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     22b:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000235 <port_to_mode_PGM>:
     235:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     245:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000024f <pstr_inf>:
     24f:	49 4e 46                                            INF

00000252 <pstr_inity>:
     252:	49 4e 49 54 59                                      INITY

00000257 <pstr_nan>:
     257:	4e 41 4e                                            NAN

0000025a <pwr_p10>:
     25a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     26a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000272 <pwr_m10>:
     272:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     282:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000028a <__ctors_start>:
     28a:	98 32       	cpi	r25, 0x28	; 40
     28c:	cf 36       	cpi	r28, 0x6F	; 111
     28e:	40 3e       	cpi	r20, 0xE0	; 224
     290:	67 3e       	cpi	r22, 0xE7	; 231

00000292 <__ctors_end>:
     292:	fe 32       	cpi	r31, 0x2E	; 46

00000294 <__dtors_end>:
     294:	11 24       	eor	r1, r1
     296:	1f be       	out	0x3f, r1	; 63
     298:	cf ef       	ldi	r28, 0xFF	; 255
     29a:	d1 e2       	ldi	r29, 0x21	; 33
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0c bf       	out	0x3c, r16	; 60

000002a4 <__do_copy_data>:
     2a4:	16 e0       	ldi	r17, 0x06	; 6
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	b2 e0       	ldi	r27, 0x02	; 2
     2aa:	ea ec       	ldi	r30, 0xCA	; 202
     2ac:	fe e8       	ldi	r31, 0x8E	; 142
     2ae:	00 e0       	ldi	r16, 0x00	; 0
     2b0:	0b bf       	out	0x3b, r16	; 59
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__do_copy_data+0x14>
     2b4:	07 90       	elpm	r0, Z+
     2b6:	0d 92       	st	X+, r0
     2b8:	a4 37       	cpi	r26, 0x74	; 116
     2ba:	b1 07       	cpc	r27, r17
     2bc:	d9 f7       	brne	.-10     	; 0x2b4 <__do_copy_data+0x10>

000002be <__do_clear_bss>:
     2be:	11 e1       	ldi	r17, 0x11	; 17
     2c0:	a4 e7       	ldi	r26, 0x74	; 116
     2c2:	b6 e0       	ldi	r27, 0x06	; 6
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	a8 39       	cpi	r26, 0x98	; 152
     2ca:	b1 07       	cpc	r27, r17
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>

000002ce <__do_global_ctors>:
     2ce:	12 e0       	ldi	r17, 0x02	; 2
     2d0:	c2 e9       	ldi	r28, 0x92	; 146
     2d2:	d2 e0       	ldi	r29, 0x02	; 2
     2d4:	00 e0       	ldi	r16, 0x00	; 0
     2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <__do_global_ctors+0x16>
     2d8:	22 97       	sbiw	r28, 0x02	; 2
     2da:	01 09       	sbc	r16, r1
     2dc:	fe 01       	movw	r30, r28
     2de:	0b bf       	out	0x3b, r16	; 59
     2e0:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__tablejump_elpm__>
     2e4:	ca 38       	cpi	r28, 0x8A	; 138
     2e6:	d1 07       	cpc	r29, r17
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	08 07       	cpc	r16, r24
     2ec:	a9 f7       	brne	.-22     	; 0x2d8 <__do_global_ctors+0xa>
     2ee:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <main>
     2f2:	0c 94 53 47 	jmp	0x8ea6	; 0x8ea6 <__do_global_dtors>

000002f6 <__bad_interrupt>:
     2f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fa <_ZN14HardwareSerial9availableEv>:
     2fa:	fc 01       	movw	r30, r24
     2fc:	84 85       	ldd	r24, Z+12	; 0x0c
     2fe:	95 85       	ldd	r25, Z+13	; 0x0d
     300:	fc 01       	movw	r30, r24
     302:	e0 5c       	subi	r30, 0xC0	; 192
     304:	ff 4f       	sbci	r31, 0xFF	; 255
     306:	20 81       	ld	r18, Z
     308:	31 81       	ldd	r19, Z+1	; 0x01
     30a:	fc 01       	movw	r30, r24
     30c:	ee 5b       	subi	r30, 0xBE	; 190
     30e:	ff 4f       	sbci	r31, 0xFF	; 255
     310:	80 81       	ld	r24, Z
     312:	91 81       	ldd	r25, Z+1	; 0x01
     314:	28 1b       	sub	r18, r24
     316:	39 0b       	sbc	r19, r25
     318:	2f 73       	andi	r18, 0x3F	; 63
     31a:	33 27       	eor	r19, r19
     31c:	c9 01       	movw	r24, r18
     31e:	08 95       	ret

00000320 <_ZN14HardwareSerial4peekEv>:
     320:	fc 01       	movw	r30, r24
     322:	84 85       	ldd	r24, Z+12	; 0x0c
     324:	95 85       	ldd	r25, Z+13	; 0x0d
     326:	fc 01       	movw	r30, r24
     328:	e0 5c       	subi	r30, 0xC0	; 192
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	40 81       	ld	r20, Z
     32e:	51 81       	ldd	r21, Z+1	; 0x01
     330:	fc 01       	movw	r30, r24
     332:	ee 5b       	subi	r30, 0xBE	; 190
     334:	ff 4f       	sbci	r31, 0xFF	; 255
     336:	20 81       	ld	r18, Z
     338:	31 81       	ldd	r19, Z+1	; 0x01
     33a:	42 17       	cp	r20, r18
     33c:	53 07       	cpc	r21, r19
     33e:	41 f0       	breq	.+16     	; 0x350 <_ZN14HardwareSerial4peekEv+0x30>
     340:	01 90       	ld	r0, Z+
     342:	f0 81       	ld	r31, Z
     344:	e0 2d       	mov	r30, r0
     346:	e8 0f       	add	r30, r24
     348:	f9 1f       	adc	r31, r25
     34a:	20 81       	ld	r18, Z
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <_ZN14HardwareSerial4peekEv+0x34>
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	c9 01       	movw	r24, r18
     356:	08 95       	ret

00000358 <_ZN14HardwareSerial4readEv>:
     358:	fc 01       	movw	r30, r24
     35a:	84 85       	ldd	r24, Z+12	; 0x0c
     35c:	95 85       	ldd	r25, Z+13	; 0x0d
     35e:	fc 01       	movw	r30, r24
     360:	e0 5c       	subi	r30, 0xC0	; 192
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	40 81       	ld	r20, Z
     366:	51 81       	ldd	r21, Z+1	; 0x01
     368:	fc 01       	movw	r30, r24
     36a:	ee 5b       	subi	r30, 0xBE	; 190
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	20 81       	ld	r18, Z
     370:	31 81       	ldd	r19, Z+1	; 0x01
     372:	42 17       	cp	r20, r18
     374:	53 07       	cpc	r21, r19
     376:	71 f0       	breq	.+28     	; 0x394 <_ZN14HardwareSerial4readEv+0x3c>
     378:	a0 81       	ld	r26, Z
     37a:	b1 81       	ldd	r27, Z+1	; 0x01
     37c:	a8 0f       	add	r26, r24
     37e:	b9 1f       	adc	r27, r25
     380:	2c 91       	ld	r18, X
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	8f 73       	andi	r24, 0x3F	; 63
     38a:	99 27       	eor	r25, r25
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	80 83       	st	Z, r24
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <_ZN14HardwareSerial4readEv+0x40>
     394:	2f ef       	ldi	r18, 0xFF	; 255
     396:	3f ef       	ldi	r19, 0xFF	; 255
     398:	c9 01       	movw	r24, r18
     39a:	08 95       	ret

0000039c <_ZN14HardwareSerial5flushEv>:
     39c:	fc 01       	movw	r30, r24
     39e:	81 a1       	ldd	r24, Z+33	; 0x21
     3a0:	88 23       	and	r24, r24
     3a2:	29 f0       	breq	.+10     	; 0x3ae <_ZN14HardwareSerial5flushEv+0x12>
     3a4:	a4 89       	ldd	r26, Z+20	; 0x14
     3a6:	b5 89       	ldd	r27, Z+21	; 0x15
     3a8:	8c 91       	ld	r24, X
     3aa:	86 ff       	sbrs	r24, 6
     3ac:	fb cf       	rjmp	.-10     	; 0x3a4 <_ZN14HardwareSerial5flushEv+0x8>
     3ae:	11 a2       	std	Z+33, r1	; 0x21
     3b0:	08 95       	ret

000003b2 <_ZN14HardwareSerial5writeEh>:
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	fc 01       	movw	r30, r24
     3b8:	26 85       	ldd	r18, Z+14	; 0x0e
     3ba:	37 85       	ldd	r19, Z+15	; 0x0f
     3bc:	d9 01       	movw	r26, r18
     3be:	a0 5c       	subi	r26, 0xC0	; 192
     3c0:	bf 4f       	sbci	r27, 0xFF	; 255
     3c2:	8d 91       	ld	r24, X+
     3c4:	9c 91       	ld	r25, X
     3c6:	11 97       	sbiw	r26, 0x01	; 1
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	8f 73       	andi	r24, 0x3F	; 63
     3cc:	99 27       	eor	r25, r25
     3ce:	e9 01       	movw	r28, r18
     3d0:	ce 5b       	subi	r28, 0xBE	; 190
     3d2:	df 4f       	sbci	r29, 0xFF	; 255
     3d4:	48 81       	ld	r20, Y
     3d6:	59 81       	ldd	r21, Y+1	; 0x01
     3d8:	84 17       	cp	r24, r20
     3da:	95 07       	cpc	r25, r21
     3dc:	d9 f3       	breq	.-10     	; 0x3d4 <_ZN14HardwareSerial5writeEh+0x22>
     3de:	0d 90       	ld	r0, X+
     3e0:	bc 91       	ld	r27, X
     3e2:	a0 2d       	mov	r26, r0
     3e4:	a2 0f       	add	r26, r18
     3e6:	b3 1f       	adc	r27, r19
     3e8:	6c 93       	st	X, r22
     3ea:	a6 85       	ldd	r26, Z+14	; 0x0e
     3ec:	b7 85       	ldd	r27, Z+15	; 0x0f
     3ee:	a0 5c       	subi	r26, 0xC0	; 192
     3f0:	bf 4f       	sbci	r27, 0xFF	; 255
     3f2:	11 96       	adiw	r26, 0x01	; 1
     3f4:	9c 93       	st	X, r25
     3f6:	8e 93       	st	-X, r24
     3f8:	a6 89       	ldd	r26, Z+22	; 0x16
     3fa:	b7 89       	ldd	r27, Z+23	; 0x17
     3fc:	2c 91       	ld	r18, X
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	07 8c       	ldd	r0, Z+31	; 0x1f
     404:	02 c0       	rjmp	.+4      	; 0x40a <_ZN14HardwareSerial5writeEh+0x58>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	0a 94       	dec	r0
     40c:	e2 f7       	brpl	.-8      	; 0x406 <_ZN14HardwareSerial5writeEh+0x54>
     40e:	28 2b       	or	r18, r24
     410:	2c 93       	st	X, r18
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	81 a3       	std	Z+33, r24	; 0x21
     416:	04 88       	ldd	r0, Z+20	; 0x14
     418:	f5 89       	ldd	r31, Z+21	; 0x15
     41a:	e0 2d       	mov	r30, r0
     41c:	80 81       	ld	r24, Z
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	80 83       	st	Z, r24
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <_ZN14HardwareSerial6write9Ehb>:
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	fc 01       	movw	r30, r24
     43a:	26 85       	ldd	r18, Z+14	; 0x0e
     43c:	37 85       	ldd	r19, Z+15	; 0x0f
     43e:	d9 01       	movw	r26, r18
     440:	a0 5c       	subi	r26, 0xC0	; 192
     442:	bf 4f       	sbci	r27, 0xFF	; 255
     444:	8d 91       	ld	r24, X+
     446:	9c 91       	ld	r25, X
     448:	11 97       	sbiw	r26, 0x01	; 1
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	8f 73       	andi	r24, 0x3F	; 63
     44e:	99 27       	eor	r25, r25
     450:	89 01       	movw	r16, r18
     452:	0e 5b       	subi	r16, 0xBE	; 190
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	e8 01       	movw	r28, r16
     458:	e8 80       	ld	r14, Y
     45a:	f9 80       	ldd	r15, Y+1	; 0x01
     45c:	8e 15       	cp	r24, r14
     45e:	9f 05       	cpc	r25, r15
     460:	d1 f3       	breq	.-12     	; 0x456 <_ZN14HardwareSerial6write9Ehb+0x2a>
     462:	0d 90       	ld	r0, X+
     464:	bc 91       	ld	r27, X
     466:	a0 2d       	mov	r26, r0
     468:	a2 0f       	add	r26, r18
     46a:	b3 1f       	adc	r27, r19
     46c:	6c 93       	st	X, r22
     46e:	a6 85       	ldd	r26, Z+14	; 0x0e
     470:	b7 85       	ldd	r27, Z+15	; 0x0f
     472:	a0 5c       	subi	r26, 0xC0	; 192
     474:	bf 4f       	sbci	r27, 0xFF	; 255
     476:	11 96       	adiw	r26, 0x01	; 1
     478:	9c 93       	st	X, r25
     47a:	8e 93       	st	-X, r24
     47c:	a6 89       	ldd	r26, Z+22	; 0x16
     47e:	b7 89       	ldd	r27, Z+23	; 0x17
     480:	8c 91       	ld	r24, X
     482:	44 23       	and	r20, r20
     484:	11 f0       	breq	.+4      	; 0x48a <_ZN14HardwareSerial6write9Ehb+0x5e>
     486:	81 60       	ori	r24, 0x01	; 1
     488:	01 c0       	rjmp	.+2      	; 0x48c <_ZN14HardwareSerial6write9Ehb+0x60>
     48a:	8e 7f       	andi	r24, 0xFE	; 254
     48c:	8c 93       	st	X, r24
     48e:	a6 89       	ldd	r26, Z+22	; 0x16
     490:	b7 89       	ldd	r27, Z+23	; 0x17
     492:	2c 91       	ld	r18, X
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	07 8c       	ldd	r0, Z+31	; 0x1f
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <_ZN14HardwareSerial6write9Ehb+0x74>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <_ZN14HardwareSerial6write9Ehb+0x70>
     4a4:	28 2b       	or	r18, r24
     4a6:	2c 93       	st	X, r18
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	81 a3       	std	Z+33, r24	; 0x21
     4ac:	04 88       	ldd	r0, Z+20	; 0x14
     4ae:	f5 89       	ldd	r31, Z+21	; 0x15
     4b0:	e0 2d       	mov	r30, r0
     4b2:	80 81       	ld	r24, Z
     4b4:	80 64       	ori	r24, 0x40	; 64
     4b6:	80 83       	st	Z, r24
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	08 95       	ret
     4ca:	08 95       	ret

000004cc <__vector_25>:
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	0b b6       	in	r0, 0x3b	; 59
     4d8:	0f 92       	push	r0
     4da:	1b be       	out	0x3b, r1	; 59
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	ef 93       	push	r30
     4f2:	ff 93       	push	r31
     4f4:	80 91 c0 00 	lds	r24, 0x00C0
     4f8:	82 fd       	sbrc	r24, 2
     4fa:	07 c0       	rjmp	.+14     	; 0x50a <__vector_25+0x3e>
     4fc:	80 91 c6 00 	lds	r24, 0x00C6
     500:	68 ed       	ldi	r22, 0xD8	; 216
     502:	78 e0       	ldi	r23, 0x08	; 8
     504:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_Z10store_charhP11ring_buffer>
     508:	02 c0       	rjmp	.+4      	; 0x50e <__vector_25+0x42>
     50a:	80 91 c6 00 	lds	r24, 0x00C6
     50e:	ff 91       	pop	r31
     510:	ef 91       	pop	r30
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0b be       	out	0x3b, r0	; 59
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti
     534:	08 95       	ret

00000536 <__vector_36>:
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	0b b6       	in	r0, 0x3b	; 59
     542:	0f 92       	push	r0
     544:	1b be       	out	0x3b, r1	; 59
     546:	2f 93       	push	r18
     548:	3f 93       	push	r19
     54a:	4f 93       	push	r20
     54c:	5f 93       	push	r21
     54e:	6f 93       	push	r22
     550:	7f 93       	push	r23
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	af 93       	push	r26
     558:	bf 93       	push	r27
     55a:	ef 93       	push	r30
     55c:	ff 93       	push	r31
     55e:	80 91 c8 00 	lds	r24, 0x00C8
     562:	82 fd       	sbrc	r24, 2
     564:	07 c0       	rjmp	.+14     	; 0x574 <__vector_36+0x3e>
     566:	80 91 ce 00 	lds	r24, 0x00CE
     56a:	60 e5       	ldi	r22, 0x50	; 80
     56c:	78 e0       	ldi	r23, 0x08	; 8
     56e:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_Z10store_charhP11ring_buffer>
     572:	02 c0       	rjmp	.+4      	; 0x578 <__vector_36+0x42>
     574:	80 91 ce 00 	lds	r24, 0x00CE
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0b be       	out	0x3b, r0	; 59
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti
     59e:	08 95       	ret

000005a0 <__vector_51>:
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	0b b6       	in	r0, 0x3b	; 59
     5ac:	0f 92       	push	r0
     5ae:	1b be       	out	0x3b, r1	; 59
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
     5c8:	80 91 d0 00 	lds	r24, 0x00D0
     5cc:	82 fd       	sbrc	r24, 2
     5ce:	07 c0       	rjmp	.+14     	; 0x5de <__vector_51+0x3e>
     5d0:	80 91 d6 00 	lds	r24, 0x00D6
     5d4:	68 ec       	ldi	r22, 0xC8	; 200
     5d6:	77 e0       	ldi	r23, 0x07	; 7
     5d8:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_Z10store_charhP11ring_buffer>
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__vector_51+0x42>
     5de:	80 91 d6 00 	lds	r24, 0x00D6
     5e2:	ff 91       	pop	r31
     5e4:	ef 91       	pop	r30
     5e6:	bf 91       	pop	r27
     5e8:	af 91       	pop	r26
     5ea:	9f 91       	pop	r25
     5ec:	8f 91       	pop	r24
     5ee:	7f 91       	pop	r23
     5f0:	6f 91       	pop	r22
     5f2:	5f 91       	pop	r21
     5f4:	4f 91       	pop	r20
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	0f 90       	pop	r0
     5fc:	0b be       	out	0x3b, r0	; 59
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti
     608:	08 95       	ret

0000060a <__vector_54>:
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	0b b6       	in	r0, 0x3b	; 59
     616:	0f 92       	push	r0
     618:	1b be       	out	0x3b, r1	; 59
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
     632:	80 91 30 01 	lds	r24, 0x0130
     636:	82 fd       	sbrc	r24, 2
     638:	07 c0       	rjmp	.+14     	; 0x648 <__vector_54+0x3e>
     63a:	80 91 36 01 	lds	r24, 0x0136
     63e:	60 e4       	ldi	r22, 0x40	; 64
     640:	77 e0       	ldi	r23, 0x07	; 7
     642:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <_Z10store_charhP11ring_buffer>
     646:	02 c0       	rjmp	.+4      	; 0x64c <__vector_54+0x42>
     648:	80 91 36 01 	lds	r24, 0x0136
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	0f 90       	pop	r0
     66e:	1f 90       	pop	r1
     670:	18 95       	reti

00000672 <_Z14serialEventRunv>:
     672:	8a ed       	ldi	r24, 0xDA	; 218
     674:	96 e0       	ldi	r25, 0x06	; 6
     676:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
     67a:	89 2b       	or	r24, r25
     67c:	11 f0       	breq	.+4      	; 0x682 <_Z14serialEventRunv+0x10>
     67e:	0e 94 29 32 	call	0x6452	; 0x6452 <_Z11serialEventv>
     682:	88 eb       	ldi	r24, 0xB8	; 184
     684:	96 e0       	ldi	r25, 0x06	; 6
     686:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
     68a:	89 2b       	or	r24, r25
     68c:	11 f0       	breq	.+4      	; 0x692 <_Z14serialEventRunv+0x20>
     68e:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <_Z12serialEvent1v>
     692:	86 e9       	ldi	r24, 0x96	; 150
     694:	96 e0       	ldi	r25, 0x06	; 6
     696:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
     69a:	89 2b       	or	r24, r25
     69c:	11 f0       	breq	.+4      	; 0x6a2 <_Z14serialEventRunv+0x30>
     69e:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <_Z12serialEvent2v>
     6a2:	84 e7       	ldi	r24, 0x74	; 116
     6a4:	96 e0       	ldi	r25, 0x06	; 6
     6a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
     6aa:	89 2b       	or	r24, r25
     6ac:	11 f0       	breq	.+4      	; 0x6b2 <_Z14serialEventRunv+0x40>
     6ae:	0c 94 25 2f 	jmp	0x5e4a	; 0x5e4a <_Z12serialEvent3v>
     6b2:	08 95       	ret

000006b4 <__vector_26>:
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	0b b6       	in	r0, 0x3b	; 59
     6c0:	0f 92       	push	r0
     6c2:	1b be       	out	0x3b, r1	; 59
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	ef 93       	push	r30
     6ce:	ff 93       	push	r31
     6d0:	20 91 d4 08 	lds	r18, 0x08D4
     6d4:	30 91 d5 08 	lds	r19, 0x08D5
     6d8:	80 91 d6 08 	lds	r24, 0x08D6
     6dc:	90 91 d7 08 	lds	r25, 0x08D7
     6e0:	28 17       	cp	r18, r24
     6e2:	39 07       	cpc	r19, r25
     6e4:	31 f4       	brne	.+12     	; 0x6f2 <__vector_26+0x3e>
     6e6:	80 91 c1 00 	lds	r24, 0x00C1
     6ea:	8f 7d       	andi	r24, 0xDF	; 223
     6ec:	80 93 c1 00 	sts	0x00C1, r24
     6f0:	14 c0       	rjmp	.+40     	; 0x71a <__vector_26+0x66>
     6f2:	e0 91 d6 08 	lds	r30, 0x08D6
     6f6:	f0 91 d7 08 	lds	r31, 0x08D7
     6fa:	ec 56       	subi	r30, 0x6C	; 108
     6fc:	f7 4f       	sbci	r31, 0xF7	; 247
     6fe:	20 81       	ld	r18, Z
     700:	80 91 d6 08 	lds	r24, 0x08D6
     704:	90 91 d7 08 	lds	r25, 0x08D7
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	8f 73       	andi	r24, 0x3F	; 63
     70c:	99 27       	eor	r25, r25
     70e:	90 93 d7 08 	sts	0x08D7, r25
     712:	80 93 d6 08 	sts	0x08D6, r24
     716:	20 93 c6 00 	sts	0x00C6, r18
     71a:	ff 91       	pop	r31
     71c:	ef 91       	pop	r30
     71e:	9f 91       	pop	r25
     720:	8f 91       	pop	r24
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0b be       	out	0x3b, r0	; 59
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <__vector_37>:
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	0b b6       	in	r0, 0x3b	; 59
     740:	0f 92       	push	r0
     742:	1b be       	out	0x3b, r1	; 59
     744:	2f 93       	push	r18
     746:	3f 93       	push	r19
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
     750:	20 91 4c 08 	lds	r18, 0x084C
     754:	30 91 4d 08 	lds	r19, 0x084D
     758:	80 91 4e 08 	lds	r24, 0x084E
     75c:	90 91 4f 08 	lds	r25, 0x084F
     760:	28 17       	cp	r18, r24
     762:	39 07       	cpc	r19, r25
     764:	31 f4       	brne	.+12     	; 0x772 <__vector_37+0x3e>
     766:	80 91 c9 00 	lds	r24, 0x00C9
     76a:	8f 7d       	andi	r24, 0xDF	; 223
     76c:	80 93 c9 00 	sts	0x00C9, r24
     770:	14 c0       	rjmp	.+40     	; 0x79a <__vector_37+0x66>
     772:	e0 91 4e 08 	lds	r30, 0x084E
     776:	f0 91 4f 08 	lds	r31, 0x084F
     77a:	e4 5f       	subi	r30, 0xF4	; 244
     77c:	f7 4f       	sbci	r31, 0xF7	; 247
     77e:	20 81       	ld	r18, Z
     780:	80 91 4e 08 	lds	r24, 0x084E
     784:	90 91 4f 08 	lds	r25, 0x084F
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	8f 73       	andi	r24, 0x3F	; 63
     78c:	99 27       	eor	r25, r25
     78e:	90 93 4f 08 	sts	0x084F, r25
     792:	80 93 4e 08 	sts	0x084E, r24
     796:	20 93 ce 00 	sts	0x00CE, r18
     79a:	ff 91       	pop	r31
     79c:	ef 91       	pop	r30
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	3f 91       	pop	r19
     7a4:	2f 91       	pop	r18
     7a6:	0f 90       	pop	r0
     7a8:	0b be       	out	0x3b, r0	; 59
     7aa:	0f 90       	pop	r0
     7ac:	0f be       	out	0x3f, r0	; 63
     7ae:	0f 90       	pop	r0
     7b0:	1f 90       	pop	r1
     7b2:	18 95       	reti

000007b4 <__vector_52>:
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	0b b6       	in	r0, 0x3b	; 59
     7c0:	0f 92       	push	r0
     7c2:	1b be       	out	0x3b, r1	; 59
     7c4:	2f 93       	push	r18
     7c6:	3f 93       	push	r19
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	ef 93       	push	r30
     7ce:	ff 93       	push	r31
     7d0:	20 91 c4 07 	lds	r18, 0x07C4
     7d4:	30 91 c5 07 	lds	r19, 0x07C5
     7d8:	80 91 c6 07 	lds	r24, 0x07C6
     7dc:	90 91 c7 07 	lds	r25, 0x07C7
     7e0:	28 17       	cp	r18, r24
     7e2:	39 07       	cpc	r19, r25
     7e4:	31 f4       	brne	.+12     	; 0x7f2 <__vector_52+0x3e>
     7e6:	80 91 d1 00 	lds	r24, 0x00D1
     7ea:	8f 7d       	andi	r24, 0xDF	; 223
     7ec:	80 93 d1 00 	sts	0x00D1, r24
     7f0:	14 c0       	rjmp	.+40     	; 0x81a <__vector_52+0x66>
     7f2:	e0 91 c6 07 	lds	r30, 0x07C6
     7f6:	f0 91 c7 07 	lds	r31, 0x07C7
     7fa:	ec 57       	subi	r30, 0x7C	; 124
     7fc:	f8 4f       	sbci	r31, 0xF8	; 248
     7fe:	20 81       	ld	r18, Z
     800:	80 91 c6 07 	lds	r24, 0x07C6
     804:	90 91 c7 07 	lds	r25, 0x07C7
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	8f 73       	andi	r24, 0x3F	; 63
     80c:	99 27       	eor	r25, r25
     80e:	90 93 c7 07 	sts	0x07C7, r25
     812:	80 93 c6 07 	sts	0x07C6, r24
     816:	20 93 d6 00 	sts	0x00D6, r18
     81a:	ff 91       	pop	r31
     81c:	ef 91       	pop	r30
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	0f 90       	pop	r0
     828:	0b be       	out	0x3b, r0	; 59
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <__vector_55>:
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	0b b6       	in	r0, 0x3b	; 59
     840:	0f 92       	push	r0
     842:	1b be       	out	0x3b, r1	; 59
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
     850:	20 91 3c 07 	lds	r18, 0x073C
     854:	30 91 3d 07 	lds	r19, 0x073D
     858:	80 91 3e 07 	lds	r24, 0x073E
     85c:	90 91 3f 07 	lds	r25, 0x073F
     860:	28 17       	cp	r18, r24
     862:	39 07       	cpc	r19, r25
     864:	31 f4       	brne	.+12     	; 0x872 <__vector_55+0x3e>
     866:	80 91 31 01 	lds	r24, 0x0131
     86a:	8f 7d       	andi	r24, 0xDF	; 223
     86c:	80 93 31 01 	sts	0x0131, r24
     870:	14 c0       	rjmp	.+40     	; 0x89a <__vector_55+0x66>
     872:	e0 91 3e 07 	lds	r30, 0x073E
     876:	f0 91 3f 07 	lds	r31, 0x073F
     87a:	e4 50       	subi	r30, 0x04	; 4
     87c:	f9 4f       	sbci	r31, 0xF9	; 249
     87e:	20 81       	ld	r18, Z
     880:	80 91 3e 07 	lds	r24, 0x073E
     884:	90 91 3f 07 	lds	r25, 0x073F
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	8f 73       	andi	r24, 0x3F	; 63
     88c:	99 27       	eor	r25, r25
     88e:	90 93 3f 07 	sts	0x073F, r25
     892:	80 93 3e 07 	sts	0x073E, r24
     896:	20 93 36 01 	sts	0x0136, r18
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	0f 90       	pop	r0
     8a8:	0b be       	out	0x3b, r0	; 59
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0
     8b0:	1f 90       	pop	r1
     8b2:	18 95       	reti

000008b4 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
     8b4:	4f 92       	push	r4
     8b6:	5f 92       	push	r5
     8b8:	6f 92       	push	r6
     8ba:	7f 92       	push	r7
     8bc:	8f 92       	push	r8
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	fc 01       	movw	r30, r24
     8da:	13 82       	std	Z+3, r1	; 0x03
     8dc:	12 82       	std	Z+2, r1	; 0x02
     8de:	88 ee       	ldi	r24, 0xE8	; 232
     8e0:	48 2e       	mov	r4, r24
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	58 2e       	mov	r5, r24
     8e6:	61 2c       	mov	r6, r1
     8e8:	71 2c       	mov	r7, r1
     8ea:	44 82       	std	Z+4, r4	; 0x04
     8ec:	55 82       	std	Z+5, r5	; 0x05
     8ee:	66 82       	std	Z+6, r6	; 0x06
     8f0:	77 82       	std	Z+7, r7	; 0x07
     8f2:	8a e5       	ldi	r24, 0x5A	; 90
     8f4:	96 e0       	ldi	r25, 0x06	; 6
     8f6:	91 83       	std	Z+1, r25	; 0x01
     8f8:	80 83       	st	Z, r24
     8fa:	75 87       	std	Z+13, r23	; 0x0d
     8fc:	64 87       	std	Z+12, r22	; 0x0c
     8fe:	57 87       	std	Z+15, r21	; 0x0f
     900:	46 87       	std	Z+14, r20	; 0x0e
     902:	31 8b       	std	Z+17, r19	; 0x11
     904:	20 8b       	std	Z+16, r18	; 0x10
     906:	13 8b       	std	Z+19, r17	; 0x13
     908:	02 8b       	std	Z+18, r16	; 0x12
     90a:	f5 8a       	std	Z+21, r15	; 0x15
     90c:	e4 8a       	std	Z+20, r14	; 0x14
     90e:	d7 8a       	std	Z+23, r13	; 0x17
     910:	c6 8a       	std	Z+22, r12	; 0x16
     912:	b1 8e       	std	Z+25, r11	; 0x19
     914:	a0 8e       	std	Z+24, r10	; 0x18
     916:	93 8e       	std	Z+27, r9	; 0x1b
     918:	82 8e       	std	Z+26, r8	; 0x1a
     91a:	8c 89       	ldd	r24, Y+20	; 0x14
     91c:	84 8f       	std	Z+28, r24	; 0x1c
     91e:	8d 89       	ldd	r24, Y+21	; 0x15
     920:	85 8f       	std	Z+29, r24	; 0x1d
     922:	8e 89       	ldd	r24, Y+22	; 0x16
     924:	86 8f       	std	Z+30, r24	; 0x1e
     926:	8f 89       	ldd	r24, Y+23	; 0x17
     928:	87 8f       	std	Z+31, r24	; 0x1f
     92a:	88 8d       	ldd	r24, Y+24	; 0x18
     92c:	80 a3       	std	Z+32, r24	; 0x20
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	af 90       	pop	r10
     942:	9f 90       	pop	r9
     944:	8f 90       	pop	r8
     946:	7f 90       	pop	r7
     948:	6f 90       	pop	r6
     94a:	5f 90       	pop	r5
     94c:	4f 90       	pop	r4
     94e:	08 95       	ret

00000950 <_ZN14HardwareSerial5beginEm>:
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	6a 01       	movw	r12, r20
     960:	7b 01       	movw	r14, r22
     962:	41 15       	cp	r20, r1
     964:	81 ee       	ldi	r24, 0xE1	; 225
     966:	58 07       	cpc	r21, r24
     968:	61 05       	cpc	r22, r1
     96a:	71 05       	cpc	r23, r1
     96c:	f9 f0       	breq	.+62     	; 0x9ac <_ZN14HardwareSerial5beginEm+0x5c>
     96e:	ec 89       	ldd	r30, Y+20	; 0x14
     970:	fd 89       	ldd	r31, Y+21	; 0x15
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	08 a0       	ldd	r0, Y+32	; 0x20
     978:	02 c0       	rjmp	.+4      	; 0x97e <_ZN14HardwareSerial5beginEm+0x2e>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	0a 94       	dec	r0
     980:	e2 f7       	brpl	.-8      	; 0x97a <_ZN14HardwareSerial5beginEm+0x2a>
     982:	80 83       	st	Z, r24
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	79 e0       	ldi	r23, 0x09	; 9
     988:	8d e3       	ldi	r24, 0x3D	; 61
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a7 01       	movw	r20, r14
     98e:	96 01       	movw	r18, r12
     990:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
     994:	21 50       	subi	r18, 0x01	; 1
     996:	31 09       	sbc	r19, r1
     998:	41 09       	sbc	r20, r1
     99a:	51 09       	sbc	r21, r1
     99c:	56 95       	lsr	r21
     99e:	47 95       	ror	r20
     9a0:	37 95       	ror	r19
     9a2:	27 95       	ror	r18
     9a4:	21 15       	cp	r18, r1
     9a6:	80 e1       	ldi	r24, 0x10	; 16
     9a8:	38 07       	cpc	r19, r24
     9aa:	98 f0       	brcs	.+38     	; 0x9d2 <_ZN14HardwareSerial5beginEm+0x82>
     9ac:	ec 89       	ldd	r30, Y+20	; 0x14
     9ae:	fd 89       	ldd	r31, Y+21	; 0x15
     9b0:	10 82       	st	Z, r1
     9b2:	60 e8       	ldi	r22, 0x80	; 128
     9b4:	74 e8       	ldi	r23, 0x84	; 132
     9b6:	8e e1       	ldi	r24, 0x1E	; 30
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a7 01       	movw	r20, r14
     9bc:	96 01       	movw	r18, r12
     9be:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	31 09       	sbc	r19, r1
     9c6:	41 09       	sbc	r20, r1
     9c8:	51 09       	sbc	r21, r1
     9ca:	56 95       	lsr	r21
     9cc:	47 95       	ror	r20
     9ce:	37 95       	ror	r19
     9d0:	27 95       	ror	r18
     9d2:	e8 89       	ldd	r30, Y+16	; 0x10
     9d4:	f9 89       	ldd	r31, Y+17	; 0x11
     9d6:	30 83       	st	Z, r19
     9d8:	ea 89       	ldd	r30, Y+18	; 0x12
     9da:	fb 89       	ldd	r31, Y+19	; 0x13
     9dc:	20 83       	st	Z, r18
     9de:	19 a2       	std	Y+33, r1	; 0x21
     9e0:	ee 89       	ldd	r30, Y+22	; 0x16
     9e2:	ff 89       	ldd	r31, Y+23	; 0x17
     9e4:	40 81       	ld	r20, Z
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	9c 01       	movw	r18, r24
     9ec:	0c 8c       	ldd	r0, Y+28	; 0x1c
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <_ZN14HardwareSerial5beginEm+0xa4>
     9f0:	22 0f       	add	r18, r18
     9f2:	33 1f       	adc	r19, r19
     9f4:	0a 94       	dec	r0
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <_ZN14HardwareSerial5beginEm+0xa0>
     9f8:	42 2b       	or	r20, r18
     9fa:	40 83       	st	Z, r20
     9fc:	ee 89       	ldd	r30, Y+22	; 0x16
     9fe:	ff 89       	ldd	r31, Y+23	; 0x17
     a00:	40 81       	ld	r20, Z
     a02:	9c 01       	movw	r18, r24
     a04:	0d 8c       	ldd	r0, Y+29	; 0x1d
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <_ZN14HardwareSerial5beginEm+0xbc>
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	0a 94       	dec	r0
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <_ZN14HardwareSerial5beginEm+0xb8>
     a10:	42 2b       	or	r20, r18
     a12:	40 83       	st	Z, r20
     a14:	ee 89       	ldd	r30, Y+22	; 0x16
     a16:	ff 89       	ldd	r31, Y+23	; 0x17
     a18:	40 81       	ld	r20, Z
     a1a:	9c 01       	movw	r18, r24
     a1c:	0e 8c       	ldd	r0, Y+30	; 0x1e
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <_ZN14HardwareSerial5beginEm+0xd4>
     a20:	22 0f       	add	r18, r18
     a22:	33 1f       	adc	r19, r19
     a24:	0a 94       	dec	r0
     a26:	e2 f7       	brpl	.-8      	; 0xa20 <_ZN14HardwareSerial5beginEm+0xd0>
     a28:	42 2b       	or	r20, r18
     a2a:	40 83       	st	Z, r20
     a2c:	ee 89       	ldd	r30, Y+22	; 0x16
     a2e:	ff 89       	ldd	r31, Y+23	; 0x17
     a30:	20 81       	ld	r18, Z
     a32:	0f 8c       	ldd	r0, Y+31	; 0x1f
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <_ZN14HardwareSerial5beginEm+0xea>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	0a 94       	dec	r0
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <_ZN14HardwareSerial5beginEm+0xe6>
     a3e:	80 95       	com	r24
     a40:	82 23       	and	r24, r18
     a42:	80 83       	st	Z, r24
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	08 95       	ret

00000a52 <_ZN14HardwareSerial5beginEmh>:
     a52:	bf 92       	push	r11
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ec 01       	movw	r28, r24
     a62:	6a 01       	movw	r12, r20
     a64:	7b 01       	movw	r14, r22
     a66:	b2 2e       	mov	r11, r18
     a68:	41 15       	cp	r20, r1
     a6a:	81 ee       	ldi	r24, 0xE1	; 225
     a6c:	58 07       	cpc	r21, r24
     a6e:	61 05       	cpc	r22, r1
     a70:	71 05       	cpc	r23, r1
     a72:	f9 f0       	breq	.+62     	; 0xab2 <_ZN14HardwareSerial5beginEmh+0x60>
     a74:	ec 89       	ldd	r30, Y+20	; 0x14
     a76:	fd 89       	ldd	r31, Y+21	; 0x15
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	08 a0       	ldd	r0, Y+32	; 0x20
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <_ZN14HardwareSerial5beginEmh+0x32>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	0a 94       	dec	r0
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <_ZN14HardwareSerial5beginEmh+0x2e>
     a88:	80 83       	st	Z, r24
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	79 e0       	ldi	r23, 0x09	; 9
     a8e:	8d e3       	ldi	r24, 0x3D	; 61
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a7 01       	movw	r20, r14
     a94:	96 01       	movw	r18, r12
     a96:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	31 09       	sbc	r19, r1
     a9e:	41 09       	sbc	r20, r1
     aa0:	51 09       	sbc	r21, r1
     aa2:	56 95       	lsr	r21
     aa4:	47 95       	ror	r20
     aa6:	37 95       	ror	r19
     aa8:	27 95       	ror	r18
     aaa:	21 15       	cp	r18, r1
     aac:	80 e1       	ldi	r24, 0x10	; 16
     aae:	38 07       	cpc	r19, r24
     ab0:	98 f0       	brcs	.+38     	; 0xad8 <_ZN14HardwareSerial5beginEmh+0x86>
     ab2:	ec 89       	ldd	r30, Y+20	; 0x14
     ab4:	fd 89       	ldd	r31, Y+21	; 0x15
     ab6:	10 82       	st	Z, r1
     ab8:	60 e8       	ldi	r22, 0x80	; 128
     aba:	74 e8       	ldi	r23, 0x84	; 132
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a7 01       	movw	r20, r14
     ac2:	96 01       	movw	r18, r12
     ac4:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
     ac8:	21 50       	subi	r18, 0x01	; 1
     aca:	31 09       	sbc	r19, r1
     acc:	41 09       	sbc	r20, r1
     ace:	51 09       	sbc	r21, r1
     ad0:	56 95       	lsr	r21
     ad2:	47 95       	ror	r20
     ad4:	37 95       	ror	r19
     ad6:	27 95       	ror	r18
     ad8:	e8 89       	ldd	r30, Y+16	; 0x10
     ada:	f9 89       	ldd	r31, Y+17	; 0x11
     adc:	30 83       	st	Z, r19
     ade:	ea 89       	ldd	r30, Y+18	; 0x12
     ae0:	fb 89       	ldd	r31, Y+19	; 0x13
     ae2:	20 83       	st	Z, r18
     ae4:	87 e0       	ldi	r24, 0x07	; 7
     ae6:	b8 12       	cpse	r11, r24
     ae8:	0a c0       	rjmp	.+20     	; 0xafe <_ZN14HardwareSerial5beginEmh+0xac>
     aea:	e8 8d       	ldd	r30, Y+24	; 0x18
     aec:	f9 8d       	ldd	r31, Y+25	; 0x19
     aee:	86 e0       	ldi	r24, 0x06	; 6
     af0:	80 83       	st	Z, r24
     af2:	ee 89       	ldd	r30, Y+22	; 0x16
     af4:	ff 89       	ldd	r31, Y+23	; 0x17
     af6:	80 81       	ld	r24, Z
     af8:	84 60       	ori	r24, 0x04	; 4
     afa:	80 83       	st	Z, r24
     afc:	08 c0       	rjmp	.+16     	; 0xb0e <_ZN14HardwareSerial5beginEmh+0xbc>
     afe:	ee 89       	ldd	r30, Y+22	; 0x16
     b00:	ff 89       	ldd	r31, Y+23	; 0x17
     b02:	80 81       	ld	r24, Z
     b04:	84 70       	andi	r24, 0x04	; 4
     b06:	80 83       	st	Z, r24
     b08:	e8 8d       	ldd	r30, Y+24	; 0x18
     b0a:	f9 8d       	ldd	r31, Y+25	; 0x19
     b0c:	b0 82       	st	Z, r11
     b0e:	ee 89       	ldd	r30, Y+22	; 0x16
     b10:	ff 89       	ldd	r31, Y+23	; 0x17
     b12:	40 81       	ld	r20, Z
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9c 01       	movw	r18, r24
     b1a:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <_ZN14HardwareSerial5beginEmh+0xd0>
     b1e:	22 0f       	add	r18, r18
     b20:	33 1f       	adc	r19, r19
     b22:	0a 94       	dec	r0
     b24:	e2 f7       	brpl	.-8      	; 0xb1e <_ZN14HardwareSerial5beginEmh+0xcc>
     b26:	42 2b       	or	r20, r18
     b28:	40 83       	st	Z, r20
     b2a:	ee 89       	ldd	r30, Y+22	; 0x16
     b2c:	ff 89       	ldd	r31, Y+23	; 0x17
     b2e:	40 81       	ld	r20, Z
     b30:	9c 01       	movw	r18, r24
     b32:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <_ZN14HardwareSerial5beginEmh+0xe8>
     b36:	22 0f       	add	r18, r18
     b38:	33 1f       	adc	r19, r19
     b3a:	0a 94       	dec	r0
     b3c:	e2 f7       	brpl	.-8      	; 0xb36 <_ZN14HardwareSerial5beginEmh+0xe4>
     b3e:	42 2b       	or	r20, r18
     b40:	40 83       	st	Z, r20
     b42:	ee 89       	ldd	r30, Y+22	; 0x16
     b44:	ff 89       	ldd	r31, Y+23	; 0x17
     b46:	40 81       	ld	r20, Z
     b48:	9c 01       	movw	r18, r24
     b4a:	0e 8c       	ldd	r0, Y+30	; 0x1e
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <_ZN14HardwareSerial5beginEmh+0x100>
     b4e:	22 0f       	add	r18, r18
     b50:	33 1f       	adc	r19, r19
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <_ZN14HardwareSerial5beginEmh+0xfc>
     b56:	42 2b       	or	r20, r18
     b58:	40 83       	st	Z, r20
     b5a:	ee 89       	ldd	r30, Y+22	; 0x16
     b5c:	ff 89       	ldd	r31, Y+23	; 0x17
     b5e:	20 81       	ld	r18, Z
     b60:	0f 8c       	ldd	r0, Y+31	; 0x1f
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <_ZN14HardwareSerial5beginEmh+0x116>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	0a 94       	dec	r0
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <_ZN14HardwareSerial5beginEmh+0x112>
     b6c:	80 95       	com	r24
     b6e:	82 23       	and	r24, r18
     b70:	80 83       	st	Z, r24
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	bf 90       	pop	r11
     b80:	08 95       	ret

00000b82 <_ZN14HardwareSerial3endEv>:
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	fc 01       	movw	r30, r24
     b88:	86 85       	ldd	r24, Z+14	; 0x0e
     b8a:	97 85       	ldd	r25, Z+15	; 0x0f
     b8c:	dc 01       	movw	r26, r24
     b8e:	a0 5c       	subi	r26, 0xC0	; 192
     b90:	bf 4f       	sbci	r27, 0xFF	; 255
     b92:	ec 01       	movw	r28, r24
     b94:	ce 5b       	subi	r28, 0xBE	; 190
     b96:	df 4f       	sbci	r29, 0xFF	; 255
     b98:	4d 91       	ld	r20, X+
     b9a:	5c 91       	ld	r21, X
     b9c:	11 97       	sbiw	r26, 0x01	; 1
     b9e:	28 81       	ld	r18, Y
     ba0:	39 81       	ldd	r19, Y+1	; 0x01
     ba2:	42 17       	cp	r20, r18
     ba4:	53 07       	cpc	r21, r19
     ba6:	c1 f7       	brne	.-16     	; 0xb98 <_ZN14HardwareSerial3endEv+0x16>
     ba8:	a6 89       	ldd	r26, Z+22	; 0x16
     baa:	b7 89       	ldd	r27, Z+23	; 0x17
     bac:	4c 91       	ld	r20, X
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9c 01       	movw	r18, r24
     bb4:	04 8c       	ldd	r0, Z+28	; 0x1c
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <_ZN14HardwareSerial3endEv+0x3a>
     bb8:	22 0f       	add	r18, r18
     bba:	33 1f       	adc	r19, r19
     bbc:	0a 94       	dec	r0
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <_ZN14HardwareSerial3endEv+0x36>
     bc0:	20 95       	com	r18
     bc2:	24 23       	and	r18, r20
     bc4:	2c 93       	st	X, r18
     bc6:	a6 89       	ldd	r26, Z+22	; 0x16
     bc8:	b7 89       	ldd	r27, Z+23	; 0x17
     bca:	4c 91       	ld	r20, X
     bcc:	9c 01       	movw	r18, r24
     bce:	05 8c       	ldd	r0, Z+29	; 0x1d
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <_ZN14HardwareSerial3endEv+0x54>
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <_ZN14HardwareSerial3endEv+0x50>
     bda:	20 95       	com	r18
     bdc:	24 23       	and	r18, r20
     bde:	2c 93       	st	X, r18
     be0:	a6 89       	ldd	r26, Z+22	; 0x16
     be2:	b7 89       	ldd	r27, Z+23	; 0x17
     be4:	4c 91       	ld	r20, X
     be6:	9c 01       	movw	r18, r24
     be8:	06 8c       	ldd	r0, Z+30	; 0x1e
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <_ZN14HardwareSerial3endEv+0x6e>
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <_ZN14HardwareSerial3endEv+0x6a>
     bf4:	20 95       	com	r18
     bf6:	24 23       	and	r18, r20
     bf8:	2c 93       	st	X, r18
     bfa:	a6 89       	ldd	r26, Z+22	; 0x16
     bfc:	b7 89       	ldd	r27, Z+23	; 0x17
     bfe:	2c 91       	ld	r18, X
     c00:	07 8c       	ldd	r0, Z+31	; 0x1f
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <_ZN14HardwareSerial3endEv+0x86>
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	0a 94       	dec	r0
     c0a:	e2 f7       	brpl	.-8      	; 0xc04 <_ZN14HardwareSerial3endEv+0x82>
     c0c:	80 95       	com	r24
     c0e:	82 23       	and	r24, r18
     c10:	8c 93       	st	X, r24
     c12:	84 85       	ldd	r24, Z+12	; 0x0c
     c14:	95 85       	ldd	r25, Z+13	; 0x0d
     c16:	fc 01       	movw	r30, r24
     c18:	ee 5b       	subi	r30, 0xBE	; 190
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	20 81       	ld	r18, Z
     c1e:	31 81       	ldd	r19, Z+1	; 0x01
     c20:	fc 01       	movw	r30, r24
     c22:	e0 5c       	subi	r30, 0xC0	; 192
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	31 83       	std	Z+1, r19	; 0x01
     c28:	20 83       	st	Z, r18
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <_ZN14HardwareSerialcvbEv>:
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	08 95       	ret

00000c34 <_ZN5Print5writeEPKhj>:
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	6c 01       	movw	r12, r24
     c46:	eb 01       	movw	r28, r22
     c48:	7a 01       	movw	r14, r20
     c4a:	e6 0e       	add	r14, r22
     c4c:	f7 1e       	adc	r15, r23
     c4e:	00 e0       	ldi	r16, 0x00	; 0
     c50:	10 e0       	ldi	r17, 0x00	; 0
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <_ZN5Print5writeEPKhj+0x36>
     c54:	69 91       	ld	r22, Y+
     c56:	d6 01       	movw	r26, r12
     c58:	ed 91       	ld	r30, X+
     c5a:	fc 91       	ld	r31, X
     c5c:	01 90       	ld	r0, Z+
     c5e:	f0 81       	ld	r31, Z
     c60:	e0 2d       	mov	r30, r0
     c62:	c6 01       	movw	r24, r12
     c64:	19 95       	eicall
     c66:	08 0f       	add	r16, r24
     c68:	19 1f       	adc	r17, r25
     c6a:	ce 15       	cp	r28, r14
     c6c:	df 05       	cpc	r29, r15
     c6e:	91 f7       	brne	.-28     	; 0xc54 <_ZN5Print5writeEPKhj+0x20>
     c70:	c8 01       	movw	r24, r16
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	08 95       	ret

00000c84 <_ZN5Print5printEPK19__FlashStringHelper>:
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	7c 01       	movw	r14, r24
     c92:	eb 01       	movw	r28, r22
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	fe 01       	movw	r30, r28
     c9a:	21 96       	adiw	r28, 0x01	; 1
     c9c:	64 91       	lpm	r22, Z+
     c9e:	66 23       	and	r22, r22
     ca0:	51 f0       	breq	.+20     	; 0xcb6 <_ZN5Print5printEPK19__FlashStringHelper+0x32>
     ca2:	f7 01       	movw	r30, r14
     ca4:	a0 81       	ld	r26, Z
     ca6:	b1 81       	ldd	r27, Z+1	; 0x01
     ca8:	ed 91       	ld	r30, X+
     caa:	fc 91       	ld	r31, X
     cac:	c7 01       	movw	r24, r14
     cae:	19 95       	eicall
     cb0:	08 0f       	add	r16, r24
     cb2:	19 1f       	adc	r17, r25
     cb4:	f1 cf       	rjmp	.-30     	; 0xc98 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     cb6:	c8 01       	movw	r24, r16
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	08 95       	ret

00000cc6 <_ZN5Print5printERK6String>:
     cc6:	af 92       	push	r10
     cc8:	bf 92       	push	r11
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	7c 01       	movw	r14, r24
     cdc:	6b 01       	movw	r12, r22
     cde:	00 e0       	ldi	r16, 0x00	; 0
     ce0:	10 e0       	ldi	r17, 0x00	; 0
     ce2:	c0 e0       	ldi	r28, 0x00	; 0
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
     ce6:	11 c0       	rjmp	.+34     	; 0xd0a <_ZN5Print5printERK6String+0x44>
     ce8:	d7 01       	movw	r26, r14
     cea:	ed 91       	ld	r30, X+
     cec:	fc 91       	ld	r31, X
     cee:	a0 80       	ld	r10, Z
     cf0:	b1 80       	ldd	r11, Z+1	; 0x01
     cf2:	b8 01       	movw	r22, r16
     cf4:	c6 01       	movw	r24, r12
     cf6:	0e 94 75 10 	call	0x20ea	; 0x20ea <_ZNK6StringixEj>
     cfa:	68 2f       	mov	r22, r24
     cfc:	c7 01       	movw	r24, r14
     cfe:	f5 01       	movw	r30, r10
     d00:	19 95       	eicall
     d02:	c8 0f       	add	r28, r24
     d04:	d9 1f       	adc	r29, r25
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	d6 01       	movw	r26, r12
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	8d 91       	ld	r24, X+
     d10:	9c 91       	ld	r25, X
     d12:	15 97       	sbiw	r26, 0x05	; 5
     d14:	08 17       	cp	r16, r24
     d16:	19 07       	cpc	r17, r25
     d18:	38 f3       	brcs	.-50     	; 0xce8 <_ZN5Print5printERK6String+0x22>
     d1a:	ce 01       	movw	r24, r28
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	08 95       	ret

00000d32 <_ZN5Print5printEPKc>:
     d32:	0c 94 9d 3f 	jmp	0x7f3a	; 0x7f3a <_ZN5Print5writeEPKc>

00000d36 <_ZN5Print5printEc>:
     d36:	dc 01       	movw	r26, r24
     d38:	ed 91       	ld	r30, X+
     d3a:	fc 91       	ld	r31, X
     d3c:	01 90       	ld	r0, Z+
     d3e:	f0 81       	ld	r31, Z
     d40:	e0 2d       	mov	r30, r0
     d42:	19 94       	eijmp

00000d44 <_ZN5Print5printERK9Printable>:
     d44:	db 01       	movw	r26, r22
     d46:	ed 91       	ld	r30, X+
     d48:	fc 91       	ld	r31, X
     d4a:	11 97       	sbiw	r26, 0x01	; 1
     d4c:	01 90       	ld	r0, Z+
     d4e:	f0 81       	ld	r31, Z
     d50:	e0 2d       	mov	r30, r0
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	19 94       	eijmp

00000d58 <_ZN5Print7printlnEv>:
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
     d62:	6d e0       	ldi	r22, 0x0D	; 13
     d64:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
     d68:	8c 01       	movw	r16, r24
     d6a:	6a e0       	ldi	r22, 0x0A	; 10
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
     d72:	9c 01       	movw	r18, r24
     d74:	20 0f       	add	r18, r16
     d76:	31 1f       	adc	r19, r17
     d78:	c9 01       	movw	r24, r18
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <_ZN5Print7printlnEPK19__FlashStringHelper>:
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	ec 01       	movw	r28, r24
     d8e:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN5Print5printEPK19__FlashStringHelper>
     d92:	8c 01       	movw	r16, r24
     d94:	ce 01       	movw	r24, r28
     d96:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     d9a:	9c 01       	movw	r18, r24
     d9c:	20 0f       	add	r18, r16
     d9e:	31 1f       	adc	r19, r17
     da0:	c9 01       	movw	r24, r18
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	08 95       	ret

00000dac <_ZN5Print7printlnERK6String>:
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	ec 01       	movw	r28, r24
     db6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN5Print5printERK6String>
     dba:	8c 01       	movw	r16, r24
     dbc:	ce 01       	movw	r24, r28
     dbe:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     dc2:	9c 01       	movw	r18, r24
     dc4:	20 0f       	add	r18, r16
     dc6:	31 1f       	adc	r19, r17
     dc8:	c9 01       	movw	r24, r18
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <_ZN5Print7printlnEPKc>:
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	ec 01       	movw	r28, r24
     dde:	0e 94 9d 3f 	call	0x7f3a	; 0x7f3a <_ZN5Print5writeEPKc>
     de2:	8c 01       	movw	r16, r24
     de4:	ce 01       	movw	r24, r28
     de6:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     dea:	98 01       	movw	r18, r16
     dec:	28 0f       	add	r18, r24
     dee:	39 1f       	adc	r19, r25
     df0:	c9 01       	movw	r24, r18
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <_ZN5Print7printlnEc>:
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
     e06:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
     e0a:	8c 01       	movw	r16, r24
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     e12:	9c 01       	movw	r18, r24
     e14:	20 0f       	add	r18, r16
     e16:	31 1f       	adc	r19, r17
     e18:	c9 01       	movw	r24, r18
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <_ZN5Print7printlnERK9Printable>:
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN5Print5printERK9Printable>
     e32:	8c 01       	movw	r16, r24
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     e3a:	9c 01       	movw	r18, r24
     e3c:	20 0f       	add	r18, r16
     e3e:	31 1f       	adc	r19, r17
     e40:	c9 01       	movw	r24, r18
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <_ZN5Print11printNumberEmh>:
     e4c:	5f 92       	push	r5
     e4e:	6f 92       	push	r6
     e50:	7f 92       	push	r7
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	a1 97       	sbiw	r28, 0x21	; 33
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	3c 01       	movw	r6, r24
     e7c:	6a 01       	movw	r12, r20
     e7e:	7b 01       	movw	r14, r22
     e80:	52 2e       	mov	r5, r18
     e82:	19 a2       	std	Y+33, r1	; 0x21
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	82 17       	cp	r24, r18
     e88:	10 f0       	brcs	.+4      	; 0xe8e <_ZN5Print11printNumberEmh+0x42>
     e8a:	8a e0       	ldi	r24, 0x0A	; 10
     e8c:	58 2e       	mov	r5, r24
     e8e:	8e 01       	movw	r16, r28
     e90:	0f 5d       	subi	r16, 0xDF	; 223
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	85 2c       	mov	r8, r5
     e96:	91 2c       	mov	r9, r1
     e98:	a1 2c       	mov	r10, r1
     e9a:	b1 2c       	mov	r11, r1
     e9c:	c7 01       	movw	r24, r14
     e9e:	b6 01       	movw	r22, r12
     ea0:	a5 01       	movw	r20, r10
     ea2:	94 01       	movw	r18, r8
     ea4:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
     ea8:	8c 2d       	mov	r24, r12
     eaa:	52 9e       	mul	r5, r18
     eac:	80 19       	sub	r24, r0
     eae:	11 24       	eor	r1, r1
     eb0:	01 50       	subi	r16, 0x01	; 1
     eb2:	11 09       	sbc	r17, r1
     eb4:	8a 30       	cpi	r24, 0x0A	; 10
     eb6:	10 f4       	brcc	.+4      	; 0xebc <_ZN5Print11printNumberEmh+0x70>
     eb8:	80 5d       	subi	r24, 0xD0	; 208
     eba:	01 c0       	rjmp	.+2      	; 0xebe <_ZN5Print11printNumberEmh+0x72>
     ebc:	89 5c       	subi	r24, 0xC9	; 201
     ebe:	f8 01       	movw	r30, r16
     ec0:	80 83       	st	Z, r24
     ec2:	69 01       	movw	r12, r18
     ec4:	7a 01       	movw	r14, r20
     ec6:	c1 14       	cp	r12, r1
     ec8:	d1 04       	cpc	r13, r1
     eca:	e1 04       	cpc	r14, r1
     ecc:	f1 04       	cpc	r15, r1
     ece:	31 f7       	brne	.-52     	; 0xe9c <_ZN5Print11printNumberEmh+0x50>
     ed0:	b8 01       	movw	r22, r16
     ed2:	c3 01       	movw	r24, r6
     ed4:	0e 94 9d 3f 	call	0x7f3a	; 0x7f3a <_ZN5Print5writeEPKc>
     ed8:	a1 96       	adiw	r28, 0x21	; 33
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	af 90       	pop	r10
     ef8:	9f 90       	pop	r9
     efa:	8f 90       	pop	r8
     efc:	7f 90       	pop	r7
     efe:	6f 90       	pop	r6
     f00:	5f 90       	pop	r5
     f02:	08 95       	ret

00000f04 <_ZN5Print5printEmi>:
     f04:	21 15       	cp	r18, r1
     f06:	31 05       	cpc	r19, r1
     f08:	41 f4       	brne	.+16     	; 0xf1a <_ZN5Print5printEmi+0x16>
     f0a:	dc 01       	movw	r26, r24
     f0c:	ed 91       	ld	r30, X+
     f0e:	fc 91       	ld	r31, X
     f10:	01 90       	ld	r0, Z+
     f12:	f0 81       	ld	r31, Z
     f14:	e0 2d       	mov	r30, r0
     f16:	64 2f       	mov	r22, r20
     f18:	19 94       	eijmp
     f1a:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <_ZN5Print11printNumberEmh>

00000f1e <_ZN5Print7printlnEmi>:
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	ec 01       	movw	r28, r24
     f28:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN5Print5printEmi>
     f2c:	8c 01       	movw	r16, r24
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     f34:	9c 01       	movw	r18, r24
     f36:	20 0f       	add	r18, r16
     f38:	31 1f       	adc	r19, r17
     f3a:	c9 01       	movw	r24, r18
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <_ZN5Print5printEji>:
     f46:	9a 01       	movw	r18, r20
     f48:	ab 01       	movw	r20, r22
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	0c 94 82 07 	jmp	0xf04	; 0xf04 <_ZN5Print5printEmi>

00000f52 <_ZN5Print7printlnEji>:
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	ec 01       	movw	r28, r24
     f5c:	9a 01       	movw	r18, r20
     f5e:	ab 01       	movw	r20, r22
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN5Print5printEmi>
     f68:	8c 01       	movw	r16, r24
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     f70:	98 01       	movw	r18, r16
     f72:	28 0f       	add	r18, r24
     f74:	39 1f       	adc	r19, r25
     f76:	c9 01       	movw	r24, r18
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <_ZN5Print5printEhi>:
     f82:	9a 01       	movw	r18, r20
     f84:	46 2f       	mov	r20, r22
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	0c 94 82 07 	jmp	0xf04	; 0xf04 <_ZN5Print5printEmi>

00000f90 <_ZN5Print7printlnEhi>:
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	ec 01       	movw	r28, r24
     f9a:	9a 01       	movw	r18, r20
     f9c:	46 2f       	mov	r20, r22
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN5Print5printEmi>
     fa8:	8c 01       	movw	r16, r24
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
     fb0:	98 01       	movw	r18, r16
     fb2:	28 0f       	add	r18, r24
     fb4:	39 1f       	adc	r19, r25
     fb6:	c9 01       	movw	r24, r18
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	08 95       	ret

00000fc2 <_ZN5Print5printEli>:
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	ec 01       	movw	r28, r24
     fd4:	6a 01       	movw	r12, r20
     fd6:	7b 01       	movw	r14, r22
     fd8:	21 15       	cp	r18, r1
     fda:	31 05       	cpc	r19, r1
     fdc:	79 f4       	brne	.+30     	; 0xffc <_ZN5Print5printEli+0x3a>
     fde:	e8 81       	ld	r30, Y
     fe0:	f9 81       	ldd	r31, Y+1	; 0x01
     fe2:	01 90       	ld	r0, Z+
     fe4:	f0 81       	ld	r31, Z
     fe6:	e0 2d       	mov	r30, r0
     fe8:	64 2f       	mov	r22, r20
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	19 94       	eijmp
     ffc:	2a 30       	cpi	r18, 0x0A	; 10
     ffe:	31 05       	cpc	r19, r1
    1000:	19 f4       	brne	.+6      	; 0x1008 <_ZN5Print5printEli+0x46>
    1002:	77 fd       	sbrc	r23, 7
    1004:	0e c0       	rjmp	.+28     	; 0x1022 <_ZN5Print5printEli+0x60>
    1006:	2a e0       	ldi	r18, 0x0A	; 10
    1008:	b7 01       	movw	r22, r14
    100a:	a6 01       	movw	r20, r12
    100c:	ce 01       	movw	r24, r28
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <_ZN5Print11printNumberEmh>
    1022:	6d e2       	ldi	r22, 0x2D	; 45
    1024:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
    1028:	8c 01       	movw	r16, r24
    102a:	44 27       	eor	r20, r20
    102c:	55 27       	eor	r21, r21
    102e:	ba 01       	movw	r22, r20
    1030:	4c 19       	sub	r20, r12
    1032:	5d 09       	sbc	r21, r13
    1034:	6e 09       	sbc	r22, r14
    1036:	7f 09       	sbc	r23, r15
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	ce 01       	movw	r24, r28
    103c:	0e 94 26 07 	call	0xe4c	; 0xe4c <_ZN5Print11printNumberEmh>
    1040:	9c 01       	movw	r18, r24
    1042:	20 0f       	add	r18, r16
    1044:	31 1f       	adc	r19, r17
    1046:	c9 01       	movw	r24, r18
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	08 95       	ret

0000105a <_ZN5Print7printlnEli>:
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	ec 01       	movw	r28, r24
    1064:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN5Print5printEli>
    1068:	8c 01       	movw	r16, r24
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
    1070:	9c 01       	movw	r18, r24
    1072:	20 0f       	add	r18, r16
    1074:	31 1f       	adc	r19, r17
    1076:	c9 01       	movw	r24, r18
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	08 95       	ret

00001082 <_ZN5Print5printEii>:
    1082:	9a 01       	movw	r18, r20
    1084:	ab 01       	movw	r20, r22
    1086:	66 27       	eor	r22, r22
    1088:	57 fd       	sbrc	r21, 7
    108a:	60 95       	com	r22
    108c:	76 2f       	mov	r23, r22
    108e:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <_ZN5Print5printEli>

00001092 <_ZN5Print7printlnEii>:
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	9a 01       	movw	r18, r20
    109e:	ab 01       	movw	r20, r22
    10a0:	66 27       	eor	r22, r22
    10a2:	57 fd       	sbrc	r21, 7
    10a4:	60 95       	com	r22
    10a6:	76 2f       	mov	r23, r22
    10a8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN5Print5printEli>
    10ac:	8c 01       	movw	r16, r24
    10ae:	ce 01       	movw	r24, r28
    10b0:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
    10b4:	98 01       	movw	r18, r16
    10b6:	28 0f       	add	r18, r24
    10b8:	39 1f       	adc	r19, r25
    10ba:	c9 01       	movw	r24, r18
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <_ZN5Print10printFloatEdh>:
    10c6:	6f 92       	push	r6
    10c8:	7f 92       	push	r7
    10ca:	8f 92       	push	r8
    10cc:	9f 92       	push	r9
    10ce:	af 92       	push	r10
    10d0:	bf 92       	push	r11
    10d2:	cf 92       	push	r12
    10d4:	df 92       	push	r13
    10d6:	ef 92       	push	r14
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	8c 01       	movw	r16, r24
    10e2:	6a 01       	movw	r12, r20
    10e4:	7b 01       	movw	r14, r22
    10e6:	c2 2f       	mov	r28, r18
    10e8:	9a 01       	movw	r18, r20
    10ea:	ab 01       	movw	r20, r22
    10ec:	c7 01       	movw	r24, r14
    10ee:	b6 01       	movw	r22, r12
    10f0:	0e 94 43 43 	call	0x8686	; 0x8686 <__unordsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	19 f0       	breq	.+6      	; 0x10fe <_ZN5Print10printFloatEdh+0x38>
    10f8:	68 e6       	ldi	r22, 0x68	; 104
    10fa:	76 e0       	ldi	r23, 0x06	; 6
    10fc:	32 c0       	rjmp	.+100    	; 0x1162 <_ZN5Print10printFloatEdh+0x9c>
    10fe:	46 01       	movw	r8, r12
    1100:	57 01       	movw	r10, r14
    1102:	e8 94       	clt
    1104:	b7 f8       	bld	r11, 7
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	5f e7       	ldi	r21, 0x7F	; 127
    110e:	c5 01       	movw	r24, r10
    1110:	b4 01       	movw	r22, r8
    1112:	0e 94 43 43 	call	0x8686	; 0x8686 <__unordsf2>
    1116:	81 11       	cpse	r24, r1
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <_ZN5Print10printFloatEdh+0x6e>
    111a:	2f ef       	ldi	r18, 0xFF	; 255
    111c:	3f ef       	ldi	r19, 0xFF	; 255
    111e:	4f e7       	ldi	r20, 0x7F	; 127
    1120:	5f e7       	ldi	r21, 0x7F	; 127
    1122:	c5 01       	movw	r24, r10
    1124:	b4 01       	movw	r22, r8
    1126:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    112a:	18 16       	cp	r1, r24
    112c:	1c f4       	brge	.+6      	; 0x1134 <_ZN5Print10printFloatEdh+0x6e>
    112e:	6c e6       	ldi	r22, 0x6C	; 108
    1130:	76 e0       	ldi	r23, 0x06	; 6
    1132:	17 c0       	rjmp	.+46     	; 0x1162 <_ZN5Print10printFloatEdh+0x9c>
    1134:	2f ef       	ldi	r18, 0xFF	; 255
    1136:	3f ef       	ldi	r19, 0xFF	; 255
    1138:	4f e7       	ldi	r20, 0x7F	; 127
    113a:	5f e4       	ldi	r21, 0x4F	; 79
    113c:	c7 01       	movw	r24, r14
    113e:	b6 01       	movw	r22, r12
    1140:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    1144:	18 16       	cp	r1, r24
    1146:	0c f4       	brge	.+2      	; 0x114a <_ZN5Print10printFloatEdh+0x84>
    1148:	0a c0       	rjmp	.+20     	; 0x115e <_ZN5Print10printFloatEdh+0x98>
    114a:	2f ef       	ldi	r18, 0xFF	; 255
    114c:	3f ef       	ldi	r19, 0xFF	; 255
    114e:	4f e7       	ldi	r20, 0x7F	; 127
    1150:	5f ec       	ldi	r21, 0xCF	; 207
    1152:	c7 01       	movw	r24, r14
    1154:	b6 01       	movw	r22, r12
    1156:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    115a:	87 ff       	sbrs	r24, 7
    115c:	12 c0       	rjmp	.+36     	; 0x1182 <_ZN5Print10printFloatEdh+0xbc>
    115e:	60 e7       	ldi	r22, 0x70	; 112
    1160:	76 e0       	ldi	r23, 0x06	; 6
    1162:	c8 01       	movw	r24, r16
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	9f 90       	pop	r9
    1178:	8f 90       	pop	r8
    117a:	7f 90       	pop	r7
    117c:	6f 90       	pop	r6
    117e:	0c 94 9d 3f 	jmp	0x7f3a	; 0x7f3a <_ZN5Print5writeEPKc>
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	a9 01       	movw	r20, r18
    1188:	c7 01       	movw	r24, r14
    118a:	b6 01       	movw	r22, r12
    118c:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    1190:	87 ff       	sbrs	r24, 7
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <_ZN5Print10printFloatEdh+0xe2>
    1194:	6d e2       	ldi	r22, 0x2D	; 45
    1196:	c8 01       	movw	r24, r16
    1198:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
    119c:	3c 01       	movw	r6, r24
    119e:	f7 fa       	bst	r15, 7
    11a0:	f0 94       	com	r15
    11a2:	f7 f8       	bld	r15, 7
    11a4:	f0 94       	com	r15
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <_ZN5Print10printFloatEdh+0xe6>
    11a8:	61 2c       	mov	r6, r1
    11aa:	71 2c       	mov	r7, r1
    11ac:	b1 2c       	mov	r11, r1
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	9f e3       	ldi	r25, 0x3F	; 63
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <_ZN5Print10printFloatEdh+0x100>
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    11c4:	b3 94       	inc	r11
    11c6:	bc 12       	cpse	r11, r28
    11c8:	f7 cf       	rjmp	.-18     	; 0x11b8 <_ZN5Print10printFloatEdh+0xf2>
    11ca:	26 2f       	mov	r18, r22
    11cc:	37 2f       	mov	r19, r23
    11ce:	48 2f       	mov	r20, r24
    11d0:	59 2f       	mov	r21, r25
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    11da:	4b 01       	movw	r8, r22
    11dc:	5c 01       	movw	r10, r24
    11de:	79 2d       	mov	r23, r9
    11e0:	9b 2d       	mov	r25, r11
    11e2:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <__fixunssfsi>
    11e6:	6b 01       	movw	r12, r22
    11e8:	7c 01       	movw	r14, r24
    11ea:	0e 94 27 41 	call	0x824e	; 0x824e <__floatunsisf>
    11ee:	9b 01       	movw	r18, r22
    11f0:	ac 01       	movw	r20, r24
    11f2:	68 2d       	mov	r22, r8
    11f4:	79 2d       	mov	r23, r9
    11f6:	8a 2d       	mov	r24, r10
    11f8:	9b 2d       	mov	r25, r11
    11fa:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    11fe:	b6 2e       	mov	r11, r22
    1200:	a7 2e       	mov	r10, r23
    1202:	98 2e       	mov	r9, r24
    1204:	89 2e       	mov	r8, r25
    1206:	2a e0       	ldi	r18, 0x0A	; 10
    1208:	a6 01       	movw	r20, r12
    120a:	b7 01       	movw	r22, r14
    120c:	c8 01       	movw	r24, r16
    120e:	0e 94 26 07 	call	0xe4c	; 0xe4c <_ZN5Print11printNumberEmh>
    1212:	68 0e       	add	r6, r24
    1214:	79 1e       	adc	r7, r25
    1216:	cc 23       	and	r28, r28
    1218:	c9 f1       	breq	.+114    	; 0x128c <_ZN5Print10printFloatEdh+0x1c6>
    121a:	62 ee       	ldi	r22, 0xE2	; 226
    121c:	73 e0       	ldi	r23, 0x03	; 3
    121e:	c8 01       	movw	r24, r16
    1220:	0e 94 9d 3f 	call	0x7f3a	; 0x7f3a <_ZN5Print5writeEPKc>
    1224:	68 0e       	add	r6, r24
    1226:	79 1e       	adc	r7, r25
    1228:	31 c0       	rjmp	.+98     	; 0x128c <_ZN5Print10printFloatEdh+0x1c6>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e2       	ldi	r20, 0x20	; 32
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	d5 01       	movw	r26, r10
    1234:	f4 01       	movw	r30, r8
    1236:	6b 2f       	mov	r22, r27
    1238:	7a 2d       	mov	r23, r10
    123a:	8f 2f       	mov	r24, r31
    123c:	98 2d       	mov	r25, r8
    123e:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    1242:	4b 01       	movw	r8, r22
    1244:	5c 01       	movw	r10, r24
    1246:	79 2d       	mov	r23, r9
    1248:	9b 2d       	mov	r25, r11
    124a:	0e 94 f6 40 	call	0x81ec	; 0x81ec <__fixsfsi>
    124e:	6b 01       	movw	r12, r22
    1250:	ee 24       	eor	r14, r14
    1252:	d7 fc       	sbrc	r13, 7
    1254:	e0 94       	com	r14
    1256:	fe 2c       	mov	r15, r14
    1258:	2a e0       	ldi	r18, 0x0A	; 10
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	b7 01       	movw	r22, r14
    125e:	a6 01       	movw	r20, r12
    1260:	c8 01       	movw	r24, r16
    1262:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN5Print5printEli>
    1266:	68 0e       	add	r6, r24
    1268:	79 1e       	adc	r7, r25
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	68 2d       	mov	r22, r8
    1278:	79 2d       	mov	r23, r9
    127a:	8a 2d       	mov	r24, r10
    127c:	9b 2d       	mov	r25, r11
    127e:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    1282:	b6 2e       	mov	r11, r22
    1284:	a7 2e       	mov	r10, r23
    1286:	98 2e       	mov	r9, r24
    1288:	89 2e       	mov	r8, r25
    128a:	c1 50       	subi	r28, 0x01	; 1
    128c:	c1 11       	cpse	r28, r1
    128e:	cd cf       	rjmp	.-102    	; 0x122a <_ZN5Print10printFloatEdh+0x164>
    1290:	c3 01       	movw	r24, r6
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	ff 90       	pop	r15
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	bf 90       	pop	r11
    12a2:	af 90       	pop	r10
    12a4:	9f 90       	pop	r9
    12a6:	8f 90       	pop	r8
    12a8:	7f 90       	pop	r7
    12aa:	6f 90       	pop	r6
    12ac:	08 95       	ret

000012ae <_ZN5Print5printEdi>:
    12ae:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <_ZN5Print10printFloatEdh>

000012b2 <_ZN5Print7printlnEdi>:
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
    12bc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <_ZN5Print10printFloatEdh>
    12c0:	8c 01       	movw	r16, r24
    12c2:	ce 01       	movw	r24, r28
    12c4:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>
    12c8:	98 01       	movw	r18, r16
    12ca:	28 0f       	add	r18, r24
    12cc:	39 1f       	adc	r19, r25
    12ce:	c9 01       	movw	r24, r18
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <attachInterrupt>:
    12da:	88 30       	cpi	r24, 0x08	; 8
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <attachInterrupt+0x6>
    12de:	73 c0       	rjmp	.+230    	; 0x13c6 <attachInterrupt+0xec>
    12e0:	e8 2f       	mov	r30, r24
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	e4 5e       	subi	r30, 0xE4	; 228
    12ea:	f6 4f       	sbci	r31, 0xF6	; 246
    12ec:	71 83       	std	Z+1, r23	; 0x01
    12ee:	60 83       	st	Z, r22
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	11 f1       	breq	.+68     	; 0x1338 <attachInterrupt+0x5e>
    12f4:	30 f4       	brcc	.+12     	; 0x1302 <attachInterrupt+0x28>
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	59 f0       	breq	.+22     	; 0x1310 <attachInterrupt+0x36>
    12fa:	90 f4       	brcc	.+36     	; 0x1320 <attachInterrupt+0x46>
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	b1 f5       	brne	.+108    	; 0x136c <attachInterrupt+0x92>
    1300:	3d c0       	rjmp	.+122    	; 0x137c <attachInterrupt+0xa2>
    1302:	86 30       	cpi	r24, 0x06	; 6
    1304:	09 f4       	brne	.+2      	; 0x1308 <attachInterrupt+0x2e>
    1306:	46 c0       	rjmp	.+140    	; 0x1394 <attachInterrupt+0xba>
    1308:	20 f1       	brcs	.+72     	; 0x1352 <attachInterrupt+0x78>
    130a:	87 30       	cpi	r24, 0x07	; 7
    130c:	79 f5       	brne	.+94     	; 0x136c <attachInterrupt+0x92>
    130e:	4f c0       	rjmp	.+158    	; 0x13ae <attachInterrupt+0xd4>
    1310:	80 91 69 00 	lds	r24, 0x0069
    1314:	8c 7f       	andi	r24, 0xFC	; 252
    1316:	84 2b       	or	r24, r20
    1318:	80 93 69 00 	sts	0x0069, r24
    131c:	e8 9a       	sbi	0x1d, 0	; 29
    131e:	08 95       	ret
    1320:	80 91 69 00 	lds	r24, 0x0069
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	44 0f       	add	r20, r20
    132a:	55 1f       	adc	r21, r21
    132c:	83 7f       	andi	r24, 0xF3	; 243
    132e:	84 2b       	or	r24, r20
    1330:	80 93 69 00 	sts	0x0069, r24
    1334:	e9 9a       	sbi	0x1d, 1	; 29
    1336:	08 95       	ret
    1338:	80 91 69 00 	lds	r24, 0x0069
    133c:	74 e0       	ldi	r23, 0x04	; 4
    133e:	44 0f       	add	r20, r20
    1340:	55 1f       	adc	r21, r21
    1342:	7a 95       	dec	r23
    1344:	e1 f7       	brne	.-8      	; 0x133e <attachInterrupt+0x64>
    1346:	8f 7c       	andi	r24, 0xCF	; 207
    1348:	84 2b       	or	r24, r20
    134a:	80 93 69 00 	sts	0x0069, r24
    134e:	ea 9a       	sbi	0x1d, 2	; 29
    1350:	08 95       	ret
    1352:	80 91 69 00 	lds	r24, 0x0069
    1356:	66 e0       	ldi	r22, 0x06	; 6
    1358:	44 0f       	add	r20, r20
    135a:	55 1f       	adc	r21, r21
    135c:	6a 95       	dec	r22
    135e:	e1 f7       	brne	.-8      	; 0x1358 <attachInterrupt+0x7e>
    1360:	8f 73       	andi	r24, 0x3F	; 63
    1362:	84 2b       	or	r24, r20
    1364:	80 93 69 00 	sts	0x0069, r24
    1368:	eb 9a       	sbi	0x1d, 3	; 29
    136a:	08 95       	ret
    136c:	80 91 6a 00 	lds	r24, 0x006A
    1370:	8c 7f       	andi	r24, 0xFC	; 252
    1372:	84 2b       	or	r24, r20
    1374:	80 93 6a 00 	sts	0x006A, r24
    1378:	ec 9a       	sbi	0x1d, 4	; 29
    137a:	08 95       	ret
    137c:	80 91 6a 00 	lds	r24, 0x006A
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	44 0f       	add	r20, r20
    1386:	55 1f       	adc	r21, r21
    1388:	83 7f       	andi	r24, 0xF3	; 243
    138a:	84 2b       	or	r24, r20
    138c:	80 93 6a 00 	sts	0x006A, r24
    1390:	ed 9a       	sbi	0x1d, 5	; 29
    1392:	08 95       	ret
    1394:	80 91 6a 00 	lds	r24, 0x006A
    1398:	24 e0       	ldi	r18, 0x04	; 4
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	2a 95       	dec	r18
    13a0:	e1 f7       	brne	.-8      	; 0x139a <attachInterrupt+0xc0>
    13a2:	8f 7c       	andi	r24, 0xCF	; 207
    13a4:	84 2b       	or	r24, r20
    13a6:	80 93 6a 00 	sts	0x006A, r24
    13aa:	ee 9a       	sbi	0x1d, 6	; 29
    13ac:	08 95       	ret
    13ae:	80 91 6a 00 	lds	r24, 0x006A
    13b2:	96 e0       	ldi	r25, 0x06	; 6
    13b4:	44 0f       	add	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	9a 95       	dec	r25
    13ba:	e1 f7       	brne	.-8      	; 0x13b4 <attachInterrupt+0xda>
    13bc:	8f 73       	andi	r24, 0x3F	; 63
    13be:	84 2b       	or	r24, r20
    13c0:	80 93 6a 00 	sts	0x006A, r24
    13c4:	ef 9a       	sbi	0x1d, 7	; 29
    13c6:	08 95       	ret

000013c8 <detachInterrupt>:
    13c8:	88 30       	cpi	r24, 0x08	; 8
    13ca:	30 f5       	brcc	.+76     	; 0x1418 <detachInterrupt+0x50>
    13cc:	84 30       	cpi	r24, 0x04	; 4
    13ce:	89 f0       	breq	.+34     	; 0x13f2 <detachInterrupt+0x2a>
    13d0:	30 f4       	brcc	.+12     	; 0x13de <detachInterrupt+0x16>
    13d2:	82 30       	cpi	r24, 0x02	; 2
    13d4:	51 f0       	breq	.+20     	; 0x13ea <detachInterrupt+0x22>
    13d6:	58 f4       	brcc	.+22     	; 0x13ee <detachInterrupt+0x26>
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	79 f4       	brne	.+30     	; 0x13fa <detachInterrupt+0x32>
    13dc:	10 c0       	rjmp	.+32     	; 0x13fe <detachInterrupt+0x36>
    13de:	86 30       	cpi	r24, 0x06	; 6
    13e0:	81 f0       	breq	.+32     	; 0x1402 <detachInterrupt+0x3a>
    13e2:	48 f0       	brcs	.+18     	; 0x13f6 <detachInterrupt+0x2e>
    13e4:	87 30       	cpi	r24, 0x07	; 7
    13e6:	49 f4       	brne	.+18     	; 0x13fa <detachInterrupt+0x32>
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <detachInterrupt+0x3e>
    13ea:	e8 98       	cbi	0x1d, 0	; 29
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <detachInterrupt+0x40>
    13ee:	e9 98       	cbi	0x1d, 1	; 29
    13f0:	0b c0       	rjmp	.+22     	; 0x1408 <detachInterrupt+0x40>
    13f2:	ea 98       	cbi	0x1d, 2	; 29
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <detachInterrupt+0x40>
    13f6:	eb 98       	cbi	0x1d, 3	; 29
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <detachInterrupt+0x40>
    13fa:	ec 98       	cbi	0x1d, 4	; 29
    13fc:	05 c0       	rjmp	.+10     	; 0x1408 <detachInterrupt+0x40>
    13fe:	ed 98       	cbi	0x1d, 5	; 29
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <detachInterrupt+0x40>
    1402:	ee 98       	cbi	0x1d, 6	; 29
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <detachInterrupt+0x40>
    1406:	ef 98       	cbi	0x1d, 7	; 29
    1408:	e8 2f       	mov	r30, r24
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	e4 5e       	subi	r30, 0xE4	; 228
    1412:	f6 4f       	sbci	r31, 0xF6	; 246
    1414:	11 82       	std	Z+1, r1	; 0x01
    1416:	10 82       	st	Z, r1
    1418:	08 95       	ret

0000141a <__vector_1>:
    141a:	1f 92       	push	r1
    141c:	0f 92       	push	r0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	0f 92       	push	r0
    1422:	11 24       	eor	r1, r1
    1424:	0b b6       	in	r0, 0x3b	; 59
    1426:	0f 92       	push	r0
    1428:	1b be       	out	0x3b, r1	; 59
    142a:	2f 93       	push	r18
    142c:	3f 93       	push	r19
    142e:	4f 93       	push	r20
    1430:	5f 93       	push	r21
    1432:	6f 93       	push	r22
    1434:	7f 93       	push	r23
    1436:	8f 93       	push	r24
    1438:	9f 93       	push	r25
    143a:	af 93       	push	r26
    143c:	bf 93       	push	r27
    143e:	ef 93       	push	r30
    1440:	ff 93       	push	r31
    1442:	80 91 20 09 	lds	r24, 0x0920
    1446:	90 91 21 09 	lds	r25, 0x0921
    144a:	89 2b       	or	r24, r25
    144c:	29 f0       	breq	.+10     	; 0x1458 <__vector_1+0x3e>
    144e:	e0 91 20 09 	lds	r30, 0x0920
    1452:	f0 91 21 09 	lds	r31, 0x0921
    1456:	19 95       	eicall
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0b be       	out	0x3b, r0	; 59
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_2>:
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	0b b6       	in	r0, 0x3b	; 59
    148a:	0f 92       	push	r0
    148c:	1b be       	out	0x3b, r1	; 59
    148e:	2f 93       	push	r18
    1490:	3f 93       	push	r19
    1492:	4f 93       	push	r20
    1494:	5f 93       	push	r21
    1496:	6f 93       	push	r22
    1498:	7f 93       	push	r23
    149a:	8f 93       	push	r24
    149c:	9f 93       	push	r25
    149e:	af 93       	push	r26
    14a0:	bf 93       	push	r27
    14a2:	ef 93       	push	r30
    14a4:	ff 93       	push	r31
    14a6:	80 91 22 09 	lds	r24, 0x0922
    14aa:	90 91 23 09 	lds	r25, 0x0923
    14ae:	89 2b       	or	r24, r25
    14b0:	29 f0       	breq	.+10     	; 0x14bc <__vector_2+0x3e>
    14b2:	e0 91 22 09 	lds	r30, 0x0922
    14b6:	f0 91 23 09 	lds	r31, 0x0923
    14ba:	19 95       	eicall
    14bc:	ff 91       	pop	r31
    14be:	ef 91       	pop	r30
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	0f 90       	pop	r0
    14d6:	0b be       	out	0x3b, r0	; 59
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	0f 90       	pop	r0
    14de:	1f 90       	pop	r1
    14e0:	18 95       	reti

000014e2 <__vector_3>:
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	0b b6       	in	r0, 0x3b	; 59
    14ee:	0f 92       	push	r0
    14f0:	1b be       	out	0x3b, r1	; 59
    14f2:	2f 93       	push	r18
    14f4:	3f 93       	push	r19
    14f6:	4f 93       	push	r20
    14f8:	5f 93       	push	r21
    14fa:	6f 93       	push	r22
    14fc:	7f 93       	push	r23
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	af 93       	push	r26
    1504:	bf 93       	push	r27
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31
    150a:	80 91 24 09 	lds	r24, 0x0924
    150e:	90 91 25 09 	lds	r25, 0x0925
    1512:	89 2b       	or	r24, r25
    1514:	29 f0       	breq	.+10     	; 0x1520 <__vector_3+0x3e>
    1516:	e0 91 24 09 	lds	r30, 0x0924
    151a:	f0 91 25 09 	lds	r31, 0x0925
    151e:	19 95       	eicall
    1520:	ff 91       	pop	r31
    1522:	ef 91       	pop	r30
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	9f 91       	pop	r25
    152a:	8f 91       	pop	r24
    152c:	7f 91       	pop	r23
    152e:	6f 91       	pop	r22
    1530:	5f 91       	pop	r21
    1532:	4f 91       	pop	r20
    1534:	3f 91       	pop	r19
    1536:	2f 91       	pop	r18
    1538:	0f 90       	pop	r0
    153a:	0b be       	out	0x3b, r0	; 59
    153c:	0f 90       	pop	r0
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	0f 90       	pop	r0
    1542:	1f 90       	pop	r1
    1544:	18 95       	reti

00001546 <__vector_4>:
    1546:	1f 92       	push	r1
    1548:	0f 92       	push	r0
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	0f 92       	push	r0
    154e:	11 24       	eor	r1, r1
    1550:	0b b6       	in	r0, 0x3b	; 59
    1552:	0f 92       	push	r0
    1554:	1b be       	out	0x3b, r1	; 59
    1556:	2f 93       	push	r18
    1558:	3f 93       	push	r19
    155a:	4f 93       	push	r20
    155c:	5f 93       	push	r21
    155e:	6f 93       	push	r22
    1560:	7f 93       	push	r23
    1562:	8f 93       	push	r24
    1564:	9f 93       	push	r25
    1566:	af 93       	push	r26
    1568:	bf 93       	push	r27
    156a:	ef 93       	push	r30
    156c:	ff 93       	push	r31
    156e:	80 91 26 09 	lds	r24, 0x0926
    1572:	90 91 27 09 	lds	r25, 0x0927
    1576:	89 2b       	or	r24, r25
    1578:	29 f0       	breq	.+10     	; 0x1584 <__vector_4+0x3e>
    157a:	e0 91 26 09 	lds	r30, 0x0926
    157e:	f0 91 27 09 	lds	r31, 0x0927
    1582:	19 95       	eicall
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0b be       	out	0x3b, r0	; 59
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <__vector_5>:
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	0b b6       	in	r0, 0x3b	; 59
    15b6:	0f 92       	push	r0
    15b8:	1b be       	out	0x3b, r1	; 59
    15ba:	2f 93       	push	r18
    15bc:	3f 93       	push	r19
    15be:	4f 93       	push	r20
    15c0:	5f 93       	push	r21
    15c2:	6f 93       	push	r22
    15c4:	7f 93       	push	r23
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	af 93       	push	r26
    15cc:	bf 93       	push	r27
    15ce:	ef 93       	push	r30
    15d0:	ff 93       	push	r31
    15d2:	80 91 1c 09 	lds	r24, 0x091C
    15d6:	90 91 1d 09 	lds	r25, 0x091D
    15da:	89 2b       	or	r24, r25
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <__vector_5+0x3e>
    15de:	e0 91 1c 09 	lds	r30, 0x091C
    15e2:	f0 91 1d 09 	lds	r31, 0x091D
    15e6:	19 95       	eicall
    15e8:	ff 91       	pop	r31
    15ea:	ef 91       	pop	r30
    15ec:	bf 91       	pop	r27
    15ee:	af 91       	pop	r26
    15f0:	9f 91       	pop	r25
    15f2:	8f 91       	pop	r24
    15f4:	7f 91       	pop	r23
    15f6:	6f 91       	pop	r22
    15f8:	5f 91       	pop	r21
    15fa:	4f 91       	pop	r20
    15fc:	3f 91       	pop	r19
    15fe:	2f 91       	pop	r18
    1600:	0f 90       	pop	r0
    1602:	0b be       	out	0x3b, r0	; 59
    1604:	0f 90       	pop	r0
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	0f 90       	pop	r0
    160a:	1f 90       	pop	r1
    160c:	18 95       	reti

0000160e <__vector_6>:
    160e:	1f 92       	push	r1
    1610:	0f 92       	push	r0
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	0f 92       	push	r0
    1616:	11 24       	eor	r1, r1
    1618:	0b b6       	in	r0, 0x3b	; 59
    161a:	0f 92       	push	r0
    161c:	1b be       	out	0x3b, r1	; 59
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	80 91 1e 09 	lds	r24, 0x091E
    163a:	90 91 1f 09 	lds	r25, 0x091F
    163e:	89 2b       	or	r24, r25
    1640:	29 f0       	breq	.+10     	; 0x164c <__vector_6+0x3e>
    1642:	e0 91 1e 09 	lds	r30, 0x091E
    1646:	f0 91 1f 09 	lds	r31, 0x091F
    164a:	19 95       	eicall
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	bf 91       	pop	r27
    1652:	af 91       	pop	r26
    1654:	9f 91       	pop	r25
    1656:	8f 91       	pop	r24
    1658:	7f 91       	pop	r23
    165a:	6f 91       	pop	r22
    165c:	5f 91       	pop	r21
    165e:	4f 91       	pop	r20
    1660:	3f 91       	pop	r19
    1662:	2f 91       	pop	r18
    1664:	0f 90       	pop	r0
    1666:	0b be       	out	0x3b, r0	; 59
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 90       	pop	r0
    166e:	1f 90       	pop	r1
    1670:	18 95       	reti

00001672 <__vector_7>:
    1672:	1f 92       	push	r1
    1674:	0f 92       	push	r0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	0f 92       	push	r0
    167a:	11 24       	eor	r1, r1
    167c:	0b b6       	in	r0, 0x3b	; 59
    167e:	0f 92       	push	r0
    1680:	1b be       	out	0x3b, r1	; 59
    1682:	2f 93       	push	r18
    1684:	3f 93       	push	r19
    1686:	4f 93       	push	r20
    1688:	5f 93       	push	r21
    168a:	6f 93       	push	r22
    168c:	7f 93       	push	r23
    168e:	8f 93       	push	r24
    1690:	9f 93       	push	r25
    1692:	af 93       	push	r26
    1694:	bf 93       	push	r27
    1696:	ef 93       	push	r30
    1698:	ff 93       	push	r31
    169a:	80 91 28 09 	lds	r24, 0x0928
    169e:	90 91 29 09 	lds	r25, 0x0929
    16a2:	89 2b       	or	r24, r25
    16a4:	29 f0       	breq	.+10     	; 0x16b0 <__vector_7+0x3e>
    16a6:	e0 91 28 09 	lds	r30, 0x0928
    16aa:	f0 91 29 09 	lds	r31, 0x0929
    16ae:	19 95       	eicall
    16b0:	ff 91       	pop	r31
    16b2:	ef 91       	pop	r30
    16b4:	bf 91       	pop	r27
    16b6:	af 91       	pop	r26
    16b8:	9f 91       	pop	r25
    16ba:	8f 91       	pop	r24
    16bc:	7f 91       	pop	r23
    16be:	6f 91       	pop	r22
    16c0:	5f 91       	pop	r21
    16c2:	4f 91       	pop	r20
    16c4:	3f 91       	pop	r19
    16c6:	2f 91       	pop	r18
    16c8:	0f 90       	pop	r0
    16ca:	0b be       	out	0x3b, r0	; 59
    16cc:	0f 90       	pop	r0
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	0f 90       	pop	r0
    16d2:	1f 90       	pop	r1
    16d4:	18 95       	reti

000016d6 <__vector_8>:
    16d6:	1f 92       	push	r1
    16d8:	0f 92       	push	r0
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	0f 92       	push	r0
    16de:	11 24       	eor	r1, r1
    16e0:	0b b6       	in	r0, 0x3b	; 59
    16e2:	0f 92       	push	r0
    16e4:	1b be       	out	0x3b, r1	; 59
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
    16fe:	80 91 2a 09 	lds	r24, 0x092A
    1702:	90 91 2b 09 	lds	r25, 0x092B
    1706:	89 2b       	or	r24, r25
    1708:	29 f0       	breq	.+10     	; 0x1714 <__vector_8+0x3e>
    170a:	e0 91 2a 09 	lds	r30, 0x092A
    170e:	f0 91 2b 09 	lds	r31, 0x092B
    1712:	19 95       	eicall
    1714:	ff 91       	pop	r31
    1716:	ef 91       	pop	r30
    1718:	bf 91       	pop	r27
    171a:	af 91       	pop	r26
    171c:	9f 91       	pop	r25
    171e:	8f 91       	pop	r24
    1720:	7f 91       	pop	r23
    1722:	6f 91       	pop	r22
    1724:	5f 91       	pop	r21
    1726:	4f 91       	pop	r20
    1728:	3f 91       	pop	r19
    172a:	2f 91       	pop	r18
    172c:	0f 90       	pop	r0
    172e:	0b be       	out	0x3b, r0	; 59
    1730:	0f 90       	pop	r0
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	0f 90       	pop	r0
    1736:	1f 90       	pop	r1
    1738:	18 95       	reti

0000173a <_ZN6StringD1Ev>:
    173a:	fc 01       	movw	r30, r24
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	0c 94 0d 14 	jmp	0x281a	; 0x281a <free>

00001744 <_ZN6String10invalidateEv>:
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
    174a:	88 81       	ld	r24, Y
    174c:	99 81       	ldd	r25, Y+1	; 0x01
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	11 f0       	breq	.+4      	; 0x1756 <_ZN6String10invalidateEv+0x12>
    1752:	0e 94 0d 14 	call	0x281a	; 0x281a <free>
    1756:	19 82       	std	Y+1, r1	; 0x01
    1758:	18 82       	st	Y, r1
    175a:	1d 82       	std	Y+5, r1	; 0x05
    175c:	1c 82       	std	Y+4, r1	; 0x04
    175e:	1b 82       	std	Y+3, r1	; 0x03
    1760:	1a 82       	std	Y+2, r1	; 0x02
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <_ZN6String12changeBufferEj>:
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	ec 01       	movw	r28, r24
    1772:	8b 01       	movw	r16, r22
    1774:	6f 5f       	subi	r22, 0xFF	; 255
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	88 81       	ld	r24, Y
    177a:	99 81       	ldd	r25, Y+1	; 0x01
    177c:	0e 94 ab 14 	call	0x2956	; 0x2956 <realloc>
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	31 f0       	breq	.+12     	; 0x1790 <_ZN6String12changeBufferEj+0x28>
    1784:	99 83       	std	Y+1, r25	; 0x01
    1786:	88 83       	st	Y, r24
    1788:	1b 83       	std	Y+3, r17	; 0x03
    178a:	0a 83       	std	Y+2, r16	; 0x02
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <_ZN6String12changeBufferEj+0x2a>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <_ZN6String7reserveEj>:
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
    17a2:	88 81       	ld	r24, Y
    17a4:	99 81       	ldd	r25, Y+1	; 0x01
    17a6:	89 2b       	or	r24, r25
    17a8:	31 f0       	breq	.+12     	; 0x17b6 <_ZN6String7reserveEj+0x1a>
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	9b 81       	ldd	r25, Y+3	; 0x03
    17ae:	86 17       	cp	r24, r22
    17b0:	97 07       	cpc	r25, r23
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <_ZN6String7reserveEj+0x1a>
    17b4:	0c c0       	rjmp	.+24     	; 0x17ce <_ZN6String7reserveEj+0x32>
    17b6:	ce 01       	movw	r24, r28
    17b8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN6String12changeBufferEj>
    17bc:	88 23       	and	r24, r24
    17be:	49 f0       	breq	.+18     	; 0x17d2 <_ZN6String7reserveEj+0x36>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	89 2b       	or	r24, r25
    17c6:	19 f4       	brne	.+6      	; 0x17ce <_ZN6String7reserveEj+0x32>
    17c8:	e8 81       	ld	r30, Y
    17ca:	f9 81       	ldd	r31, Y+1	; 0x01
    17cc:	10 82       	st	Z, r1
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <_ZN6String7reserveEj+0x38>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <_ZN6String4copyEPKcj>:
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	ec 01       	movw	r28, r24
    17e8:	7b 01       	movw	r14, r22
    17ea:	8a 01       	movw	r16, r20
    17ec:	ba 01       	movw	r22, r20
    17ee:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN6String7reserveEj>
    17f2:	81 11       	cpse	r24, r1
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <_ZN6String4copyEPKcj+0x24>
    17f6:	ce 01       	movw	r24, r28
    17f8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <_ZN6String4copyEPKcj+0x32>
    17fe:	1d 83       	std	Y+5, r17	; 0x05
    1800:	0c 83       	std	Y+4, r16	; 0x04
    1802:	b7 01       	movw	r22, r14
    1804:	88 81       	ld	r24, Y
    1806:	99 81       	ldd	r25, Y+1	; 0x01
    1808:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    180c:	ce 01       	movw	r24, r28
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	08 95       	ret

0000181c <_ZN6StringC1EPKc>:
    181c:	dc 01       	movw	r26, r24
    181e:	11 96       	adiw	r26, 0x01	; 1
    1820:	1c 92       	st	X, r1
    1822:	1e 92       	st	-X, r1
    1824:	13 96       	adiw	r26, 0x03	; 3
    1826:	1c 92       	st	X, r1
    1828:	1e 92       	st	-X, r1
    182a:	12 97       	sbiw	r26, 0x02	; 2
    182c:	15 96       	adiw	r26, 0x05	; 5
    182e:	1c 92       	st	X, r1
    1830:	1e 92       	st	-X, r1
    1832:	14 97       	sbiw	r26, 0x04	; 4
    1834:	16 96       	adiw	r26, 0x06	; 6
    1836:	1c 92       	st	X, r1
    1838:	61 15       	cp	r22, r1
    183a:	71 05       	cpc	r23, r1
    183c:	59 f0       	breq	.+22     	; 0x1854 <_ZN6StringC1EPKc+0x38>
    183e:	db 01       	movw	r26, r22
    1840:	0d 90       	ld	r0, X+
    1842:	00 20       	and	r0, r0
    1844:	e9 f7       	brne	.-6      	; 0x1840 <_ZN6StringC1EPKc+0x24>
    1846:	ad 01       	movw	r20, r26
    1848:	41 50       	subi	r20, 0x01	; 1
    184a:	51 09       	sbc	r21, r1
    184c:	46 1b       	sub	r20, r22
    184e:	57 0b       	sbc	r21, r23
    1850:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <_ZN6String4copyEPKcj>
    1854:	08 95       	ret

00001856 <_ZN6StringaSERKS_>:
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	ec 01       	movw	r28, r24
    185c:	fb 01       	movw	r30, r22
    185e:	86 17       	cp	r24, r22
    1860:	97 07       	cpc	r25, r23
    1862:	61 f0       	breq	.+24     	; 0x187c <_ZN6StringaSERKS_+0x26>
    1864:	60 81       	ld	r22, Z
    1866:	71 81       	ldd	r23, Z+1	; 0x01
    1868:	61 15       	cp	r22, r1
    186a:	71 05       	cpc	r23, r1
    186c:	29 f0       	breq	.+10     	; 0x1878 <_ZN6StringaSERKS_+0x22>
    186e:	44 81       	ldd	r20, Z+4	; 0x04
    1870:	55 81       	ldd	r21, Z+5	; 0x05
    1872:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN6String4copyEPKcj>
    1876:	02 c0       	rjmp	.+4      	; 0x187c <_ZN6StringaSERKS_+0x26>
    1878:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    187c:	ce 01       	movw	r24, r28
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <_ZN6StringC1ERKS_>:
    1884:	fc 01       	movw	r30, r24
    1886:	11 82       	std	Z+1, r1	; 0x01
    1888:	10 82       	st	Z, r1
    188a:	13 82       	std	Z+3, r1	; 0x03
    188c:	12 82       	std	Z+2, r1	; 0x02
    188e:	15 82       	std	Z+5, r1	; 0x05
    1890:	14 82       	std	Z+4, r1	; 0x04
    1892:	16 82       	std	Z+6, r1	; 0x06
    1894:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <_ZN6StringaSERKS_>

00001898 <_ZN6StringaSEPKc>:
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	d8 2f       	mov	r29, r24
    189e:	c9 2f       	mov	r28, r25
    18a0:	61 15       	cp	r22, r1
    18a2:	71 05       	cpc	r23, r1
    18a4:	61 f0       	breq	.+24     	; 0x18be <_ZN6StringaSEPKc+0x26>
    18a6:	db 01       	movw	r26, r22
    18a8:	0d 90       	ld	r0, X+
    18aa:	00 20       	and	r0, r0
    18ac:	e9 f7       	brne	.-6      	; 0x18a8 <_ZN6StringaSEPKc+0x10>
    18ae:	ad 01       	movw	r20, r26
    18b0:	41 50       	subi	r20, 0x01	; 1
    18b2:	51 09       	sbc	r21, r1
    18b4:	46 1b       	sub	r20, r22
    18b6:	57 0b       	sbc	r21, r23
    18b8:	0e 94 ed 0b 	call	0x17da	; 0x17da <_ZN6String4copyEPKcj>
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <_ZN6StringaSEPKc+0x2a>
    18be:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    18c2:	8d 2f       	mov	r24, r29
    18c4:	9c 2f       	mov	r25, r28
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <_ZN6StringC1Emh>:
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	a1 97       	sbiw	r28, 0x21	; 33
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	de bf       	out	0x3e, r29	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	cd bf       	out	0x3d, r28	; 61
    18e4:	8c 01       	movw	r16, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	ba 01       	movw	r22, r20
    18ea:	f8 01       	movw	r30, r16
    18ec:	11 82       	std	Z+1, r1	; 0x01
    18ee:	10 82       	st	Z, r1
    18f0:	13 82       	std	Z+3, r1	; 0x03
    18f2:	12 82       	std	Z+2, r1	; 0x02
    18f4:	15 82       	std	Z+5, r1	; 0x05
    18f6:	14 82       	std	Z+4, r1	; 0x04
    18f8:	16 82       	std	Z+6, r1	; 0x06
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	ae 01       	movw	r20, r28
    18fe:	4f 5f       	subi	r20, 0xFF	; 255
    1900:	5f 4f       	sbci	r21, 0xFF	; 255
    1902:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <ultoa>
    1906:	be 01       	movw	r22, r28
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	c8 01       	movw	r24, r16
    190e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    1912:	a1 96       	adiw	r28, 0x21	; 33
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <_ZN6StringC1Elh>:
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	a2 97       	sbiw	r28, 0x22	; 34
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	8c 01       	movw	r16, r24
    1942:	cb 01       	movw	r24, r22
    1944:	ba 01       	movw	r22, r20
    1946:	f8 01       	movw	r30, r16
    1948:	11 82       	std	Z+1, r1	; 0x01
    194a:	10 82       	st	Z, r1
    194c:	13 82       	std	Z+3, r1	; 0x03
    194e:	12 82       	std	Z+2, r1	; 0x02
    1950:	15 82       	std	Z+5, r1	; 0x05
    1952:	14 82       	std	Z+4, r1	; 0x04
    1954:	16 82       	std	Z+6, r1	; 0x06
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	ae 01       	movw	r20, r28
    195a:	4f 5f       	subi	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	0e 94 21 45 	call	0x8a42	; 0x8a42 <ltoa>
    1962:	be 01       	movw	r22, r28
    1964:	6f 5f       	subi	r22, 0xFF	; 255
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	c8 01       	movw	r24, r16
    196a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    196e:	a2 96       	adiw	r28, 0x22	; 34
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <_ZN6StringC1Ejh>:
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	61 97       	sbiw	r28, 0x11	; 17
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	8c 01       	movw	r16, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	f8 01       	movw	r30, r16
    19a2:	11 82       	std	Z+1, r1	; 0x01
    19a4:	10 82       	st	Z, r1
    19a6:	13 82       	std	Z+3, r1	; 0x03
    19a8:	12 82       	std	Z+2, r1	; 0x02
    19aa:	15 82       	std	Z+5, r1	; 0x05
    19ac:	14 82       	std	Z+4, r1	; 0x04
    19ae:	16 82       	std	Z+6, r1	; 0x06
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	be 01       	movw	r22, r28
    19b4:	6f 5f       	subi	r22, 0xFF	; 255
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <utoa>
    19bc:	be 01       	movw	r22, r28
    19be:	6f 5f       	subi	r22, 0xFF	; 255
    19c0:	7f 4f       	sbci	r23, 0xFF	; 255
    19c2:	c8 01       	movw	r24, r16
    19c4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    19c8:	61 96       	adiw	r28, 0x11	; 17
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	08 95       	ret

000019de <_ZN6StringC1Eih>:
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	62 97       	sbiw	r28, 0x12	; 18
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	8c 01       	movw	r16, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	11 82       	std	Z+1, r1	; 0x01
    19fe:	10 82       	st	Z, r1
    1a00:	13 82       	std	Z+3, r1	; 0x03
    1a02:	12 82       	std	Z+2, r1	; 0x02
    1a04:	15 82       	std	Z+5, r1	; 0x05
    1a06:	14 82       	std	Z+4, r1	; 0x04
    1a08:	16 82       	std	Z+6, r1	; 0x06
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	be 01       	movw	r22, r28
    1a0e:	6f 5f       	subi	r22, 0xFF	; 255
    1a10:	7f 4f       	sbci	r23, 0xFF	; 255
    1a12:	0e 94 00 45 	call	0x8a00	; 0x8a00 <itoa>
    1a16:	be 01       	movw	r22, r28
    1a18:	6f 5f       	subi	r22, 0xFF	; 255
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    1a22:	62 96       	adiw	r28, 0x12	; 18
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	08 95       	ret

00001a38 <_ZN6StringC1Ehh>:
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	29 97       	sbiw	r28, 0x09	; 9
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	8c 01       	movw	r16, r24
    1a52:	86 2f       	mov	r24, r22
    1a54:	f8 01       	movw	r30, r16
    1a56:	11 82       	std	Z+1, r1	; 0x01
    1a58:	10 82       	st	Z, r1
    1a5a:	13 82       	std	Z+3, r1	; 0x03
    1a5c:	12 82       	std	Z+2, r1	; 0x02
    1a5e:	15 82       	std	Z+5, r1	; 0x05
    1a60:	14 82       	std	Z+4, r1	; 0x04
    1a62:	16 82       	std	Z+6, r1	; 0x06
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	be 01       	movw	r22, r28
    1a68:	6f 5f       	subi	r22, 0xFF	; 255
    1a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <utoa>
    1a72:	be 01       	movw	r22, r28
    1a74:	6f 5f       	subi	r22, 0xFF	; 255
    1a76:	7f 4f       	sbci	r23, 0xFF	; 255
    1a78:	c8 01       	movw	r24, r16
    1a7a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    1a7e:	29 96       	adiw	r28, 0x09	; 9
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret

00001a94 <_ZN6StringC1Ec>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	1f 92       	push	r1
    1a9a:	1f 92       	push	r1
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	11 82       	std	Z+1, r1	; 0x01
    1aa4:	10 82       	st	Z, r1
    1aa6:	13 82       	std	Z+3, r1	; 0x03
    1aa8:	12 82       	std	Z+2, r1	; 0x02
    1aaa:	15 82       	std	Z+5, r1	; 0x05
    1aac:	14 82       	std	Z+4, r1	; 0x04
    1aae:	16 82       	std	Z+6, r1	; 0x06
    1ab0:	69 83       	std	Y+1, r22	; 0x01
    1ab2:	1a 82       	std	Y+2, r1	; 0x02
    1ab4:	be 01       	movw	r22, r28
    1ab6:	6f 5f       	subi	r22, 0xFF	; 255
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aba:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <_ZN6String6concatEPKcj>:
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	7b 01       	movw	r14, r22
    1ad8:	0c 81       	ldd	r16, Y+4	; 0x04
    1ada:	1d 81       	ldd	r17, Y+5	; 0x05
    1adc:	61 15       	cp	r22, r1
    1ade:	71 05       	cpc	r23, r1
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <_ZN6String6concatEPKcj+0x1e>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	16 c0       	rjmp	.+44     	; 0x1b12 <_ZN6String6concatEPKcj+0x4a>
    1ae6:	41 15       	cp	r20, r1
    1ae8:	51 05       	cpc	r21, r1
    1aea:	91 f0       	breq	.+36     	; 0x1b10 <_ZN6String6concatEPKcj+0x48>
    1aec:	04 0f       	add	r16, r20
    1aee:	15 1f       	adc	r17, r21
    1af0:	b8 01       	movw	r22, r16
    1af2:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN6String7reserveEj>
    1af6:	88 23       	and	r24, r24
    1af8:	a1 f3       	breq	.-24     	; 0x1ae2 <_ZN6String6concatEPKcj+0x1a>
    1afa:	28 81       	ld	r18, Y
    1afc:	39 81       	ldd	r19, Y+1	; 0x01
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	b7 01       	movw	r22, r14
    1b04:	82 0f       	add	r24, r18
    1b06:	93 1f       	adc	r25, r19
    1b08:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    1b0c:	1d 83       	std	Y+5, r17	; 0x05
    1b0e:	0c 83       	std	Y+4, r16	; 0x04
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	0f 91       	pop	r16
    1b1a:	ff 90       	pop	r15
    1b1c:	ef 90       	pop	r14
    1b1e:	08 95       	ret

00001b20 <_ZN6String6concatERKS_>:
    1b20:	fb 01       	movw	r30, r22
    1b22:	44 81       	ldd	r20, Z+4	; 0x04
    1b24:	55 81       	ldd	r21, Z+5	; 0x05
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>

00001b2e <_ZN6String6concatEPKc>:
    1b2e:	61 15       	cp	r22, r1
    1b30:	71 05       	cpc	r23, r1
    1b32:	59 f0       	breq	.+22     	; 0x1b4a <_ZN6String6concatEPKc+0x1c>
    1b34:	db 01       	movw	r26, r22
    1b36:	0d 90       	ld	r0, X+
    1b38:	00 20       	and	r0, r0
    1b3a:	e9 f7       	brne	.-6      	; 0x1b36 <_ZN6String6concatEPKc+0x8>
    1b3c:	ad 01       	movw	r20, r26
    1b3e:	41 50       	subi	r20, 0x01	; 1
    1b40:	51 09       	sbc	r21, r1
    1b42:	46 1b       	sub	r20, r22
    1b44:	57 0b       	sbc	r21, r23
    1b46:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	08 95       	ret

00001b4e <_ZN6String6concatEc>:
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	1f 92       	push	r1
    1b54:	1f 92       	push	r1
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	69 83       	std	Y+1, r22	; 0x01
    1b5c:	1a 82       	std	Y+2, r1	; 0x02
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	be 01       	movw	r22, r28
    1b64:	6f 5f       	subi	r22, 0xFF	; 255
    1b66:	7f 4f       	sbci	r23, 0xFF	; 255
    1b68:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <_ZN6String6concatEh>:
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <_ZN6String6concatEh+0xe>
    1b84:	1f 92       	push	r1
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	7c 01       	movw	r14, r24
    1b8c:	86 2f       	mov	r24, r22
    1b8e:	4a e0       	ldi	r20, 0x0A	; 10
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	8e 01       	movw	r16, r28
    1b94:	0f 5f       	subi	r16, 0xFF	; 255
    1b96:	1f 4f       	sbci	r17, 0xFF	; 255
    1b98:	b8 01       	movw	r22, r16
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 00 45 	call	0x8a00	; 0x8a00 <itoa>
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	01 90       	ld	r0, Z+
    1ba4:	00 20       	and	r0, r0
    1ba6:	e9 f7       	brne	.-6      	; 0x1ba2 <_ZN6String6concatEh+0x2c>
    1ba8:	af 01       	movw	r20, r30
    1baa:	41 50       	subi	r20, 0x01	; 1
    1bac:	51 09       	sbc	r21, r1
    1bae:	40 1b       	sub	r20, r16
    1bb0:	51 0b       	sbc	r21, r17
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	c7 01       	movw	r24, r14
    1bb6:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	08 95       	ret

00001bd0 <_ZN6String6concatEi>:
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	27 97       	sbiw	r28, 0x07	; 7
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	7c 01       	movw	r14, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	4a e0       	ldi	r20, 0x0A	; 10
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	8e 01       	movw	r16, r28
    1bf6:	0f 5f       	subi	r16, 0xFF	; 255
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfa:	b8 01       	movw	r22, r16
    1bfc:	0e 94 00 45 	call	0x8a00	; 0x8a00 <itoa>
    1c00:	f8 01       	movw	r30, r16
    1c02:	01 90       	ld	r0, Z+
    1c04:	00 20       	and	r0, r0
    1c06:	e9 f7       	brne	.-6      	; 0x1c02 <_ZN6String6concatEi+0x32>
    1c08:	af 01       	movw	r20, r30
    1c0a:	41 50       	subi	r20, 0x01	; 1
    1c0c:	51 09       	sbc	r21, r1
    1c0e:	40 1b       	sub	r20, r16
    1c10:	51 0b       	sbc	r21, r17
    1c12:	b8 01       	movw	r22, r16
    1c14:	c7 01       	movw	r24, r14
    1c16:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1c1a:	27 96       	adiw	r28, 0x07	; 7
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	08 95       	ret

00001c34 <_ZN6String6concatEj>:
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	00 d0       	rcall	.+0      	; 0x1c42 <_ZN6String6concatEj+0xe>
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <_ZN6String6concatEj+0x10>
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
    1c48:	7c 01       	movw	r14, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	4a e0       	ldi	r20, 0x0A	; 10
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	8e 01       	movw	r16, r28
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	b8 01       	movw	r22, r16
    1c58:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <utoa>
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	01 90       	ld	r0, Z+
    1c60:	00 20       	and	r0, r0
    1c62:	e9 f7       	brne	.-6      	; 0x1c5e <_ZN6String6concatEj+0x2a>
    1c64:	af 01       	movw	r20, r30
    1c66:	41 50       	subi	r20, 0x01	; 1
    1c68:	51 09       	sbc	r21, r1
    1c6a:	40 1b       	sub	r20, r16
    1c6c:	51 0b       	sbc	r21, r17
    1c6e:	b8 01       	movw	r22, r16
    1c70:	c7 01       	movw	r24, r14
    1c72:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1c76:	26 96       	adiw	r28, 0x06	; 6
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	08 95       	ret

00001c90 <_ZN6String6concatEl>:
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	7c 01       	movw	r14, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	ba 01       	movw	r22, r20
    1cb2:	2a e0       	ldi	r18, 0x0A	; 10
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	0f 5f       	subi	r16, 0xFF	; 255
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	a8 01       	movw	r20, r16
    1cbe:	0e 94 21 45 	call	0x8a42	; 0x8a42 <ltoa>
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	01 90       	ld	r0, Z+
    1cc6:	00 20       	and	r0, r0
    1cc8:	e9 f7       	brne	.-6      	; 0x1cc4 <_ZN6String6concatEl+0x34>
    1cca:	af 01       	movw	r20, r30
    1ccc:	41 50       	subi	r20, 0x01	; 1
    1cce:	51 09       	sbc	r21, r1
    1cd0:	40 1b       	sub	r20, r16
    1cd2:	51 0b       	sbc	r21, r17
    1cd4:	b8 01       	movw	r22, r16
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1cdc:	2c 96       	adiw	r28, 0x0c	; 12
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	08 95       	ret

00001cf6 <_ZN6String6concatEm>:
    1cf6:	ef 92       	push	r14
    1cf8:	ff 92       	push	r15
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	2b 97       	sbiw	r28, 0x0b	; 11
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	7c 01       	movw	r14, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	ba 01       	movw	r22, r20
    1d18:	2a e0       	ldi	r18, 0x0A	; 10
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	0f 5f       	subi	r16, 0xFF	; 255
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	a8 01       	movw	r20, r16
    1d24:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <ultoa>
    1d28:	f8 01       	movw	r30, r16
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	00 20       	and	r0, r0
    1d2e:	e9 f7       	brne	.-6      	; 0x1d2a <_ZN6String6concatEm+0x34>
    1d30:	af 01       	movw	r20, r30
    1d32:	41 50       	subi	r20, 0x01	; 1
    1d34:	51 09       	sbc	r21, r1
    1d36:	40 1b       	sub	r20, r16
    1d38:	51 0b       	sbc	r21, r17
    1d3a:	b8 01       	movw	r22, r16
    1d3c:	c7 01       	movw	r24, r14
    1d3e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1d42:	2b 96       	adiw	r28, 0x0b	; 11
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	08 95       	ret

00001d5c <_ZplRK15StringSumHelperRK6String>:
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	d8 2f       	mov	r29, r24
    1d62:	c9 2f       	mov	r28, r25
    1d64:	fb 01       	movw	r30, r22
    1d66:	44 81       	ldd	r20, Z+4	; 0x04
    1d68:	55 81       	ldd	r21, Z+5	; 0x05
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1d72:	81 11       	cpse	r24, r1
    1d74:	04 c0       	rjmp	.+8      	; 0x1d7e <_ZplRK15StringSumHelperRK6String+0x22>
    1d76:	8d 2f       	mov	r24, r29
    1d78:	9c 2f       	mov	r25, r28
    1d7a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1d7e:	8d 2f       	mov	r24, r29
    1d80:	9c 2f       	mov	r25, r28
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	08 95       	ret

00001d88 <_ZplRK15StringSumHelperPKc>:
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	d8 2f       	mov	r29, r24
    1d8e:	c9 2f       	mov	r28, r25
    1d90:	61 15       	cp	r22, r1
    1d92:	71 05       	cpc	r23, r1
    1d94:	69 f0       	breq	.+26     	; 0x1db0 <_ZplRK15StringSumHelperPKc+0x28>
    1d96:	db 01       	movw	r26, r22
    1d98:	0d 90       	ld	r0, X+
    1d9a:	00 20       	and	r0, r0
    1d9c:	e9 f7       	brne	.-6      	; 0x1d98 <_ZplRK15StringSumHelperPKc+0x10>
    1d9e:	ad 01       	movw	r20, r26
    1da0:	41 50       	subi	r20, 0x01	; 1
    1da2:	51 09       	sbc	r21, r1
    1da4:	46 1b       	sub	r20, r22
    1da6:	57 0b       	sbc	r21, r23
    1da8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN6String6concatEPKcj>
    1dac:	81 11       	cpse	r24, r1
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <_ZplRK15StringSumHelperPKc+0x30>
    1db0:	8d 2f       	mov	r24, r29
    1db2:	9c 2f       	mov	r25, r28
    1db4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1db8:	8d 2f       	mov	r24, r29
    1dba:	9c 2f       	mov	r25, r28
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	08 95       	ret

00001dc2 <_ZplRK15StringSumHelperc>:
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	d8 2f       	mov	r29, r24
    1dc8:	c9 2f       	mov	r28, r25
    1dca:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN6String6concatEc>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <_ZplRK15StringSumHelperc+0x18>
    1dd2:	8d 2f       	mov	r24, r29
    1dd4:	9c 2f       	mov	r25, r28
    1dd6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1dda:	8d 2f       	mov	r24, r29
    1ddc:	9c 2f       	mov	r25, r28
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <_ZplRK15StringSumHelperh>:
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	d8 2f       	mov	r29, r24
    1dea:	c9 2f       	mov	r28, r25
    1dec:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <_ZN6String6concatEh>
    1df0:	81 11       	cpse	r24, r1
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <_ZplRK15StringSumHelperh+0x18>
    1df4:	8d 2f       	mov	r24, r29
    1df6:	9c 2f       	mov	r25, r28
    1df8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1dfc:	8d 2f       	mov	r24, r29
    1dfe:	9c 2f       	mov	r25, r28
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <_ZplRK15StringSumHelperi>:
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	d8 2f       	mov	r29, r24
    1e0c:	c9 2f       	mov	r28, r25
    1e0e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <_ZN6String6concatEi>
    1e12:	81 11       	cpse	r24, r1
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <_ZplRK15StringSumHelperi+0x18>
    1e16:	8d 2f       	mov	r24, r29
    1e18:	9c 2f       	mov	r25, r28
    1e1a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1e1e:	8d 2f       	mov	r24, r29
    1e20:	9c 2f       	mov	r25, r28
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	08 95       	ret

00001e28 <_ZplRK15StringSumHelperj>:
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	d8 2f       	mov	r29, r24
    1e2e:	c9 2f       	mov	r28, r25
    1e30:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <_ZN6String6concatEj>
    1e34:	81 11       	cpse	r24, r1
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <_ZplRK15StringSumHelperj+0x18>
    1e38:	8d 2f       	mov	r24, r29
    1e3a:	9c 2f       	mov	r25, r28
    1e3c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1e40:	8d 2f       	mov	r24, r29
    1e42:	9c 2f       	mov	r25, r28
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	08 95       	ret

00001e4a <_ZplRK15StringSumHelperl>:
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	d8 2f       	mov	r29, r24
    1e50:	c9 2f       	mov	r28, r25
    1e52:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZN6String6concatEl>
    1e56:	81 11       	cpse	r24, r1
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <_ZplRK15StringSumHelperl+0x18>
    1e5a:	8d 2f       	mov	r24, r29
    1e5c:	9c 2f       	mov	r25, r28
    1e5e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1e62:	8d 2f       	mov	r24, r29
    1e64:	9c 2f       	mov	r25, r28
    1e66:	df 91       	pop	r29
    1e68:	cf 91       	pop	r28
    1e6a:	08 95       	ret

00001e6c <_ZplRK15StringSumHelperm>:
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	d8 2f       	mov	r29, r24
    1e72:	c9 2f       	mov	r28, r25
    1e74:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN6String6concatEm>
    1e78:	81 11       	cpse	r24, r1
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <_ZplRK15StringSumHelperm+0x18>
    1e7c:	8d 2f       	mov	r24, r29
    1e7e:	9c 2f       	mov	r25, r28
    1e80:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6String10invalidateEv>
    1e84:	8d 2f       	mov	r24, r29
    1e86:	9c 2f       	mov	r25, r28
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <_ZNK6String9compareToERKS_>:
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	dc 01       	movw	r26, r24
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	eb 01       	movw	r28, r22
    1e9a:	a8 81       	ld	r26, Y
    1e9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e9e:	30 97       	sbiw	r30, 0x00	; 0
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <_ZNK6String9compareToERKS_+0x18>
    1ea2:	10 97       	sbiw	r26, 0x00	; 0
    1ea4:	c9 f4       	brne	.+50     	; 0x1ed8 <_ZNK6String9compareToERKS_+0x4a>
    1ea6:	10 97       	sbiw	r26, 0x00	; 0
    1ea8:	59 f0       	breq	.+22     	; 0x1ec0 <_ZNK6String9compareToERKS_+0x32>
    1eaa:	eb 01       	movw	r28, r22
    1eac:	2c 81       	ldd	r18, Y+4	; 0x04
    1eae:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb0:	23 2b       	or	r18, r19
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <_ZNK6String9compareToERKS_+0x32>
    1eb4:	2c 91       	ld	r18, X
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	31 95       	neg	r19
    1eba:	21 95       	neg	r18
    1ebc:	31 09       	sbc	r19, r1
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <_ZNK6String9compareToERKS_+0x5a>
    1ec0:	30 97       	sbiw	r30, 0x00	; 0
    1ec2:	81 f0       	breq	.+32     	; 0x1ee4 <_ZNK6String9compareToERKS_+0x56>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	14 96       	adiw	r26, 0x04	; 4
    1ec8:	8d 91       	ld	r24, X+
    1eca:	9c 91       	ld	r25, X
    1ecc:	15 97       	sbiw	r26, 0x05	; 5
    1ece:	89 2b       	or	r24, r25
    1ed0:	49 f0       	breq	.+18     	; 0x1ee4 <_ZNK6String9compareToERKS_+0x56>
    1ed2:	20 81       	ld	r18, Z
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	08 c0       	rjmp	.+16     	; 0x1ee8 <_ZNK6String9compareToERKS_+0x5a>
    1ed8:	bd 01       	movw	r22, r26
    1eda:	cf 01       	movw	r24, r30
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	0c 94 87 44 	jmp	0x890e	; 0x890e <strcmp>
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	c9 01       	movw	r24, r18
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <_ZNK6String6equalsERKS_>:
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	44 81       	ldd	r20, Z+4	; 0x04
    1ef4:	55 81       	ldd	r21, Z+5	; 0x05
    1ef6:	fb 01       	movw	r30, r22
    1ef8:	24 81       	ldd	r18, Z+4	; 0x04
    1efa:	35 81       	ldd	r19, Z+5	; 0x05
    1efc:	42 17       	cp	r20, r18
    1efe:	53 07       	cpc	r21, r19
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <_ZNK6String6equalsERKS_+0x1c>
    1f02:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f06:	21 e0       	ldi	r18, 0x01	; 1
    1f08:	89 2b       	or	r24, r25
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <_ZNK6String6equalsERKS_+0x1e>
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	82 2f       	mov	r24, r18
    1f10:	08 95       	ret

00001f12 <_ZNK6String6equalsEPKc>:
    1f12:	dc 01       	movw	r26, r24
    1f14:	14 96       	adiw	r26, 0x04	; 4
    1f16:	2d 91       	ld	r18, X+
    1f18:	3c 91       	ld	r19, X
    1f1a:	15 97       	sbiw	r26, 0x05	; 5
    1f1c:	23 2b       	or	r18, r19
    1f1e:	39 f4       	brne	.+14     	; 0x1f2e <_ZNK6String6equalsEPKc+0x1c>
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	61 15       	cp	r22, r1
    1f24:	71 05       	cpc	r23, r1
    1f26:	11 f0       	breq	.+4      	; 0x1f2c <_ZNK6String6equalsEPKc+0x1a>
    1f28:	fb 01       	movw	r30, r22
    1f2a:	08 c0       	rjmp	.+16     	; 0x1f3c <_ZNK6String6equalsEPKc+0x2a>
    1f2c:	08 95       	ret
    1f2e:	dc 01       	movw	r26, r24
    1f30:	ed 91       	ld	r30, X+
    1f32:	fc 91       	ld	r31, X
    1f34:	61 15       	cp	r22, r1
    1f36:	71 05       	cpc	r23, r1
    1f38:	29 f4       	brne	.+10     	; 0x1f44 <_ZNK6String6equalsEPKc+0x32>
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 81       	ld	r25, Z
    1f3e:	99 23       	and	r25, r25
    1f40:	49 f0       	breq	.+18     	; 0x1f54 <_ZNK6String6equalsEPKc+0x42>
    1f42:	07 c0       	rjmp	.+14     	; 0x1f52 <_ZNK6String6equalsEPKc+0x40>
    1f44:	cf 01       	movw	r24, r30
    1f46:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    1f4a:	9c 01       	movw	r18, r24
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	23 2b       	or	r18, r19
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <_ZNK6String6equalsEPKc+0x42>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	08 95       	ret

00001f56 <_ZNK6StringltERKS_>:
    1f56:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f5a:	89 2f       	mov	r24, r25
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	88 27       	eor	r24, r24
    1f60:	88 1f       	adc	r24, r24
    1f62:	08 95       	ret

00001f64 <_ZNK6StringgtERKS_>:
    1f64:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f68:	21 e0       	ldi	r18, 0x01	; 1
    1f6a:	18 16       	cp	r1, r24
    1f6c:	19 06       	cpc	r1, r25
    1f6e:	0c f0       	brlt	.+2      	; 0x1f72 <_ZNK6StringgtERKS_+0xe>
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	82 2f       	mov	r24, r18
    1f74:	08 95       	ret

00001f76 <_ZNK6StringleERKS_>:
    1f76:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f7a:	21 e0       	ldi	r18, 0x01	; 1
    1f7c:	18 16       	cp	r1, r24
    1f7e:	19 06       	cpc	r1, r25
    1f80:	0c f4       	brge	.+2      	; 0x1f84 <_ZNK6StringleERKS_+0xe>
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	82 2f       	mov	r24, r18
    1f86:	08 95       	ret

00001f88 <_ZNK6StringgeERKS_>:
    1f88:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <_ZNK6String9compareToERKS_>
    1f8c:	89 2f       	mov	r24, r25
    1f8e:	80 95       	com	r24
    1f90:	88 1f       	adc	r24, r24
    1f92:	88 27       	eor	r24, r24
    1f94:	88 1f       	adc	r24, r24
    1f96:	08 95       	ret

00001f98 <_ZNK6String16equalsIgnoreCaseERKS_>:
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	86 17       	cp	r24, r22
    1fa6:	97 07       	cpc	r25, r23
    1fa8:	09 f1       	breq	.+66     	; 0x1fec <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1faa:	fc 01       	movw	r30, r24
    1fac:	24 81       	ldd	r18, Z+4	; 0x04
    1fae:	35 81       	ldd	r19, Z+5	; 0x05
    1fb0:	fb 01       	movw	r30, r22
    1fb2:	44 81       	ldd	r20, Z+4	; 0x04
    1fb4:	55 81       	ldd	r21, Z+5	; 0x05
    1fb6:	24 17       	cp	r18, r20
    1fb8:	35 07       	cpc	r19, r21
    1fba:	d1 f4       	brne	.+52     	; 0x1ff0 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fbc:	23 2b       	or	r18, r19
    1fbe:	b1 f0       	breq	.+44     	; 0x1fec <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
    1fc0:	c0 81       	ld	r28, Z
    1fc2:	d1 81       	ldd	r29, Z+1	; 0x01
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	00 81       	ld	r16, Z
    1fc8:	11 81       	ldd	r17, Z+1	; 0x01
    1fca:	0b c0       	rjmp	.+22     	; 0x1fe2 <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 4d 44 	call	0x889a	; 0x889a <tolower>
    1fd2:	7c 01       	movw	r14, r24
    1fd4:	89 91       	ld	r24, Y+
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 4d 44 	call	0x889a	; 0x889a <tolower>
    1fdc:	e8 16       	cp	r14, r24
    1fde:	f9 06       	cpc	r15, r25
    1fe0:	39 f4       	brne	.+14     	; 0x1ff0 <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	81 91       	ld	r24, Z+
    1fe6:	8f 01       	movw	r16, r30
    1fe8:	81 11       	cpse	r24, r1
    1fea:	f0 cf       	rjmp	.-32     	; 0x1fcc <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	08 95       	ret

00002000 <_ZNK6String10startsWithERKS_j>:
    2000:	fa 01       	movw	r30, r20
    2002:	db 01       	movw	r26, r22
    2004:	14 96       	adiw	r26, 0x04	; 4
    2006:	4d 91       	ld	r20, X+
    2008:	5c 91       	ld	r21, X
    200a:	15 97       	sbiw	r26, 0x05	; 5
    200c:	dc 01       	movw	r26, r24
    200e:	14 96       	adiw	r26, 0x04	; 4
    2010:	2d 91       	ld	r18, X+
    2012:	3c 91       	ld	r19, X
    2014:	15 97       	sbiw	r26, 0x05	; 5
    2016:	24 1b       	sub	r18, r20
    2018:	35 0b       	sbc	r19, r21
    201a:	2e 17       	cp	r18, r30
    201c:	3f 07       	cpc	r19, r31
    201e:	90 f0       	brcs	.+36     	; 0x2044 <_ZNK6String10startsWithERKS_j+0x44>
    2020:	8d 91       	ld	r24, X+
    2022:	9c 91       	ld	r25, X
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	71 f0       	breq	.+28     	; 0x2044 <_ZNK6String10startsWithERKS_j+0x44>
    2028:	db 01       	movw	r26, r22
    202a:	6d 91       	ld	r22, X+
    202c:	7c 91       	ld	r23, X
    202e:	61 15       	cp	r22, r1
    2030:	71 05       	cpc	r23, r1
    2032:	41 f0       	breq	.+16     	; 0x2044 <_ZNK6String10startsWithERKS_j+0x44>
    2034:	8e 0f       	add	r24, r30
    2036:	9f 1f       	adc	r25, r31
    2038:	0e 94 97 44 	call	0x892e	; 0x892e <strncmp>
    203c:	9c 01       	movw	r18, r24
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	23 2b       	or	r18, r19
    2042:	09 f0       	breq	.+2      	; 0x2046 <_ZNK6String10startsWithERKS_j+0x46>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	08 95       	ret

00002048 <_ZNK6String10startsWithERKS_>:
    2048:	fc 01       	movw	r30, r24
    204a:	44 81       	ldd	r20, Z+4	; 0x04
    204c:	55 81       	ldd	r21, Z+5	; 0x05
    204e:	fb 01       	movw	r30, r22
    2050:	24 81       	ldd	r18, Z+4	; 0x04
    2052:	35 81       	ldd	r19, Z+5	; 0x05
    2054:	42 17       	cp	r20, r18
    2056:	53 07       	cpc	r21, r19
    2058:	20 f0       	brcs	.+8      	; 0x2062 <_ZNK6String10startsWithERKS_+0x1a>
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	0c 94 00 10 	jmp	0x2000	; 0x2000 <_ZNK6String10startsWithERKS_j>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	08 95       	ret

00002066 <_ZNK6String8endsWithERKS_>:
    2066:	fc 01       	movw	r30, r24
    2068:	84 81       	ldd	r24, Z+4	; 0x04
    206a:	95 81       	ldd	r25, Z+5	; 0x05
    206c:	db 01       	movw	r26, r22
    206e:	14 96       	adiw	r26, 0x04	; 4
    2070:	4d 91       	ld	r20, X+
    2072:	5c 91       	ld	r21, X
    2074:	15 97       	sbiw	r26, 0x05	; 5
    2076:	84 17       	cp	r24, r20
    2078:	95 07       	cpc	r25, r21
    207a:	a0 f0       	brcs	.+40     	; 0x20a4 <_ZNK6String8endsWithERKS_+0x3e>
    207c:	20 81       	ld	r18, Z
    207e:	31 81       	ldd	r19, Z+1	; 0x01
    2080:	21 15       	cp	r18, r1
    2082:	31 05       	cpc	r19, r1
    2084:	79 f0       	breq	.+30     	; 0x20a4 <_ZNK6String8endsWithERKS_+0x3e>
    2086:	6d 91       	ld	r22, X+
    2088:	7c 91       	ld	r23, X
    208a:	61 15       	cp	r22, r1
    208c:	71 05       	cpc	r23, r1
    208e:	51 f0       	breq	.+20     	; 0x20a4 <_ZNK6String8endsWithERKS_+0x3e>
    2090:	84 1b       	sub	r24, r20
    2092:	95 0b       	sbc	r25, r21
    2094:	82 0f       	add	r24, r18
    2096:	93 1f       	adc	r25, r19
    2098:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    209c:	9c 01       	movw	r18, r24
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	23 2b       	or	r18, r19
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <_ZNK6String8endsWithERKS_+0x40>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	08 95       	ret

000020a8 <_ZN6String9setCharAtEjc>:
    20a8:	dc 01       	movw	r26, r24
    20aa:	14 96       	adiw	r26, 0x04	; 4
    20ac:	2d 91       	ld	r18, X+
    20ae:	3c 91       	ld	r19, X
    20b0:	15 97       	sbiw	r26, 0x05	; 5
    20b2:	62 17       	cp	r22, r18
    20b4:	73 07       	cpc	r23, r19
    20b6:	28 f4       	brcc	.+10     	; 0x20c2 <_ZN6String9setCharAtEjc+0x1a>
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	e6 0f       	add	r30, r22
    20be:	f7 1f       	adc	r31, r23
    20c0:	40 83       	st	Z, r20
    20c2:	08 95       	ret

000020c4 <_ZN6StringixEj>:
    20c4:	fc 01       	movw	r30, r24
    20c6:	24 81       	ldd	r18, Z+4	; 0x04
    20c8:	35 81       	ldd	r19, Z+5	; 0x05
    20ca:	62 17       	cp	r22, r18
    20cc:	73 07       	cpc	r23, r19
    20ce:	20 f4       	brcc	.+8      	; 0x20d8 <_ZN6StringixEj+0x14>
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	29 f4       	brne	.+10     	; 0x20e2 <_ZN6StringixEj+0x1e>
    20d8:	10 92 2c 09 	sts	0x092C, r1
    20dc:	6c e2       	ldi	r22, 0x2C	; 44
    20de:	79 e0       	ldi	r23, 0x09	; 9
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <_ZN6StringixEj+0x22>
    20e2:	68 0f       	add	r22, r24
    20e4:	79 1f       	adc	r23, r25
    20e6:	cb 01       	movw	r24, r22
    20e8:	08 95       	ret

000020ea <_ZNK6StringixEj>:
    20ea:	fc 01       	movw	r30, r24
    20ec:	24 81       	ldd	r18, Z+4	; 0x04
    20ee:	35 81       	ldd	r19, Z+5	; 0x05
    20f0:	62 17       	cp	r22, r18
    20f2:	73 07       	cpc	r23, r19
    20f4:	48 f4       	brcc	.+18     	; 0x2108 <_ZNK6StringixEj+0x1e>
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	29 f0       	breq	.+10     	; 0x2108 <_ZNK6StringixEj+0x1e>
    20fe:	fc 01       	movw	r30, r24
    2100:	e6 0f       	add	r30, r22
    2102:	f7 1f       	adc	r31, r23
    2104:	80 81       	ld	r24, Z
    2106:	08 95       	ret
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	08 95       	ret

0000210c <_ZNK6String6charAtEj>:
    210c:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_ZNK6StringixEj>

00002110 <_ZNK6String8getBytesEPhjj>:
    2110:	0f 93       	push	r16
    2112:	1f 93       	push	r17
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	eb 01       	movw	r28, r22
    211a:	41 15       	cp	r20, r1
    211c:	51 05       	cpc	r21, r1
    211e:	e9 f0       	breq	.+58     	; 0x215a <_ZNK6String8getBytesEPhjj+0x4a>
    2120:	20 97       	sbiw	r28, 0x00	; 0
    2122:	d9 f0       	breq	.+54     	; 0x215a <_ZNK6String8getBytesEPhjj+0x4a>
    2124:	fc 01       	movw	r30, r24
    2126:	04 81       	ldd	r16, Z+4	; 0x04
    2128:	15 81       	ldd	r17, Z+5	; 0x05
    212a:	20 17       	cp	r18, r16
    212c:	31 07       	cpc	r19, r17
    212e:	08 f0       	brcs	.+2      	; 0x2132 <_ZNK6String8getBytesEPhjj+0x22>
    2130:	13 c0       	rjmp	.+38     	; 0x2158 <_ZNK6String8getBytesEPhjj+0x48>
    2132:	41 50       	subi	r20, 0x01	; 1
    2134:	51 09       	sbc	r21, r1
    2136:	02 1b       	sub	r16, r18
    2138:	13 0b       	sbc	r17, r19
    213a:	40 17       	cp	r20, r16
    213c:	51 07       	cpc	r21, r17
    213e:	08 f4       	brcc	.+2      	; 0x2142 <_ZNK6String8getBytesEPhjj+0x32>
    2140:	8a 01       	movw	r16, r20
    2142:	fc 01       	movw	r30, r24
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	62 0f       	add	r22, r18
    214a:	73 1f       	adc	r23, r19
    214c:	a8 01       	movw	r20, r16
    214e:	ce 01       	movw	r24, r28
    2150:	0e 94 a5 44 	call	0x894a	; 0x894a <strncpy>
    2154:	c0 0f       	add	r28, r16
    2156:	d1 1f       	adc	r29, r17
    2158:	18 82       	st	Y, r1
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <_ZNK6String7indexOfEcj>:
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	fc 01       	movw	r30, r24
    216a:	84 81       	ldd	r24, Z+4	; 0x04
    216c:	95 81       	ldd	r25, Z+5	; 0x05
    216e:	48 17       	cp	r20, r24
    2170:	59 07       	cpc	r21, r25
    2172:	70 f4       	brcc	.+28     	; 0x2190 <_ZNK6String7indexOfEcj+0x2c>
    2174:	c0 81       	ld	r28, Z
    2176:	d1 81       	ldd	r29, Z+1	; 0x01
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	ce 01       	movw	r24, r28
    217c:	84 0f       	add	r24, r20
    217e:	95 1f       	adc	r25, r21
    2180:	0e 94 7c 44 	call	0x88f8	; 0x88f8 <strchr>
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	21 f0       	breq	.+8      	; 0x2190 <_ZNK6String7indexOfEcj+0x2c>
    2188:	9c 01       	movw	r18, r24
    218a:	2c 1b       	sub	r18, r28
    218c:	3d 0b       	sbc	r19, r29
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <_ZNK6String7indexOfEcj+0x30>
    2190:	2f ef       	ldi	r18, 0xFF	; 255
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	c9 01       	movw	r24, r18
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <_ZNK6String7indexOfEc>:
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <_ZNK6String7indexOfEcj>

000021a4 <_ZNK6String7indexOfERKS_j>:
    21a4:	cf 93       	push	r28
    21a6:	df 93       	push	r29
    21a8:	fc 01       	movw	r30, r24
    21aa:	84 81       	ldd	r24, Z+4	; 0x04
    21ac:	95 81       	ldd	r25, Z+5	; 0x05
    21ae:	48 17       	cp	r20, r24
    21b0:	59 07       	cpc	r21, r25
    21b2:	80 f4       	brcc	.+32     	; 0x21d4 <_ZNK6String7indexOfERKS_j+0x30>
    21b4:	c0 81       	ld	r28, Z
    21b6:	d1 81       	ldd	r29, Z+1	; 0x01
    21b8:	fb 01       	movw	r30, r22
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	ce 01       	movw	r24, r28
    21c0:	84 0f       	add	r24, r20
    21c2:	95 1f       	adc	r25, r21
    21c4:	0e 94 bf 44 	call	0x897e	; 0x897e <strstr>
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <_ZNK6String7indexOfERKS_j+0x30>
    21cc:	9c 01       	movw	r18, r24
    21ce:	2c 1b       	sub	r18, r28
    21d0:	3d 0b       	sbc	r19, r29
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <_ZNK6String7indexOfERKS_j+0x34>
    21d4:	2f ef       	ldi	r18, 0xFF	; 255
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	c9 01       	movw	r24, r18
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <_ZNK6String7indexOfERKS_>:
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <_ZNK6String7indexOfERKS_j>

000021e8 <_ZNK6String11lastIndexOfEcj>:
    21e8:	df 92       	push	r13
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	ec 01       	movw	r28, r24
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	9d 81       	ldd	r25, Y+5	; 0x05
    21fc:	48 17       	cp	r20, r24
    21fe:	59 07       	cpc	r21, r25
    2200:	18 f0       	brcs	.+6      	; 0x2208 <__stack+0x9>
    2202:	2f ef       	ldi	r18, 0xFF	; 255
    2204:	3f ef       	ldi	r19, 0xFF	; 255
    2206:	1b c0       	rjmp	.+54     	; 0x223e <__stack+0x3f>
    2208:	8a 01       	movw	r16, r20
    220a:	0f 5f       	subi	r16, 0xFF	; 255
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	e8 81       	ld	r30, Y
    2210:	f9 81       	ldd	r31, Y+1	; 0x01
    2212:	e0 0f       	add	r30, r16
    2214:	f1 1f       	adc	r31, r17
    2216:	d0 80       	ld	r13, Z
    2218:	10 82       	st	Z, r1
    221a:	e8 80       	ld	r14, Y
    221c:	f9 80       	ldd	r15, Y+1	; 0x01
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	c7 01       	movw	r24, r14
    2222:	0e 94 b4 44 	call	0x8968	; 0x8968 <strrchr>
    2226:	f7 01       	movw	r30, r14
    2228:	e0 0f       	add	r30, r16
    222a:	f1 1f       	adc	r31, r17
    222c:	d0 82       	st	Z, r13
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	41 f3       	breq	.-48     	; 0x2202 <__stack+0x3>
    2232:	28 81       	ld	r18, Y
    2234:	39 81       	ldd	r19, Y+1	; 0x01
    2236:	ac 01       	movw	r20, r24
    2238:	42 1b       	sub	r20, r18
    223a:	53 0b       	sbc	r21, r19
    223c:	9a 01       	movw	r18, r20
    223e:	c9 01       	movw	r24, r18
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	08 95       	ret

00002250 <_ZNK6String11lastIndexOfEc>:
    2250:	fc 01       	movw	r30, r24
    2252:	44 81       	ldd	r20, Z+4	; 0x04
    2254:	55 81       	ldd	r21, Z+5	; 0x05
    2256:	41 50       	subi	r20, 0x01	; 1
    2258:	51 09       	sbc	r21, r1
    225a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <_ZNK6String11lastIndexOfEcj>

0000225e <_ZNK6String11lastIndexOfERKS_j>:
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	6b 01       	movw	r12, r22
    2274:	8a 01       	movw	r16, r20
    2276:	fb 01       	movw	r30, r22
    2278:	44 81       	ldd	r20, Z+4	; 0x04
    227a:	55 81       	ldd	r21, Z+5	; 0x05
    227c:	41 15       	cp	r20, r1
    227e:	51 05       	cpc	r21, r1
    2280:	69 f1       	breq	.+90     	; 0x22dc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2282:	fc 01       	movw	r30, r24
    2284:	24 81       	ldd	r18, Z+4	; 0x04
    2286:	35 81       	ldd	r19, Z+5	; 0x05
    2288:	21 15       	cp	r18, r1
    228a:	31 05       	cpc	r19, r1
    228c:	39 f1       	breq	.+78     	; 0x22dc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    228e:	24 17       	cp	r18, r20
    2290:	35 07       	cpc	r19, r21
    2292:	20 f1       	brcs	.+72     	; 0x22dc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2294:	02 17       	cp	r16, r18
    2296:	13 07       	cpc	r17, r19
    2298:	18 f0       	brcs	.+6      	; 0x22a0 <_ZNK6String11lastIndexOfERKS_j+0x42>
    229a:	89 01       	movw	r16, r18
    229c:	01 50       	subi	r16, 0x01	; 1
    229e:	11 09       	sbc	r17, r1
    22a0:	fc 01       	movw	r30, r24
    22a2:	e0 80       	ld	r14, Z
    22a4:	f1 80       	ldd	r15, Z+1	; 0x01
    22a6:	c7 01       	movw	r24, r14
    22a8:	cf ef       	ldi	r28, 0xFF	; 255
    22aa:	df ef       	ldi	r29, 0xFF	; 255
    22ac:	57 01       	movw	r10, r14
    22ae:	a0 0e       	add	r10, r16
    22b0:	b1 1e       	adc	r11, r17
    22b2:	10 c0       	rjmp	.+32     	; 0x22d4 <_ZNK6String11lastIndexOfERKS_j+0x76>
    22b4:	f6 01       	movw	r30, r12
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	0e 94 bf 44 	call	0x897e	; 0x897e <strstr>
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	79 f0       	breq	.+30     	; 0x22e0 <_ZNK6String11lastIndexOfERKS_j+0x82>
    22c2:	9c 01       	movw	r18, r24
    22c4:	2e 19       	sub	r18, r14
    22c6:	3f 09       	sbc	r19, r15
    22c8:	02 17       	cp	r16, r18
    22ca:	13 07       	cpc	r17, r19
    22cc:	08 f4       	brcc	.+2      	; 0x22d0 <_ZNK6String11lastIndexOfERKS_j+0x72>
    22ce:	9e 01       	movw	r18, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	e9 01       	movw	r28, r18
    22d4:	a8 16       	cp	r10, r24
    22d6:	b9 06       	cpc	r11, r25
    22d8:	68 f7       	brcc	.-38     	; 0x22b4 <_ZNK6String11lastIndexOfERKS_j+0x56>
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <_ZNK6String11lastIndexOfERKS_j+0x82>
    22dc:	cf ef       	ldi	r28, 0xFF	; 255
    22de:	df ef       	ldi	r29, 0xFF	; 255
    22e0:	ce 01       	movw	r24, r28
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	1f 91       	pop	r17
    22e8:	0f 91       	pop	r16
    22ea:	ff 90       	pop	r15
    22ec:	ef 90       	pop	r14
    22ee:	df 90       	pop	r13
    22f0:	cf 90       	pop	r12
    22f2:	bf 90       	pop	r11
    22f4:	af 90       	pop	r10
    22f6:	08 95       	ret

000022f8 <_ZNK6String11lastIndexOfERKS_>:
    22f8:	fc 01       	movw	r30, r24
    22fa:	44 81       	ldd	r20, Z+4	; 0x04
    22fc:	55 81       	ldd	r21, Z+5	; 0x05
    22fe:	fb 01       	movw	r30, r22
    2300:	24 81       	ldd	r18, Z+4	; 0x04
    2302:	35 81       	ldd	r19, Z+5	; 0x05
    2304:	42 1b       	sub	r20, r18
    2306:	53 0b       	sbc	r21, r19
    2308:	0c 94 2f 11 	jmp	0x225e	; 0x225e <_ZNK6String11lastIndexOfERKS_j>

0000230c <_ZNK6String9substringEjj>:
    230c:	bf 92       	push	r11
    230e:	cf 92       	push	r12
    2310:	df 92       	push	r13
    2312:	ef 92       	push	r14
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	6c 01       	movw	r12, r24
    2320:	7b 01       	movw	r14, r22
    2322:	ea 01       	movw	r28, r20
    2324:	89 01       	movw	r16, r18
    2326:	24 17       	cp	r18, r20
    2328:	35 07       	cpc	r19, r21
    232a:	20 f4       	brcc	.+8      	; 0x2334 <_ZNK6String9substringEjj+0x28>
    232c:	8d 2f       	mov	r24, r29
    232e:	e9 01       	movw	r28, r18
    2330:	04 2f       	mov	r16, r20
    2332:	18 2f       	mov	r17, r24
    2334:	63 ef       	ldi	r22, 0xF3	; 243
    2336:	74 e0       	ldi	r23, 0x04	; 4
    2338:	c6 01       	movw	r24, r12
    233a:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN6StringC1EPKc>
    233e:	d7 01       	movw	r26, r14
    2340:	14 96       	adiw	r26, 0x04	; 4
    2342:	8d 91       	ld	r24, X+
    2344:	9c 91       	ld	r25, X
    2346:	15 97       	sbiw	r26, 0x05	; 5
    2348:	8c 17       	cp	r24, r28
    234a:	9d 07       	cpc	r25, r29
    234c:	c8 f0       	brcs	.+50     	; 0x2380 <_ZNK6String9substringEjj+0x74>
    234e:	80 17       	cp	r24, r16
    2350:	91 07       	cpc	r25, r17
    2352:	08 f4       	brcc	.+2      	; 0x2356 <_ZNK6String9substringEjj+0x4a>
    2354:	8c 01       	movw	r16, r24
    2356:	d7 01       	movw	r26, r14
    2358:	ed 91       	ld	r30, X+
    235a:	fc 91       	ld	r31, X
    235c:	11 97       	sbiw	r26, 0x01	; 1
    235e:	e0 0f       	add	r30, r16
    2360:	f1 1f       	adc	r31, r17
    2362:	b0 80       	ld	r11, Z
    2364:	10 82       	st	Z, r1
    2366:	6d 91       	ld	r22, X+
    2368:	7c 91       	ld	r23, X
    236a:	6c 0f       	add	r22, r28
    236c:	7d 1f       	adc	r23, r29
    236e:	c6 01       	movw	r24, r12
    2370:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    2374:	d7 01       	movw	r26, r14
    2376:	ed 91       	ld	r30, X+
    2378:	fc 91       	ld	r31, X
    237a:	e0 0f       	add	r30, r16
    237c:	f1 1f       	adc	r31, r17
    237e:	b0 82       	st	Z, r11
    2380:	c6 01       	movw	r24, r12
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	ff 90       	pop	r15
    238c:	ef 90       	pop	r14
    238e:	df 90       	pop	r13
    2390:	cf 90       	pop	r12
    2392:	bf 90       	pop	r11
    2394:	08 95       	ret

00002396 <_ZNK6String9substringEj>:
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	ec 01       	movw	r28, r24
    239c:	fb 01       	movw	r30, r22
    239e:	24 81       	ldd	r18, Z+4	; 0x04
    23a0:	35 81       	ldd	r19, Z+5	; 0x05
    23a2:	0e 94 86 11 	call	0x230c	; 0x230c <_ZNK6String9substringEjj>
    23a6:	ce 01       	movw	r24, r28
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	08 95       	ret

000023ae <_ZN6String7replaceEcc>:
    23ae:	dc 01       	movw	r26, r24
    23b0:	ed 91       	ld	r30, X+
    23b2:	fc 91       	ld	r31, X
    23b4:	30 97       	sbiw	r30, 0x00	; 0
    23b6:	29 f4       	brne	.+10     	; 0x23c2 <_ZN6String7replaceEcc+0x14>
    23b8:	08 95       	ret
    23ba:	86 13       	cpse	r24, r22
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <_ZN6String7replaceEcc+0x12>
    23be:	40 83       	st	Z, r20
    23c0:	31 96       	adiw	r30, 0x01	; 1
    23c2:	80 81       	ld	r24, Z
    23c4:	81 11       	cpse	r24, r1
    23c6:	f9 cf       	rjmp	.-14     	; 0x23ba <_ZN6String7replaceEcc+0xc>
    23c8:	08 95       	ret

000023ca <_ZN6String7replaceERKS_S1_>:
    23ca:	2f 92       	push	r2
    23cc:	3f 92       	push	r3
    23ce:	4f 92       	push	r4
    23d0:	5f 92       	push	r5
    23d2:	6f 92       	push	r6
    23d4:	7f 92       	push	r7
    23d6:	8f 92       	push	r8
    23d8:	9f 92       	push	r9
    23da:	af 92       	push	r10
    23dc:	bf 92       	push	r11
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	8c 01       	movw	r16, r24
    23f0:	5b 01       	movw	r10, r22
    23f2:	7a 01       	movw	r14, r20
    23f4:	dc 01       	movw	r26, r24
    23f6:	14 96       	adiw	r26, 0x04	; 4
    23f8:	6d 90       	ld	r6, X+
    23fa:	7c 90       	ld	r7, X
    23fc:	15 97       	sbiw	r26, 0x05	; 5
    23fe:	61 14       	cp	r6, r1
    2400:	71 04       	cpc	r7, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <_ZN6String7replaceERKS_S1_+0x3c>
    2404:	e1 c0       	rjmp	.+450    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2406:	fb 01       	movw	r30, r22
    2408:	44 80       	ldd	r4, Z+4	; 0x04
    240a:	55 80       	ldd	r5, Z+5	; 0x05
    240c:	41 14       	cp	r4, r1
    240e:	51 04       	cpc	r5, r1
    2410:	09 f4       	brne	.+2      	; 0x2414 <_ZN6String7replaceERKS_S1_+0x4a>
    2412:	da c0       	rjmp	.+436    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2414:	da 01       	movw	r26, r20
    2416:	14 96       	adiw	r26, 0x04	; 4
    2418:	cd 90       	ld	r12, X+
    241a:	dc 90       	ld	r13, X
    241c:	15 97       	sbiw	r26, 0x05	; 5
    241e:	c4 18       	sub	r12, r4
    2420:	d5 08       	sbc	r13, r5
    2422:	fc 01       	movw	r30, r24
    2424:	c0 81       	ld	r28, Z
    2426:	d1 81       	ldd	r29, Z+1	; 0x01
    2428:	c1 14       	cp	r12, r1
    242a:	d1 04       	cpc	r13, r1
    242c:	e1 f4       	brne	.+56     	; 0x2466 <_ZN6String7replaceERKS_S1_+0x9c>
    242e:	11 c0       	rjmp	.+34     	; 0x2452 <_ZN6String7replaceERKS_S1_+0x88>
    2430:	d7 01       	movw	r26, r14
    2432:	6c 91       	ld	r22, X
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	7c 91       	ld	r23, X
    2438:	11 97       	sbiw	r26, 0x01	; 1
    243a:	14 96       	adiw	r26, 0x04	; 4
    243c:	4d 91       	ld	r20, X+
    243e:	5c 91       	ld	r21, X
    2440:	15 97       	sbiw	r26, 0x05	; 5
    2442:	c8 01       	movw	r24, r16
    2444:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
    2448:	f7 01       	movw	r30, r14
    244a:	c4 81       	ldd	r28, Z+4	; 0x04
    244c:	d5 81       	ldd	r29, Z+5	; 0x05
    244e:	c0 0f       	add	r28, r16
    2450:	d1 1f       	adc	r29, r17
    2452:	d5 01       	movw	r26, r10
    2454:	6d 91       	ld	r22, X+
    2456:	7c 91       	ld	r23, X
    2458:	ce 01       	movw	r24, r28
    245a:	0e 94 bf 44 	call	0x897e	; 0x897e <strstr>
    245e:	8c 01       	movw	r16, r24
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	31 f7       	brne	.-52     	; 0x2430 <_ZN6String7replaceERKS_S1_+0x66>
    2464:	b1 c0       	rjmp	.+354    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2466:	d7 fe       	sbrs	r13, 7
    2468:	02 c0       	rjmp	.+4      	; 0x246e <_ZN6String7replaceERKS_S1_+0xa4>
    246a:	4e 01       	movw	r8, r28
    246c:	2f c0       	rjmp	.+94     	; 0x24cc <_ZN6String7replaceERKS_S1_+0x102>
    246e:	fb 01       	movw	r30, r22
    2470:	20 80       	ld	r2, Z
    2472:	31 80       	ldd	r3, Z+1	; 0x01
    2474:	43 01       	movw	r8, r6
    2476:	4e c0       	rjmp	.+156    	; 0x2514 <_ZN6String7replaceERKS_S1_+0x14a>
    2478:	23 01       	movw	r4, r6
    247a:	4c 1a       	sub	r4, r28
    247c:	5d 0a       	sbc	r5, r29
    247e:	a2 01       	movw	r20, r4
    2480:	be 01       	movw	r22, r28
    2482:	c4 01       	movw	r24, r8
    2484:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
    2488:	e4 01       	movw	r28, r8
    248a:	c4 0d       	add	r28, r4
    248c:	d5 1d       	adc	r29, r5
    248e:	d7 01       	movw	r26, r14
    2490:	6c 91       	ld	r22, X
    2492:	11 96       	adiw	r26, 0x01	; 1
    2494:	7c 91       	ld	r23, X
    2496:	11 97       	sbiw	r26, 0x01	; 1
    2498:	14 96       	adiw	r26, 0x04	; 4
    249a:	4d 91       	ld	r20, X+
    249c:	5c 91       	ld	r21, X
    249e:	15 97       	sbiw	r26, 0x05	; 5
    24a0:	ce 01       	movw	r24, r28
    24a2:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
    24a6:	f7 01       	movw	r30, r14
    24a8:	84 80       	ldd	r8, Z+4	; 0x04
    24aa:	95 80       	ldd	r9, Z+5	; 0x05
    24ac:	8c 0e       	add	r8, r28
    24ae:	9d 1e       	adc	r9, r29
    24b0:	d5 01       	movw	r26, r10
    24b2:	14 96       	adiw	r26, 0x04	; 4
    24b4:	cd 91       	ld	r28, X+
    24b6:	dc 91       	ld	r29, X
    24b8:	15 97       	sbiw	r26, 0x05	; 5
    24ba:	c6 0d       	add	r28, r6
    24bc:	d7 1d       	adc	r29, r7
    24be:	f8 01       	movw	r30, r16
    24c0:	84 81       	ldd	r24, Z+4	; 0x04
    24c2:	95 81       	ldd	r25, Z+5	; 0x05
    24c4:	8c 0d       	add	r24, r12
    24c6:	9d 1d       	adc	r25, r13
    24c8:	95 83       	std	Z+5, r25	; 0x05
    24ca:	84 83       	std	Z+4, r24	; 0x04
    24cc:	d5 01       	movw	r26, r10
    24ce:	6d 91       	ld	r22, X+
    24d0:	7c 91       	ld	r23, X
    24d2:	ce 01       	movw	r24, r28
    24d4:	0e 94 bf 44 	call	0x897e	; 0x897e <strstr>
    24d8:	3c 01       	movw	r6, r24
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f6       	brne	.-102    	; 0x2478 <_ZN6String7replaceERKS_S1_+0xae>
    24de:	be 01       	movw	r22, r28
    24e0:	c4 01       	movw	r24, r8
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	df 90       	pop	r13
    24f0:	cf 90       	pop	r12
    24f2:	bf 90       	pop	r11
    24f4:	af 90       	pop	r10
    24f6:	9f 90       	pop	r9
    24f8:	8f 90       	pop	r8
    24fa:	7f 90       	pop	r7
    24fc:	6f 90       	pop	r6
    24fe:	5f 90       	pop	r5
    2500:	4f 90       	pop	r4
    2502:	3f 90       	pop	r3
    2504:	2f 90       	pop	r2
    2506:	0c 94 90 44 	jmp	0x8920	; 0x8920 <strcpy>
    250a:	ec 01       	movw	r28, r24
    250c:	c4 0d       	add	r28, r4
    250e:	d5 1d       	adc	r29, r5
    2510:	8c 0c       	add	r8, r12
    2512:	9d 1c       	adc	r9, r13
    2514:	b1 01       	movw	r22, r2
    2516:	ce 01       	movw	r24, r28
    2518:	0e 94 bf 44 	call	0x897e	; 0x897e <strstr>
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	a9 f7       	brne	.-22     	; 0x250a <_ZN6String7replaceERKS_S1_+0x140>
    2520:	86 14       	cp	r8, r6
    2522:	97 04       	cpc	r9, r7
    2524:	09 f4       	brne	.+2      	; 0x2528 <_ZN6String7replaceERKS_S1_+0x15e>
    2526:	50 c0       	rjmp	.+160    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2528:	f8 01       	movw	r30, r16
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	88 15       	cp	r24, r8
    2530:	99 05       	cpc	r25, r9
    2532:	98 f4       	brcc	.+38     	; 0x255a <_ZN6String7replaceERKS_S1_+0x190>
    2534:	b4 01       	movw	r22, r8
    2536:	c8 01       	movw	r24, r16
    2538:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN6String12changeBufferEj>
    253c:	88 23       	and	r24, r24
    253e:	09 f4       	brne	.+2      	; 0x2542 <_ZN6String7replaceERKS_S1_+0x178>
    2540:	43 c0       	rjmp	.+134    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2542:	0b c0       	rjmp	.+22     	; 0x255a <_ZN6String7replaceERKS_S1_+0x190>
    2544:	d7 fd       	sbrc	r29, 7
    2546:	40 c0       	rjmp	.+128    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    2548:	ae 01       	movw	r20, r28
    254a:	b5 01       	movw	r22, r10
    254c:	c8 01       	movw	r24, r16
    254e:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZNK6String11lastIndexOfERKS_j>
    2552:	ec 01       	movw	r28, r24
    2554:	97 ff       	sbrs	r25, 7
    2556:	07 c0       	rjmp	.+14     	; 0x2566 <_ZN6String7replaceERKS_S1_+0x19c>
    2558:	37 c0       	rjmp	.+110    	; 0x25c8 <_ZN6String7replaceERKS_S1_+0x1fe>
    255a:	d8 01       	movw	r26, r16
    255c:	14 96       	adiw	r26, 0x04	; 4
    255e:	cd 91       	ld	r28, X+
    2560:	dc 91       	ld	r29, X
    2562:	15 97       	sbiw	r26, 0x05	; 5
    2564:	2f c0       	rjmp	.+94     	; 0x25c4 <_ZN6String7replaceERKS_S1_+0x1fa>
    2566:	f8 01       	movw	r30, r16
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	d5 01       	movw	r26, r10
    256e:	14 96       	adiw	r26, 0x04	; 4
    2570:	2d 91       	ld	r18, X+
    2572:	3c 91       	ld	r19, X
    2574:	15 97       	sbiw	r26, 0x05	; 5
    2576:	2c 0f       	add	r18, r28
    2578:	3d 1f       	adc	r19, r29
    257a:	82 0f       	add	r24, r18
    257c:	93 1f       	adc	r25, r19
    257e:	44 81       	ldd	r20, Z+4	; 0x04
    2580:	55 81       	ldd	r21, Z+5	; 0x05
    2582:	42 1b       	sub	r20, r18
    2584:	53 0b       	sbc	r21, r19
    2586:	bc 01       	movw	r22, r24
    2588:	8c 0d       	add	r24, r12
    258a:	9d 1d       	adc	r25, r13
    258c:	0e 94 6a 44 	call	0x88d4	; 0x88d4 <memmove>
    2590:	f8 01       	movw	r30, r16
    2592:	84 81       	ldd	r24, Z+4	; 0x04
    2594:	95 81       	ldd	r25, Z+5	; 0x05
    2596:	8c 0d       	add	r24, r12
    2598:	9d 1d       	adc	r25, r13
    259a:	95 83       	std	Z+5, r25	; 0x05
    259c:	84 83       	std	Z+4, r24	; 0x04
    259e:	01 90       	ld	r0, Z+
    25a0:	f0 81       	ld	r31, Z
    25a2:	e0 2d       	mov	r30, r0
    25a4:	e8 0f       	add	r30, r24
    25a6:	f9 1f       	adc	r31, r25
    25a8:	10 82       	st	Z, r1
    25aa:	d8 01       	movw	r26, r16
    25ac:	2d 91       	ld	r18, X+
    25ae:	3c 91       	ld	r19, X
    25b0:	2c 0f       	add	r18, r28
    25b2:	3d 1f       	adc	r19, r29
    25b4:	f7 01       	movw	r30, r14
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	44 81       	ldd	r20, Z+4	; 0x04
    25bc:	55 81       	ldd	r21, Z+5	; 0x05
    25be:	c9 01       	movw	r24, r18
    25c0:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
    25c4:	21 97       	sbiw	r28, 0x01	; 1
    25c6:	be cf       	rjmp	.-132    	; 0x2544 <_ZN6String7replaceERKS_S1_+0x17a>
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	bf 90       	pop	r11
    25da:	af 90       	pop	r10
    25dc:	9f 90       	pop	r9
    25de:	8f 90       	pop	r8
    25e0:	7f 90       	pop	r7
    25e2:	6f 90       	pop	r6
    25e4:	5f 90       	pop	r5
    25e6:	4f 90       	pop	r4
    25e8:	3f 90       	pop	r3
    25ea:	2f 90       	pop	r2
    25ec:	08 95       	ret

000025ee <_ZN6String11toLowerCaseEv>:
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
    25f2:	fc 01       	movw	r30, r24
    25f4:	c0 81       	ld	r28, Z
    25f6:	d1 81       	ldd	r29, Z+1	; 0x01
    25f8:	20 97       	sbiw	r28, 0x00	; 0
    25fa:	29 f4       	brne	.+10     	; 0x2606 <_ZN6String11toLowerCaseEv+0x18>
    25fc:	07 c0       	rjmp	.+14     	; 0x260c <_ZN6String11toLowerCaseEv+0x1e>
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	0e 94 4d 44 	call	0x889a	; 0x889a <tolower>
    2604:	89 93       	st	Y+, r24
    2606:	88 81       	ld	r24, Y
    2608:	81 11       	cpse	r24, r1
    260a:	f9 cf       	rjmp	.-14     	; 0x25fe <_ZN6String11toLowerCaseEv+0x10>
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <_ZN6String11toUpperCaseEv>:
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	fc 01       	movw	r30, r24
    2618:	c0 81       	ld	r28, Z
    261a:	d1 81       	ldd	r29, Z+1	; 0x01
    261c:	20 97       	sbiw	r28, 0x00	; 0
    261e:	29 f4       	brne	.+10     	; 0x262a <_ZN6String11toUpperCaseEv+0x18>
    2620:	07 c0       	rjmp	.+14     	; 0x2630 <_ZN6String11toUpperCaseEv+0x1e>
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 55 44 	call	0x88aa	; 0x88aa <toupper>
    2628:	89 93       	st	Y+, r24
    262a:	88 81       	ld	r24, Y
    262c:	81 11       	cpse	r24, r1
    262e:	f9 cf       	rjmp	.-14     	; 0x2622 <_ZN6String11toUpperCaseEv+0x10>
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	08 95       	ret

00002636 <_ZN6String4trimEv>:
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	6c 01       	movw	r12, r24
    264c:	dc 01       	movw	r26, r24
    264e:	ed 90       	ld	r14, X+
    2650:	fc 90       	ld	r15, X
    2652:	11 97       	sbiw	r26, 0x01	; 1
    2654:	e1 14       	cp	r14, r1
    2656:	f1 04       	cpc	r15, r1
    2658:	09 f4       	brne	.+2      	; 0x265c <_ZN6String4trimEv+0x26>
    265a:	42 c0       	rjmp	.+132    	; 0x26e0 <_ZN6String4trimEv+0xaa>
    265c:	14 96       	adiw	r26, 0x04	; 4
    265e:	0d 91       	ld	r16, X+
    2660:	1c 91       	ld	r17, X
    2662:	15 97       	sbiw	r26, 0x05	; 5
    2664:	01 15       	cp	r16, r1
    2666:	11 05       	cpc	r17, r1
    2668:	d9 f1       	breq	.+118    	; 0x26e0 <_ZN6String4trimEv+0xaa>
    266a:	57 01       	movw	r10, r14
    266c:	e5 01       	movw	r28, r10
    266e:	bf ef       	ldi	r27, 0xFF	; 255
    2670:	ab 1a       	sub	r10, r27
    2672:	bb 0a       	sbc	r11, r27
    2674:	88 81       	ld	r24, Y
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 45 44 	call	0x888a	; 0x888a <isspace>
    267c:	89 2b       	or	r24, r25
    267e:	b1 f7       	brne	.-20     	; 0x266c <_ZN6String4trimEv+0x36>
    2680:	01 50       	subi	r16, 0x01	; 1
    2682:	11 09       	sbc	r17, r1
    2684:	0e 0d       	add	r16, r14
    2686:	1f 1d       	adc	r17, r15
    2688:	f8 01       	movw	r30, r16
    268a:	80 81       	ld	r24, Z
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 45 44 	call	0x888a	; 0x888a <isspace>
    2692:	89 2b       	or	r24, r25
    2694:	69 f4       	brne	.+26     	; 0x26b0 <_ZN6String4trimEv+0x7a>
    2696:	0f 5f       	subi	r16, 0xFF	; 255
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	0c 1b       	sub	r16, r28
    269c:	1d 0b       	sbc	r17, r29
    269e:	d6 01       	movw	r26, r12
    26a0:	15 96       	adiw	r26, 0x05	; 5
    26a2:	1c 93       	st	X, r17
    26a4:	0e 93       	st	-X, r16
    26a6:	14 97       	sbiw	r26, 0x04	; 4
    26a8:	ec 16       	cp	r14, r28
    26aa:	fd 06       	cpc	r15, r29
    26ac:	50 f4       	brcc	.+20     	; 0x26c2 <_ZN6String4trimEv+0x8c>
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <_ZN6String4trimEv+0x82>
    26b0:	0c 17       	cp	r16, r28
    26b2:	1d 07       	cpc	r17, r29
    26b4:	90 f4       	brcc	.+36     	; 0x26da <_ZN6String4trimEv+0xa4>
    26b6:	ef cf       	rjmp	.-34     	; 0x2696 <_ZN6String4trimEv+0x60>
    26b8:	a8 01       	movw	r20, r16
    26ba:	be 01       	movw	r22, r28
    26bc:	c7 01       	movw	r24, r14
    26be:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
    26c2:	d6 01       	movw	r26, r12
    26c4:	ed 91       	ld	r30, X+
    26c6:	fc 91       	ld	r31, X
    26c8:	11 97       	sbiw	r26, 0x01	; 1
    26ca:	14 96       	adiw	r26, 0x04	; 4
    26cc:	8d 91       	ld	r24, X+
    26ce:	9c 91       	ld	r25, X
    26d0:	15 97       	sbiw	r26, 0x05	; 5
    26d2:	e8 0f       	add	r30, r24
    26d4:	f9 1f       	adc	r31, r25
    26d6:	10 82       	st	Z, r1
    26d8:	03 c0       	rjmp	.+6      	; 0x26e0 <_ZN6String4trimEv+0xaa>
    26da:	01 50       	subi	r16, 0x01	; 1
    26dc:	11 09       	sbc	r17, r1
    26de:	d4 cf       	rjmp	.-88     	; 0x2688 <_ZN6String4trimEv+0x52>
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	df 90       	pop	r13
    26ee:	cf 90       	pop	r12
    26f0:	bf 90       	pop	r11
    26f2:	af 90       	pop	r10
    26f4:	08 95       	ret

000026f6 <_ZNK6String5toIntEv>:
    26f6:	fc 01       	movw	r30, r24
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	11 f0       	breq	.+4      	; 0x2704 <_ZNK6String5toIntEv+0xe>
    2700:	0c 94 1e 44 	jmp	0x883c	; 0x883c <atol>
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	08 95       	ret

0000270e <malloc>:
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	91 05       	cpc	r25, r1
    271a:	10 f4       	brcc	.+4      	; 0x2720 <malloc+0x12>
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	e0 91 94 11 	lds	r30, 0x1194
    2724:	f0 91 95 11 	lds	r31, 0x1195
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	c0 e0       	ldi	r28, 0x00	; 0
    272e:	d0 e0       	ldi	r29, 0x00	; 0
    2730:	23 c0       	rjmp	.+70     	; 0x2778 <malloc+0x6a>
    2732:	40 81       	ld	r20, Z
    2734:	51 81       	ldd	r21, Z+1	; 0x01
    2736:	48 17       	cp	r20, r24
    2738:	59 07       	cpc	r21, r25
    273a:	a8 f0       	brcs	.+42     	; 0x2766 <malloc+0x58>
    273c:	48 17       	cp	r20, r24
    273e:	59 07       	cpc	r21, r25
    2740:	61 f4       	brne	.+24     	; 0x275a <malloc+0x4c>
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 97       	sbiw	r28, 0x00	; 0
    2748:	19 f0       	breq	.+6      	; 0x2750 <malloc+0x42>
    274a:	9b 83       	std	Y+3, r25	; 0x03
    274c:	8a 83       	std	Y+2, r24	; 0x02
    274e:	2e c0       	rjmp	.+92     	; 0x27ac <malloc+0x9e>
    2750:	90 93 95 11 	sts	0x1195, r25
    2754:	80 93 94 11 	sts	0x1194, r24
    2758:	29 c0       	rjmp	.+82     	; 0x27ac <malloc+0x9e>
    275a:	21 15       	cp	r18, r1
    275c:	31 05       	cpc	r19, r1
    275e:	29 f0       	breq	.+10     	; 0x276a <malloc+0x5c>
    2760:	42 17       	cp	r20, r18
    2762:	53 07       	cpc	r21, r19
    2764:	10 f0       	brcs	.+4      	; 0x276a <malloc+0x5c>
    2766:	a9 01       	movw	r20, r18
    2768:	02 c0       	rjmp	.+4      	; 0x276e <malloc+0x60>
    276a:	be 01       	movw	r22, r28
    276c:	df 01       	movw	r26, r30
    276e:	02 81       	ldd	r16, Z+2	; 0x02
    2770:	13 81       	ldd	r17, Z+3	; 0x03
    2772:	ef 01       	movw	r28, r30
    2774:	9a 01       	movw	r18, r20
    2776:	f8 01       	movw	r30, r16
    2778:	30 97       	sbiw	r30, 0x00	; 0
    277a:	d9 f6       	brne	.-74     	; 0x2732 <malloc+0x24>
    277c:	21 15       	cp	r18, r1
    277e:	31 05       	cpc	r19, r1
    2780:	09 f1       	breq	.+66     	; 0x27c4 <malloc+0xb6>
    2782:	28 1b       	sub	r18, r24
    2784:	39 0b       	sbc	r19, r25
    2786:	24 30       	cpi	r18, 0x04	; 4
    2788:	31 05       	cpc	r19, r1
    278a:	90 f4       	brcc	.+36     	; 0x27b0 <malloc+0xa2>
    278c:	12 96       	adiw	r26, 0x02	; 2
    278e:	8d 91       	ld	r24, X+
    2790:	9c 91       	ld	r25, X
    2792:	13 97       	sbiw	r26, 0x03	; 3
    2794:	61 15       	cp	r22, r1
    2796:	71 05       	cpc	r23, r1
    2798:	21 f0       	breq	.+8      	; 0x27a2 <malloc+0x94>
    279a:	fb 01       	movw	r30, r22
    279c:	93 83       	std	Z+3, r25	; 0x03
    279e:	82 83       	std	Z+2, r24	; 0x02
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <malloc+0x9c>
    27a2:	90 93 95 11 	sts	0x1195, r25
    27a6:	80 93 94 11 	sts	0x1194, r24
    27aa:	fd 01       	movw	r30, r26
    27ac:	32 96       	adiw	r30, 0x02	; 2
    27ae:	2f c0       	rjmp	.+94     	; 0x280e <malloc+0x100>
    27b0:	fd 01       	movw	r30, r26
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	81 93       	st	Z+, r24
    27b8:	91 93       	st	Z+, r25
    27ba:	22 50       	subi	r18, 0x02	; 2
    27bc:	31 09       	sbc	r19, r1
    27be:	2d 93       	st	X+, r18
    27c0:	3c 93       	st	X, r19
    27c2:	25 c0       	rjmp	.+74     	; 0x280e <malloc+0x100>
    27c4:	4d b7       	in	r20, 0x3d	; 61
    27c6:	5e b7       	in	r21, 0x3e	; 62
    27c8:	48 57       	subi	r20, 0x78	; 120
    27ca:	51 09       	sbc	r21, r1
    27cc:	e0 91 02 02 	lds	r30, 0x0202
    27d0:	f0 91 03 02 	lds	r31, 0x0203
    27d4:	e4 17       	cp	r30, r20
    27d6:	f5 07       	cpc	r31, r21
    27d8:	c0 f4       	brcc	.+48     	; 0x280a <malloc+0xfc>
    27da:	4e 1b       	sub	r20, r30
    27dc:	5f 0b       	sbc	r21, r31
    27de:	48 17       	cp	r20, r24
    27e0:	59 07       	cpc	r21, r25
    27e2:	98 f0       	brcs	.+38     	; 0x280a <malloc+0xfc>
    27e4:	9c 01       	movw	r18, r24
    27e6:	2e 5f       	subi	r18, 0xFE	; 254
    27e8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ea:	42 17       	cp	r20, r18
    27ec:	53 07       	cpc	r21, r19
    27ee:	68 f0       	brcs	.+26     	; 0x280a <malloc+0xfc>
    27f0:	2e 0f       	add	r18, r30
    27f2:	3f 1f       	adc	r19, r31
    27f4:	30 93 03 02 	sts	0x0203, r19
    27f8:	20 93 02 02 	sts	0x0202, r18
    27fc:	30 93 01 02 	sts	0x0201, r19
    2800:	20 93 00 02 	sts	0x0200, r18
    2804:	81 93       	st	Z+, r24
    2806:	91 93       	st	Z+, r25
    2808:	02 c0       	rjmp	.+4      	; 0x280e <malloc+0x100>
    280a:	e0 e0       	ldi	r30, 0x00	; 0
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	cf 01       	movw	r24, r30
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	08 95       	ret

0000281a <free>:
    281a:	ef 92       	push	r14
    281c:	ff 92       	push	r15
    281e:	0f 93       	push	r16
    2820:	1f 93       	push	r17
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	09 f4       	brne	.+2      	; 0x282c <free+0x12>
    282a:	8e c0       	rjmp	.+284    	; 0x2948 <free+0x12e>
    282c:	dc 01       	movw	r26, r24
    282e:	12 97       	sbiw	r26, 0x02	; 2
    2830:	13 96       	adiw	r26, 0x03	; 3
    2832:	1c 92       	st	X, r1
    2834:	1e 92       	st	-X, r1
    2836:	12 97       	sbiw	r26, 0x02	; 2
    2838:	e0 90 94 11 	lds	r14, 0x1194
    283c:	f0 90 95 11 	lds	r15, 0x1195
    2840:	e1 14       	cp	r14, r1
    2842:	f1 04       	cpc	r15, r1
    2844:	89 f4       	brne	.+34     	; 0x2868 <free+0x4e>
    2846:	2d 91       	ld	r18, X+
    2848:	3c 91       	ld	r19, X
    284a:	11 97       	sbiw	r26, 0x01	; 1
    284c:	28 0f       	add	r18, r24
    284e:	39 1f       	adc	r19, r25
    2850:	80 91 02 02 	lds	r24, 0x0202
    2854:	90 91 03 02 	lds	r25, 0x0203
    2858:	82 17       	cp	r24, r18
    285a:	93 07       	cpc	r25, r19
    285c:	89 f5       	brne	.+98     	; 0x28c0 <free+0xa6>
    285e:	b0 93 03 02 	sts	0x0203, r27
    2862:	a0 93 02 02 	sts	0x0202, r26
    2866:	70 c0       	rjmp	.+224    	; 0x2948 <free+0x12e>
    2868:	e7 01       	movw	r28, r14
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	01 c0       	rjmp	.+2      	; 0x2872 <free+0x58>
    2870:	ea 01       	movw	r28, r20
    2872:	ca 17       	cp	r28, r26
    2874:	db 07       	cpc	r29, r27
    2876:	38 f4       	brcc	.+14     	; 0x2886 <free+0x6c>
    2878:	4a 81       	ldd	r20, Y+2	; 0x02
    287a:	5b 81       	ldd	r21, Y+3	; 0x03
    287c:	9e 01       	movw	r18, r28
    287e:	41 15       	cp	r20, r1
    2880:	51 05       	cpc	r21, r1
    2882:	b1 f7       	brne	.-20     	; 0x2870 <free+0x56>
    2884:	22 c0       	rjmp	.+68     	; 0x28ca <free+0xb0>
    2886:	ac 01       	movw	r20, r24
    2888:	42 50       	subi	r20, 0x02	; 2
    288a:	51 09       	sbc	r21, r1
    288c:	fa 01       	movw	r30, r20
    288e:	d3 83       	std	Z+3, r29	; 0x03
    2890:	c2 83       	std	Z+2, r28	; 0x02
    2892:	00 81       	ld	r16, Z
    2894:	11 81       	ldd	r17, Z+1	; 0x01
    2896:	bc 01       	movw	r22, r24
    2898:	60 0f       	add	r22, r16
    289a:	71 1f       	adc	r23, r17
    289c:	6c 17       	cp	r22, r28
    289e:	7d 07       	cpc	r23, r29
    28a0:	61 f4       	brne	.+24     	; 0x28ba <free+0xa0>
    28a2:	68 81       	ld	r22, Y
    28a4:	79 81       	ldd	r23, Y+1	; 0x01
    28a6:	60 0f       	add	r22, r16
    28a8:	71 1f       	adc	r23, r17
    28aa:	6e 5f       	subi	r22, 0xFE	; 254
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
    28ae:	71 83       	std	Z+1, r23	; 0x01
    28b0:	60 83       	st	Z, r22
    28b2:	6a 81       	ldd	r22, Y+2	; 0x02
    28b4:	7b 81       	ldd	r23, Y+3	; 0x03
    28b6:	73 83       	std	Z+3, r23	; 0x03
    28b8:	62 83       	std	Z+2, r22	; 0x02
    28ba:	21 15       	cp	r18, r1
    28bc:	31 05       	cpc	r19, r1
    28be:	29 f4       	brne	.+10     	; 0x28ca <free+0xb0>
    28c0:	b0 93 95 11 	sts	0x1195, r27
    28c4:	a0 93 94 11 	sts	0x1194, r26
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <free+0x12e>
    28ca:	f9 01       	movw	r30, r18
    28cc:	b3 83       	std	Z+3, r27	; 0x03
    28ce:	a2 83       	std	Z+2, r26	; 0x02
    28d0:	e9 01       	movw	r28, r18
    28d2:	49 91       	ld	r20, Y+
    28d4:	59 91       	ld	r21, Y+
    28d6:	c4 0f       	add	r28, r20
    28d8:	d5 1f       	adc	r29, r21
    28da:	ac 17       	cp	r26, r28
    28dc:	bd 07       	cpc	r27, r29
    28de:	71 f4       	brne	.+28     	; 0x28fc <free+0xe2>
    28e0:	dc 01       	movw	r26, r24
    28e2:	9e 91       	ld	r25, -X
    28e4:	8e 91       	ld	r24, -X
    28e6:	84 0f       	add	r24, r20
    28e8:	95 1f       	adc	r25, r21
    28ea:	02 96       	adiw	r24, 0x02	; 2
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	12 96       	adiw	r26, 0x02	; 2
    28f2:	8d 91       	ld	r24, X+
    28f4:	9c 91       	ld	r25, X
    28f6:	13 97       	sbiw	r26, 0x03	; 3
    28f8:	93 83       	std	Z+3, r25	; 0x03
    28fa:	82 83       	std	Z+2, r24	; 0x02
    28fc:	a0 e0       	ldi	r26, 0x00	; 0
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <free+0xec>
    2902:	d7 01       	movw	r26, r14
    2904:	7c 01       	movw	r14, r24
    2906:	f7 01       	movw	r30, r14
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	c9 f7       	brne	.-14     	; 0x2902 <free+0xe8>
    2910:	c7 01       	movw	r24, r14
    2912:	02 96       	adiw	r24, 0x02	; 2
    2914:	20 81       	ld	r18, Z
    2916:	31 81       	ldd	r19, Z+1	; 0x01
    2918:	82 0f       	add	r24, r18
    291a:	93 1f       	adc	r25, r19
    291c:	20 91 02 02 	lds	r18, 0x0202
    2920:	30 91 03 02 	lds	r19, 0x0203
    2924:	28 17       	cp	r18, r24
    2926:	39 07       	cpc	r19, r25
    2928:	79 f4       	brne	.+30     	; 0x2948 <free+0x12e>
    292a:	10 97       	sbiw	r26, 0x00	; 0
    292c:	29 f4       	brne	.+10     	; 0x2938 <free+0x11e>
    292e:	10 92 95 11 	sts	0x1195, r1
    2932:	10 92 94 11 	sts	0x1194, r1
    2936:	04 c0       	rjmp	.+8      	; 0x2940 <free+0x126>
    2938:	13 96       	adiw	r26, 0x03	; 3
    293a:	1c 92       	st	X, r1
    293c:	1e 92       	st	-X, r1
    293e:	12 97       	sbiw	r26, 0x02	; 2
    2940:	f0 92 03 02 	sts	0x0203, r15
    2944:	e0 92 02 02 	sts	0x0202, r14
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	ff 90       	pop	r15
    2952:	ef 90       	pop	r14
    2954:	08 95       	ret

00002956 <realloc>:
    2956:	8f 92       	push	r8
    2958:	9f 92       	push	r9
    295a:	af 92       	push	r10
    295c:	bf 92       	push	r11
    295e:	cf 92       	push	r12
    2960:	df 92       	push	r13
    2962:	ef 92       	push	r14
    2964:	ff 92       	push	r15
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	ec 01       	movw	r28, r24
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	79 f4       	brne	.+30     	; 0x2992 <realloc+0x3c>
    2974:	cb 01       	movw	r24, r22
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	0c 94 87 13 	jmp	0x270e	; 0x270e <malloc>
    2992:	dc 01       	movw	r26, r24
    2994:	a6 0f       	add	r26, r22
    2996:	b7 1f       	adc	r27, r23
    2998:	fc 01       	movw	r30, r24
    299a:	32 97       	sbiw	r30, 0x02	; 2
    299c:	ae 17       	cp	r26, r30
    299e:	bf 07       	cpc	r27, r31
    29a0:	18 f4       	brcc	.+6      	; 0x29a8 <realloc+0x52>
    29a2:	c0 e0       	ldi	r28, 0x00	; 0
    29a4:	d0 e0       	ldi	r29, 0x00	; 0
    29a6:	a3 c0       	rjmp	.+326    	; 0x2aee <realloc+0x198>
    29a8:	00 81       	ld	r16, Z
    29aa:	11 81       	ldd	r17, Z+1	; 0x01
    29ac:	06 17       	cp	r16, r22
    29ae:	17 07       	cpc	r17, r23
    29b0:	b0 f0       	brcs	.+44     	; 0x29de <realloc+0x88>
    29b2:	05 30       	cpi	r16, 0x05	; 5
    29b4:	11 05       	cpc	r17, r1
    29b6:	08 f4       	brcc	.+2      	; 0x29ba <realloc+0x64>
    29b8:	9a c0       	rjmp	.+308    	; 0x2aee <realloc+0x198>
    29ba:	c8 01       	movw	r24, r16
    29bc:	04 97       	sbiw	r24, 0x04	; 4
    29be:	86 17       	cp	r24, r22
    29c0:	97 07       	cpc	r25, r23
    29c2:	08 f4       	brcc	.+2      	; 0x29c6 <realloc+0x70>
    29c4:	94 c0       	rjmp	.+296    	; 0x2aee <realloc+0x198>
    29c6:	02 50       	subi	r16, 0x02	; 2
    29c8:	11 09       	sbc	r17, r1
    29ca:	06 1b       	sub	r16, r22
    29cc:	17 0b       	sbc	r17, r23
    29ce:	0d 93       	st	X+, r16
    29d0:	1d 93       	st	X+, r17
    29d2:	71 83       	std	Z+1, r23	; 0x01
    29d4:	60 83       	st	Z, r22
    29d6:	cd 01       	movw	r24, r26
    29d8:	0e 94 0d 14 	call	0x281a	; 0x281a <free>
    29dc:	88 c0       	rjmp	.+272    	; 0x2aee <realloc+0x198>
    29de:	6b 01       	movw	r12, r22
    29e0:	c0 1a       	sub	r12, r16
    29e2:	d1 0a       	sbc	r13, r17
    29e4:	7c 01       	movw	r14, r24
    29e6:	e0 0e       	add	r14, r16
    29e8:	f1 1e       	adc	r15, r17
    29ea:	e0 91 94 11 	lds	r30, 0x1194
    29ee:	f0 91 95 11 	lds	r31, 0x1195
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	48 c0       	rjmp	.+144    	; 0x2a8c <realloc+0x136>
    29fc:	ee 15       	cp	r30, r14
    29fe:	ff 05       	cpc	r31, r15
    2a00:	d1 f5       	brne	.+116    	; 0x2a76 <realloc+0x120>
    2a02:	80 80       	ld	r8, Z
    2a04:	91 80       	ldd	r9, Z+1	; 0x01
    2a06:	54 01       	movw	r10, r8
    2a08:	42 e0       	ldi	r20, 0x02	; 2
    2a0a:	a4 0e       	add	r10, r20
    2a0c:	b1 1c       	adc	r11, r1
    2a0e:	ac 14       	cp	r10, r12
    2a10:	bd 04       	cpc	r11, r13
    2a12:	88 f1       	brcs	.+98     	; 0x2a76 <realloc+0x120>
    2a14:	74 01       	movw	r14, r8
    2a16:	ec 18       	sub	r14, r12
    2a18:	fd 08       	sbc	r15, r13
    2a1a:	67 01       	movw	r12, r14
    2a1c:	22 e0       	ldi	r18, 0x02	; 2
    2a1e:	c2 0e       	add	r12, r18
    2a20:	d1 1c       	adc	r13, r1
    2a22:	9e 01       	movw	r18, r28
    2a24:	22 50       	subi	r18, 0x02	; 2
    2a26:	31 09       	sbc	r19, r1
    2a28:	45 e0       	ldi	r20, 0x05	; 5
    2a2a:	c4 16       	cp	r12, r20
    2a2c:	d1 04       	cpc	r13, r1
    2a2e:	78 f0       	brcs	.+30     	; 0x2a4e <realloc+0xf8>
    2a30:	42 81       	ldd	r20, Z+2	; 0x02
    2a32:	53 81       	ldd	r21, Z+3	; 0x03
    2a34:	13 96       	adiw	r26, 0x03	; 3
    2a36:	5c 93       	st	X, r21
    2a38:	4e 93       	st	-X, r20
    2a3a:	12 97       	sbiw	r26, 0x02	; 2
    2a3c:	11 96       	adiw	r26, 0x01	; 1
    2a3e:	fc 92       	st	X, r15
    2a40:	ee 92       	st	-X, r14
    2a42:	f9 01       	movw	r30, r18
    2a44:	71 83       	std	Z+1, r23	; 0x01
    2a46:	60 83       	st	Z, r22
    2a48:	3a 2f       	mov	r19, r26
    2a4a:	2b 2f       	mov	r18, r27
    2a4c:	09 c0       	rjmp	.+18     	; 0x2a60 <realloc+0x10a>
    2a4e:	0e 5f       	subi	r16, 0xFE	; 254
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	08 0d       	add	r16, r8
    2a54:	19 1d       	adc	r17, r9
    2a56:	d9 01       	movw	r26, r18
    2a58:	0d 93       	st	X+, r16
    2a5a:	1c 93       	st	X, r17
    2a5c:	32 81       	ldd	r19, Z+2	; 0x02
    2a5e:	23 81       	ldd	r18, Z+3	; 0x03
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	21 f0       	breq	.+8      	; 0x2a6c <realloc+0x116>
    2a64:	fc 01       	movw	r30, r24
    2a66:	32 83       	std	Z+2, r19	; 0x02
    2a68:	23 83       	std	Z+3, r18	; 0x03
    2a6a:	41 c0       	rjmp	.+130    	; 0x2aee <realloc+0x198>
    2a6c:	30 93 94 11 	sts	0x1194, r19
    2a70:	20 93 95 11 	sts	0x1195, r18
    2a74:	3c c0       	rjmp	.+120    	; 0x2aee <realloc+0x198>
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	28 17       	cp	r18, r24
    2a7c:	39 07       	cpc	r19, r25
    2a7e:	08 f4       	brcc	.+2      	; 0x2a82 <realloc+0x12c>
    2a80:	9c 01       	movw	r18, r24
    2a82:	52 81       	ldd	r21, Z+2	; 0x02
    2a84:	43 81       	ldd	r20, Z+3	; 0x03
    2a86:	cf 01       	movw	r24, r30
    2a88:	e5 2f       	mov	r30, r21
    2a8a:	f4 2f       	mov	r31, r20
    2a8c:	30 97       	sbiw	r30, 0x00	; 0
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <realloc+0x13c>
    2a90:	b5 cf       	rjmp	.-150    	; 0x29fc <realloc+0xa6>
    2a92:	80 91 02 02 	lds	r24, 0x0202
    2a96:	90 91 03 02 	lds	r25, 0x0203
    2a9a:	8e 15       	cp	r24, r14
    2a9c:	9f 05       	cpc	r25, r15
    2a9e:	c1 f4       	brne	.+48     	; 0x2ad0 <realloc+0x17a>
    2aa0:	26 17       	cp	r18, r22
    2aa2:	37 07       	cpc	r19, r23
    2aa4:	a8 f4       	brcc	.+42     	; 0x2ad0 <realloc+0x17a>
    2aa6:	8d b7       	in	r24, 0x3d	; 61
    2aa8:	9e b7       	in	r25, 0x3e	; 62
    2aaa:	88 57       	subi	r24, 0x78	; 120
    2aac:	91 09       	sbc	r25, r1
    2aae:	a8 17       	cp	r26, r24
    2ab0:	b9 07       	cpc	r27, r25
    2ab2:	08 f0       	brcs	.+2      	; 0x2ab6 <realloc+0x160>
    2ab4:	76 cf       	rjmp	.-276    	; 0x29a2 <realloc+0x4c>
    2ab6:	b0 93 03 02 	sts	0x0203, r27
    2aba:	a0 93 02 02 	sts	0x0202, r26
    2abe:	b0 93 01 02 	sts	0x0201, r27
    2ac2:	a0 93 00 02 	sts	0x0200, r26
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	32 97       	sbiw	r30, 0x02	; 2
    2aca:	71 83       	std	Z+1, r23	; 0x01
    2acc:	60 83       	st	Z, r22
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <realloc+0x198>
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	0e 94 87 13 	call	0x270e	; 0x270e <malloc>
    2ad6:	7c 01       	movw	r14, r24
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	09 f4       	brne	.+2      	; 0x2ade <realloc+0x188>
    2adc:	62 cf       	rjmp	.-316    	; 0x29a2 <realloc+0x4c>
    2ade:	a8 01       	movw	r20, r16
    2ae0:	be 01       	movw	r22, r28
    2ae2:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
    2ae6:	ce 01       	movw	r24, r28
    2ae8:	0e 94 0d 14 	call	0x281a	; 0x281a <free>
    2aec:	e7 01       	movw	r28, r14
    2aee:	ce 01       	movw	r24, r28
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	ff 90       	pop	r15
    2afa:	ef 90       	pop	r14
    2afc:	df 90       	pop	r13
    2afe:	cf 90       	pop	r12
    2b00:	bf 90       	pop	r11
    2b02:	af 90       	pop	r10
    2b04:	9f 90       	pop	r9
    2b06:	8f 90       	pop	r8
    2b08:	08 95       	ret

00002b0a <_Znwj>:
    2b0a:	0c 94 87 13 	jmp	0x270e	; 0x270e <malloc>

00002b0e <_Znaj>:
    2b0e:	0c 94 87 13 	jmp	0x270e	; 0x270e <malloc>

00002b12 <_ZdlPv>:
    2b12:	0c 94 0d 14 	jmp	0x281a	; 0x281a <free>

00002b16 <_ZdaPv>:
    2b16:	0c 94 0d 14 	jmp	0x281a	; 0x281a <free>

00002b1a <__cxa_guard_acquire>:
    2b1a:	21 e0       	ldi	r18, 0x01	; 1
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	fc 01       	movw	r30, r24
    2b20:	80 81       	ld	r24, Z
    2b22:	88 23       	and	r24, r24
    2b24:	11 f0       	breq	.+4      	; 0x2b2a <__cxa_guard_acquire+0x10>
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	c9 01       	movw	r24, r18
    2b2c:	08 95       	ret

00002b2e <__cxa_guard_release>:
    2b2e:	21 e0       	ldi	r18, 0x01	; 1
    2b30:	fc 01       	movw	r30, r24
    2b32:	20 83       	st	Z, r18
    2b34:	08 95       	ret

00002b36 <__cxa_guard_abort>:
    2b36:	08 95       	ret

00002b38 <__cxa_pure_virtual>:
    2b38:	08 95       	ret

00002b3a <__vector_23>:
    2b3a:	1f 92       	push	r1
    2b3c:	0f 92       	push	r0
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	0f 92       	push	r0
    2b42:	11 24       	eor	r1, r1
    2b44:	2f 93       	push	r18
    2b46:	3f 93       	push	r19
    2b48:	8f 93       	push	r24
    2b4a:	9f 93       	push	r25
    2b4c:	af 93       	push	r26
    2b4e:	bf 93       	push	r27
    2b50:	80 91 2d 09 	lds	r24, 0x092D
    2b54:	90 91 2e 09 	lds	r25, 0x092E
    2b58:	a0 91 2f 09 	lds	r26, 0x092F
    2b5c:	b0 91 30 09 	lds	r27, 0x0930
    2b60:	30 91 35 09 	lds	r19, 0x0935
    2b64:	23 2f       	mov	r18, r19
    2b66:	2d 5f       	subi	r18, 0xFD	; 253
    2b68:	2d 37       	cpi	r18, 0x7D	; 125
    2b6a:	20 f4       	brcc	.+8      	; 0x2b74 <__vector_23+0x3a>
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	a1 1d       	adc	r26, r1
    2b70:	b1 1d       	adc	r27, r1
    2b72:	05 c0       	rjmp	.+10     	; 0x2b7e <__vector_23+0x44>
    2b74:	23 2f       	mov	r18, r19
    2b76:	2a 57       	subi	r18, 0x7A	; 122
    2b78:	02 96       	adiw	r24, 0x02	; 2
    2b7a:	a1 1d       	adc	r26, r1
    2b7c:	b1 1d       	adc	r27, r1
    2b7e:	20 93 35 09 	sts	0x0935, r18
    2b82:	80 93 2d 09 	sts	0x092D, r24
    2b86:	90 93 2e 09 	sts	0x092E, r25
    2b8a:	a0 93 2f 09 	sts	0x092F, r26
    2b8e:	b0 93 30 09 	sts	0x0930, r27
    2b92:	80 91 31 09 	lds	r24, 0x0931
    2b96:	90 91 32 09 	lds	r25, 0x0932
    2b9a:	a0 91 33 09 	lds	r26, 0x0933
    2b9e:	b0 91 34 09 	lds	r27, 0x0934
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	a1 1d       	adc	r26, r1
    2ba6:	b1 1d       	adc	r27, r1
    2ba8:	80 93 31 09 	sts	0x0931, r24
    2bac:	90 93 32 09 	sts	0x0932, r25
    2bb0:	a0 93 33 09 	sts	0x0933, r26
    2bb4:	b0 93 34 09 	sts	0x0934, r27
    2bb8:	bf 91       	pop	r27
    2bba:	af 91       	pop	r26
    2bbc:	9f 91       	pop	r25
    2bbe:	8f 91       	pop	r24
    2bc0:	3f 91       	pop	r19
    2bc2:	2f 91       	pop	r18
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <millis>:
    2bce:	0f 93       	push	r16
    2bd0:	1f 93       	push	r17
    2bd2:	8f b7       	in	r24, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	00 91 2d 09 	lds	r16, 0x092D
    2bda:	10 91 2e 09 	lds	r17, 0x092E
    2bde:	20 91 2f 09 	lds	r18, 0x092F
    2be2:	30 91 30 09 	lds	r19, 0x0930
    2be6:	8f bf       	out	0x3f, r24	; 63
    2be8:	b8 01       	movw	r22, r16
    2bea:	c9 01       	movw	r24, r18
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <micros>:
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	9f b7       	in	r25, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	00 91 31 09 	lds	r16, 0x0931
    2bfe:	10 91 32 09 	lds	r17, 0x0932
    2c02:	20 91 33 09 	lds	r18, 0x0933
    2c06:	30 91 34 09 	lds	r19, 0x0934
    2c0a:	86 b5       	in	r24, 0x26	; 38
    2c0c:	a8 9b       	sbis	0x15, 0	; 21
    2c0e:	06 c0       	rjmp	.+12     	; 0x2c1c <micros+0x2a>
    2c10:	8f 3f       	cpi	r24, 0xFF	; 255
    2c12:	21 f0       	breq	.+8      	; 0x2c1c <micros+0x2a>
    2c14:	0f 5f       	subi	r16, 0xFF	; 255
    2c16:	1f 4f       	sbci	r17, 0xFF	; 255
    2c18:	2f 4f       	sbci	r18, 0xFF	; 255
    2c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1c:	9f bf       	out	0x3f, r25	; 63
    2c1e:	32 2f       	mov	r19, r18
    2c20:	21 2f       	mov	r18, r17
    2c22:	10 2f       	mov	r17, r16
    2c24:	00 27       	eor	r16, r16
    2c26:	08 0f       	add	r16, r24
    2c28:	11 1d       	adc	r17, r1
    2c2a:	21 1d       	adc	r18, r1
    2c2c:	31 1d       	adc	r19, r1
    2c2e:	42 e0       	ldi	r20, 0x02	; 2
    2c30:	00 0f       	add	r16, r16
    2c32:	11 1f       	adc	r17, r17
    2c34:	22 1f       	adc	r18, r18
    2c36:	33 1f       	adc	r19, r19
    2c38:	4a 95       	dec	r20
    2c3a:	d1 f7       	brne	.-12     	; 0x2c30 <micros+0x3e>
    2c3c:	b8 01       	movw	r22, r16
    2c3e:	c9 01       	movw	r24, r18
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret

00002c46 <delay>:
    2c46:	cf 92       	push	r12
    2c48:	df 92       	push	r13
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	6b 01       	movw	r12, r22
    2c54:	7c 01       	movw	r14, r24
    2c56:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    2c5a:	eb 01       	movw	r28, r22
    2c5c:	10 c0       	rjmp	.+32     	; 0x2c7e <delay+0x38>
    2c5e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <yield>
    2c62:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    2c66:	6c 1b       	sub	r22, r28
    2c68:	7d 0b       	sbc	r23, r29
    2c6a:	68 3e       	cpi	r22, 0xE8	; 232
    2c6c:	73 40       	sbci	r23, 0x03	; 3
    2c6e:	38 f0       	brcs	.+14     	; 0x2c7e <delay+0x38>
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	c8 1a       	sub	r12, r24
    2c74:	d1 08       	sbc	r13, r1
    2c76:	e1 08       	sbc	r14, r1
    2c78:	f1 08       	sbc	r15, r1
    2c7a:	c8 51       	subi	r28, 0x18	; 24
    2c7c:	dc 4f       	sbci	r29, 0xFC	; 252
    2c7e:	c1 14       	cp	r12, r1
    2c80:	d1 04       	cpc	r13, r1
    2c82:	e1 04       	cpc	r14, r1
    2c84:	f1 04       	cpc	r15, r1
    2c86:	59 f7       	brne	.-42     	; 0x2c5e <delay+0x18>
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	ff 90       	pop	r15
    2c8e:	ef 90       	pop	r14
    2c90:	df 90       	pop	r13
    2c92:	cf 90       	pop	r12
    2c94:	08 95       	ret

00002c96 <delayMicroseconds>:
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	39 f0       	breq	.+14     	; 0x2ca8 <delayMicroseconds+0x12>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	02 97       	sbiw	r24, 0x02	; 2
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <delayMicroseconds+0xe>
    2ca8:	08 95       	ret

00002caa <init>:
    2caa:	78 94       	sei
    2cac:	84 b5       	in	r24, 0x24	; 36
    2cae:	82 60       	ori	r24, 0x02	; 2
    2cb0:	84 bd       	out	0x24, r24	; 36
    2cb2:	84 b5       	in	r24, 0x24	; 36
    2cb4:	81 60       	ori	r24, 0x01	; 1
    2cb6:	84 bd       	out	0x24, r24	; 36
    2cb8:	85 b5       	in	r24, 0x25	; 37
    2cba:	82 60       	ori	r24, 0x02	; 2
    2cbc:	85 bd       	out	0x25, r24	; 37
    2cbe:	85 b5       	in	r24, 0x25	; 37
    2cc0:	81 60       	ori	r24, 0x01	; 1
    2cc2:	85 bd       	out	0x25, r24	; 37
    2cc4:	ee e6       	ldi	r30, 0x6E	; 110
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	80 81       	ld	r24, Z
    2cca:	81 60       	ori	r24, 0x01	; 1
    2ccc:	80 83       	st	Z, r24
    2cce:	e1 e8       	ldi	r30, 0x81	; 129
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	10 82       	st	Z, r1
    2cd4:	80 81       	ld	r24, Z
    2cd6:	82 60       	ori	r24, 0x02	; 2
    2cd8:	80 83       	st	Z, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	81 60       	ori	r24, 0x01	; 1
    2cde:	80 83       	st	Z, r24
    2ce0:	e0 e8       	ldi	r30, 0x80	; 128
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	81 60       	ori	r24, 0x01	; 1
    2ce8:	80 83       	st	Z, r24
    2cea:	e1 eb       	ldi	r30, 0xB1	; 177
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	84 60       	ori	r24, 0x04	; 4
    2cf2:	80 83       	st	Z, r24
    2cf4:	e0 eb       	ldi	r30, 0xB0	; 176
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	81 60       	ori	r24, 0x01	; 1
    2cfc:	80 83       	st	Z, r24
    2cfe:	e1 e9       	ldi	r30, 0x91	; 145
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	82 60       	ori	r24, 0x02	; 2
    2d06:	80 83       	st	Z, r24
    2d08:	80 81       	ld	r24, Z
    2d0a:	81 60       	ori	r24, 0x01	; 1
    2d0c:	80 83       	st	Z, r24
    2d0e:	e0 e9       	ldi	r30, 0x90	; 144
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	81 60       	ori	r24, 0x01	; 1
    2d16:	80 83       	st	Z, r24
    2d18:	e1 ea       	ldi	r30, 0xA1	; 161
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	82 60       	ori	r24, 0x02	; 2
    2d20:	80 83       	st	Z, r24
    2d22:	80 81       	ld	r24, Z
    2d24:	81 60       	ori	r24, 0x01	; 1
    2d26:	80 83       	st	Z, r24
    2d28:	e0 ea       	ldi	r30, 0xA0	; 160
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	81 60       	ori	r24, 0x01	; 1
    2d30:	80 83       	st	Z, r24
    2d32:	e1 e2       	ldi	r30, 0x21	; 33
    2d34:	f1 e0       	ldi	r31, 0x01	; 1
    2d36:	80 81       	ld	r24, Z
    2d38:	82 60       	ori	r24, 0x02	; 2
    2d3a:	80 83       	st	Z, r24
    2d3c:	80 81       	ld	r24, Z
    2d3e:	81 60       	ori	r24, 0x01	; 1
    2d40:	80 83       	st	Z, r24
    2d42:	e0 e2       	ldi	r30, 0x20	; 32
    2d44:	f1 e0       	ldi	r31, 0x01	; 1
    2d46:	80 81       	ld	r24, Z
    2d48:	81 60       	ori	r24, 0x01	; 1
    2d4a:	80 83       	st	Z, r24
    2d4c:	ea e7       	ldi	r30, 0x7A	; 122
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	84 60       	ori	r24, 0x04	; 4
    2d54:	80 83       	st	Z, r24
    2d56:	80 81       	ld	r24, Z
    2d58:	82 60       	ori	r24, 0x02	; 2
    2d5a:	80 83       	st	Z, r24
    2d5c:	80 81       	ld	r24, Z
    2d5e:	81 60       	ori	r24, 0x01	; 1
    2d60:	80 83       	st	Z, r24
    2d62:	80 81       	ld	r24, Z
    2d64:	80 68       	ori	r24, 0x80	; 128
    2d66:	80 83       	st	Z, r24
    2d68:	10 92 c1 00 	sts	0x00C1, r1
    2d6c:	08 95       	ret

00002d6e <turnOffPWM>:
    2d6e:	89 30       	cpi	r24, 0x09	; 9
    2d70:	09 f4       	brne	.+2      	; 0x2d74 <turnOffPWM+0x6>
    2d72:	43 c0       	rjmp	.+134    	; 0x2dfa <turnOffPWM+0x8c>
    2d74:	88 f4       	brcc	.+34     	; 0x2d98 <turnOffPWM+0x2a>
    2d76:	84 30       	cpi	r24, 0x04	; 4
    2d78:	29 f1       	breq	.+74     	; 0x2dc4 <turnOffPWM+0x56>
    2d7a:	38 f4       	brcc	.+14     	; 0x2d8a <turnOffPWM+0x1c>
    2d7c:	82 30       	cpi	r24, 0x02	; 2
    2d7e:	59 f1       	breq	.+86     	; 0x2dd6 <turnOffPWM+0x68>
    2d80:	e8 f4       	brcc	.+58     	; 0x2dbc <turnOffPWM+0x4e>
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <turnOffPWM+0x1a>
    2d86:	5e c0       	rjmp	.+188    	; 0x2e44 <turnOffPWM+0xd6>
    2d88:	23 c0       	rjmp	.+70     	; 0x2dd0 <turnOffPWM+0x62>
    2d8a:	87 30       	cpi	r24, 0x07	; 7
    2d8c:	61 f1       	breq	.+88     	; 0x2de6 <turnOffPWM+0x78>
    2d8e:	88 f5       	brcc	.+98     	; 0x2df2 <turnOffPWM+0x84>
    2d90:	86 30       	cpi	r24, 0x06	; 6
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <turnOffPWM+0x28>
    2d94:	57 c0       	rjmp	.+174    	; 0x2e44 <turnOffPWM+0xd6>
    2d96:	23 c0       	rjmp	.+70     	; 0x2dde <turnOffPWM+0x70>
    2d98:	8d 30       	cpi	r24, 0x0D	; 13
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <turnOffPWM+0x30>
    2d9c:	40 c0       	rjmp	.+128    	; 0x2e1e <turnOffPWM+0xb0>
    2d9e:	20 f4       	brcc	.+8      	; 0x2da8 <turnOffPWM+0x3a>
    2da0:	8b 30       	cpi	r24, 0x0B	; 11
    2da2:	a9 f1       	breq	.+106    	; 0x2e0e <turnOffPWM+0xa0>
    2da4:	c0 f5       	brcc	.+112    	; 0x2e16 <turnOffPWM+0xa8>
    2da6:	2d c0       	rjmp	.+90     	; 0x2e02 <turnOffPWM+0x94>
    2da8:	80 31       	cpi	r24, 0x10	; 16
    2daa:	09 f4       	brne	.+2      	; 0x2dae <turnOffPWM+0x40>
    2dac:	42 c0       	rjmp	.+132    	; 0x2e32 <turnOffPWM+0xc4>
    2dae:	81 31       	cpi	r24, 0x11	; 17
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <turnOffPWM+0x46>
    2db2:	43 c0       	rjmp	.+134    	; 0x2e3a <turnOffPWM+0xcc>
    2db4:	8f 30       	cpi	r24, 0x0F	; 15
    2db6:	09 f0       	breq	.+2      	; 0x2dba <turnOffPWM+0x4c>
    2db8:	45 c0       	rjmp	.+138    	; 0x2e44 <turnOffPWM+0xd6>
    2dba:	37 c0       	rjmp	.+110    	; 0x2e2a <turnOffPWM+0xbc>
    2dbc:	80 91 80 00 	lds	r24, 0x0080
    2dc0:	8f 77       	andi	r24, 0x7F	; 127
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <turnOffPWM+0x5c>
    2dc4:	80 91 80 00 	lds	r24, 0x0080
    2dc8:	8f 7d       	andi	r24, 0xDF	; 223
    2dca:	80 93 80 00 	sts	0x0080, r24
    2dce:	08 95       	ret
    2dd0:	84 b5       	in	r24, 0x24	; 36
    2dd2:	8f 77       	andi	r24, 0x7F	; 127
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <turnOffPWM+0x6c>
    2dd6:	84 b5       	in	r24, 0x24	; 36
    2dd8:	8f 7d       	andi	r24, 0xDF	; 223
    2dda:	84 bd       	out	0x24, r24	; 36
    2ddc:	08 95       	ret
    2dde:	80 91 b0 00 	lds	r24, 0x00B0
    2de2:	8f 77       	andi	r24, 0x7F	; 127
    2de4:	03 c0       	rjmp	.+6      	; 0x2dec <turnOffPWM+0x7e>
    2de6:	80 91 b0 00 	lds	r24, 0x00B0
    2dea:	8f 7d       	andi	r24, 0xDF	; 223
    2dec:	80 93 b0 00 	sts	0x00B0, r24
    2df0:	08 95       	ret
    2df2:	80 91 90 00 	lds	r24, 0x0090
    2df6:	8f 77       	andi	r24, 0x7F	; 127
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <turnOffPWM+0x9a>
    2dfa:	80 91 90 00 	lds	r24, 0x0090
    2dfe:	8f 7d       	andi	r24, 0xDF	; 223
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <turnOffPWM+0x9a>
    2e02:	80 91 90 00 	lds	r24, 0x0090
    2e06:	87 7f       	andi	r24, 0xF7	; 247
    2e08:	80 93 90 00 	sts	0x0090, r24
    2e0c:	08 95       	ret
    2e0e:	80 91 a0 00 	lds	r24, 0x00A0
    2e12:	8f 77       	andi	r24, 0x7F	; 127
    2e14:	07 c0       	rjmp	.+14     	; 0x2e24 <turnOffPWM+0xb6>
    2e16:	80 91 a0 00 	lds	r24, 0x00A0
    2e1a:	8f 7d       	andi	r24, 0xDF	; 223
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <turnOffPWM+0xb6>
    2e1e:	80 91 a0 00 	lds	r24, 0x00A0
    2e22:	87 7f       	andi	r24, 0xF7	; 247
    2e24:	80 93 a0 00 	sts	0x00A0, r24
    2e28:	08 95       	ret
    2e2a:	80 91 20 01 	lds	r24, 0x0120
    2e2e:	8f 77       	andi	r24, 0x7F	; 127
    2e30:	07 c0       	rjmp	.+14     	; 0x2e40 <turnOffPWM+0xd2>
    2e32:	80 91 20 01 	lds	r24, 0x0120
    2e36:	8f 7d       	andi	r24, 0xDF	; 223
    2e38:	03 c0       	rjmp	.+6      	; 0x2e40 <turnOffPWM+0xd2>
    2e3a:	80 91 20 01 	lds	r24, 0x0120
    2e3e:	87 7f       	andi	r24, 0xF7	; 247
    2e40:	80 93 20 01 	sts	0x0120, r24
    2e44:	08 95       	ret

00002e46 <pinMode>:
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	eb 58       	subi	r30, 0x8B	; 139
    2e50:	fe 4f       	sbci	r31, 0xFE	; 254
    2e52:	44 91       	lpm	r20, Z+
    2e54:	fc 01       	movw	r30, r24
    2e56:	e5 54       	subi	r30, 0x45	; 69
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	84 91       	lpm	r24, Z+
    2e5c:	88 23       	and	r24, r24
    2e5e:	41 f1       	breq	.+80     	; 0x2eb0 <pinMode+0x6a>
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	fc 01       	movw	r30, r24
    2e68:	eb 5c       	subi	r30, 0xCB	; 203
    2e6a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e6c:	25 91       	lpm	r18, Z+
    2e6e:	34 91       	lpm	r19, Z+
    2e70:	d9 01       	movw	r26, r18
    2e72:	85 5e       	subi	r24, 0xE5	; 229
    2e74:	9d 4f       	sbci	r25, 0xFD	; 253
    2e76:	fc 01       	movw	r30, r24
    2e78:	85 91       	lpm	r24, Z+
    2e7a:	94 91       	lpm	r25, Z+
    2e7c:	c8 2f       	mov	r28, r24
    2e7e:	d9 2f       	mov	r29, r25
    2e80:	9f b7       	in	r25, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	8c 91       	ld	r24, X
    2e86:	61 11       	cpse	r22, r1
    2e88:	06 c0       	rjmp	.+12     	; 0x2e96 <pinMode+0x50>
    2e8a:	40 95       	com	r20
    2e8c:	84 23       	and	r24, r20
    2e8e:	8c 93       	st	X, r24
    2e90:	88 81       	ld	r24, Y
    2e92:	84 23       	and	r24, r20
    2e94:	08 c0       	rjmp	.+16     	; 0x2ea6 <pinMode+0x60>
    2e96:	62 30       	cpi	r22, 0x02	; 2
    2e98:	41 f4       	brne	.+16     	; 0x2eaa <pinMode+0x64>
    2e9a:	24 2f       	mov	r18, r20
    2e9c:	20 95       	com	r18
    2e9e:	82 23       	and	r24, r18
    2ea0:	8c 93       	st	X, r24
    2ea2:	88 81       	ld	r24, Y
    2ea4:	84 2b       	or	r24, r20
    2ea6:	88 83       	st	Y, r24
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <pinMode+0x68>
    2eaa:	84 2b       	or	r24, r20
    2eac:	8c 93       	st	X, r24
    2eae:	9f bf       	out	0x3f, r25	; 63
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	08 95       	ret

00002eb6 <digitalWrite>:
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	1f 92       	push	r1
    2ec0:	cd b7       	in	r28, 0x3d	; 61
    2ec2:	de b7       	in	r29, 0x3e	; 62
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	f9 01       	movw	r30, r18
    2eca:	e1 5d       	subi	r30, 0xD1	; 209
    2ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ece:	84 91       	lpm	r24, Z+
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	eb 58       	subi	r30, 0x8B	; 139
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	14 91       	lpm	r17, Z+
    2ed8:	f9 01       	movw	r30, r18
    2eda:	e5 54       	subi	r30, 0x45	; 69
    2edc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ede:	04 91       	lpm	r16, Z+
    2ee0:	00 23       	and	r16, r16
    2ee2:	d1 f0       	breq	.+52     	; 0x2f18 <digitalWrite+0x62>
    2ee4:	88 23       	and	r24, r24
    2ee6:	21 f0       	breq	.+8      	; 0x2ef0 <digitalWrite+0x3a>
    2ee8:	69 83       	std	Y+1, r22	; 0x01
    2eea:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <turnOffPWM>
    2eee:	69 81       	ldd	r22, Y+1	; 0x01
    2ef0:	e0 2f       	mov	r30, r16
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	ee 0f       	add	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	e5 5e       	subi	r30, 0xE5	; 229
    2efa:	fd 4f       	sbci	r31, 0xFD	; 253
    2efc:	85 91       	lpm	r24, Z+
    2efe:	94 91       	lpm	r25, Z+
    2f00:	dc 01       	movw	r26, r24
    2f02:	9f b7       	in	r25, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	8c 91       	ld	r24, X
    2f08:	61 11       	cpse	r22, r1
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <digitalWrite+0x5c>
    2f0c:	10 95       	com	r17
    2f0e:	81 23       	and	r24, r17
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <digitalWrite+0x5e>
    2f12:	81 2b       	or	r24, r17
    2f14:	8c 93       	st	X, r24
    2f16:	9f bf       	out	0x3f, r25	; 63
    2f18:	0f 90       	pop	r0
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	08 95       	ret

00002f24 <digitalRead>:
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	f9 01       	movw	r30, r18
    2f2e:	e1 5d       	subi	r30, 0xD1	; 209
    2f30:	fe 4f       	sbci	r31, 0xFE	; 254
    2f32:	84 91       	lpm	r24, Z+
    2f34:	f9 01       	movw	r30, r18
    2f36:	eb 58       	subi	r30, 0x8B	; 139
    2f38:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3a:	d4 91       	lpm	r29, Z+
    2f3c:	f9 01       	movw	r30, r18
    2f3e:	e5 54       	subi	r30, 0x45	; 69
    2f40:	fe 4f       	sbci	r31, 0xFE	; 254
    2f42:	c4 91       	lpm	r28, Z+
    2f44:	cc 23       	and	r28, r28
    2f46:	89 f0       	breq	.+34     	; 0x2f6a <digitalRead+0x46>
    2f48:	81 11       	cpse	r24, r1
    2f4a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <turnOffPWM>
    2f4e:	ec 2f       	mov	r30, r28
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	ee 0f       	add	r30, r30
    2f54:	ff 1f       	adc	r31, r31
    2f56:	ef 5f       	subi	r30, 0xFF	; 255
    2f58:	fd 4f       	sbci	r31, 0xFD	; 253
    2f5a:	85 91       	lpm	r24, Z+
    2f5c:	94 91       	lpm	r25, Z+
    2f5e:	dc 01       	movw	r26, r24
    2f60:	8c 91       	ld	r24, X
    2f62:	8d 23       	and	r24, r29
    2f64:	21 e0       	ldi	r18, 0x01	; 1
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	11 f4       	brne	.+4      	; 0x2f6e <digitalRead+0x4a>
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	c9 01       	movw	r24, r18
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	08 95       	ret

00002f76 <yield>:
    2f76:	08 95       	ret

00002f78 <_ZN7PString5writeEh>:
#if defined(ARDUINO) && ARDUINO >= 100
size_t PString::write(uint8_t b)
#else
void PString::write(uint8_t b)
#endif
{
    2f78:	fc 01       	movw	r30, r24
  if (_cur + 1 < _buf + _size)
    2f7a:	a6 81       	ldd	r26, Z+6	; 0x06
    2f7c:	b7 81       	ldd	r27, Z+7	; 0x07
    2f7e:	9d 01       	movw	r18, r26
    2f80:	2f 5f       	subi	r18, 0xFF	; 255
    2f82:	3f 4f       	sbci	r19, 0xFF	; 255
    2f84:	84 81       	ldd	r24, Z+4	; 0x04
    2f86:	95 81       	ldd	r25, Z+5	; 0x05
    2f88:	40 85       	ldd	r20, Z+8	; 0x08
    2f8a:	51 85       	ldd	r21, Z+9	; 0x09
    2f8c:	84 0f       	add	r24, r20
    2f8e:	95 1f       	adc	r25, r21
    2f90:	28 17       	cp	r18, r24
    2f92:	39 07       	cpc	r19, r25
    2f94:	40 f4       	brcc	.+16     	; 0x2fa6 <_ZN7PString5writeEh+0x2e>
  {
    *_cur++ = (char)b;
    2f96:	6c 93       	st	X, r22
    2f98:	37 83       	std	Z+7, r19	; 0x07
    2f9a:	26 83       	std	Z+6, r18	; 0x06
    *_cur = '\0';
    2f9c:	11 96       	adiw	r26, 0x01	; 1
    2f9e:	1c 92       	st	X, r1
#if defined(ARDUINO) && ARDUINO >= 100
		return 1;
    2fa0:	21 e0       	ldi	r18, 0x01	; 1
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <_ZN7PString5writeEh+0x32>
#endif
	}

#if defined(ARDUINO) && ARDUINO >= 100
	return 0;
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
#endif
}
    2faa:	c9 01       	movw	r24, r18
    2fac:	08 95       	ret

00002fae <_ZN7PString5beginEv>:
*/

#include "PString.h"

void PString::begin()
{
    2fae:	fc 01       	movw	r30, r24
  _cur = _buf;
    2fb0:	a4 81       	ldd	r26, Z+4	; 0x04
    2fb2:	b5 81       	ldd	r27, Z+5	; 0x05
    2fb4:	b7 83       	std	Z+7, r27	; 0x07
    2fb6:	a6 83       	std	Z+6, r26	; 0x06
  if (_size > 0)
    2fb8:	80 85       	ldd	r24, Z+8	; 0x08
    2fba:	91 85       	ldd	r25, Z+9	; 0x09
    2fbc:	89 2b       	or	r24, r25
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <_ZN7PString5beginEv+0x14>
    _buf[0] = '\0';
    2fc0:	1c 92       	st	X, r1
    2fc2:	08 95       	ret

00002fc4 <_ZN3PIDC1Ev>:
  #include "WProgram.h"
#endif

#include <PID_v1/PID_v1.h>

PID::PID(){};
    2fc4:	08 95       	ret

00002fc6 <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    2fc6:	2f 92       	push	r2
    2fc8:	3f 92       	push	r3
    2fca:	4f 92       	push	r4
    2fcc:	5f 92       	push	r5
    2fce:	6f 92       	push	r6
    2fd0:	7f 92       	push	r7
    2fd2:	8f 92       	push	r8
    2fd4:	9f 92       	push	r9
    2fd6:	af 92       	push	r10
    2fd8:	bf 92       	push	r11
    2fda:	cf 92       	push	r12
    2fdc:	df 92       	push	r13
    2fde:	ef 92       	push	r14
    2fe0:	ff 92       	push	r15
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	2a 97       	sbiw	r28, 0x0a	; 10
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	9a 87       	std	Y+10, r25	; 0x0a
    2ffc:	89 87       	std	Y+9, r24	; 0x09
   if(!inAuto) return;
    2ffe:	dc 01       	movw	r26, r24
    3000:	d6 96       	adiw	r26, 0x36	; 54
    3002:	8c 91       	ld	r24, X
    3004:	88 23       	and	r24, r24
    3006:	09 f4       	brne	.+2      	; 0x300a <_ZN3PID7ComputeEv+0x44>
    3008:	fa c0       	rjmp	.+500    	; 0x31fe <_ZN3PID7ComputeEv+0x238>
   unsigned long now = millis();
    300a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    300e:	69 83       	std	Y+1, r22	; 0x01
    3010:	7a 83       	std	Y+2, r23	; 0x02
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	9c 83       	std	Y+4, r25	; 0x04
   int timeChange = (now - lastTime);
    3016:	e9 85       	ldd	r30, Y+9	; 0x09
    3018:	fa 85       	ldd	r31, Y+10	; 0x0a
    301a:	80 a1       	ldd	r24, Z+32	; 0x20
    301c:	91 a1       	ldd	r25, Z+33	; 0x21
    301e:	29 81       	ldd	r18, Y+1	; 0x01
    3020:	3a 81       	ldd	r19, Y+2	; 0x02
    3022:	28 1b       	sub	r18, r24
    3024:	39 0b       	sbc	r19, r25
   if(timeChange>=SampleTime)
    3026:	84 a5       	ldd	r24, Z+44	; 0x2c
    3028:	95 a5       	ldd	r25, Z+45	; 0x2d
    302a:	28 17       	cp	r18, r24
    302c:	39 07       	cpc	r19, r25
    302e:	0c f4       	brge	.+2      	; 0x3032 <_ZN3PID7ComputeEv+0x6c>
    3030:	e6 c0       	rjmp	.+460    	; 0x31fe <_ZN3PID7ComputeEv+0x238>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    3032:	02 8c       	ldd	r0, Z+26	; 0x1a
    3034:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3036:	e0 2d       	mov	r30, r0
    3038:	c0 80       	ld	r12, Z
    303a:	d1 80       	ldd	r13, Z+1	; 0x01
    303c:	e2 80       	ldd	r14, Z+2	; 0x02
    303e:	f3 80       	ldd	r15, Z+3	; 0x03
      double error = *mySetpoint - input;
    3040:	a9 85       	ldd	r26, Y+9	; 0x09
    3042:	ba 85       	ldd	r27, Y+10	; 0x0a
    3044:	5e 96       	adiw	r26, 0x1e	; 30
    3046:	ed 91       	ld	r30, X+
    3048:	fc 91       	ld	r31, X
    304a:	5f 97       	sbiw	r26, 0x1f	; 31
    304c:	a7 01       	movw	r20, r14
    304e:	96 01       	movw	r18, r12
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    305c:	6d 83       	std	Y+5, r22	; 0x05
    305e:	7e 83       	std	Y+6, r23	; 0x06
    3060:	8f 83       	std	Y+7, r24	; 0x07
    3062:	98 87       	std	Y+8, r25	; 0x08
      ITerm+= (ki * error);
    3064:	e9 85       	ldd	r30, Y+9	; 0x09
    3066:	fa 85       	ldd	r31, Y+10	; 0x0a
    3068:	20 89       	ldd	r18, Z+16	; 0x10
    306a:	31 89       	ldd	r19, Z+17	; 0x11
    306c:	42 89       	ldd	r20, Z+18	; 0x12
    306e:	53 89       	ldd	r21, Z+19	; 0x13
    3070:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    3074:	a9 85       	ldd	r26, Y+9	; 0x09
    3076:	ba 85       	ldd	r27, Y+10	; 0x0a
    3078:	94 96       	adiw	r26, 0x24	; 36
    307a:	2d 91       	ld	r18, X+
    307c:	3d 91       	ld	r19, X+
    307e:	4d 91       	ld	r20, X+
    3080:	5c 91       	ld	r21, X
    3082:	97 97       	sbiw	r26, 0x27	; 39
    3084:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    3088:	56 2e       	mov	r5, r22
    308a:	67 2e       	mov	r6, r23
    308c:	78 2e       	mov	r7, r24
    308e:	09 2f       	mov	r16, r25
    3090:	98 2f       	mov	r25, r24
    3092:	45 2d       	mov	r20, r5
    3094:	56 2d       	mov	r21, r6
    3096:	69 2f       	mov	r22, r25
    3098:	70 2f       	mov	r23, r16
    309a:	e9 85       	ldd	r30, Y+9	; 0x09
    309c:	fa 85       	ldd	r31, Y+10	; 0x0a
    309e:	44 a3       	std	Z+36, r20	; 0x24
    30a0:	55 a3       	std	Z+37, r21	; 0x25
    30a2:	66 a3       	std	Z+38, r22	; 0x26
    30a4:	77 a3       	std	Z+39, r23	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    30a6:	22 a8       	ldd	r2, Z+50	; 0x32
    30a8:	13 a9       	ldd	r17, Z+51	; 0x33
    30aa:	34 a8       	ldd	r3, Z+52	; 0x34
    30ac:	45 a8       	ldd	r4, Z+53	; 0x35
    30ae:	22 2d       	mov	r18, r2
    30b0:	31 2f       	mov	r19, r17
    30b2:	43 2d       	mov	r20, r3
    30b4:	54 2d       	mov	r21, r4
    30b6:	65 2d       	mov	r22, r5
    30b8:	76 2d       	mov	r23, r6
    30ba:	87 2d       	mov	r24, r7
    30bc:	90 2f       	mov	r25, r16
    30be:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    30c2:	18 16       	cp	r1, r24
    30c4:	6c f4       	brge	.+26     	; 0x30e0 <_ZN3PID7ComputeEv+0x11a>
    30c6:	42 2d       	mov	r20, r2
    30c8:	51 2f       	mov	r21, r17
    30ca:	63 2d       	mov	r22, r3
    30cc:	74 2d       	mov	r23, r4
    30ce:	a9 85       	ldd	r26, Y+9	; 0x09
    30d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    30d2:	94 96       	adiw	r26, 0x24	; 36
    30d4:	4d 93       	st	X+, r20
    30d6:	5d 93       	st	X+, r21
    30d8:	6d 93       	st	X+, r22
    30da:	7c 93       	st	X, r23
    30dc:	97 97       	sbiw	r26, 0x27	; 39
    30de:	18 c0       	rjmp	.+48     	; 0x3110 <_ZN3PID7ComputeEv+0x14a>
      else if(ITerm < outMin) ITerm= outMin;
    30e0:	e9 85       	ldd	r30, Y+9	; 0x09
    30e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    30e4:	86 a4       	ldd	r8, Z+46	; 0x2e
    30e6:	97 a4       	ldd	r9, Z+47	; 0x2f
    30e8:	a0 a8       	ldd	r10, Z+48	; 0x30
    30ea:	b1 a8       	ldd	r11, Z+49	; 0x31
    30ec:	a5 01       	movw	r20, r10
    30ee:	94 01       	movw	r18, r8
    30f0:	65 2d       	mov	r22, r5
    30f2:	76 2d       	mov	r23, r6
    30f4:	87 2d       	mov	r24, r7
    30f6:	90 2f       	mov	r25, r16
    30f8:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    30fc:	87 ff       	sbrs	r24, 7
    30fe:	08 c0       	rjmp	.+16     	; 0x3110 <_ZN3PID7ComputeEv+0x14a>
    3100:	a9 85       	ldd	r26, Y+9	; 0x09
    3102:	ba 85       	ldd	r27, Y+10	; 0x0a
    3104:	94 96       	adiw	r26, 0x24	; 36
    3106:	8d 92       	st	X+, r8
    3108:	9d 92       	st	X+, r9
    310a:	ad 92       	st	X+, r10
    310c:	bc 92       	st	X, r11
    310e:	97 97       	sbiw	r26, 0x27	; 39
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    3110:	e9 85       	ldd	r30, Y+9	; 0x09
    3112:	fa 85       	ldd	r31, Y+10	; 0x0a
    3114:	24 85       	ldd	r18, Z+12	; 0x0c
    3116:	35 85       	ldd	r19, Z+13	; 0x0d
    3118:	46 85       	ldd	r20, Z+14	; 0x0e
    311a:	57 85       	ldd	r21, Z+15	; 0x0f
    311c:	bd 81       	ldd	r27, Y+5	; 0x05
    311e:	ae 81       	ldd	r26, Y+6	; 0x06
    3120:	0f 81       	ldd	r16, Y+7	; 0x07
    3122:	b8 84       	ldd	r11, Y+8	; 0x08
    3124:	6b 2f       	mov	r22, r27
    3126:	7a 2f       	mov	r23, r26
    3128:	80 2f       	mov	r24, r16
    312a:	9b 2d       	mov	r25, r11
    312c:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    3130:	a9 85       	ldd	r26, Y+9	; 0x09
    3132:	ba 85       	ldd	r27, Y+10	; 0x0a
    3134:	94 96       	adiw	r26, 0x24	; 36
    3136:	2d 91       	ld	r18, X+
    3138:	3d 91       	ld	r19, X+
    313a:	4d 91       	ld	r20, X+
    313c:	5c 91       	ld	r21, X
    313e:	97 97       	sbiw	r26, 0x27	; 39
    3140:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    3144:	4b 01       	movw	r8, r22
    3146:	5c 01       	movw	r10, r24
	  double input = *myInput;
      double error = *mySetpoint - input;
      ITerm+= (ki * error);
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
    3148:	e9 85       	ldd	r30, Y+9	; 0x09
    314a:	fa 85       	ldd	r31, Y+10	; 0x0a
    314c:	20 a5       	ldd	r18, Z+40	; 0x28
    314e:	31 a5       	ldd	r19, Z+41	; 0x29
    3150:	42 a5       	ldd	r20, Z+42	; 0x2a
    3152:	53 a5       	ldd	r21, Z+43	; 0x2b
    3154:	c7 01       	movw	r24, r14
    3156:	b6 01       	movw	r22, r12
    3158:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    315c:	a9 85       	ldd	r26, Y+9	; 0x09
    315e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3160:	54 96       	adiw	r26, 0x14	; 20
    3162:	2d 91       	ld	r18, X+
    3164:	3d 91       	ld	r19, X+
    3166:	4d 91       	ld	r20, X+
    3168:	5c 91       	ld	r21, X
    316a:	57 97       	sbiw	r26, 0x17	; 23
    316c:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    3170:	9b 01       	movw	r18, r22
    3172:	ac 01       	movw	r20, r24
    3174:	c5 01       	movw	r24, r10
    3176:	b4 01       	movw	r22, r8
    3178:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    317c:	96 2e       	mov	r9, r22
    317e:	a7 2e       	mov	r10, r23
    3180:	b8 2e       	mov	r11, r24
    3182:	09 2f       	mov	r16, r25
      
	  if(output > outMax) output = outMax;
    3184:	22 2d       	mov	r18, r2
    3186:	31 2f       	mov	r19, r17
    3188:	43 2d       	mov	r20, r3
    318a:	54 2d       	mov	r21, r4
    318c:	69 2d       	mov	r22, r9
    318e:	7a 2d       	mov	r23, r10
    3190:	8b 2d       	mov	r24, r11
    3192:	90 2f       	mov	r25, r16
    3194:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    3198:	18 16       	cp	r1, r24
    319a:	b4 f0       	brlt	.+44     	; 0x31c8 <_ZN3PID7ComputeEv+0x202>
      else if(output < outMin) output = outMin;
    319c:	e9 85       	ldd	r30, Y+9	; 0x09
    319e:	fa 85       	ldd	r31, Y+10	; 0x0a
    31a0:	26 a4       	ldd	r2, Z+46	; 0x2e
    31a2:	17 a5       	ldd	r17, Z+47	; 0x2f
    31a4:	30 a8       	ldd	r3, Z+48	; 0x30
    31a6:	41 a8       	ldd	r4, Z+49	; 0x31
    31a8:	22 2d       	mov	r18, r2
    31aa:	31 2f       	mov	r19, r17
    31ac:	43 2d       	mov	r20, r3
    31ae:	54 2d       	mov	r21, r4
    31b0:	69 2d       	mov	r22, r9
    31b2:	7a 2d       	mov	r23, r10
    31b4:	8b 2d       	mov	r24, r11
    31b6:	90 2f       	mov	r25, r16
    31b8:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    31bc:	87 fd       	sbrc	r24, 7
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <_ZN3PID7ComputeEv+0x202>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    31c0:	29 2c       	mov	r2, r9
    31c2:	1a 2d       	mov	r17, r10
    31c4:	3b 2c       	mov	r3, r11
    31c6:	40 2e       	mov	r4, r16
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    31c8:	a9 85       	ldd	r26, Y+9	; 0x09
    31ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    31cc:	5c 96       	adiw	r26, 0x1c	; 28
    31ce:	ed 91       	ld	r30, X+
    31d0:	fc 91       	ld	r31, X
    31d2:	5d 97       	sbiw	r26, 0x1d	; 29
    31d4:	42 2d       	mov	r20, r2
    31d6:	51 2f       	mov	r21, r17
    31d8:	63 2d       	mov	r22, r3
    31da:	74 2d       	mov	r23, r4
    31dc:	40 83       	st	Z, r20
    31de:	51 83       	std	Z+1, r21	; 0x01
    31e0:	62 83       	std	Z+2, r22	; 0x02
    31e2:	73 83       	std	Z+3, r23	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    31e4:	fd 01       	movw	r30, r26
    31e6:	c0 a6       	std	Z+40, r12	; 0x28
    31e8:	d1 a6       	std	Z+41, r13	; 0x29
    31ea:	e2 a6       	std	Z+42, r14	; 0x2a
    31ec:	f3 a6       	std	Z+43, r15	; 0x2b
      lastTime = now;
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	ab 81       	ldd	r26, Y+3	; 0x03
    31f4:	bc 81       	ldd	r27, Y+4	; 0x04
    31f6:	80 a3       	std	Z+32, r24	; 0x20
    31f8:	91 a3       	std	Z+33, r25	; 0x21
    31fa:	a2 a3       	std	Z+34, r26	; 0x22
    31fc:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    31fe:	2a 96       	adiw	r28, 0x0a	; 10
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
    321a:	bf 90       	pop	r11
    321c:	af 90       	pop	r10
    321e:	9f 90       	pop	r9
    3220:	8f 90       	pop	r8
    3222:	7f 90       	pop	r7
    3224:	6f 90       	pop	r6
    3226:	5f 90       	pop	r5
    3228:	4f 90       	pop	r4
    322a:	3f 90       	pop	r3
    322c:	2f 90       	pop	r2
    322e:	08 95       	ret

00003230 <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    3230:	2f 92       	push	r2
    3232:	3f 92       	push	r3
    3234:	4f 92       	push	r4
    3236:	5f 92       	push	r5
    3238:	6f 92       	push	r6
    323a:	7f 92       	push	r7
    323c:	8f 92       	push	r8
    323e:	9f 92       	push	r9
    3240:	af 92       	push	r10
    3242:	bf 92       	push	r11
    3244:	cf 92       	push	r12
    3246:	df 92       	push	r13
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	1c 01       	movw	r2, r24
    3256:	4a 01       	movw	r8, r20
    3258:	5b 01       	movw	r10, r22
    325a:	28 01       	movw	r4, r16
    325c:	39 01       	movw	r6, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	a9 01       	movw	r20, r18
    3264:	c5 01       	movw	r24, r10
    3266:	b4 01       	movw	r22, r8
    3268:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    326c:	87 fd       	sbrc	r24, 7
    326e:	8e c0       	rjmp	.+284    	; 0x338c <_ZN3PID10SetTuningsEddd+0x15c>
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	a9 01       	movw	r20, r18
    3276:	c3 01       	movw	r24, r6
    3278:	b2 01       	movw	r22, r4
    327a:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    327e:	87 fd       	sbrc	r24, 7
    3280:	85 c0       	rjmp	.+266    	; 0x338c <_ZN3PID10SetTuningsEddd+0x15c>
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	a9 01       	movw	r20, r18
    3288:	c7 01       	movw	r24, r14
    328a:	b6 01       	movw	r22, r12
    328c:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    3290:	87 fd       	sbrc	r24, 7
    3292:	7c c0       	rjmp	.+248    	; 0x338c <_ZN3PID10SetTuningsEddd+0x15c>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    3294:	f1 01       	movw	r30, r2
    3296:	80 82       	st	Z, r8
    3298:	91 82       	std	Z+1, r9	; 0x01
    329a:	a2 82       	std	Z+2, r10	; 0x02
    329c:	b3 82       	std	Z+3, r11	; 0x03
    329e:	44 82       	std	Z+4, r4	; 0x04
    32a0:	55 82       	std	Z+5, r5	; 0x05
    32a2:	66 82       	std	Z+6, r6	; 0x06
    32a4:	77 82       	std	Z+7, r7	; 0x07
    32a6:	c0 86       	std	Z+8, r12	; 0x08
    32a8:	d1 86       	std	Z+9, r13	; 0x09
    32aa:	e2 86       	std	Z+10, r14	; 0x0a
    32ac:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    32ae:	64 a5       	ldd	r22, Z+44	; 0x2c
    32b0:	75 a5       	ldd	r23, Z+45	; 0x2d
    32b2:	88 27       	eor	r24, r24
    32b4:	77 fd       	sbrc	r23, 7
    32b6:	80 95       	com	r24
    32b8:	98 2f       	mov	r25, r24
    32ba:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	4a e7       	ldi	r20, 0x7A	; 122
    32c4:	54 e4       	ldi	r21, 0x44	; 68
    32c6:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    32ca:	d6 2f       	mov	r29, r22
    32cc:	c7 2f       	mov	r28, r23
    32ce:	8c 01       	movw	r16, r24
   kp = Kp;
    32d0:	f1 01       	movw	r30, r2
    32d2:	84 86       	std	Z+12, r8	; 0x0c
    32d4:	95 86       	std	Z+13, r9	; 0x0d
    32d6:	a6 86       	std	Z+14, r10	; 0x0e
    32d8:	b7 86       	std	Z+15, r11	; 0x0f
   ki = Ki * SampleTimeInSec;
    32da:	be 01       	movw	r22, r28
    32dc:	98 2f       	mov	r25, r24
    32de:	27 2f       	mov	r18, r23
    32e0:	36 2f       	mov	r19, r22
    32e2:	49 2f       	mov	r20, r25
    32e4:	51 2f       	mov	r21, r17
    32e6:	c3 01       	movw	r24, r6
    32e8:	b2 01       	movw	r22, r4
    32ea:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    32ee:	2b 01       	movw	r4, r22
    32f0:	3c 01       	movw	r6, r24
    32f2:	98 2f       	mov	r25, r24
    32f4:	44 2d       	mov	r20, r4
    32f6:	55 2d       	mov	r21, r5
    32f8:	69 2f       	mov	r22, r25
    32fa:	77 2d       	mov	r23, r7
    32fc:	f1 01       	movw	r30, r2
    32fe:	40 8b       	std	Z+16, r20	; 0x10
    3300:	51 8b       	std	Z+17, r21	; 0x11
    3302:	62 8b       	std	Z+18, r22	; 0x12
    3304:	73 8b       	std	Z+19, r23	; 0x13
   kd = Kd / SampleTimeInSec;
    3306:	be 01       	movw	r22, r28
    3308:	27 2f       	mov	r18, r23
    330a:	36 2f       	mov	r19, r22
    330c:	40 2f       	mov	r20, r16
    330e:	51 2f       	mov	r21, r17
    3310:	c7 01       	movw	r24, r14
    3312:	b6 01       	movw	r22, r12
    3314:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    3318:	7b 01       	movw	r14, r22
    331a:	d8 2f       	mov	r29, r24
    331c:	c9 2f       	mov	r28, r25
    331e:	ce 01       	movw	r24, r28
    3320:	0e 2d       	mov	r16, r14
    3322:	1f 2d       	mov	r17, r15
    3324:	29 2f       	mov	r18, r25
    3326:	38 2f       	mov	r19, r24
    3328:	f1 01       	movw	r30, r2
    332a:	04 8b       	std	Z+20, r16	; 0x14
    332c:	15 8b       	std	Z+21, r17	; 0x15
    332e:	26 8b       	std	Z+22, r18	; 0x16
    3330:	37 8b       	std	Z+23, r19	; 0x17
 
  if(controllerDirection ==REVERSE)
    3332:	80 8d       	ldd	r24, Z+24	; 0x18
    3334:	91 8d       	ldd	r25, Z+25	; 0x19
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	49 f5       	brne	.+82     	; 0x338c <_ZN3PID10SetTuningsEddd+0x15c>
   {
      kp = (0 - kp);
    333a:	a5 01       	movw	r20, r10
    333c:	94 01       	movw	r18, r8
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	cb 01       	movw	r24, r22
    3344:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3348:	f1 01       	movw	r30, r2
    334a:	64 87       	std	Z+12, r22	; 0x0c
    334c:	75 87       	std	Z+13, r23	; 0x0d
    334e:	86 87       	std	Z+14, r24	; 0x0e
    3350:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    3352:	24 2d       	mov	r18, r4
    3354:	35 2d       	mov	r19, r5
    3356:	46 2d       	mov	r20, r6
    3358:	57 2d       	mov	r21, r7
    335a:	60 e0       	ldi	r22, 0x00	; 0
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	cb 01       	movw	r24, r22
    3360:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3364:	f1 01       	movw	r30, r2
    3366:	60 8b       	std	Z+16, r22	; 0x10
    3368:	71 8b       	std	Z+17, r23	; 0x11
    336a:	82 8b       	std	Z+18, r24	; 0x12
    336c:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    336e:	ce 01       	movw	r24, r28
    3370:	20 2f       	mov	r18, r16
    3372:	31 2f       	mov	r19, r17
    3374:	49 2f       	mov	r20, r25
    3376:	58 2f       	mov	r21, r24
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	70 e0       	ldi	r23, 0x00	; 0
    337c:	cb 01       	movw	r24, r22
    337e:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3382:	f1 01       	movw	r30, r2
    3384:	64 8b       	std	Z+20, r22	; 0x14
    3386:	75 8b       	std	Z+21, r23	; 0x15
    3388:	86 8b       	std	Z+22, r24	; 0x16
    338a:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	cf 90       	pop	r12
    339c:	bf 90       	pop	r11
    339e:	af 90       	pop	r10
    33a0:	9f 90       	pop	r9
    33a2:	8f 90       	pop	r8
    33a4:	7f 90       	pop	r7
    33a6:	6f 90       	pop	r6
    33a8:	5f 90       	pop	r5
    33aa:	4f 90       	pop	r4
    33ac:	3f 90       	pop	r3
    33ae:	2f 90       	pop	r2
    33b0:	08 95       	ret

000033b2 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    33b2:	cf 92       	push	r12
    33b4:	df 92       	push	r13
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	ec 01       	movw	r28, r24
    33c4:	8b 01       	movw	r16, r22
   if (NewSampleTime > 0)
    33c6:	16 16       	cp	r1, r22
    33c8:	17 06       	cpc	r1, r23
    33ca:	bc f5       	brge	.+110    	; 0x343a <_ZN3PID13SetSampleTimeEi+0x88>
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    33cc:	88 27       	eor	r24, r24
    33ce:	77 fd       	sbrc	r23, 7
    33d0:	80 95       	com	r24
    33d2:	98 2f       	mov	r25, r24
    33d4:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    33d8:	6b 01       	movw	r12, r22
    33da:	7c 01       	movw	r14, r24
    33dc:	6c a5       	ldd	r22, Y+44	; 0x2c
    33de:	7d a5       	ldd	r23, Y+45	; 0x2d
    33e0:	88 27       	eor	r24, r24
    33e2:	77 fd       	sbrc	r23, 7
    33e4:	80 95       	com	r24
    33e6:	98 2f       	mov	r25, r24
    33e8:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    33ec:	9b 01       	movw	r18, r22
    33ee:	ac 01       	movw	r20, r24
    33f0:	c7 01       	movw	r24, r14
    33f2:	b6 01       	movw	r22, r12
    33f4:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    33f8:	6b 01       	movw	r12, r22
    33fa:	7c 01       	movw	r14, r24
      ki *= ratio;
    33fc:	76 2f       	mov	r23, r22
    33fe:	27 2f       	mov	r18, r23
    3400:	3d 2d       	mov	r19, r13
    3402:	4e 2d       	mov	r20, r14
    3404:	5f 2d       	mov	r21, r15
    3406:	68 89       	ldd	r22, Y+16	; 0x10
    3408:	79 89       	ldd	r23, Y+17	; 0x11
    340a:	8a 89       	ldd	r24, Y+18	; 0x12
    340c:	9b 89       	ldd	r25, Y+19	; 0x13
    340e:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    3412:	68 8b       	std	Y+16, r22	; 0x10
    3414:	79 8b       	std	Y+17, r23	; 0x11
    3416:	8a 8b       	std	Y+18, r24	; 0x12
    3418:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    341a:	2c 2d       	mov	r18, r12
    341c:	3d 2d       	mov	r19, r13
    341e:	4e 2d       	mov	r20, r14
    3420:	5f 2d       	mov	r21, r15
    3422:	6c 89       	ldd	r22, Y+20	; 0x14
    3424:	7d 89       	ldd	r23, Y+21	; 0x15
    3426:	8e 89       	ldd	r24, Y+22	; 0x16
    3428:	9f 89       	ldd	r25, Y+23	; 0x17
    342a:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    342e:	6c 8b       	std	Y+20, r22	; 0x14
    3430:	7d 8b       	std	Y+21, r23	; 0x15
    3432:	8e 8b       	std	Y+22, r24	; 0x16
    3434:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    3436:	1d a7       	std	Y+45, r17	; 0x2d
    3438:	0c a7       	std	Y+44, r16	; 0x2c
   }
}
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	ff 90       	pop	r15
    3444:	ef 90       	pop	r14
    3446:	df 90       	pop	r13
    3448:	cf 90       	pop	r12
    344a:	08 95       	ret

0000344c <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    344c:	4f 92       	push	r4
    344e:	5f 92       	push	r5
    3450:	6f 92       	push	r6
    3452:	7f 92       	push	r7
    3454:	8f 92       	push	r8
    3456:	9f 92       	push	r9
    3458:	af 92       	push	r10
    345a:	bf 92       	push	r11
    345c:	cf 92       	push	r12
    345e:	df 92       	push	r13
    3460:	ef 92       	push	r14
    3462:	ff 92       	push	r15
    3464:	0f 93       	push	r16
    3466:	1f 93       	push	r17
    3468:	cf 93       	push	r28
    346a:	df 93       	push	r29
    346c:	ec 01       	movw	r28, r24
    346e:	6a 01       	movw	r12, r20
    3470:	7b 01       	movw	r14, r22
    3472:	48 01       	movw	r8, r16
    3474:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    3476:	a9 01       	movw	r20, r18
    3478:	98 01       	movw	r18, r16
    347a:	c7 01       	movw	r24, r14
    347c:	b6 01       	movw	r22, r12
    347e:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    3482:	87 ff       	sbrs	r24, 7
    3484:	4f c0       	rjmp	.+158    	; 0x3524 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   outMin = Min;
    3486:	ce a6       	std	Y+46, r12	; 0x2e
    3488:	df a6       	std	Y+47, r13	; 0x2f
    348a:	e8 aa       	std	Y+48, r14	; 0x30
    348c:	f9 aa       	std	Y+49, r15	; 0x31
   outMax = Max;
    348e:	8a aa       	std	Y+50, r8	; 0x32
    3490:	9b aa       	std	Y+51, r9	; 0x33
    3492:	ac aa       	std	Y+52, r10	; 0x34
    3494:	bd aa       	std	Y+53, r11	; 0x35
 
   if(inAuto)
    3496:	8e a9       	ldd	r24, Y+54	; 0x36
    3498:	88 23       	and	r24, r24
    349a:	09 f4       	brne	.+2      	; 0x349e <_ZN3PID15SetOutputLimitsEdd+0x52>
    349c:	43 c0       	rjmp	.+134    	; 0x3524 <_ZN3PID15SetOutputLimitsEdd+0xd8>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    349e:	0c 8d       	ldd	r16, Y+28	; 0x1c
    34a0:	1d 8d       	ldd	r17, Y+29	; 0x1d
    34a2:	f8 01       	movw	r30, r16
    34a4:	40 80       	ld	r4, Z
    34a6:	51 80       	ldd	r5, Z+1	; 0x01
    34a8:	62 80       	ldd	r6, Z+2	; 0x02
    34aa:	73 80       	ldd	r7, Z+3	; 0x03
    34ac:	a5 01       	movw	r20, r10
    34ae:	94 01       	movw	r18, r8
    34b0:	c3 01       	movw	r24, r6
    34b2:	b2 01       	movw	r22, r4
    34b4:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    34b8:	18 16       	cp	r1, r24
    34ba:	34 f4       	brge	.+12     	; 0x34c8 <_ZN3PID15SetOutputLimitsEdd+0x7c>
    34bc:	f8 01       	movw	r30, r16
    34be:	80 82       	st	Z, r8
    34c0:	91 82       	std	Z+1, r9	; 0x01
    34c2:	a2 82       	std	Z+2, r10	; 0x02
    34c4:	b3 82       	std	Z+3, r11	; 0x03
    34c6:	0d c0       	rjmp	.+26     	; 0x34e2 <_ZN3PID15SetOutputLimitsEdd+0x96>
	   else if(*myOutput < outMin) *myOutput = outMin;
    34c8:	a7 01       	movw	r20, r14
    34ca:	96 01       	movw	r18, r12
    34cc:	c3 01       	movw	r24, r6
    34ce:	b2 01       	movw	r22, r4
    34d0:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    34d4:	87 ff       	sbrs	r24, 7
    34d6:	05 c0       	rjmp	.+10     	; 0x34e2 <_ZN3PID15SetOutputLimitsEdd+0x96>
    34d8:	f8 01       	movw	r30, r16
    34da:	c0 82       	st	Z, r12
    34dc:	d1 82       	std	Z+1, r13	; 0x01
    34de:	e2 82       	std	Z+2, r14	; 0x02
    34e0:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    34e2:	8c a0       	ldd	r8, Y+36	; 0x24
    34e4:	9d a0       	ldd	r9, Y+37	; 0x25
    34e6:	ae a0       	ldd	r10, Y+38	; 0x26
    34e8:	bf a0       	ldd	r11, Y+39	; 0x27
    34ea:	ca a8       	ldd	r12, Y+50	; 0x32
    34ec:	db a8       	ldd	r13, Y+51	; 0x33
    34ee:	ec a8       	ldd	r14, Y+52	; 0x34
    34f0:	fd a8       	ldd	r15, Y+53	; 0x35
    34f2:	a7 01       	movw	r20, r14
    34f4:	96 01       	movw	r18, r12
    34f6:	c5 01       	movw	r24, r10
    34f8:	b4 01       	movw	r22, r8
    34fa:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    34fe:	18 16       	cp	r1, r24
    3500:	0c f4       	brge	.+2      	; 0x3504 <_ZN3PID15SetOutputLimitsEdd+0xb8>
    3502:	0c c0       	rjmp	.+24     	; 0x351c <_ZN3PID15SetOutputLimitsEdd+0xd0>
	   else if(ITerm < outMin) ITerm= outMin;
    3504:	ce a4       	ldd	r12, Y+46	; 0x2e
    3506:	df a4       	ldd	r13, Y+47	; 0x2f
    3508:	e8 a8       	ldd	r14, Y+48	; 0x30
    350a:	f9 a8       	ldd	r15, Y+49	; 0x31
    350c:	a7 01       	movw	r20, r14
    350e:	96 01       	movw	r18, r12
    3510:	c5 01       	movw	r24, r10
    3512:	b4 01       	movw	r22, r8
    3514:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    3518:	87 ff       	sbrs	r24, 7
    351a:	04 c0       	rjmp	.+8      	; 0x3524 <_ZN3PID15SetOutputLimitsEdd+0xd8>
    351c:	cc a2       	std	Y+36, r12	; 0x24
    351e:	dd a2       	std	Y+37, r13	; 0x25
    3520:	ee a2       	std	Y+38, r14	; 0x26
    3522:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	ff 90       	pop	r15
    352e:	ef 90       	pop	r14
    3530:	df 90       	pop	r13
    3532:	cf 90       	pop	r12
    3534:	bf 90       	pop	r11
    3536:	af 90       	pop	r10
    3538:	9f 90       	pop	r9
    353a:	8f 90       	pop	r8
    353c:	7f 90       	pop	r7
    353e:	6f 90       	pop	r6
    3540:	5f 90       	pop	r5
    3542:	4f 90       	pop	r4
    3544:	08 95       	ret

00003546 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    3546:	8f 92       	push	r8
    3548:	9f 92       	push	r9
    354a:	af 92       	push	r10
    354c:	bf 92       	push	r11
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	cf 93       	push	r28
    3558:	df 93       	push	r29
    355a:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    355c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    355e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3560:	c0 80       	ld	r12, Z
    3562:	d1 80       	ldd	r13, Z+1	; 0x01
    3564:	e2 80       	ldd	r14, Z+2	; 0x02
    3566:	f3 80       	ldd	r15, Z+3	; 0x03
    3568:	cc a2       	std	Y+36, r12	; 0x24
    356a:	dd a2       	std	Y+37, r13	; 0x25
    356c:	ee a2       	std	Y+38, r14	; 0x26
    356e:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    3570:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3572:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3574:	40 81       	ld	r20, Z
    3576:	51 81       	ldd	r21, Z+1	; 0x01
    3578:	62 81       	ldd	r22, Z+2	; 0x02
    357a:	73 81       	ldd	r23, Z+3	; 0x03
    357c:	48 a7       	std	Y+40, r20	; 0x28
    357e:	59 a7       	std	Y+41, r21	; 0x29
    3580:	6a a7       	std	Y+42, r22	; 0x2a
    3582:	7b a7       	std	Y+43, r23	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    3584:	8a a8       	ldd	r8, Y+50	; 0x32
    3586:	9b a8       	ldd	r9, Y+51	; 0x33
    3588:	ac a8       	ldd	r10, Y+52	; 0x34
    358a:	bd a8       	ldd	r11, Y+53	; 0x35
    358c:	a5 01       	movw	r20, r10
    358e:	94 01       	movw	r18, r8
    3590:	c7 01       	movw	r24, r14
    3592:	b6 01       	movw	r22, r12
    3594:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    3598:	18 16       	cp	r1, r24
    359a:	0c f4       	brge	.+2      	; 0x359e <_ZN3PID10InitializeEv+0x58>
    359c:	0c c0       	rjmp	.+24     	; 0x35b6 <_ZN3PID10InitializeEv+0x70>
   else if(ITerm < outMin) ITerm = outMin;
    359e:	8e a4       	ldd	r8, Y+46	; 0x2e
    35a0:	9f a4       	ldd	r9, Y+47	; 0x2f
    35a2:	a8 a8       	ldd	r10, Y+48	; 0x30
    35a4:	b9 a8       	ldd	r11, Y+49	; 0x31
    35a6:	a5 01       	movw	r20, r10
    35a8:	94 01       	movw	r18, r8
    35aa:	c7 01       	movw	r24, r14
    35ac:	b6 01       	movw	r22, r12
    35ae:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    35b2:	87 ff       	sbrs	r24, 7
    35b4:	04 c0       	rjmp	.+8      	; 0x35be <_ZN3PID10InitializeEv+0x78>
    35b6:	8c a2       	std	Y+36, r8	; 0x24
    35b8:	9d a2       	std	Y+37, r9	; 0x25
    35ba:	ae a2       	std	Y+38, r10	; 0x26
    35bc:	bf a2       	std	Y+39, r11	; 0x27
}
    35be:	df 91       	pop	r29
    35c0:	cf 91       	pop	r28
    35c2:	ff 90       	pop	r15
    35c4:	ef 90       	pop	r14
    35c6:	df 90       	pop	r13
    35c8:	cf 90       	pop	r12
    35ca:	bf 90       	pop	r11
    35cc:	af 90       	pop	r10
    35ce:	9f 90       	pop	r9
    35d0:	8f 90       	pop	r8
    35d2:	08 95       	ret

000035d4 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    35dc:	11 e0       	ldi	r17, 0x01	; 1
    35de:	61 30       	cpi	r22, 0x01	; 1
    35e0:	71 05       	cpc	r23, r1
    35e2:	09 f0       	breq	.+2      	; 0x35e6 <_ZN3PID7SetModeEi+0x12>
    35e4:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    35e6:	8e a9       	ldd	r24, Y+54	; 0x36
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	89 27       	eor	r24, r25
    35ec:	18 13       	cpse	r17, r24
    35ee:	03 c0       	rjmp	.+6      	; 0x35f6 <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    35f0:	ce 01       	movw	r24, r28
    35f2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    35f6:	1e ab       	std	Y+54, r17	; 0x36
}
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	1f 91       	pop	r17
    35fe:	08 95       	ret

00003600 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	ec 01       	movw	r28, r24
    360a:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    360c:	8e a9       	ldd	r24, Y+54	; 0x36
    360e:	88 23       	and	r24, r24
    3610:	61 f1       	breq	.+88     	; 0x366a <_ZN3PID22SetControllerDirectionEi+0x6a>
    3612:	88 8d       	ldd	r24, Y+24	; 0x18
    3614:	99 8d       	ldd	r25, Y+25	; 0x19
    3616:	68 17       	cp	r22, r24
    3618:	79 07       	cpc	r23, r25
    361a:	39 f1       	breq	.+78     	; 0x366a <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    361c:	2c 85       	ldd	r18, Y+12	; 0x0c
    361e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3620:	4e 85       	ldd	r20, Y+14	; 0x0e
    3622:	5f 85       	ldd	r21, Y+15	; 0x0f
    3624:	60 e0       	ldi	r22, 0x00	; 0
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	cb 01       	movw	r24, r22
    362a:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    362e:	6c 87       	std	Y+12, r22	; 0x0c
    3630:	7d 87       	std	Y+13, r23	; 0x0d
    3632:	8e 87       	std	Y+14, r24	; 0x0e
    3634:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    3636:	28 89       	ldd	r18, Y+16	; 0x10
    3638:	39 89       	ldd	r19, Y+17	; 0x11
    363a:	4a 89       	ldd	r20, Y+18	; 0x12
    363c:	5b 89       	ldd	r21, Y+19	; 0x13
    363e:	60 e0       	ldi	r22, 0x00	; 0
    3640:	70 e0       	ldi	r23, 0x00	; 0
    3642:	cb 01       	movw	r24, r22
    3644:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3648:	68 8b       	std	Y+16, r22	; 0x10
    364a:	79 8b       	std	Y+17, r23	; 0x11
    364c:	8a 8b       	std	Y+18, r24	; 0x12
    364e:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    3650:	2c 89       	ldd	r18, Y+20	; 0x14
    3652:	3d 89       	ldd	r19, Y+21	; 0x15
    3654:	4e 89       	ldd	r20, Y+22	; 0x16
    3656:	5f 89       	ldd	r21, Y+23	; 0x17
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	cb 01       	movw	r24, r22
    365e:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3662:	6c 8b       	std	Y+20, r22	; 0x14
    3664:	7d 8b       	std	Y+21, r23	; 0x15
    3666:	8e 8b       	std	Y+22, r24	; 0x16
    3668:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    366a:	19 8f       	std	Y+25, r17	; 0x19
    366c:	08 8f       	std	Y+24, r16	; 0x18
}
    366e:	df 91       	pop	r29
    3670:	cf 91       	pop	r28
    3672:	1f 91       	pop	r17
    3674:	0f 91       	pop	r16
    3676:	08 95       	ret

00003678 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for which we can't set up
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    3678:	2f 92       	push	r2
    367a:	3f 92       	push	r3
    367c:	4f 92       	push	r4
    367e:	5f 92       	push	r5
    3680:	6f 92       	push	r6
    3682:	7f 92       	push	r7
    3684:	8f 92       	push	r8
    3686:	9f 92       	push	r9
    3688:	af 92       	push	r10
    368a:	bf 92       	push	r11
    368c:	cf 92       	push	r12
    368e:	df 92       	push	r13
    3690:	ef 92       	push	r14
    3692:	ff 92       	push	r15
    3694:	0f 93       	push	r16
    3696:	1f 93       	push	r17
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	00 d0       	rcall	.+0      	; 0x369e <_ZN3PIDC1EPdS0_S0_dddi+0x26>
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <_ZN3PIDC1EPdS0_S0_dddi+0x28>
    36a0:	cd b7       	in	r28, 0x3d	; 61
    36a2:	de b7       	in	r29, 0x3e	; 62
    36a4:	1c 01       	movw	r2, r24
    36a6:	7a 83       	std	Y+2, r23	; 0x02
    36a8:	69 83       	std	Y+1, r22	; 0x01
    36aa:	5c 83       	std	Y+4, r21	; 0x04
    36ac:	4b 83       	std	Y+3, r20	; 0x03
    36ae:	3e 83       	std	Y+6, r19	; 0x06
    36b0:	2d 83       	std	Y+5, r18	; 0x05
    36b2:	27 01       	movw	r4, r14
    36b4:	38 01       	movw	r6, r16
    36b6:	45 01       	movw	r8, r10
    36b8:	56 01       	movw	r10, r12
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    36ba:	00 e0       	ldi	r16, 0x00	; 0
    36bc:	10 e0       	ldi	r17, 0x00	; 0
    36be:	2f e7       	ldi	r18, 0x7F	; 127
    36c0:	33 e4       	ldi	r19, 0x43	; 67
    36c2:	40 e0       	ldi	r20, 0x00	; 0
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	ba 01       	movw	r22, r20
    36c8:	0e 94 26 1a 	call	0x344c	; 0x344c <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    36cc:	84 e6       	ldi	r24, 0x64	; 100
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	f1 01       	movw	r30, r2
    36d2:	95 a7       	std	Z+45, r25	; 0x2d
    36d4:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    36d6:	68 a1       	ldd	r22, Y+32	; 0x20
    36d8:	79 a1       	ldd	r23, Y+33	; 0x21
    36da:	c1 01       	movw	r24, r2
    36dc:	0e 94 00 1b 	call	0x3600	; 0x3600 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    36e0:	cc 8c       	ldd	r12, Y+28	; 0x1c
    36e2:	dd 8c       	ldd	r13, Y+29	; 0x1d
    36e4:	ee 8c       	ldd	r14, Y+30	; 0x1e
    36e6:	ff 8c       	ldd	r15, Y+31	; 0x1f
    36e8:	95 01       	movw	r18, r10
    36ea:	84 01       	movw	r16, r8
    36ec:	b3 01       	movw	r22, r6
    36ee:	a2 01       	movw	r20, r4
    36f0:	c1 01       	movw	r24, r2
    36f2:	0e 94 18 19 	call	0x3230	; 0x3230 <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    36f6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    36fa:	f1 01       	movw	r30, r2
    36fc:	84 a4       	ldd	r8, Z+44	; 0x2c
    36fe:	95 a4       	ldd	r9, Z+45	; 0x2d
    3700:	aa 24       	eor	r10, r10
    3702:	97 fc       	sbrc	r9, 7
    3704:	a0 94       	com	r10
    3706:	ba 2c       	mov	r11, r10
    3708:	68 19       	sub	r22, r8
    370a:	79 09       	sbc	r23, r9
    370c:	8a 09       	sbc	r24, r10
    370e:	9b 09       	sbc	r25, r11
    3710:	60 a3       	std	Z+32, r22	; 0x20
    3712:	71 a3       	std	Z+33, r23	; 0x21
    3714:	82 a3       	std	Z+34, r24	; 0x22
    3716:	93 a3       	std	Z+35, r25	; 0x23
    inAuto = false;
    3718:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    371a:	8b 81       	ldd	r24, Y+3	; 0x03
    371c:	9c 81       	ldd	r25, Y+4	; 0x04
    371e:	95 8f       	std	Z+29, r25	; 0x1d
    3720:	84 8f       	std	Z+28, r24	; 0x1c
    myInput = Input;
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	9a 81       	ldd	r25, Y+2	; 0x02
    3726:	93 8f       	std	Z+27, r25	; 0x1b
    3728:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    372a:	8d 81       	ldd	r24, Y+5	; 0x05
    372c:	9e 81       	ldd	r25, Y+6	; 0x06
    372e:	97 8f       	std	Z+31, r25	; 0x1f
    3730:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    3732:	26 96       	adiw	r28, 0x06	; 6
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	1f 91       	pop	r17
    3744:	0f 91       	pop	r16
    3746:	ff 90       	pop	r15
    3748:	ef 90       	pop	r14
    374a:	df 90       	pop	r13
    374c:	cf 90       	pop	r12
    374e:	bf 90       	pop	r11
    3750:	af 90       	pop	r10
    3752:	9f 90       	pop	r9
    3754:	8f 90       	pop	r8
    3756:	7f 90       	pop	r7
    3758:	6f 90       	pop	r6
    375a:	5f 90       	pop	r5
    375c:	4f 90       	pop	r4
    375e:	3f 90       	pop	r3
    3760:	2f 90       	pop	r2
    3762:	08 95       	ret

00003764 <_ZN4NMEAC1Ei>:

//
// constructor method
//

NMEA::NMEA(int connect)
    3764:	0f 93       	push	r16
    3766:	1f 93       	push	r17
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	fc 01       	movw	r30, r24
{
	// private properties
	_gprmc_only = connect;
    376e:	71 83       	std	Z+1, r23	; 0x01
    3770:	60 83       	st	Z, r22
	_gprmc_utc = 0.0;
    3772:	12 82       	std	Z+2, r1	; 0x02
    3774:	13 82       	std	Z+3, r1	; 0x03
    3776:	14 82       	std	Z+4, r1	; 0x04
    3778:	15 82       	std	Z+5, r1	; 0x05
	_gprmc_status = 'V';
    377a:	86 e5       	ldi	r24, 0x56	; 86
    377c:	86 83       	std	Z+6, r24	; 0x06
	_gprmc_lat = 0.0;
    377e:	17 82       	std	Z+7, r1	; 0x07
    3780:	10 86       	std	Z+8, r1	; 0x08
    3782:	11 86       	std	Z+9, r1	; 0x09
    3784:	12 86       	std	Z+10, r1	; 0x0a
	_gprmc_long = 0.0;
    3786:	13 86       	std	Z+11, r1	; 0x0b
    3788:	14 86       	std	Z+12, r1	; 0x0c
    378a:	15 86       	std	Z+13, r1	; 0x0d
    378c:	16 86       	std	Z+14, r1	; 0x0e
	_gprmc_speed = 0.0;
    378e:	17 86       	std	Z+15, r1	; 0x0f
    3790:	10 8a       	std	Z+16, r1	; 0x10
    3792:	11 8a       	std	Z+17, r1	; 0x11
    3794:	12 8a       	std	Z+18, r1	; 0x12
	_gprmc_angle = 0.0;
    3796:	13 8a       	std	Z+19, r1	; 0x13
    3798:	14 8a       	std	Z+20, r1	; 0x14
    379a:	15 8a       	std	Z+21, r1	; 0x15
    379c:	16 8a       	std	Z+22, r1	; 0x16
	_terms = 0;
    379e:	df 01       	movw	r26, r30
    37a0:	a7 54       	subi	r26, 0x47	; 71
    37a2:	bf 4f       	sbci	r27, 0xFF	; 255
    37a4:	1d 92       	st	X+, r1
    37a6:	1c 92       	st	X, r1
	n = 0;
    37a8:	df 01       	movw	r26, r30
    37aa:	a5 5a       	subi	r26, 0xA5	; 165
    37ac:	be 4f       	sbci	r27, 0xFE	; 254
    37ae:	1d 92       	st	X+, r1
    37b0:	1c 92       	st	X, r1
	_state = 0;
    37b2:	df 01       	movw	r26, r30
    37b4:	a1 5a       	subi	r26, 0xA1	; 161
    37b6:	be 4f       	sbci	r27, 0xFE	; 254
    37b8:	1d 92       	st	X+, r1
    37ba:	1c 92       	st	X, r1
	_parity = 0;
    37bc:	df 01       	movw	r26, r30
    37be:	af 59       	subi	r26, 0x9F	; 159
    37c0:	be 4f       	sbci	r27, 0xFE	; 254
    37c2:	1d 92       	st	X+, r1
    37c4:	1c 92       	st	X, r1
	_nt = 0;
    37c6:	df 01       	movw	r26, r30
    37c8:	ad 59       	subi	r26, 0x9D	; 157
    37ca:	be 4f       	sbci	r27, 0xFE	; 254
    37cc:	1d 92       	st	X+, r1
    37ce:	1c 92       	st	X, r1

	f_sentence[0] = 0;
    37d0:	17 8a       	std	Z+23, r1	; 0x17
	f_terms = 0;
    37d2:	df 01       	movw	r26, r30
    37d4:	a9 54       	subi	r26, 0x49	; 73
    37d6:	bf 4f       	sbci	r27, 0xFF	; 255
    37d8:	1d 92       	st	X+, r1
    37da:	1c 92       	st	X, r1
    37dc:	ef 01       	movw	r28, r30
    37de:	0e e1       	ldi	r16, 0x1E	; 30
    37e0:	10 e0       	ldi	r17, 0x00	; 0
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    37e2:	8f e0       	ldi	r24, 0x0F	; 15
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	0e 94 87 13 	call	0x270e	; 0x270e <malloc>

//
// constructor method
//

NMEA::NMEA(int connect)
    37ea:	fe 01       	movw	r30, r28
    37ec:	e1 5e       	subi	r30, 0xE1	; 225
    37ee:	fe 4f       	sbci	r31, 0xFE	; 254

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    37f0:	80 83       	st	Z, r24
    37f2:	91 83       	std	Z+1, r25	; 0x01
    f_term[t] = (char*) malloc (15 * sizeof(char));
    37f4:	8f e0       	ldi	r24, 0x0F	; 15
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	0e 94 87 13 	call	0x270e	; 0x270e <malloc>
    37fc:	fc 01       	movw	r30, r24

//
// constructor method
//

NMEA::NMEA(int connect)
    37fe:	de 01       	movw	r26, r28
    3800:	a5 58       	subi	r26, 0x85	; 133
    3802:	bf 4f       	sbci	r27, 0xFF	; 255
	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    3804:	8d 93       	st	X+, r24
    3806:	9c 93       	st	X, r25
    (f_term[t])[0] = 0;
    3808:	10 82       	st	Z, r1
    380a:	01 50       	subi	r16, 0x01	; 1
    380c:	11 09       	sbc	r17, r1
    380e:	22 96       	adiw	r28, 0x02	; 2
	_nt = 0;

	f_sentence[0] = 0;
	f_terms = 0;
	// allocate memory for individual terms of sentence
  for (int t=0; t<30; t++) {
    3810:	01 15       	cp	r16, r1
    3812:	11 05       	cpc	r17, r1
    3814:	31 f7       	brne	.-52     	; 0x37e2 <_ZN4NMEAC1Ei+0x7e>
    _term[t] = (char*) malloc (15 * sizeof(char));
    f_term[t] = (char*) malloc (15 * sizeof(char));
    (f_term[t])[0] = 0;
  }
}
    3816:	df 91       	pop	r29
    3818:	cf 91       	pop	r28
    381a:	1f 91       	pop	r17
    381c:	0f 91       	pop	r16
    381e:	08 95       	ret

00003820 <_ZN4NMEA9gprmc_utcEv>:
    break;
  }
  return 0;
}

float NMEA::gprmc_utc() {
    3820:	fc 01       	movw	r30, r24
	// returns decimal value of UTC term of last-known GPRMC sentence
	return _gprmc_utc;
}
    3822:	52 81       	ldd	r21, Z+2	; 0x02
    3824:	43 81       	ldd	r20, Z+3	; 0x03
    3826:	34 81       	ldd	r19, Z+4	; 0x04
    3828:	25 81       	ldd	r18, Z+5	; 0x05
    382a:	65 2f       	mov	r22, r21
    382c:	74 2f       	mov	r23, r20
    382e:	83 2f       	mov	r24, r19
    3830:	92 2f       	mov	r25, r18
    3832:	08 95       	ret

00003834 <_ZN4NMEA12gprmc_statusEv>:

char NMEA::gprmc_status() {
	// returns status character of last-known GPRMC sentence ('A' or 'V')
	return _gprmc_status;
}
    3834:	fc 01       	movw	r30, r24
    3836:	86 81       	ldd	r24, Z+6	; 0x06
    3838:	08 95       	ret

0000383a <_ZN4NMEA14gprmc_latitudeEv>:

float NMEA::gprmc_latitude() {
    383a:	fc 01       	movw	r30, r24
	// returns signed degree-decimal latitude value of last-known GPRMC position
	return _gprmc_lat;
}
    383c:	57 81       	ldd	r21, Z+7	; 0x07
    383e:	40 85       	ldd	r20, Z+8	; 0x08
    3840:	31 85       	ldd	r19, Z+9	; 0x09
    3842:	22 85       	ldd	r18, Z+10	; 0x0a
    3844:	65 2f       	mov	r22, r21
    3846:	74 2f       	mov	r23, r20
    3848:	83 2f       	mov	r24, r19
    384a:	92 2f       	mov	r25, r18
    384c:	08 95       	ret

0000384e <_ZN4NMEA15gprmc_longitudeEv>:

float NMEA::gprmc_longitude() {
    384e:	fc 01       	movw	r30, r24
	// returns signed degree-decimal longitude value of last-known GPRMC position
	return _gprmc_long;
}
    3850:	53 85       	ldd	r21, Z+11	; 0x0b
    3852:	44 85       	ldd	r20, Z+12	; 0x0c
    3854:	35 85       	ldd	r19, Z+13	; 0x0d
    3856:	26 85       	ldd	r18, Z+14	; 0x0e
    3858:	65 2f       	mov	r22, r21
    385a:	74 2f       	mov	r23, r20
    385c:	83 2f       	mov	r24, r19
    385e:	92 2f       	mov	r25, r18
    3860:	08 95       	ret

00003862 <_ZN4NMEA11gprmc_speedEf>:

float NMEA::gprmc_speed(float unit) {
    3862:	cf 92       	push	r12
    3864:	df 92       	push	r13
    3866:	ef 92       	push	r14
    3868:	ff 92       	push	r15
    386a:	6a 01       	movw	r12, r20
    386c:	7b 01       	movw	r14, r22
	// returns speed-over-ground from last-known GPRMC sentence
	return (_gprmc_speed * unit);
    386e:	fc 01       	movw	r30, r24
    3870:	27 85       	ldd	r18, Z+15	; 0x0f
    3872:	30 89       	ldd	r19, Z+16	; 0x10
    3874:	41 89       	ldd	r20, Z+17	; 0x11
    3876:	52 89       	ldd	r21, Z+18	; 0x12
    3878:	c7 01       	movw	r24, r14
    387a:	b6 01       	movw	r22, r12
    387c:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
}
    3880:	ff 90       	pop	r15
    3882:	ef 90       	pop	r14
    3884:	df 90       	pop	r13
    3886:	cf 90       	pop	r12
    3888:	08 95       	ret

0000388a <_ZN4NMEA12gprmc_courseEv>:

float NMEA::gprmc_course() {
    388a:	fc 01       	movw	r30, r24
	// returns decimal value of track-angle-made-good term in last-known GPRMC sentence - 0-360 deg
	return _gprmc_angle;
}
    388c:	53 89       	ldd	r21, Z+19	; 0x13
    388e:	44 89       	ldd	r20, Z+20	; 0x14
    3890:	35 89       	ldd	r19, Z+21	; 0x15
    3892:	26 89       	ldd	r18, Z+22	; 0x16
    3894:	65 2f       	mov	r22, r21
    3896:	74 2f       	mov	r23, r20
    3898:	83 2f       	mov	r24, r19
    389a:	92 2f       	mov	r25, r18
    389c:	08 95       	ret

0000389e <_ZN4NMEA8sentenceEv>:
//	return rc;
//}

char* NMEA::sentence() {
	// returns last received full sentence as zero terminated string
  return f_sentence;
    389e:	9c 01       	movw	r18, r24
    38a0:	29 5e       	subi	r18, 0xE9	; 233
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
}
    38a4:	c9 01       	movw	r24, r18
    38a6:	08 95       	ret

000038a8 <_ZN4NMEA4termEi>:
  return f_terms;
}

char* NMEA::term(int t) {
	// returns term t of last received full sentence as zero terminated string
  return f_term[t];
    38a8:	66 0f       	add	r22, r22
    38aa:	77 1f       	adc	r23, r23
    38ac:	68 0f       	add	r22, r24
    38ae:	79 1f       	adc	r23, r25
    38b0:	fb 01       	movw	r30, r22
    38b2:	e5 58       	subi	r30, 0x85	; 133
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
}
    38b6:	80 81       	ld	r24, Z
    38b8:	91 81       	ldd	r25, Z+1	; 0x01
    38ba:	08 95       	ret

000038bc <_ZN4NMEA8_decimalEPc>:
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    38bc:	4f 92       	push	r4
    38be:	5f 92       	push	r5
    38c0:	6f 92       	push	r6
    38c2:	7f 92       	push	r7
    38c4:	8f 92       	push	r8
    38c6:	9f 92       	push	r9
    38c8:	af 92       	push	r10
    38ca:	bf 92       	push	r11
    38cc:	cf 92       	push	r12
    38ce:	df 92       	push	r13
    38d0:	ef 92       	push	r14
    38d2:	ff 92       	push	r15
    38d4:	0f 93       	push	r16
    38d6:	1f 93       	push	r17
    38d8:	cf 93       	push	r28
    38da:	df 93       	push	r29
  float rr = 0.0;
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
    38dc:	db 01       	movw	r26, r22
    38de:	cc 91       	ld	r28, X
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	cd 32       	cpi	r28, 0x2D	; 45
    38e6:	21 f0       	breq	.+8      	; 0x38f0 <_ZN4NMEA8_decimalEPc+0x34>
    38e8:	cb 32       	cpi	r28, 0x2B	; 43
    38ea:	11 f0       	breq	.+4      	; 0x38f0 <_ZN4NMEA8_decimalEPc+0x34>
    38ec:	80 e0       	ldi	r24, 0x00	; 0
    38ee:	90 e0       	ldi	r25, 0x00	; 0
  else {
    return int(a)-48;
  }
}

float NMEA::_decimal(char* s) {
    38f0:	2b 01       	movw	r4, r22
    38f2:	48 0e       	add	r4, r24
    38f4:	59 1e       	adc	r5, r25
    38f6:	61 2c       	mov	r6, r1
    38f8:	3d ec       	ldi	r19, 0xCD	; 205
    38fa:	a3 2e       	mov	r10, r19
    38fc:	4c ec       	ldi	r20, 0xCC	; 204
    38fe:	94 2e       	mov	r9, r20
    3900:	5c ec       	ldi	r21, 0xCC	; 204
    3902:	85 2e       	mov	r8, r21
    3904:	6d e3       	ldi	r22, 0x3D	; 61
    3906:	76 2e       	mov	r7, r22
    3908:	b1 2c       	mov	r11, r1
    390a:	00 e0       	ldi	r16, 0x00	; 0
    390c:	10 e0       	ldi	r17, 0x00	; 0
    390e:	d0 e0       	ldi	r29, 0x00	; 0
    3910:	c1 2c       	mov	r12, r1
    3912:	d1 2c       	mov	r13, r1
    3914:	76 01       	movw	r14, r12
    3916:	4a c0       	rjmp	.+148    	; 0x39ac <_ZN4NMEA8_decimalEPc+0xf0>
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
    3918:	ee 32       	cpi	r30, 0x2E	; 46
    391a:	09 f4       	brne	.+2      	; 0x391e <_ZN4NMEA8_decimalEPc+0x62>
    391c:	45 c0       	rjmp	.+138    	; 0x39a8 <_ZN4NMEA8_decimalEPc+0xec>
    391e:	ff 27       	eor	r31, r31
    3920:	e7 fd       	sbrc	r30, 7
    3922:	f0 95       	com	r31
      dec = true;
    }
    else{
      if (!dec) {
    3924:	61 10       	cpse	r6, r1
    3926:	15 c0       	rjmp	.+42     	; 0x3952 <_ZN4NMEA8_decimalEPc+0x96>
        rl = (10 * rl) + (s[i] - 48);
    3928:	aa e0       	ldi	r26, 0x0A	; 10
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	a7 01       	movw	r20, r14
    392e:	96 01       	movw	r18, r12
    3930:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    3934:	6b 01       	movw	r12, r22
    3936:	7c 01       	movw	r14, r24
    3938:	bf 01       	movw	r22, r30
    393a:	60 53       	subi	r22, 0x30	; 48
    393c:	71 09       	sbc	r23, r1
    393e:	cb 01       	movw	r24, r22
    3940:	aa 27       	eor	r26, r26
    3942:	97 fd       	sbrc	r25, 7
    3944:	a0 95       	com	r26
    3946:	ba 2f       	mov	r27, r26
    3948:	c8 0e       	add	r12, r24
    394a:	d9 1e       	adc	r13, r25
    394c:	ea 1e       	adc	r14, r26
    394e:	fb 1e       	adc	r15, r27
    3950:	2d c0       	rjmp	.+90     	; 0x39ac <_ZN4NMEA8_decimalEPc+0xf0>
      }
      else {
        rr += rb * (float)(s[i] - 48);
    3952:	bf 01       	movw	r22, r30
    3954:	60 53       	subi	r22, 0x30	; 48
    3956:	71 09       	sbc	r23, r1
    3958:	88 27       	eor	r24, r24
    395a:	77 fd       	sbrc	r23, 7
    395c:	80 95       	com	r24
    395e:	98 2f       	mov	r25, r24
    3960:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    3964:	9b 01       	movw	r18, r22
    3966:	ac 01       	movw	r20, r24
    3968:	6a 2d       	mov	r22, r10
    396a:	79 2d       	mov	r23, r9
    396c:	88 2d       	mov	r24, r8
    396e:	97 2d       	mov	r25, r7
    3970:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    3974:	9b 01       	movw	r18, r22
    3976:	ac 01       	movw	r20, r24
    3978:	6b 2d       	mov	r22, r11
    397a:	70 2f       	mov	r23, r16
    397c:	81 2f       	mov	r24, r17
    397e:	9d 2f       	mov	r25, r29
    3980:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    3984:	b6 2e       	mov	r11, r22
    3986:	07 2f       	mov	r16, r23
    3988:	18 2f       	mov	r17, r24
    398a:	d9 2f       	mov	r29, r25
        rb /= 10.0;
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e2       	ldi	r20, 0x20	; 32
    3992:	51 e4       	ldi	r21, 0x41	; 65
    3994:	6a 2d       	mov	r22, r10
    3996:	79 2d       	mov	r23, r9
    3998:	88 2d       	mov	r24, r8
    399a:	97 2d       	mov	r25, r7
    399c:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    39a0:	a6 2e       	mov	r10, r22
    39a2:	97 2e       	mov	r9, r23
    39a4:	88 2e       	mov	r8, r24
    39a6:	79 2e       	mov	r7, r25
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    if (s[i] == '.') {
      dec = true;
    39a8:	66 24       	eor	r6, r6
    39aa:	63 94       	inc	r6
  float rb = 0.1;
  boolean dec = false;
  int i = 0;

  if ((s[i] == '-') || (s[i] == '+')) { i++; }
  while (s[i] != 0) {
    39ac:	d2 01       	movw	r26, r4
    39ae:	ed 91       	ld	r30, X+
    39b0:	2d 01       	movw	r4, r26
    39b2:	e1 11       	cpse	r30, r1
    39b4:	b1 cf       	rjmp	.-158    	; 0x3918 <_ZN4NMEA8_decimalEPc+0x5c>
        rb /= 10.0;
      }
    }
    i++;
  }
  rr += (float)rl;
    39b6:	c7 01       	movw	r24, r14
    39b8:	b6 01       	movw	r22, r12
    39ba:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    39be:	9b 01       	movw	r18, r22
    39c0:	ac 01       	movw	r20, r24
    39c2:	6b 2d       	mov	r22, r11
    39c4:	70 2f       	mov	r23, r16
    39c6:	81 2f       	mov	r24, r17
    39c8:	9d 2f       	mov	r25, r29
    39ca:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
  if (s[0] == '-') {
    39ce:	cd 32       	cpi	r28, 0x2D	; 45
    39d0:	49 f4       	brne	.+18     	; 0x39e4 <_ZN4NMEA8_decimalEPc+0x128>
    rr = 0.0 - rr;
    39d2:	26 2f       	mov	r18, r22
    39d4:	37 2f       	mov	r19, r23
    39d6:	48 2f       	mov	r20, r24
    39d8:	59 2f       	mov	r21, r25
    39da:	60 e0       	ldi	r22, 0x00	; 0
    39dc:	70 e0       	ldi	r23, 0x00	; 0
    39de:	cb 01       	movw	r24, r22
    39e0:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
  }
  return rr;
}
    39e4:	df 91       	pop	r29
    39e6:	cf 91       	pop	r28
    39e8:	1f 91       	pop	r17
    39ea:	0f 91       	pop	r16
    39ec:	ff 90       	pop	r15
    39ee:	ef 90       	pop	r14
    39f0:	df 90       	pop	r13
    39f2:	cf 90       	pop	r12
    39f4:	bf 90       	pop	r11
    39f6:	af 90       	pop	r10
    39f8:	9f 90       	pop	r9
    39fa:	8f 90       	pop	r8
    39fc:	7f 90       	pop	r7
    39fe:	6f 90       	pop	r6
    3a00:	5f 90       	pop	r5
    3a02:	4f 90       	pop	r4
    3a04:	08 95       	ret

00003a06 <_ZN4NMEA6decodeEc>:

//
// public methods
//

int NMEA::decode(char c) {
    3a06:	8f 92       	push	r8
    3a08:	9f 92       	push	r9
    3a0a:	af 92       	push	r10
    3a0c:	bf 92       	push	r11
    3a0e:	ef 92       	push	r14
    3a10:	ff 92       	push	r15
    3a12:	0f 93       	push	r16
    3a14:	1f 93       	push	r17
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	ec 01       	movw	r28, r24
  // avoid runaway sentences (>99 chars or >29 terms) and terms (>14 chars)
  if ((n >= 100) || (_terms >= 30) || (_nt >= 15)) { _state = 0; }
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	e5 5a       	subi	r30, 0xA5	; 165
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	80 81       	ld	r24, Z
    3a24:	91 81       	ldd	r25, Z+1	; 0x01
    3a26:	84 36       	cpi	r24, 0x64	; 100
    3a28:	91 05       	cpc	r25, r1
    3a2a:	84 f4       	brge	.+32     	; 0x3a4c <_ZN4NMEA6decodeEc+0x46>
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	e7 54       	subi	r30, 0x47	; 71
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	20 81       	ld	r18, Z
    3a34:	31 81       	ldd	r19, Z+1	; 0x01
    3a36:	2e 31       	cpi	r18, 0x1E	; 30
    3a38:	31 05       	cpc	r19, r1
    3a3a:	44 f4       	brge	.+16     	; 0x3a4c <_ZN4NMEA6decodeEc+0x46>
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	ed 59       	subi	r30, 0x9D	; 157
    3a40:	fe 4f       	sbci	r31, 0xFE	; 254
    3a42:	20 81       	ld	r18, Z
    3a44:	31 81       	ldd	r19, Z+1	; 0x01
    3a46:	2f 30       	cpi	r18, 0x0F	; 15
    3a48:	31 05       	cpc	r19, r1
    3a4a:	2c f0       	brlt	.+10     	; 0x3a56 <_ZN4NMEA6decodeEc+0x50>
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	e1 5a       	subi	r30, 0xA1	; 161
    3a50:	fe 4f       	sbci	r31, 0xFE	; 254
    3a52:	11 82       	std	Z+1, r1	; 0x01
    3a54:	10 82       	st	Z, r1
    3a56:	8e 01       	movw	r16, r28
    3a58:	01 5a       	subi	r16, 0xA1	; 161
    3a5a:	1e 4f       	sbci	r17, 0xFE	; 254
  // LF and CR always reset parser
  if ((c == 0x0A) || (c == 0x0D)) { _state = 0; }
    3a5c:	6a 30       	cpi	r22, 0x0A	; 10
    3a5e:	11 f0       	breq	.+4      	; 0x3a64 <_ZN4NMEA6decodeEc+0x5e>
    3a60:	6d 30       	cpi	r22, 0x0D	; 13
    3a62:	19 f4       	brne	.+6      	; 0x3a6a <_ZN4NMEA6decodeEc+0x64>
    3a64:	d8 01       	movw	r26, r16
    3a66:	1d 92       	st	X+, r1
    3a68:	1c 92       	st	X, r1
  // '$' always starts a new sentence
  if (c == '$') {
    3a6a:	64 32       	cpi	r22, 0x24	; 36
    3a6c:	11 f5       	brne	.+68     	; 0x3ab2 <_ZN4NMEA6decodeEc+0xac>
    _gprmc_tag = 0;
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e3 5a       	subi	r30, 0xA3	; 163
    3a72:	fe 4f       	sbci	r31, 0xFE	; 254
    3a74:	11 82       	std	Z+1, r1	; 0x01
    3a76:	10 82       	st	Z, r1
    _parity = 0;
    3a78:	fe 01       	movw	r30, r28
    3a7a:	ef 59       	subi	r30, 0x9F	; 159
    3a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7e:	11 82       	std	Z+1, r1	; 0x01
    3a80:	10 82       	st	Z, r1
    _terms = 0;
    3a82:	fe 01       	movw	r30, r28
    3a84:	e7 54       	subi	r30, 0x47	; 71
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	11 82       	std	Z+1, r1	; 0x01
    3a8a:	10 82       	st	Z, r1
    _nt = 0;
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	ed 59       	subi	r30, 0x9D	; 157
    3a90:	fe 4f       	sbci	r31, 0xFE	; 254
    3a92:	11 82       	std	Z+1, r1	; 0x01
    3a94:	10 82       	st	Z, r1
    _sentence[0] = c;
    3a96:	fe 01       	movw	r30, r28
    3a98:	e5 54       	subi	r30, 0x45	; 69
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	60 83       	st	Z, r22
    n = 1;
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e5 5a       	subi	r30, 0xA5	; 165
    3aa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	91 83       	std	Z+1, r25	; 0x01
    3aaa:	80 83       	st	Z, r24
    _state = 1;
    3aac:	c1 5a       	subi	r28, 0xA1	; 161
    3aae:	de 4f       	sbci	r29, 0xFE	; 254
    3ab0:	e0 c0       	rjmp	.+448    	; 0x3c72 <_ZN4NMEA6decodeEc+0x26c>
    return 0;
  }
  // parse other chars according to parser state
  switch(_state) {
    3ab2:	f8 01       	movw	r30, r16
    3ab4:	20 81       	ld	r18, Z
    3ab6:	31 81       	ldd	r19, Z+1	; 0x01
    3ab8:	21 30       	cpi	r18, 0x01	; 1
    3aba:	31 05       	cpc	r19, r1
    3abc:	71 f0       	breq	.+28     	; 0x3ada <_ZN4NMEA6decodeEc+0xd4>
    3abe:	24 f4       	brge	.+8      	; 0x3ac8 <_ZN4NMEA6decodeEc+0xc2>
    3ac0:	23 2b       	or	r18, r19
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <_ZN4NMEA6decodeEc+0xc0>
    3ac4:	8d c2       	rjmp	.+1306   	; 0x3fe0 <_ZN4NMEA6decodeEc+0x5da>
    3ac6:	88 c2       	rjmp	.+1296   	; 0x3fd8 <_ZN4NMEA6decodeEc+0x5d2>
    3ac8:	22 30       	cpi	r18, 0x02	; 2
    3aca:	31 05       	cpc	r19, r1
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <_ZN4NMEA6decodeEc+0xca>
    3ace:	8b c0       	rjmp	.+278    	; 0x3be6 <_ZN4NMEA6decodeEc+0x1e0>
    3ad0:	23 30       	cpi	r18, 0x03	; 3
    3ad2:	31 05       	cpc	r19, r1
    3ad4:	09 f0       	breq	.+2      	; 0x3ad8 <_ZN4NMEA6decodeEc+0xd2>
    3ad6:	80 c2       	rjmp	.+1280   	; 0x3fd8 <_ZN4NMEA6decodeEc+0x5d2>
    3ad8:	cf c0       	rjmp	.+414    	; 0x3c78 <_ZN4NMEA6decodeEc+0x272>
  case 0:
    // waiting for '$', do nothing
    break;
  case 1:
  	// decode chars after '$' and before '*' found
    if (n < 7) {
    3ada:	87 30       	cpi	r24, 0x07	; 7
    3adc:	91 05       	cpc	r25, r1
    3ade:	7c f4       	brge	.+30     	; 0x3afe <_ZN4NMEA6decodeEc+0xf8>
    	// see if first seven chars match "$GPRMC,"
    	if (c == _GPRMC_TERM[n]) { _gprmc_tag++; }
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	e4 5f       	subi	r30, 0xF4	; 244
    3ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    3ae6:	20 81       	ld	r18, Z
    3ae8:	62 13       	cpse	r22, r18
    3aea:	09 c0       	rjmp	.+18     	; 0x3afe <_ZN4NMEA6decodeEc+0xf8>
    3aec:	fe 01       	movw	r30, r28
    3aee:	e3 5a       	subi	r30, 0xA3	; 163
    3af0:	fe 4f       	sbci	r31, 0xFE	; 254
    3af2:	20 81       	ld	r18, Z
    3af4:	31 81       	ldd	r19, Z+1	; 0x01
    3af6:	2f 5f       	subi	r18, 0xFF	; 255
    3af8:	3f 4f       	sbci	r19, 0xFF	; 255
    3afa:	31 83       	std	Z+1, r19	; 0x01
    3afc:	20 83       	st	Z, r18
    }
    // add received char to sentence
    _sentence[n++] = c;
    3afe:	fe 01       	movw	r30, r28
    3b00:	e8 0f       	add	r30, r24
    3b02:	f9 1f       	adc	r31, r25
    3b04:	e5 54       	subi	r30, 0x45	; 69
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	60 83       	st	Z, r22
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e5 5a       	subi	r30, 0xA5	; 165
    3b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b10:	01 96       	adiw	r24, 0x01	; 1
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
    3b16:	8e 01       	movw	r16, r28
    3b18:	07 54       	subi	r16, 0x47	; 71
    3b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	ed 59       	subi	r30, 0x9D	; 157
    3b20:	fe 4f       	sbci	r31, 0xFE	; 254
    switch (c) {
    3b22:	6a 32       	cpi	r22, 0x2A	; 42
    3b24:	19 f1       	breq	.+70     	; 0x3b6c <_ZN4NMEA6decodeEc+0x166>
    3b26:	6c 32       	cpi	r22, 0x2C	; 44
    3b28:	e1 f5       	brne	.+120    	; 0x3ba2 <_ZN4NMEA6decodeEc+0x19c>
    case ',':
    	// ',' delimits the individual terms
      (_term[_terms++])[_nt] = 0;
    3b2a:	d8 01       	movw	r26, r16
    3b2c:	2d 91       	ld	r18, X+
    3b2e:	3c 91       	ld	r19, X
    3b30:	c9 01       	movw	r24, r18
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	8c 0f       	add	r24, r28
    3b38:	9d 1f       	adc	r25, r29
    3b3a:	81 5e       	subi	r24, 0xE1	; 225
    3b3c:	9e 4f       	sbci	r25, 0xFE	; 254
    3b3e:	dc 01       	movw	r26, r24
    3b40:	8d 91       	ld	r24, X+
    3b42:	9c 91       	ld	r25, X
    3b44:	40 81       	ld	r20, Z
    3b46:	51 81       	ldd	r21, Z+1	; 0x01
    3b48:	84 0f       	add	r24, r20
    3b4a:	95 1f       	adc	r25, r21
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	1c 92       	st	X, r1
    3b50:	2f 5f       	subi	r18, 0xFF	; 255
    3b52:	3f 4f       	sbci	r19, 0xFF	; 255
    3b54:	d8 01       	movw	r26, r16
    3b56:	2d 93       	st	X+, r18
    3b58:	3c 93       	st	X, r19
      _nt = 0;
    3b5a:	11 82       	std	Z+1, r1	; 0x01
    3b5c:	10 82       	st	Z, r1
      _parity = _parity ^ c;
    3b5e:	cf 59       	subi	r28, 0x9F	; 159
    3b60:	de 4f       	sbci	r29, 0xFE	; 254
    3b62:	88 81       	ld	r24, Y
    3b64:	99 81       	ldd	r25, Y+1	; 0x01
    3b66:	bc e2       	ldi	r27, 0x2C	; 44
    3b68:	8b 27       	eor	r24, r27
    3b6a:	83 c0       	rjmp	.+262    	; 0x3c72 <_ZN4NMEA6decodeEc+0x26c>
      break;
    case '*':
    	// '*' delimits term and precedes checksum term
      (_term[_terms++])[_nt] = 0;
    3b6c:	d8 01       	movw	r26, r16
    3b6e:	2d 91       	ld	r18, X+
    3b70:	3c 91       	ld	r19, X
    3b72:	c9 01       	movw	r24, r18
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	8c 0f       	add	r24, r28
    3b7a:	9d 1f       	adc	r25, r29
    3b7c:	81 5e       	subi	r24, 0xE1	; 225
    3b7e:	9e 4f       	sbci	r25, 0xFE	; 254
    3b80:	dc 01       	movw	r26, r24
    3b82:	8d 91       	ld	r24, X+
    3b84:	9c 91       	ld	r25, X
    3b86:	40 81       	ld	r20, Z
    3b88:	51 81       	ldd	r21, Z+1	; 0x01
    3b8a:	84 0f       	add	r24, r20
    3b8c:	95 1f       	adc	r25, r21
    3b8e:	dc 01       	movw	r26, r24
    3b90:	1c 92       	st	X, r1
    3b92:	2f 5f       	subi	r18, 0xFF	; 255
    3b94:	3f 4f       	sbci	r19, 0xFF	; 255
    3b96:	d8 01       	movw	r26, r16
    3b98:	2d 93       	st	X+, r18
    3b9a:	3c 93       	st	X, r19
      _nt = 0;
    3b9c:	11 82       	std	Z+1, r1	; 0x01
    3b9e:	10 82       	st	Z, r1
    3ba0:	63 c0       	rjmp	.+198    	; 0x3c68 <_ZN4NMEA6decodeEc+0x262>
      _state++;
      break;
    default:
    	// all other chars between '$' and '*' are part of a term
      (_term[_terms])[_nt++] = c;
    3ba2:	20 81       	ld	r18, Z
    3ba4:	31 81       	ldd	r19, Z+1	; 0x01
    3ba6:	d8 01       	movw	r26, r16
    3ba8:	8d 91       	ld	r24, X+
    3baa:	9c 91       	ld	r25, X
    3bac:	88 0f       	add	r24, r24
    3bae:	99 1f       	adc	r25, r25
    3bb0:	8c 0f       	add	r24, r28
    3bb2:	9d 1f       	adc	r25, r29
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	a1 5e       	subi	r26, 0xE1	; 225
    3bb8:	be 4f       	sbci	r27, 0xFE	; 254
    3bba:	0d 90       	ld	r0, X+
    3bbc:	bc 91       	ld	r27, X
    3bbe:	a0 2d       	mov	r26, r0
    3bc0:	a2 0f       	add	r26, r18
    3bc2:	b3 1f       	adc	r27, r19
    3bc4:	6c 93       	st	X, r22
    3bc6:	2f 5f       	subi	r18, 0xFF	; 255
    3bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bca:	31 83       	std	Z+1, r19	; 0x01
    3bcc:	20 83       	st	Z, r18
      _parity = _parity ^ c;
    3bce:	cf 59       	subi	r28, 0x9F	; 159
    3bd0:	de 4f       	sbci	r29, 0xFE	; 254
    3bd2:	77 27       	eor	r23, r23
    3bd4:	67 fd       	sbrc	r22, 7
    3bd6:	70 95       	com	r23
    3bd8:	88 81       	ld	r24, Y
    3bda:	99 81       	ldd	r25, Y+1	; 0x01
    3bdc:	68 27       	eor	r22, r24
    3bde:	79 27       	eor	r23, r25
    3be0:	79 83       	std	Y+1, r23	; 0x01
    3be2:	68 83       	st	Y, r22
    3be4:	fd c1       	rjmp	.+1018   	; 0x3fe0 <_ZN4NMEA6decodeEc+0x5da>
      break;
    }
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    3be6:	fe 01       	movw	r30, r28
    3be8:	e8 0f       	add	r30, r24
    3bea:	f9 1f       	adc	r31, r25
    3bec:	e5 54       	subi	r30, 0x45	; 69
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	60 83       	st	Z, r22
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	e5 5a       	subi	r30, 0xA5	; 165
    3bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf8:	01 96       	adiw	r24, 0x01	; 1
    3bfa:	91 83       	std	Z+1, r25	; 0x01
    3bfc:	80 83       	st	Z, r24
    (_term[_terms])[_nt++] = c;
    3bfe:	de 01       	movw	r26, r28
    3c00:	ad 59       	subi	r26, 0x9D	; 157
    3c02:	be 4f       	sbci	r27, 0xFE	; 254
    3c04:	2d 91       	ld	r18, X+
    3c06:	3c 91       	ld	r19, X
    3c08:	11 97       	sbiw	r26, 0x01	; 1
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e7 54       	subi	r30, 0x47	; 71
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	80 81       	ld	r24, Z
    3c12:	91 81       	ldd	r25, Z+1	; 0x01
    3c14:	88 0f       	add	r24, r24
    3c16:	99 1f       	adc	r25, r25
    3c18:	8c 0f       	add	r24, r28
    3c1a:	9d 1f       	adc	r25, r29
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	e1 5e       	subi	r30, 0xE1	; 225
    3c20:	fe 4f       	sbci	r31, 0xFE	; 254
    3c22:	01 90       	ld	r0, Z+
    3c24:	f0 81       	ld	r31, Z
    3c26:	e0 2d       	mov	r30, r0
    3c28:	e2 0f       	add	r30, r18
    3c2a:	f3 1f       	adc	r31, r19
    3c2c:	60 83       	st	Z, r22
    3c2e:	2f 5f       	subi	r18, 0xFF	; 255
    3c30:	3f 4f       	sbci	r19, 0xFF	; 255
    3c32:	2d 93       	st	X+, r18
    3c34:	3c 93       	st	X, r19
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3c36:	fe 01       	movw	r30, r28
    3c38:	ef 59       	subi	r30, 0x9F	; 159
    3c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3c:	40 81       	ld	r20, Z
    3c3e:	51 81       	ldd	r21, Z+1	; 0x01
    3c40:	86 2f       	mov	r24, r22
    3c42:	99 27       	eor	r25, r25
    3c44:	87 fd       	sbrc	r24, 7
    3c46:	90 95       	com	r25
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3c48:	61 34       	cpi	r22, 0x41	; 65
    3c4a:	14 f0       	brlt	.+4      	; 0x3c50 <_ZN4NMEA6decodeEc+0x24a>
    return int(a)-55;
    3c4c:	c7 97       	sbiw	r24, 0x37	; 55
    3c4e:	01 c0       	rjmp	.+2      	; 0x3c52 <_ZN4NMEA6decodeEc+0x24c>
  }
  else {
    return int(a)-48;
    3c50:	c0 97       	sbiw	r24, 0x30	; 48
    break;
  case 2:
  	// first char following '*' is checksum MSB
    _sentence[n++] = c;
    (_term[_terms])[_nt++] = c;
    _parity = _parity - (16 * _dehex(c));		// replace with bitshift?
    3c52:	9c 01       	movw	r18, r24
    3c54:	a4 e0       	ldi	r26, 0x04	; 4
    3c56:	22 0f       	add	r18, r18
    3c58:	33 1f       	adc	r19, r19
    3c5a:	aa 95       	dec	r26
    3c5c:	e1 f7       	brne	.-8      	; 0x3c56 <_ZN4NMEA6decodeEc+0x250>
    3c5e:	ca 01       	movw	r24, r20
    3c60:	82 1b       	sub	r24, r18
    3c62:	93 0b       	sbc	r25, r19
    3c64:	91 83       	std	Z+1, r25	; 0x01
    3c66:	80 83       	st	Z, r24
    _state++;
    3c68:	c1 5a       	subi	r28, 0xA1	; 161
    3c6a:	de 4f       	sbci	r29, 0xFE	; 254
    3c6c:	88 81       	ld	r24, Y
    3c6e:	99 81       	ldd	r25, Y+1	; 0x01
    3c70:	01 96       	adiw	r24, 0x01	; 1
    3c72:	99 83       	std	Y+1, r25	; 0x01
    3c74:	88 83       	st	Y, r24
    3c76:	b4 c1       	rjmp	.+872    	; 0x3fe0 <_ZN4NMEA6decodeEc+0x5da>
    break;
  case 3:
  	// second char after '*' completes the checksum (LSB)
    _sentence[n++] = c;
    3c78:	9e 01       	movw	r18, r28
    3c7a:	28 0f       	add	r18, r24
    3c7c:	39 1f       	adc	r19, r25
    3c7e:	d9 01       	movw	r26, r18
    3c80:	a5 54       	subi	r26, 0x45	; 69
    3c82:	bf 4f       	sbci	r27, 0xFF	; 255
    3c84:	6c 93       	st	X, r22
    _sentence[n++] = 0;
    3c86:	d9 01       	movw	r26, r18
    3c88:	a4 54       	subi	r26, 0x44	; 68
    3c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8c:	1c 92       	st	X, r1
    3c8e:	de 01       	movw	r26, r28
    3c90:	a5 5a       	subi	r26, 0xA5	; 165
    3c92:	be 4f       	sbci	r27, 0xFE	; 254
    3c94:	02 96       	adiw	r24, 0x02	; 2
    3c96:	8d 93       	st	X+, r24
    3c98:	9c 93       	st	X, r25
    (_term[_terms])[_nt++] = c;
    3c9a:	9e 01       	movw	r18, r28
    3c9c:	2d 59       	subi	r18, 0x9D	; 157
    3c9e:	3e 4f       	sbci	r19, 0xFE	; 254
    3ca0:	f9 01       	movw	r30, r18
    3ca2:	40 81       	ld	r20, Z
    3ca4:	51 81       	ldd	r21, Z+1	; 0x01
    3ca6:	de 01       	movw	r26, r28
    3ca8:	a7 54       	subi	r26, 0x47	; 71
    3caa:	bf 4f       	sbci	r27, 0xFF	; 255
    3cac:	8d 91       	ld	r24, X+
    3cae:	9c 91       	ld	r25, X
    3cb0:	11 97       	sbiw	r26, 0x01	; 1
    3cb2:	88 0f       	add	r24, r24
    3cb4:	99 1f       	adc	r25, r25
    3cb6:	8c 0f       	add	r24, r28
    3cb8:	9d 1f       	adc	r25, r29
    3cba:	81 5e       	subi	r24, 0xE1	; 225
    3cbc:	9e 4f       	sbci	r25, 0xFE	; 254
    3cbe:	fc 01       	movw	r30, r24
    3cc0:	80 81       	ld	r24, Z
    3cc2:	91 81       	ldd	r25, Z+1	; 0x01
    3cc4:	84 0f       	add	r24, r20
    3cc6:	95 1f       	adc	r25, r21
    3cc8:	fc 01       	movw	r30, r24
    3cca:	60 83       	st	Z, r22
    3ccc:	4f 5f       	subi	r20, 0xFF	; 255
    3cce:	5f 4f       	sbci	r21, 0xFF	; 255
    3cd0:	f9 01       	movw	r30, r18
    3cd2:	51 83       	std	Z+1, r21	; 0x01
    3cd4:	40 83       	st	Z, r20
    (_term[_terms++])[_nt] = 0;
    3cd6:	2d 91       	ld	r18, X+
    3cd8:	3c 91       	ld	r19, X
    3cda:	11 97       	sbiw	r26, 0x01	; 1
    3cdc:	c9 01       	movw	r24, r18
    3cde:	88 0f       	add	r24, r24
    3ce0:	99 1f       	adc	r25, r25
    3ce2:	8c 0f       	add	r24, r28
    3ce4:	9d 1f       	adc	r25, r29
    3ce6:	81 5e       	subi	r24, 0xE1	; 225
    3ce8:	9e 4f       	sbci	r25, 0xFE	; 254
    3cea:	fc 01       	movw	r30, r24
    3cec:	80 81       	ld	r24, Z
    3cee:	91 81       	ldd	r25, Z+1	; 0x01
    3cf0:	84 0f       	add	r24, r20
    3cf2:	95 1f       	adc	r25, r21
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	10 82       	st	Z, r1
    3cf8:	2f 5f       	subi	r18, 0xFF	; 255
    3cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfc:	2d 93       	st	X+, r18
    3cfe:	3c 93       	st	X, r19
    _state = 0;
    3d00:	d8 01       	movw	r26, r16
    3d02:	1d 92       	st	X+, r1
    3d04:	1c 92       	st	X, r1
    _parity = _parity - _dehex(c);
    3d06:	fe 01       	movw	r30, r28
    3d08:	ef 59       	subi	r30, 0x9F	; 159
    3d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	26 2f       	mov	r18, r22
    3d12:	33 27       	eor	r19, r19
    3d14:	27 fd       	sbrc	r18, 7
    3d16:	30 95       	com	r19
}

int NMEA::_dehex(char a) {
	// returns base-16 value of chars '0'-'9' and 'A'-'F';
	// does not trap invalid chars!
  if (int(a) >= 65) {
    3d18:	61 34       	cpi	r22, 0x41	; 65
    3d1a:	1c f0       	brlt	.+6      	; 0x3d22 <_ZN4NMEA6decodeEc+0x31c>
    return int(a)-55;
    3d1c:	27 53       	subi	r18, 0x37	; 55
    3d1e:	31 09       	sbc	r19, r1
    3d20:	02 c0       	rjmp	.+4      	; 0x3d26 <_ZN4NMEA6decodeEc+0x320>
  }
  else {
    return int(a)-48;
    3d22:	20 53       	subi	r18, 0x30	; 48
    3d24:	31 09       	sbc	r19, r1
    _sentence[n++] = c;
    _sentence[n++] = 0;
    (_term[_terms])[_nt++] = c;
    (_term[_terms++])[_nt] = 0;
    _state = 0;
    _parity = _parity - _dehex(c);
    3d26:	82 1b       	sub	r24, r18
    3d28:	93 0b       	sbc	r25, r19
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    3d2e:	89 2b       	or	r24, r25
    3d30:	09 f0       	breq	.+2      	; 0x3d34 <_ZN4NMEA6decodeEc+0x32e>
    3d32:	56 c1       	rjmp	.+684    	; 0x3fe0 <_ZN4NMEA6decodeEc+0x5da>
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
    3d34:	88 81       	ld	r24, Y
    3d36:	99 81       	ldd	r25, Y+1	; 0x01
    3d38:	89 2b       	or	r24, r25
    3d3a:	39 f4       	brne	.+14     	; 0x3d4a <_ZN4NMEA6decodeEc+0x344>
    3d3c:	fe 01       	movw	r30, r28
    3d3e:	e5 5a       	subi	r30, 0xA5	; 165
    3d40:	fe 4f       	sbci	r31, 0xFE	; 254
    3d42:	20 81       	ld	r18, Z
    3d44:	31 81       	ldd	r19, Z+1	; 0x01
    3d46:	c9 01       	movw	r24, r18
    3d48:	10 c0       	rjmp	.+32     	; 0x3d6a <_ZN4NMEA6decodeEc+0x364>
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e3 5a       	subi	r30, 0xA3	; 163
    3d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d50:	80 81       	ld	r24, Z
    3d52:	91 81       	ldd	r25, Z+1	; 0x01
    3d54:	06 97       	sbiw	r24, 0x06	; 6
    3d56:	91 f3       	breq	.-28     	; 0x3d3c <_ZN4NMEA6decodeEc+0x336>
    3d58:	43 c1       	rjmp	.+646    	; 0x3fe0 <_ZN4NMEA6decodeEc+0x5da>

//
// public methods
//

int NMEA::decode(char c) {
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	e8 0f       	add	r30, r24
    3d5e:	f9 1f       	adc	r31, r25
    3d60:	df 01       	movw	r26, r30
    3d62:	a5 54       	subi	r26, 0x45	; 69
    3d64:	bf 4f       	sbci	r27, 0xFF	; 255
    // when parity is zero, checksum was correct!
    if (_parity == 0) {
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
    3d66:	4c 91       	ld	r20, X
    3d68:	47 8b       	std	Z+23, r20	; 0x17
    3d6a:	01 97       	sbiw	r24, 0x01	; 1
    3d6c:	97 ff       	sbrs	r25, 7
    3d6e:	f5 cf       	rjmp	.-22     	; 0x3d5a <_ZN4NMEA6decodeEc+0x354>

//
// public methods
//

int NMEA::decode(char c) {
    3d70:	a9 01       	movw	r20, r18
    3d72:	41 50       	subi	r20, 0x01	; 1
    3d74:	51 09       	sbc	r21, r1
    3d76:	c9 01       	movw	r24, r18
    3d78:	37 ff       	sbrs	r19, 7
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <_ZN4NMEA6decodeEc+0x37a>
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	fe 01       	movw	r30, r28
    3d82:	e5 5a       	subi	r30, 0xA5	; 165
    3d84:	fe 4f       	sbci	r31, 0xFE	; 254
    3d86:	9a 01       	movw	r18, r20
    3d88:	28 1b       	sub	r18, r24
    3d8a:	39 0b       	sbc	r19, r25
    3d8c:	31 83       	std	Z+1, r19	; 0x01
    3d8e:	20 83       	st	Z, r18
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3d90:	7e 01       	movw	r14, r28
    3d92:	37 eb       	ldi	r19, 0xB7	; 183
    3d94:	e3 0e       	add	r14, r19
    3d96:	f1 1c       	adc	r15, r1
    3d98:	d7 01       	movw	r26, r14
    3d9a:	1d 92       	st	X+, r1
    3d9c:	1c 92       	st	X, r1
    3d9e:	b7 01       	movw	r22, r14
    3da0:	8e 01       	movw	r16, r28
    3da2:	07 54       	subi	r16, 0x47	; 71
    3da4:	1f 4f       	sbci	r17, 0xFF	; 255
	      	_nt = 0;
    3da6:	de 01       	movw	r26, r28
    3da8:	ad 59       	subi	r26, 0x9D	; 157
    3daa:	be 4f       	sbci	r27, 0xFE	; 254
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3dac:	31 c0       	rjmp	.+98     	; 0x3e10 <_ZN4NMEA6decodeEc+0x40a>
	      	_nt = 0;
    3dae:	11 96       	adiw	r26, 0x01	; 1
    3db0:	1c 92       	st	X, r1
    3db2:	1e 92       	st	-X, r1
	      	while ((_term[f_terms])[_nt]) {
    3db4:	08 c0       	rjmp	.+16     	; 0x3dc6 <_ZN4NMEA6decodeEc+0x3c0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3db6:	40 83       	st	Z, r20
	        	_nt++;
    3db8:	8d 91       	ld	r24, X+
    3dba:	9c 91       	ld	r25, X
    3dbc:	11 97       	sbiw	r26, 0x01	; 1
    3dbe:	01 96       	adiw	r24, 0x01	; 1
    3dc0:	11 96       	adiw	r26, 0x01	; 1
    3dc2:	9c 93       	st	X, r25
    3dc4:	8e 93       	st	-X, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3dc6:	fb 01       	movw	r30, r22
    3dc8:	80 81       	ld	r24, Z
    3dca:	91 81       	ldd	r25, Z+1	; 0x01
    3dcc:	2d 91       	ld	r18, X+
    3dce:	3c 91       	ld	r19, X
    3dd0:	11 97       	sbiw	r26, 0x01	; 1
    3dd2:	88 0f       	add	r24, r24
    3dd4:	99 1f       	adc	r25, r25
    3dd6:	8c 0f       	add	r24, r28
    3dd8:	9d 1f       	adc	r25, r29
    3dda:	ac 01       	movw	r20, r24
    3ddc:	41 5e       	subi	r20, 0xE1	; 225
    3dde:	5e 4f       	sbci	r21, 0xFE	; 254
    3de0:	fa 01       	movw	r30, r20
    3de2:	40 81       	ld	r20, Z
    3de4:	51 81       	ldd	r21, Z+1	; 0x01
    3de6:	42 0f       	add	r20, r18
    3de8:	53 1f       	adc	r21, r19
    3dea:	fa 01       	movw	r30, r20
    3dec:	40 81       	ld	r20, Z
    3dee:	85 58       	subi	r24, 0x85	; 133
    3df0:	9f 4f       	sbci	r25, 0xFF	; 255
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
    3df2:	fc 01       	movw	r30, r24
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	82 0f       	add	r24, r18
    3dfa:	93 1f       	adc	r25, r19
    3dfc:	fc 01       	movw	r30, r24
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
	      	_nt = 0;
	      	while ((_term[f_terms])[_nt]) {
    3dfe:	41 11       	cpse	r20, r1
    3e00:	da cf       	rjmp	.-76     	; 0x3db6 <_ZN4NMEA6decodeEc+0x3b0>
	        	(f_term[f_terms])[_nt] = (_term[f_terms])[_nt];
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
    3e02:	10 82       	st	Z, r1
    	// accept all sentences, or only GPRMC datatype?
    	if ((!_gprmc_only) || (_gprmc_tag == 6)) {
	    	// copy _sentence[] to f_sentence[]
	    	while ((--n) >= 0) { f_sentence[n] = _sentence[n]; }
	    	// copy all _terms[] to f_terms[]
	      for (f_terms=0; f_terms<_terms; f_terms++) {
    3e04:	f7 01       	movw	r30, r14
    3e06:	80 81       	ld	r24, Z
    3e08:	91 81       	ldd	r25, Z+1	; 0x01
    3e0a:	01 96       	adiw	r24, 0x01	; 1
    3e0c:	91 83       	std	Z+1, r25	; 0x01
    3e0e:	80 83       	st	Z, r24
    3e10:	fb 01       	movw	r30, r22
    3e12:	20 81       	ld	r18, Z
    3e14:	31 81       	ldd	r19, Z+1	; 0x01
    3e16:	f8 01       	movw	r30, r16
    3e18:	80 81       	ld	r24, Z
    3e1a:	91 81       	ldd	r25, Z+1	; 0x01
    3e1c:	28 17       	cp	r18, r24
    3e1e:	39 07       	cpc	r19, r25
    3e20:	34 f2       	brlt	.-116    	; 0x3dae <_ZN4NMEA6decodeEc+0x3a8>
	        	_nt++;
	        }
	        (f_term[f_terms])[_nt] = 0;
	      }
	      // when sentence is of datatype GPRMC
	      if (_gprmc_tag == 6) {
    3e22:	fe 01       	movw	r30, r28
    3e24:	e3 5a       	subi	r30, 0xA3	; 163
    3e26:	fe 4f       	sbci	r31, 0xFE	; 254
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 81       	ldd	r25, Z+1	; 0x01
    3e2c:	06 97       	sbiw	r24, 0x06	; 6
    3e2e:	09 f0       	breq	.+2      	; 0x3e32 <_ZN4NMEA6decodeEc+0x42c>
    3e30:	da c0       	rjmp	.+436    	; 0x3fe6 <_ZN4NMEA6decodeEc+0x5e0>
	      	// store values of relevant GPRMC terms
	      	_gprmc_utc = _decimal(_term[1]);
    3e32:	fe 01       	movw	r30, r28
    3e34:	ef 5d       	subi	r30, 0xDF	; 223
    3e36:	fe 4f       	sbci	r31, 0xFE	; 254
    3e38:	60 81       	ld	r22, Z
    3e3a:	71 81       	ldd	r23, Z+1	; 0x01
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN4NMEA8_decimalEPc>
    3e42:	6a 83       	std	Y+2, r22	; 0x02
    3e44:	7b 83       	std	Y+3, r23	; 0x03
    3e46:	8c 83       	std	Y+4, r24	; 0x04
    3e48:	9d 83       	std	Y+5, r25	; 0x05
	      	_gprmc_status = (_term[2])[0];
    3e4a:	fe 01       	movw	r30, r28
    3e4c:	ed 5d       	subi	r30, 0xDD	; 221
    3e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e50:	01 90       	ld	r0, Z+
    3e52:	f0 81       	ld	r31, Z
    3e54:	e0 2d       	mov	r30, r0
    3e56:	80 81       	ld	r24, Z
    3e58:	8e 83       	std	Y+6, r24	; 0x06
	        // calculate signed degree-decimal value of latitude term
	        _gprmc_lat = _decimal(_term[3]) / 100.0;
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	eb 5d       	subi	r30, 0xDB	; 219
    3e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3e60:	60 81       	ld	r22, Z
    3e62:	71 81       	ldd	r23, Z+1	; 0x01
    3e64:	ce 01       	movw	r24, r28
    3e66:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN4NMEA8_decimalEPc>
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	48 ec       	ldi	r20, 0xC8	; 200
    3e70:	52 e4       	ldi	r21, 0x42	; 66
    3e72:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    3e76:	7b 01       	movw	r14, r22
    3e78:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_lat);
    3e7a:	7f 2d       	mov	r23, r15
    3e7c:	80 2f       	mov	r24, r16
    3e7e:	91 2f       	mov	r25, r17
    3e80:	0e 94 64 41 	call	0x82c8	; 0x82c8 <floor>
    3e84:	4b 01       	movw	r8, r22
    3e86:	5c 01       	movw	r10, r24
    3e88:	fe 01       	movw	r30, r28
    3e8a:	eb 59       	subi	r30, 0x9B	; 155
    3e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e8e:	60 83       	st	Z, r22
    3e90:	71 83       	std	Z+1, r23	; 0x01
    3e92:	82 83       	std	Z+2, r24	; 0x02
    3e94:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_lat = (100.0 * (_gprmc_lat - _degs)) / 60.0;
    3e96:	9b 01       	movw	r18, r22
    3e98:	ac 01       	movw	r20, r24
    3e9a:	6e 2d       	mov	r22, r14
    3e9c:	7f 2d       	mov	r23, r15
    3e9e:	80 2f       	mov	r24, r16
    3ea0:	91 2f       	mov	r25, r17
    3ea2:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	48 ec       	ldi	r20, 0xC8	; 200
    3eac:	52 e4       	ldi	r21, 0x42	; 66
    3eae:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	40 e7       	ldi	r20, 0x70	; 112
    3eb8:	52 e4       	ldi	r21, 0x42	; 66
    3eba:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
	        _gprmc_lat += _degs;
    3ebe:	a5 01       	movw	r20, r10
    3ec0:	94 01       	movw	r18, r8
    3ec2:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    3ec6:	9b 01       	movw	r18, r22
    3ec8:	46 2f       	mov	r20, r22
    3eca:	53 2f       	mov	r21, r19
    3ecc:	68 2f       	mov	r22, r24
    3ece:	79 2f       	mov	r23, r25
    3ed0:	4f 83       	std	Y+7, r20	; 0x07
    3ed2:	58 87       	std	Y+8, r21	; 0x08
    3ed4:	69 87       	std	Y+9, r22	; 0x09
    3ed6:	7a 87       	std	Y+10, r23	; 0x0a
	        // southern hemisphere is negative-valued
	        if ((_term[4])[0] == 'S') {
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e9 5d       	subi	r30, 0xD9	; 217
    3edc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ede:	01 90       	ld	r0, Z+
    3ee0:	f0 81       	ld	r31, Z
    3ee2:	e0 2d       	mov	r30, r0
    3ee4:	40 81       	ld	r20, Z
    3ee6:	43 35       	cpi	r20, 0x53	; 83
    3ee8:	59 f4       	brne	.+22     	; 0x3f00 <_ZN4NMEA6decodeEc+0x4fa>
	          _gprmc_lat = 0.0 - _gprmc_lat;
    3eea:	48 2f       	mov	r20, r24
    3eec:	59 2f       	mov	r21, r25
    3eee:	60 e0       	ldi	r22, 0x00	; 0
    3ef0:	70 e0       	ldi	r23, 0x00	; 0
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3ef8:	6f 83       	std	Y+7, r22	; 0x07
    3efa:	78 87       	std	Y+8, r23	; 0x08
    3efc:	89 87       	std	Y+9, r24	; 0x09
    3efe:	9a 87       	std	Y+10, r25	; 0x0a
	        }
	        // calculate signed degree-decimal value of longitude term
	        _gprmc_long = _decimal(_term[5]) / 100.0;
    3f00:	fe 01       	movw	r30, r28
    3f02:	e7 5d       	subi	r30, 0xD7	; 215
    3f04:	fe 4f       	sbci	r31, 0xFE	; 254
    3f06:	60 81       	ld	r22, Z
    3f08:	71 81       	ldd	r23, Z+1	; 0x01
    3f0a:	ce 01       	movw	r24, r28
    3f0c:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN4NMEA8_decimalEPc>
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	48 ec       	ldi	r20, 0xC8	; 200
    3f16:	52 e4       	ldi	r21, 0x42	; 66
    3f18:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    3f1c:	7b 01       	movw	r14, r22
    3f1e:	8c 01       	movw	r16, r24
	        _degs = floor(_gprmc_long);
    3f20:	7f 2d       	mov	r23, r15
    3f22:	80 2f       	mov	r24, r16
    3f24:	91 2f       	mov	r25, r17
    3f26:	0e 94 64 41 	call	0x82c8	; 0x82c8 <floor>
    3f2a:	4b 01       	movw	r8, r22
    3f2c:	5c 01       	movw	r10, r24
    3f2e:	fe 01       	movw	r30, r28
    3f30:	eb 59       	subi	r30, 0x9B	; 155
    3f32:	fe 4f       	sbci	r31, 0xFE	; 254
    3f34:	60 83       	st	Z, r22
    3f36:	71 83       	std	Z+1, r23	; 0x01
    3f38:	82 83       	std	Z+2, r24	; 0x02
    3f3a:	93 83       	std	Z+3, r25	; 0x03
	        _gprmc_long = (100.0 * (_gprmc_long - _degs)) / 60.0;
    3f3c:	9b 01       	movw	r18, r22
    3f3e:	ac 01       	movw	r20, r24
    3f40:	6e 2d       	mov	r22, r14
    3f42:	7f 2d       	mov	r23, r15
    3f44:	80 2f       	mov	r24, r16
    3f46:	91 2f       	mov	r25, r17
    3f48:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	48 ec       	ldi	r20, 0xC8	; 200
    3f52:	52 e4       	ldi	r21, 0x42	; 66
    3f54:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e7       	ldi	r20, 0x70	; 112
    3f5e:	52 e4       	ldi	r21, 0x42	; 66
    3f60:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
	        _gprmc_long += _degs;
    3f64:	a5 01       	movw	r20, r10
    3f66:	94 01       	movw	r18, r8
    3f68:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    3f6c:	9b 01       	movw	r18, r22
    3f6e:	46 2f       	mov	r20, r22
    3f70:	53 2f       	mov	r21, r19
    3f72:	68 2f       	mov	r22, r24
    3f74:	79 2f       	mov	r23, r25
    3f76:	4b 87       	std	Y+11, r20	; 0x0b
    3f78:	5c 87       	std	Y+12, r21	; 0x0c
    3f7a:	6d 87       	std	Y+13, r22	; 0x0d
    3f7c:	7e 87       	std	Y+14, r23	; 0x0e
	        // western hemisphere is negative-valued
	        if ((_term[6])[0] == 'W') {
    3f7e:	fe 01       	movw	r30, r28
    3f80:	e5 5d       	subi	r30, 0xD5	; 213
    3f82:	fe 4f       	sbci	r31, 0xFE	; 254
    3f84:	01 90       	ld	r0, Z+
    3f86:	f0 81       	ld	r31, Z
    3f88:	e0 2d       	mov	r30, r0
    3f8a:	40 81       	ld	r20, Z
    3f8c:	47 35       	cpi	r20, 0x57	; 87
    3f8e:	59 f4       	brne	.+22     	; 0x3fa6 <_ZN4NMEA6decodeEc+0x5a0>
	          _gprmc_long = 0.0 - _gprmc_long;
    3f90:	48 2f       	mov	r20, r24
    3f92:	59 2f       	mov	r21, r25
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	70 e0       	ldi	r23, 0x00	; 0
    3f98:	cb 01       	movw	r24, r22
    3f9a:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    3f9e:	6b 87       	std	Y+11, r22	; 0x0b
    3fa0:	7c 87       	std	Y+12, r23	; 0x0c
    3fa2:	8d 87       	std	Y+13, r24	; 0x0d
    3fa4:	9e 87       	std	Y+14, r25	; 0x0e
	        }
	        _gprmc_speed = _decimal(_term[7]);
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	e3 5d       	subi	r30, 0xD3	; 211
    3faa:	fe 4f       	sbci	r31, 0xFE	; 254
    3fac:	60 81       	ld	r22, Z
    3fae:	71 81       	ldd	r23, Z+1	; 0x01
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN4NMEA8_decimalEPc>
    3fb6:	6f 87       	std	Y+15, r22	; 0x0f
    3fb8:	78 8b       	std	Y+16, r23	; 0x10
    3fba:	89 8b       	std	Y+17, r24	; 0x11
    3fbc:	9a 8b       	std	Y+18, r25	; 0x12
	        _gprmc_angle = _decimal(_term[8]);
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e1 5d       	subi	r30, 0xD1	; 209
    3fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc4:	60 81       	ld	r22, Z
    3fc6:	71 81       	ldd	r23, Z+1	; 0x01
    3fc8:	ce 01       	movw	r24, r28
    3fca:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN4NMEA8_decimalEPc>
    3fce:	6b 8b       	std	Y+19, r22	; 0x13
    3fd0:	7c 8b       	std	Y+20, r23	; 0x14
    3fd2:	8d 8b       	std	Y+21, r24	; 0x15
    3fd4:	9e 8b       	std	Y+22, r25	; 0x16
    3fd6:	07 c0       	rjmp	.+14     	; 0x3fe6 <_ZN4NMEA6decodeEc+0x5e0>
      	return 1;
      }
    }
    break;
  default:
    _state = 0;
    3fd8:	c1 5a       	subi	r28, 0xA1	; 161
    3fda:	de 4f       	sbci	r29, 0xFE	; 254
    3fdc:	19 82       	std	Y+1, r1	; 0x01
    3fde:	18 82       	st	Y, r1
    break;
  }
  return 0;
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	02 c0       	rjmp	.+4      	; 0x3fea <_ZN4NMEA6decodeEc+0x5e4>
	        }
	        _gprmc_speed = _decimal(_term[7]);
	        _gprmc_angle = _decimal(_term[8]);
	      }
      	// sentence accepted!
      	return 1;
    3fe6:	21 e0       	ldi	r18, 0x01	; 1
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
  default:
    _state = 0;
    break;
  }
  return 0;
}
    3fea:	c9 01       	movw	r24, r18
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	ef 90       	pop	r14
    3ff8:	bf 90       	pop	r11
    3ffa:	af 90       	pop	r10
    3ffc:	9f 90       	pop	r9
    3ffe:	8f 90       	pop	r8
    4000:	08 95       	ret

00004002 <_ZN11FlexiTimer23setEmdPFvvE>:
/**
 * @param resolution
 *   0.001 implies a 1 ms (1/1000s = 0.001s = 1ms) resolution. Therefore,
 *   0.0005 implies a 0.5 ms (1/2000s) resolution. And so on.
 */
void FlexiTimer2::set(unsigned long units, double resolution, void (*f)()) {
    4002:	cf 92       	push	r12
    4004:	df 92       	push	r13
    4006:	ef 92       	push	r14
    4008:	ff 92       	push	r15
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	6b 01       	movw	r12, r22
    4010:	7c 01       	movw	r14, r24
    4012:	ca 01       	movw	r24, r20
    4014:	b9 01       	movw	r22, r18
		TCCR2 &= ~((1<<CS21) | (1<<CS20));
		prescaler = 256.0;
	}
#endif
	
	tcnt2 = 256 - (int)((float)F_CPU * resolution / prescaler);
    4016:	20 e0       	ldi	r18, 0x00	; 0
    4018:	34 e2       	ldi	r19, 0x24	; 36
    401a:	44 e7       	ldi	r20, 0x74	; 116
    401c:	5b e4       	ldi	r21, 0x4B	; 75
    401e:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	a9 01       	movw	r20, r18
    4028:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    402c:	0e 94 f6 40 	call	0x81ec	; 0x81ec <__fixsfsi>
    4030:	80 e0       	ldi	r24, 0x00	; 0
    4032:	91 e0       	ldi	r25, 0x01	; 1
    4034:	86 1b       	sub	r24, r22
    4036:	97 0b       	sbc	r25, r23
    4038:	90 93 39 09 	sts	0x0939, r25
    403c:	80 93 38 09 	sts	0x0938, r24
	
	if (units == 0)
    4040:	c1 14       	cp	r12, r1
    4042:	d1 04       	cpc	r13, r1
    4044:	e1 04       	cpc	r14, r1
    4046:	f1 04       	cpc	r15, r1
    4048:	69 f4       	brne	.+26     	; 0x4064 <_ZN11FlexiTimer23setEmdPFvvE+0x62>
		time_units = 1;
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	a0 e0       	ldi	r26, 0x00	; 0
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	80 93 41 09 	sts	0x0941, r24
    4056:	90 93 42 09 	sts	0x0942, r25
    405a:	a0 93 43 09 	sts	0x0943, r26
    405e:	b0 93 44 09 	sts	0x0944, r27
    4062:	08 c0       	rjmp	.+16     	; 0x4074 <_ZN11FlexiTimer23setEmdPFvvE+0x72>
	else
		time_units = units;
    4064:	c0 92 41 09 	sts	0x0941, r12
    4068:	d0 92 42 09 	sts	0x0942, r13
    406c:	e0 92 43 09 	sts	0x0943, r14
    4070:	f0 92 44 09 	sts	0x0944, r15
		
	func = f;
    4074:	10 93 40 09 	sts	0x0940, r17
    4078:	00 93 3f 09 	sts	0x093F, r16
}
    407c:	1f 91       	pop	r17
    407e:	0f 91       	pop	r16
    4080:	ff 90       	pop	r15
    4082:	ef 90       	pop	r14
    4084:	df 90       	pop	r13
    4086:	cf 90       	pop	r12
    4088:	08 95       	ret

0000408a <_ZN11FlexiTimer23setEmPFvvE>:
void (*FlexiTimer2::func)();
volatile unsigned long FlexiTimer2::count;
volatile char FlexiTimer2::overflowing;
volatile unsigned int FlexiTimer2::tcnt2;

void FlexiTimer2::set(unsigned long ms, void (*f)()) {
    408a:	0f 93       	push	r16
    408c:	1f 93       	push	r17
    FlexiTimer2::set(ms, 0.001, f);
    408e:	8a 01       	movw	r16, r20
    4090:	2f e6       	ldi	r18, 0x6F	; 111
    4092:	32 e1       	ldi	r19, 0x12	; 18
    4094:	43 e8       	ldi	r20, 0x83	; 131
    4096:	5a e3       	ldi	r21, 0x3A	; 58
    4098:	0e 94 01 20 	call	0x4002	; 0x4002 <_ZN11FlexiTimer23setEmdPFvvE>
}
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <_ZN11FlexiTimer25startEv>:
		
	func = f;
}

void FlexiTimer2::start() {
	count = 0;
    40a2:	10 92 3b 09 	sts	0x093B, r1
    40a6:	10 92 3c 09 	sts	0x093C, r1
    40aa:	10 92 3d 09 	sts	0x093D, r1
    40ae:	10 92 3e 09 	sts	0x093E, r1
	overflowing = 0;
    40b2:	10 92 3a 09 	sts	0x093A, r1
    40b6:	08 95       	ret

000040b8 <_ZN11FlexiTimer29_overflowEv>:
	TIMSK &= ~(1<<TOIE2);
#endif
}

void FlexiTimer2::_overflow() {
	count += 1;
    40b8:	80 91 3b 09 	lds	r24, 0x093B
    40bc:	90 91 3c 09 	lds	r25, 0x093C
    40c0:	a0 91 3d 09 	lds	r26, 0x093D
    40c4:	b0 91 3e 09 	lds	r27, 0x093E
    40c8:	01 96       	adiw	r24, 0x01	; 1
    40ca:	a1 1d       	adc	r26, r1
    40cc:	b1 1d       	adc	r27, r1
    40ce:	80 93 3b 09 	sts	0x093B, r24
    40d2:	90 93 3c 09 	sts	0x093C, r25
    40d6:	a0 93 3d 09 	sts	0x093D, r26
    40da:	b0 93 3e 09 	sts	0x093E, r27
	
	if (count >= time_units && !overflowing) {
    40de:	40 91 3b 09 	lds	r20, 0x093B
    40e2:	50 91 3c 09 	lds	r21, 0x093C
    40e6:	60 91 3d 09 	lds	r22, 0x093D
    40ea:	70 91 3e 09 	lds	r23, 0x093E
    40ee:	80 91 41 09 	lds	r24, 0x0941
    40f2:	90 91 42 09 	lds	r25, 0x0942
    40f6:	a0 91 43 09 	lds	r26, 0x0943
    40fa:	b0 91 44 09 	lds	r27, 0x0944
    40fe:	48 17       	cp	r20, r24
    4100:	59 07       	cpc	r21, r25
    4102:	6a 07       	cpc	r22, r26
    4104:	7b 07       	cpc	r23, r27
    4106:	b0 f0       	brcs	.+44     	; 0x4134 <_ZN11FlexiTimer29_overflowEv+0x7c>
    4108:	80 91 3a 09 	lds	r24, 0x093A
    410c:	81 11       	cpse	r24, r1
    410e:	12 c0       	rjmp	.+36     	; 0x4134 <_ZN11FlexiTimer29_overflowEv+0x7c>
		overflowing = 1;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	80 93 3a 09 	sts	0x093A, r24
		count = 0;
    4116:	10 92 3b 09 	sts	0x093B, r1
    411a:	10 92 3c 09 	sts	0x093C, r1
    411e:	10 92 3d 09 	sts	0x093D, r1
    4122:	10 92 3e 09 	sts	0x093E, r1
		(*func)();
    4126:	e0 91 3f 09 	lds	r30, 0x093F
    412a:	f0 91 40 09 	lds	r31, 0x0940
    412e:	19 95       	eicall
		overflowing = 0;
    4130:	10 92 3a 09 	sts	0x093A, r1
    4134:	08 95       	ret

00004136 <__vector_15>:
	}
}

ISR(TIMER2_OVF_vect) {
    4136:	1f 92       	push	r1
    4138:	0f 92       	push	r0
    413a:	0f b6       	in	r0, 0x3f	; 63
    413c:	0f 92       	push	r0
    413e:	11 24       	eor	r1, r1
    4140:	0b b6       	in	r0, 0x3b	; 59
    4142:	0f 92       	push	r0
    4144:	1b be       	out	0x3b, r1	; 59
    4146:	2f 93       	push	r18
    4148:	3f 93       	push	r19
    414a:	4f 93       	push	r20
    414c:	5f 93       	push	r21
    414e:	6f 93       	push	r22
    4150:	7f 93       	push	r23
    4152:	8f 93       	push	r24
    4154:	9f 93       	push	r25
    4156:	af 93       	push	r26
    4158:	bf 93       	push	r27
    415a:	ef 93       	push	r30
    415c:	ff 93       	push	r31
#elif defined (__AVR_ATmega128__)
	TCNT2 = FlexiTimer2::tcnt2;
#elif defined (__AVR_ATmega8__)
	TCNT2 = FlexiTimer2::tcnt2;
#endif
	FlexiTimer2::_overflow();
    415e:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <_ZN11FlexiTimer29_overflowEv>
}
    4162:	ff 91       	pop	r31
    4164:	ef 91       	pop	r30
    4166:	bf 91       	pop	r27
    4168:	af 91       	pop	r26
    416a:	9f 91       	pop	r25
    416c:	8f 91       	pop	r24
    416e:	7f 91       	pop	r23
    4170:	6f 91       	pop	r22
    4172:	5f 91       	pop	r21
    4174:	4f 91       	pop	r20
    4176:	3f 91       	pop	r19
    4178:	2f 91       	pop	r18
    417a:	0f 90       	pop	r0
    417c:	0b be       	out	0x3b, r0	; 59
    417e:	0f 90       	pop	r0
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	0f 90       	pop	r0
    4184:	1f 90       	pop	r1
    4186:	18 95       	reti

00004188 <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
    4188:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
    418a:	0c 94 ad 45 	jmp	0x8b5a	; 0x8b5a <__eerd_byte_m2560>

0000418e <_ZN11EEPROMClass5writeEih>:
}

void EEPROMClass::write(int address, uint8_t value)
{
    418e:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
    4190:	64 2f       	mov	r22, r20
    4192:	0c 94 b5 45 	jmp	0x8b6a	; 0x8b6a <__eewr_byte_m2560>

00004196 <_ZN13AltSoftSerial4readEv>:

int AltSoftSerial::read(void)
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
    4196:	90 91 ea 09 	lds	r25, 0x09EA
	tail = rx_buffer_tail;
    419a:	80 91 e9 09 	lds	r24, 0x09E9
	if (head == tail) return -1;
    419e:	98 17       	cp	r25, r24
    41a0:	69 f0       	breq	.+26     	; 0x41bc <_ZN13AltSoftSerial4readEv+0x26>
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
    41a2:	8f 5f       	subi	r24, 0xFF	; 255
    41a4:	80 35       	cpi	r24, 0x50	; 80
    41a6:	08 f0       	brcs	.+2      	; 0x41aa <_ZN13AltSoftSerial4readEv+0x14>
    41a8:	80 e0       	ldi	r24, 0x00	; 0
	out = rx_buffer[tail];
    41aa:	e8 2f       	mov	r30, r24
    41ac:	f0 e0       	ldi	r31, 0x00	; 0
    41ae:	e7 56       	subi	r30, 0x67	; 103
    41b0:	f6 4f       	sbci	r31, 0xF6	; 246
    41b2:	20 81       	ld	r18, Z
	rx_buffer_tail = tail;
    41b4:	80 93 e9 09 	sts	0x09E9, r24
	return out;
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	02 c0       	rjmp	.+4      	; 0x41c0 <_ZN13AltSoftSerial4readEv+0x2a>
{
	uint8_t head, tail, out;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    41bc:	2f ef       	ldi	r18, 0xFF	; 255
    41be:	3f ef       	ldi	r19, 0xFF	; 255
	if (++tail >= RX_BUFFER_SIZE) tail = 0;
	out = rx_buffer[tail];
	rx_buffer_tail = tail;
	return out;
}
    41c0:	c9 01       	movw	r24, r18
    41c2:	08 95       	ret

000041c4 <_ZN13AltSoftSerial4peekEv>:

int AltSoftSerial::peek(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    41c4:	80 91 ea 09 	lds	r24, 0x09EA
	tail = rx_buffer_tail;
    41c8:	e0 91 e9 09 	lds	r30, 0x09E9
	if (head == tail) return -1;
    41cc:	8e 17       	cp	r24, r30
    41ce:	31 f0       	breq	.+12     	; 0x41dc <_ZN13AltSoftSerial4peekEv+0x18>
	return rx_buffer[tail];
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	e7 56       	subi	r30, 0x67	; 103
    41d4:	f6 4f       	sbci	r31, 0xF6	; 246
    41d6:	20 81       	ld	r18, Z
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	02 c0       	rjmp	.+4      	; 0x41e0 <_ZN13AltSoftSerial4peekEv+0x1c>
{
	uint8_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    41dc:	2f ef       	ldi	r18, 0xFF	; 255
    41de:	3f ef       	ldi	r19, 0xFF	; 255
	return rx_buffer[tail];
}
    41e0:	c9 01       	movw	r24, r18
    41e2:	08 95       	ret

000041e4 <_ZN13AltSoftSerial9availableEv>:

int AltSoftSerial::available(void)
{
	uint8_t head, tail;

	head = rx_buffer_head;
    41e4:	50 91 ea 09 	lds	r21, 0x09EA
	tail = rx_buffer_tail;
    41e8:	40 91 e9 09 	lds	r20, 0x09E9
    41ec:	25 2f       	mov	r18, r21
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	84 2f       	mov	r24, r20
    41f2:	90 e0       	ldi	r25, 0x00	; 0
	if (head >= tail) return head - tail;
    41f4:	54 17       	cp	r21, r20
    41f6:	08 f0       	brcs	.+2      	; 0x41fa <_ZN13AltSoftSerial9availableEv+0x16>
    41f8:	02 c0       	rjmp	.+4      	; 0x41fe <_ZN13AltSoftSerial9availableEv+0x1a>
	return RX_BUFFER_SIZE + head - tail;
    41fa:	20 5b       	subi	r18, 0xB0	; 176
    41fc:	3f 4f       	sbci	r19, 0xFF	; 255
    41fe:	28 1b       	sub	r18, r24
    4200:	39 0b       	sbc	r19, r25
}
    4202:	c9 01       	movw	r24, r18
    4204:	08 95       	ret

00004206 <_ZN13AltSoftSerial4initEm>:
#ifndef INPUT_PULLUP
#define INPUT_PULLUP INPUT
#endif

void AltSoftSerial::init(uint32_t cycles_per_bit)
{
    4206:	9b 01       	movw	r18, r22
    4208:	ac 01       	movw	r20, r24
	if (cycles_per_bit < 7085) {
    420a:	2d 3a       	cpi	r18, 0xAD	; 173
    420c:	8b e1       	ldi	r24, 0x1B	; 27
    420e:	38 07       	cpc	r19, r24
    4210:	41 05       	cpc	r20, r1
    4212:	51 05       	cpc	r21, r1
    4214:	30 f4       	brcc	.+12     	; 0x4222 <_ZN13AltSoftSerial4initEm+0x1c>
		CONFIG_TIMER_NOPRESCALE();
    4216:	10 92 73 00 	sts	0x0073, r1
    421a:	10 92 20 01 	sts	0x0120, r1
    421e:	81 e8       	ldi	r24, 0x81	; 129
    4220:	12 c0       	rjmp	.+36     	; 0x4246 <_ZN13AltSoftSerial4initEm+0x40>
	} else {
		cycles_per_bit /= 8;
    4222:	63 e0       	ldi	r22, 0x03	; 3
    4224:	56 95       	lsr	r21
    4226:	47 95       	ror	r20
    4228:	37 95       	ror	r19
    422a:	27 95       	ror	r18
    422c:	6a 95       	dec	r22
    422e:	d1 f7       	brne	.-12     	; 0x4224 <_ZN13AltSoftSerial4initEm+0x1e>
		if (cycles_per_bit < 7085) {
    4230:	2d 3a       	cpi	r18, 0xAD	; 173
    4232:	8b e1       	ldi	r24, 0x1B	; 27
    4234:	38 07       	cpc	r19, r24
    4236:	41 05       	cpc	r20, r1
    4238:	51 05       	cpc	r21, r1
    423a:	b0 f5       	brcc	.+108    	; 0x42a8 <_ZN13AltSoftSerial4initEm+0xa2>
			CONFIG_TIMER_PRESCALE_8();
    423c:	10 92 73 00 	sts	0x0073, r1
    4240:	10 92 20 01 	sts	0x0120, r1
    4244:	82 e8       	ldi	r24, 0x82	; 130
    4246:	80 93 21 01 	sts	0x0121, r24
		} else {
			return; // minimum 283 baud at 16 MHz clock
		}
	}
	ticks_per_bit = cycles_per_bit;
    424a:	30 93 ee 09 	sts	0x09EE, r19
    424e:	20 93 ed 09 	sts	0x09ED, r18
	rx_stop_ticks = cycles_per_bit * 37 / 4;
    4252:	a5 e2       	ldi	r26, 0x25	; 37
    4254:	b0 e0       	ldi	r27, 0x00	; 0
    4256:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    425a:	22 e0       	ldi	r18, 0x02	; 2
    425c:	96 95       	lsr	r25
    425e:	87 95       	ror	r24
    4260:	77 95       	ror	r23
    4262:	67 95       	ror	r22
    4264:	2a 95       	dec	r18
    4266:	d1 f7       	brne	.-12     	; 0x425c <_ZN13AltSoftSerial4initEm+0x56>
    4268:	70 93 f0 09 	sts	0x09F0, r23
    426c:	60 93 ef 09 	sts	0x09EF, r22
	pinMode(INPUT_CAPTURE_PIN, INPUT_PULLUP);
    4270:	62 e0       	ldi	r22, 0x02	; 2
    4272:	80 e3       	ldi	r24, 0x30	; 48
    4274:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	digitalWrite(OUTPUT_COMPARE_A_PIN, HIGH);
    4278:	61 e0       	ldi	r22, 0x01	; 1
    427a:	8e e2       	ldi	r24, 0x2E	; 46
    427c:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <digitalWrite>
	pinMode(OUTPUT_COMPARE_A_PIN, OUTPUT);
    4280:	61 e0       	ldi	r22, 0x01	; 1
    4282:	8e e2       	ldi	r24, 0x2E	; 46
    4284:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	rx_count = 0;
    4288:	10 92 eb 09 	sts	0x09EB, r1
	rx_buffer_head = 0;
    428c:	10 92 ea 09 	sts	0x09EA, r1
	rx_buffer_tail = 0;
    4290:	10 92 e9 09 	sts	0x09E9, r1
	tx_state = 0;
    4294:	10 92 98 09 	sts	0x0998, r1
	tx_buffer_head = 0;
    4298:	10 92 97 09 	sts	0x0997, r1
	tx_buffer_tail = 0;
    429c:	10 92 96 09 	sts	0x0996, r1
	ENABLE_INT_INPUT_CAPTURE();
    42a0:	80 e2       	ldi	r24, 0x20	; 32
    42a2:	8a bb       	out	0x1a, r24	; 26
    42a4:	80 93 73 00 	sts	0x0073, r24
    42a8:	08 95       	ret

000042aa <_ZN13AltSoftSerial9writeByteEh>:

void AltSoftSerial::writeByte(uint8_t b)
{
	uint8_t intr_state, head;

	head = tx_buffer_head + 1;
    42aa:	90 91 97 09 	lds	r25, 0x0997
    42ae:	9f 5f       	subi	r25, 0xFF	; 255
	if (head >= TX_BUFFER_SIZE) head = 0;
    42b0:	94 34       	cpi	r25, 0x44	; 68
    42b2:	08 f0       	brcs	.+2      	; 0x42b6 <_ZN13AltSoftSerial9writeByteEh+0xc>
    42b4:	90 e0       	ldi	r25, 0x00	; 0
	while (tx_buffer_tail == head) ; // wait until space in buffer
    42b6:	20 91 96 09 	lds	r18, 0x0996
    42ba:	29 17       	cp	r18, r25
    42bc:	e1 f3       	breq	.-8      	; 0x42b6 <_ZN13AltSoftSerial9writeByteEh+0xc>
	intr_state = SREG;
    42be:	2f b7       	in	r18, 0x3f	; 63
	cli();
    42c0:	f8 94       	cli
	if (tx_state) {
    42c2:	30 91 98 09 	lds	r19, 0x0998
    42c6:	33 23       	and	r19, r19
    42c8:	41 f0       	breq	.+16     	; 0x42da <_ZN13AltSoftSerial9writeByteEh+0x30>
		tx_buffer[head] = b;
    42ca:	e9 2f       	mov	r30, r25
    42cc:	f0 e0       	ldi	r31, 0x00	; 0
    42ce:	ea 5b       	subi	r30, 0xBA	; 186
    42d0:	f6 4f       	sbci	r31, 0xF6	; 246
    42d2:	80 83       	st	Z, r24
		tx_buffer_head = head;
    42d4:	90 93 97 09 	sts	0x0997, r25
    42d8:	1d c0       	rjmp	.+58     	; 0x4314 <_ZN13AltSoftSerial9writeByteEh+0x6a>
	} else {
		tx_state = 1;
    42da:	91 e0       	ldi	r25, 0x01	; 1
    42dc:	90 93 98 09 	sts	0x0998, r25
		tx_byte = b;
    42e0:	80 93 f1 09 	sts	0x09F1, r24
		tx_bit = 0;
    42e4:	10 92 f2 09 	sts	0x09F2, r1
		ENABLE_INT_COMPARE_A();
    42e8:	82 e0       	ldi	r24, 0x02	; 2
    42ea:	8a bb       	out	0x1a, r24	; 26
    42ec:	80 91 73 00 	lds	r24, 0x0073
    42f0:	82 60       	ori	r24, 0x02	; 2
    42f2:	80 93 73 00 	sts	0x0073, r24
		CONFIG_MATCH_CLEAR();
    42f6:	80 91 20 01 	lds	r24, 0x0120
    42fa:	8f 73       	andi	r24, 0x3F	; 63
    42fc:	80 68       	ori	r24, 0x80	; 128
    42fe:	80 93 20 01 	sts	0x0120, r24
		SET_COMPARE_A(GET_TIMER_COUNT() + 16);
    4302:	80 91 24 01 	lds	r24, 0x0124
    4306:	90 91 25 01 	lds	r25, 0x0125
    430a:	40 96       	adiw	r24, 0x10	; 16
    430c:	90 93 29 01 	sts	0x0129, r25
    4310:	80 93 28 01 	sts	0x0128, r24
	}
	SREG = intr_state;
    4314:	2f bf       	out	0x3f, r18	; 63
    4316:	08 95       	ret

00004318 <_ZN13AltSoftSerial5writeEh>:
    4318:	86 2f       	mov	r24, r22
    431a:	0e 94 55 21 	call	0x42aa	; 0x42aa <_ZN13AltSoftSerial9writeByteEh>
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	08 95       	ret

00004324 <__vector_47>:
}


ISR(COMPARE_A_INTERRUPT)
{
    4324:	1f 92       	push	r1
    4326:	0f 92       	push	r0
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	0f 92       	push	r0
    432c:	11 24       	eor	r1, r1
    432e:	0b b6       	in	r0, 0x3b	; 59
    4330:	0f 92       	push	r0
    4332:	1b be       	out	0x3b, r1	; 59
    4334:	2f 93       	push	r18
    4336:	3f 93       	push	r19
    4338:	4f 93       	push	r20
    433a:	5f 93       	push	r21
    433c:	6f 93       	push	r22
    433e:	7f 93       	push	r23
    4340:	8f 93       	push	r24
    4342:	9f 93       	push	r25
    4344:	ef 93       	push	r30
    4346:	ff 93       	push	r31
	uint8_t state, byte, bit, head, tail;
	uint16_t target;

	state = tx_state;
    4348:	40 91 98 09 	lds	r20, 0x0998
	byte = tx_byte;
    434c:	50 91 f1 09 	lds	r21, 0x09F1
	target = GET_COMPARE_A();
    4350:	80 91 28 01 	lds	r24, 0x0128
    4354:	90 91 29 01 	lds	r25, 0x0129
	while (state < 9) {
		target += ticks_per_bit;
    4358:	20 91 ed 09 	lds	r18, 0x09ED
    435c:	30 91 ee 09 	lds	r19, 0x09EE
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
    4360:	70 91 f2 09 	lds	r23, 0x09F2
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    4364:	1d c0       	rjmp	.+58     	; 0x43a0 <__vector_47+0x7c>
		target += ticks_per_bit;
    4366:	82 0f       	add	r24, r18
    4368:	93 1f       	adc	r25, r19
		bit = byte & 1;
    436a:	65 2f       	mov	r22, r21
    436c:	61 70       	andi	r22, 0x01	; 1
		byte >>= 1;
    436e:	56 95       	lsr	r21
		state++;
    4370:	4f 5f       	subi	r20, 0xFF	; 255
		if (bit != tx_bit) {
    4372:	67 17       	cp	r22, r23
    4374:	a9 f0       	breq	.+42     	; 0x43a0 <__vector_47+0x7c>
			if (bit) {
				CONFIG_MATCH_SET();
    4376:	20 91 20 01 	lds	r18, 0x0120
		target += ticks_per_bit;
		bit = byte & 1;
		byte >>= 1;
		state++;
		if (bit != tx_bit) {
			if (bit) {
    437a:	66 23       	and	r22, r22
    437c:	11 f0       	breq	.+4      	; 0x4382 <__vector_47+0x5e>
				CONFIG_MATCH_SET();
    437e:	20 6c       	ori	r18, 0xC0	; 192
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <__vector_47+0x62>
			} else {
				CONFIG_MATCH_CLEAR();
    4382:	2f 73       	andi	r18, 0x3F	; 63
    4384:	20 68       	ori	r18, 0x80	; 128
    4386:	20 93 20 01 	sts	0x0120, r18
			}
			SET_COMPARE_A(target);
    438a:	90 93 29 01 	sts	0x0129, r25
    438e:	80 93 28 01 	sts	0x0128, r24
			tx_bit = bit;
    4392:	60 93 f2 09 	sts	0x09F2, r22
			tx_byte = byte;
    4396:	50 93 f1 09 	sts	0x09F1, r21
			tx_state = state;
    439a:	40 93 98 09 	sts	0x0998, r20
			// TODO: how to detect timing_error?
			return;
    439e:	3f c0       	rjmp	.+126    	; 0x441e <__vector_47+0xfa>
	uint16_t target;

	state = tx_state;
	byte = tx_byte;
	target = GET_COMPARE_A();
	while (state < 9) {
    43a0:	49 30       	cpi	r20, 0x09	; 9
    43a2:	08 f3       	brcs	.-62     	; 0x4366 <__vector_47+0x42>
			tx_state = state;
			// TODO: how to detect timing_error?
			return;
		}
	}
	if (state == 9) {
    43a4:	49 30       	cpi	r20, 0x09	; 9
    43a6:	39 f4       	brne	.+14     	; 0x43b6 <__vector_47+0x92>
		tx_state = 10;
    43a8:	2a e0       	ldi	r18, 0x0A	; 10
    43aa:	20 93 98 09 	sts	0x0998, r18
		CONFIG_MATCH_SET();
    43ae:	20 91 20 01 	lds	r18, 0x0120
    43b2:	20 6c       	ori	r18, 0xC0	; 192
    43b4:	28 c0       	rjmp	.+80     	; 0x4406 <__vector_47+0xe2>
		SET_COMPARE_A(target + ticks_per_bit);
		return;
	}
	head = tx_buffer_head;
    43b6:	20 91 97 09 	lds	r18, 0x0997
	tail = tx_buffer_tail;
    43ba:	e0 91 96 09 	lds	r30, 0x0996
	if (head == tail) {
    43be:	2e 13       	cpse	r18, r30
    43c0:	0d c0       	rjmp	.+26     	; 0x43dc <__vector_47+0xb8>
		tx_state = 0;
    43c2:	10 92 98 09 	sts	0x0998, r1
		CONFIG_MATCH_NORMAL();
    43c6:	80 91 20 01 	lds	r24, 0x0120
    43ca:	8f 73       	andi	r24, 0x3F	; 63
    43cc:	80 93 20 01 	sts	0x0120, r24
		DISABLE_INT_COMPARE_A();
    43d0:	80 91 73 00 	lds	r24, 0x0073
    43d4:	8d 7f       	andi	r24, 0xFD	; 253
    43d6:	80 93 73 00 	sts	0x0073, r24
    43da:	21 c0       	rjmp	.+66     	; 0x441e <__vector_47+0xfa>
	} else {
		tx_state = 1;
    43dc:	21 e0       	ldi	r18, 0x01	; 1
    43de:	20 93 98 09 	sts	0x0998, r18
		if (++tail >= TX_BUFFER_SIZE) tail = 0;
    43e2:	ef 5f       	subi	r30, 0xFF	; 255
    43e4:	e4 34       	cpi	r30, 0x44	; 68
    43e6:	08 f0       	brcs	.+2      	; 0x43ea <__vector_47+0xc6>
    43e8:	e0 e0       	ldi	r30, 0x00	; 0
		tx_buffer_tail = tail;
    43ea:	e0 93 96 09 	sts	0x0996, r30
		tx_byte = tx_buffer[tail];
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	ea 5b       	subi	r30, 0xBA	; 186
    43f2:	f6 4f       	sbci	r31, 0xF6	; 246
    43f4:	20 81       	ld	r18, Z
    43f6:	20 93 f1 09 	sts	0x09F1, r18
		tx_bit = 0;
    43fa:	10 92 f2 09 	sts	0x09F2, r1
		CONFIG_MATCH_CLEAR();
    43fe:	20 91 20 01 	lds	r18, 0x0120
    4402:	2f 73       	andi	r18, 0x3F	; 63
    4404:	20 68       	ori	r18, 0x80	; 128
    4406:	20 93 20 01 	sts	0x0120, r18
		SET_COMPARE_A(target + ticks_per_bit);
    440a:	20 91 ed 09 	lds	r18, 0x09ED
    440e:	30 91 ee 09 	lds	r19, 0x09EE
    4412:	28 0f       	add	r18, r24
    4414:	39 1f       	adc	r19, r25
    4416:	30 93 29 01 	sts	0x0129, r19
    441a:	20 93 28 01 	sts	0x0128, r18
		// TODO: how to detect timing_error?
	}
}
    441e:	ff 91       	pop	r31
    4420:	ef 91       	pop	r30
    4422:	9f 91       	pop	r25
    4424:	8f 91       	pop	r24
    4426:	7f 91       	pop	r23
    4428:	6f 91       	pop	r22
    442a:	5f 91       	pop	r21
    442c:	4f 91       	pop	r20
    442e:	3f 91       	pop	r19
    4430:	2f 91       	pop	r18
    4432:	0f 90       	pop	r0
    4434:	0b be       	out	0x3b, r0	; 59
    4436:	0f 90       	pop	r0
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	0f 90       	pop	r0
    443c:	1f 90       	pop	r1
    443e:	18 95       	reti

00004440 <_ZN13AltSoftSerial11flushOutputEv>:

void AltSoftSerial::flushOutput(void)
{
	while (tx_state) /* wait */ ;
    4440:	80 91 98 09 	lds	r24, 0x0998
    4444:	81 11       	cpse	r24, r1
    4446:	fc cf       	rjmp	.-8      	; 0x4440 <_ZN13AltSoftSerial11flushOutputEv>
}
    4448:	08 95       	ret

0000444a <_ZN13AltSoftSerial5flushEv>:
    444a:	0c 94 20 22 	jmp	0x4440	; 0x4440 <_ZN13AltSoftSerial11flushOutputEv>

0000444e <__vector_46>:
/****************************************/
/**            Reception               **/
/****************************************/

ISR(CAPTURE_INTERRUPT)
{
    444e:	1f 92       	push	r1
    4450:	0f 92       	push	r0
    4452:	0f b6       	in	r0, 0x3f	; 63
    4454:	0f 92       	push	r0
    4456:	11 24       	eor	r1, r1
    4458:	0b b6       	in	r0, 0x3b	; 59
    445a:	0f 92       	push	r0
    445c:	1b be       	out	0x3b, r1	; 59
    445e:	2f 93       	push	r18
    4460:	3f 93       	push	r19
    4462:	4f 93       	push	r20
    4464:	8f 93       	push	r24
    4466:	9f 93       	push	r25
    4468:	ef 93       	push	r30
    446a:	ff 93       	push	r31
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
    446c:	80 91 26 01 	lds	r24, 0x0126
    4470:	90 91 27 01 	lds	r25, 0x0127
	count = rx_count;
    4474:	40 91 eb 09 	lds	r20, 0x09EB
	if (count & 1) {
		CONFIG_CAPTURE_FALLING_EDGE();
    4478:	20 91 21 01 	lds	r18, 0x0121
	uint8_t count;
	uint16_t capture, current;

	capture = GET_INPUT_CAPTURE();
	count = rx_count;
	if (count & 1) {
    447c:	40 ff       	sbrs	r20, 0
    447e:	04 c0       	rjmp	.+8      	; 0x4488 <__vector_46+0x3a>
		CONFIG_CAPTURE_FALLING_EDGE();
    4480:	2f 7b       	andi	r18, 0xBF	; 191
    4482:	20 93 21 01 	sts	0x0121, r18
    4486:	1b c0       	rjmp	.+54     	; 0x44be <__vector_46+0x70>
	} else {
		CONFIG_CAPTURE_RISING_EDGE();
    4488:	20 64       	ori	r18, 0x40	; 64
    448a:	20 93 21 01 	sts	0x0121, r18
	}
	if (count == 0) {
    448e:	41 11       	cpse	r20, r1
    4490:	16 c0       	rjmp	.+44     	; 0x44be <__vector_46+0x70>
		SET_COMPARE_B(capture + rx_stop_ticks);
    4492:	20 91 ef 09 	lds	r18, 0x09EF
    4496:	30 91 f0 09 	lds	r19, 0x09F0
    449a:	28 0f       	add	r18, r24
    449c:	39 1f       	adc	r19, r25
    449e:	30 93 2b 01 	sts	0x012B, r19
    44a2:	20 93 2a 01 	sts	0x012A, r18
		ENABLE_INT_COMPARE_B();
    44a6:	24 e0       	ldi	r18, 0x04	; 4
    44a8:	2a bb       	out	0x1a, r18	; 26
    44aa:	20 91 73 00 	lds	r18, 0x0073
    44ae:	24 60       	ori	r18, 0x04	; 4
    44b0:	20 93 73 00 	sts	0x0073, r18
		rx_event[0] = capture;
    44b4:	90 93 f4 09 	sts	0x09F4, r25
    44b8:	80 93 f3 09 	sts	0x09F3, r24
    44bc:	0a c0       	rjmp	.+20     	; 0x44d2 <__vector_46+0x84>
	} else if (count < MAX_RX_EVENTS) {
    44be:	4a 30       	cpi	r20, 0x0A	; 10
    44c0:	40 f4       	brcc	.+16     	; 0x44d2 <__vector_46+0x84>
		rx_event[count] = capture;
    44c2:	e4 2f       	mov	r30, r20
    44c4:	f0 e0       	ldi	r31, 0x00	; 0
    44c6:	ee 0f       	add	r30, r30
    44c8:	ff 1f       	adc	r31, r31
    44ca:	ed 50       	subi	r30, 0x0D	; 13
    44cc:	f6 4f       	sbci	r31, 0xF6	; 246
    44ce:	91 83       	std	Z+1, r25	; 0x01
    44d0:	80 83       	st	Z, r24
	}
	rx_count = count + 1;
    44d2:	4f 5f       	subi	r20, 0xFF	; 255
    44d4:	40 93 eb 09 	sts	0x09EB, r20
	if (GET_TIMER_COUNT() - capture > ticks_per_bit) {
    44d8:	20 91 24 01 	lds	r18, 0x0124
    44dc:	30 91 25 01 	lds	r19, 0x0125
    44e0:	28 1b       	sub	r18, r24
    44e2:	39 0b       	sbc	r19, r25
    44e4:	80 91 ed 09 	lds	r24, 0x09ED
    44e8:	90 91 ee 09 	lds	r25, 0x09EE
    44ec:	82 17       	cp	r24, r18
    44ee:	93 07       	cpc	r25, r19
    44f0:	18 f4       	brcc	.+6      	; 0x44f8 <__vector_46+0xaa>
		AltSoftSerial::timing_error = true;
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	80 93 ec 09 	sts	0x09EC, r24
	}
}
    44f8:	ff 91       	pop	r31
    44fa:	ef 91       	pop	r30
    44fc:	9f 91       	pop	r25
    44fe:	8f 91       	pop	r24
    4500:	4f 91       	pop	r20
    4502:	3f 91       	pop	r19
    4504:	2f 91       	pop	r18
    4506:	0f 90       	pop	r0
    4508:	0b be       	out	0x3b, r0	; 59
    450a:	0f 90       	pop	r0
    450c:	0f be       	out	0x3f, r0	; 63
    450e:	0f 90       	pop	r0
    4510:	1f 90       	pop	r1
    4512:	18 95       	reti

00004514 <__vector_48>:
	}
	return out;
}

ISR(COMPARE_B_INTERRUPT)
{
    4514:	1f 92       	push	r1
    4516:	0f 92       	push	r0
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	0f 92       	push	r0
    451c:	11 24       	eor	r1, r1
    451e:	0b b6       	in	r0, 0x3b	; 59
    4520:	0f 92       	push	r0
    4522:	1b be       	out	0x3b, r1	; 59
    4524:	af 92       	push	r10
    4526:	bf 92       	push	r11
    4528:	cf 92       	push	r12
    452a:	df 92       	push	r13
    452c:	ef 92       	push	r14
    452e:	ff 92       	push	r15
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	2f 93       	push	r18
    4536:	3f 93       	push	r19
    4538:	4f 93       	push	r20
    453a:	5f 93       	push	r21
    453c:	6f 93       	push	r22
    453e:	7f 93       	push	r23
    4540:	8f 93       	push	r24
    4542:	9f 93       	push	r25
    4544:	af 93       	push	r26
    4546:	bf 93       	push	r27
    4548:	cf 93       	push	r28
    454a:	df 93       	push	r29
    454c:	ef 93       	push	r30
    454e:	ff 93       	push	r31
	uint8_t head;

	DISABLE_INT_COMPARE_B();
    4550:	80 91 73 00 	lds	r24, 0x0073
    4554:	8b 7f       	andi	r24, 0xFB	; 251
    4556:	80 93 73 00 	sts	0x0073, r24
	CONFIG_CAPTURE_FALLING_EDGE();
    455a:	80 91 21 01 	lds	r24, 0x0121
    455e:	8f 7b       	andi	r24, 0xBF	; 191
    4560:	80 93 21 01 	sts	0x0121, r24
	head = rx_buffer_head + 1;
    4564:	10 91 ea 09 	lds	r17, 0x09EA
    4568:	1f 5f       	subi	r17, 0xFF	; 255
	if (head >= RX_BUFFER_SIZE) head = 0;
    456a:	10 35       	cpi	r17, 0x50	; 80
    456c:	08 f0       	brcs	.+2      	; 0x4570 <__vector_48+0x5c>
    456e:	10 e0       	ldi	r17, 0x00	; 0
	if (head != rx_buffer_tail) {
    4570:	80 91 e9 09 	lds	r24, 0x09E9
    4574:	18 17       	cp	r17, r24
    4576:	e9 f1       	breq	.+122    	; 0x45f2 <__vector_48+0xde>
		rx_buffer[head] = analyze(rx_count);
    4578:	c1 2f       	mov	r28, r17
    457a:	d0 e0       	ldi	r29, 0x00	; 0
    457c:	00 91 eb 09 	lds	r16, 0x09EB
    4580:	0b 30       	cpi	r16, 0x0B	; 11
    4582:	08 f0       	brcs	.+2      	; 0x4586 <__vector_48+0x72>
    4584:	0a e0       	ldi	r16, 0x0A	; 10
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    4586:	60 91 f3 09 	lds	r22, 0x09F3
    458a:	70 91 f4 09 	lds	r23, 0x09F4
	target = ticks_per_bit + ticks_per_bit / 2;
    458e:	20 91 ed 09 	lds	r18, 0x09ED
    4592:	30 91 ee 09 	lds	r19, 0x09EE
    4596:	c9 01       	movw	r24, r18
    4598:	96 95       	lsr	r25
    459a:	87 95       	ror	r24
    459c:	82 0f       	add	r24, r18
    459e:	93 1f       	adc	r25, r19

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
	uint16_t begin, tmp, target, now=0;
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	50 e0       	ldi	r21, 0x00	; 0
}

static inline uint8_t analyze(uint8_t count)
{
	const uint16_t *p = rx_event;
	uint8_t out=0xFF, mask=0x01, state=0;
    45a4:	e1 2c       	mov	r14, r1
    45a6:	dd 24       	eor	r13, r13
    45a8:	d3 94       	inc	r13
    45aa:	ff 24       	eor	r15, r15
    45ac:	fa 94       	dec	r15
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
    45ae:	e5 ef       	ldi	r30, 0xF5	; 245
    45b0:	f9 e0       	ldi	r31, 0x09	; 9
		while (now >= target) {
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    45b2:	cc 24       	eor	r12, r12
    45b4:	c3 94       	inc	r12
    45b6:	15 c0       	rjmp	.+42     	; 0x45e2 <__vector_48+0xce>

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
    45b8:	a1 91       	ld	r26, Z+
    45ba:	b1 91       	ld	r27, Z+
		now += tmp - begin;
    45bc:	5d 01       	movw	r10, r26
    45be:	a6 1a       	sub	r10, r22
    45c0:	b7 0a       	sbc	r11, r23
    45c2:	4a 0d       	add	r20, r10
    45c4:	5b 1d       	adc	r21, r11
    45c6:	08 c0       	rjmp	.+16     	; 0x45d8 <__vector_48+0xc4>
		begin = tmp;
		while (now >= target) {
			if (state == 0) out &= ~mask;
    45c8:	e1 10       	cpse	r14, r1
    45ca:	03 c0       	rjmp	.+6      	; 0x45d2 <__vector_48+0xbe>
    45cc:	6d 2d       	mov	r22, r13
    45ce:	60 95       	com	r22
    45d0:	f6 22       	and	r15, r22
			mask <<= 1;
    45d2:	dd 0c       	add	r13, r13
			target += ticks_per_bit;
    45d4:	82 0f       	add	r24, r18
    45d6:	93 1f       	adc	r25, r19
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
		while (now >= target) {
    45d8:	48 17       	cp	r20, r24
    45da:	59 07       	cpc	r21, r25
    45dc:	a8 f7       	brcc	.-22     	; 0x45c8 <__vector_48+0xb4>
			if (state == 0) out &= ~mask;
			mask <<= 1;
			target += ticks_per_bit;
		}
		state ^= 1;
    45de:	ec 24       	eor	r14, r12
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
		tmp = *p++;
		now += tmp - begin;
		begin = tmp;
    45e0:	bd 01       	movw	r22, r26
	uint16_t begin, tmp, target, now=0;

	if (count > MAX_RX_EVENTS) count = MAX_RX_EVENTS;
	begin = *p++;
	target = ticks_per_bit + ticks_per_bit / 2;
	while (--count > 0) {
    45e2:	01 50       	subi	r16, 0x01	; 1
    45e4:	49 f7       	brne	.-46     	; 0x45b8 <__vector_48+0xa4>
	DISABLE_INT_COMPARE_B();
	CONFIG_CAPTURE_FALLING_EDGE();
	head = rx_buffer_head + 1;
	if (head >= RX_BUFFER_SIZE) head = 0;
	if (head != rx_buffer_tail) {
		rx_buffer[head] = analyze(rx_count);
    45e6:	fe 01       	movw	r30, r28
    45e8:	e7 56       	subi	r30, 0x67	; 103
    45ea:	f6 4f       	sbci	r31, 0xF6	; 246
    45ec:	f0 82       	st	Z, r15
		rx_buffer_head = head;
    45ee:	10 93 ea 09 	sts	0x09EA, r17
	}
	rx_count = 0;
    45f2:	10 92 eb 09 	sts	0x09EB, r1
}
    45f6:	ff 91       	pop	r31
    45f8:	ef 91       	pop	r30
    45fa:	df 91       	pop	r29
    45fc:	cf 91       	pop	r28
    45fe:	bf 91       	pop	r27
    4600:	af 91       	pop	r26
    4602:	9f 91       	pop	r25
    4604:	8f 91       	pop	r24
    4606:	7f 91       	pop	r23
    4608:	6f 91       	pop	r22
    460a:	5f 91       	pop	r21
    460c:	4f 91       	pop	r20
    460e:	3f 91       	pop	r19
    4610:	2f 91       	pop	r18
    4612:	1f 91       	pop	r17
    4614:	0f 91       	pop	r16
    4616:	ff 90       	pop	r15
    4618:	ef 90       	pop	r14
    461a:	df 90       	pop	r13
    461c:	cf 90       	pop	r12
    461e:	bf 90       	pop	r11
    4620:	af 90       	pop	r10
    4622:	0f 90       	pop	r0
    4624:	0b be       	out	0x3b, r0	; 59
    4626:	0f 90       	pop	r0
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	0f 90       	pop	r0
    462c:	1f 90       	pop	r1
    462e:	18 95       	reti

00004630 <_ZN13AltSoftSerial10flushInputEv>:
	return RX_BUFFER_SIZE + head - tail;
}

void AltSoftSerial::flushInput(void)
{
	rx_buffer_head = rx_buffer_tail;
    4630:	80 91 e9 09 	lds	r24, 0x09E9
    4634:	80 93 ea 09 	sts	0x09EA, r24
    4638:	08 95       	ret

0000463a <_ZN13AltSoftSerial3endEv>:
	tx_buffer_tail = 0;
	ENABLE_INT_INPUT_CAPTURE();
}

void AltSoftSerial::end(void)
{
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
	DISABLE_INT_COMPARE_B();
    463e:	c3 e7       	ldi	r28, 0x73	; 115
    4640:	d0 e0       	ldi	r29, 0x00	; 0
    4642:	88 81       	ld	r24, Y
    4644:	8b 7f       	andi	r24, 0xFB	; 251
    4646:	88 83       	st	Y, r24
	DISABLE_INT_INPUT_CAPTURE();
    4648:	88 81       	ld	r24, Y
    464a:	8f 7d       	andi	r24, 0xDF	; 223
    464c:	88 83       	st	Y, r24
	flushInput();
    464e:	0e 94 18 23 	call	0x4630	; 0x4630 <_ZN13AltSoftSerial10flushInputEv>
	flushOutput();
    4652:	0e 94 20 22 	call	0x4440	; 0x4440 <_ZN13AltSoftSerial11flushOutputEv>
	DISABLE_INT_COMPARE_A();
    4656:	88 81       	ld	r24, Y
    4658:	8d 7f       	andi	r24, 0xFD	; 253
    465a:	88 83       	st	Y, r24
	// TODO: restore timer to original settings?
}
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	08 95       	ret

00004662 <_ZN5AlarmD1Ev>:
	pinMode(alarmPin1, OUTPUT);
	pinMode(alarmPin2, OUTPUT);
	pinMode(alarmPin3, OUTPUT);
}

Alarm::~Alarm() {
    4662:	28 e2       	ldi	r18, 0x28	; 40
    4664:	32 e0       	ldi	r19, 0x02	; 2
    4666:	fc 01       	movw	r30, r24
    4668:	31 83       	std	Z+1, r19	; 0x01
    466a:	20 83       	st	Z, r18
    466c:	08 95       	ret

0000466e <_ZN5AlarmD0Ev>:
    466e:	28 e2       	ldi	r18, 0x28	; 40
    4670:	32 e0       	ldi	r19, 0x02	; 2
    4672:	fc 01       	movw	r30, r24
    4674:	31 83       	std	Z+1, r19	; 0x01
    4676:	20 83       	st	Z, r18

}
    4678:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

0000467c <_ZN5AlarmC1EP14FreeBoardModel>:
 *      Author: robert
 */

#include "Alarm.h"

Alarm::Alarm(FreeBoardModel* model) {
    467c:	fc 01       	movw	r30, r24
    467e:	cb 01       	movw	r24, r22
    4680:	28 e2       	ldi	r18, 0x28	; 40
    4682:	32 e0       	ldi	r19, 0x02	; 2
    4684:	31 83       	std	Z+1, r19	; 0x01
    4686:	20 83       	st	Z, r18
	this->model=model;
    4688:	73 83       	std	Z+3, r23	; 0x03
    468a:	62 83       	std	Z+2, r22	; 0x02
	alarmBeepState=false;
    468c:	14 82       	std	Z+4, r1	; 0x04
	model->setAlarmLast(0);
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	ba 01       	movw	r22, r20
    4694:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <_ZN14FreeBoardModel12setAlarmLastEm>
	pinMode(alarmPin0, OUTPUT);
    4698:	61 e0       	ldi	r22, 0x01	; 1
    469a:	86 e1       	ldi	r24, 0x16	; 22
    469c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(alarmPin1, OUTPUT);
    46a0:	61 e0       	ldi	r22, 0x01	; 1
    46a2:	87 e1       	ldi	r24, 0x17	; 23
    46a4:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(alarmPin2, OUTPUT);
    46a8:	61 e0       	ldi	r22, 0x01	; 1
    46aa:	88 e1       	ldi	r24, 0x18	; 24
    46ac:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(alarmPin3, OUTPUT);
    46b0:	61 e0       	ldi	r22, 0x01	; 1
    46b2:	89 e1       	ldi	r24, 0x19	; 25
    46b4:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <pinMode>

000046b8 <_ZN5Alarm14checkWindAlarmEv>:
		digitalWrite(alarmPin2, LOW);
		digitalWrite(alarmPin3, LOW);
	}
}

void Alarm::checkWindAlarm(){
    46b8:	cf 92       	push	r12
    46ba:	df 92       	push	r13
    46bc:	ef 92       	push	r14
    46be:	ff 92       	push	r15
    46c0:	cf 93       	push	r28
    46c2:	df 93       	push	r29
    46c4:	ec 01       	movw	r28, r24
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    46c6:	8a 81       	ldd	r24, Y+2	; 0x02
    46c8:	9b 81       	ldd	r25, Y+3	; 0x03
    46ca:	0e 94 76 2c 	call	0x58ec	; 0x58ec <_ZN14FreeBoardModel13isWindAlarmOnEv>
    46ce:	88 23       	and	r24, r24
    46d0:	11 f1       	breq	.+68     	; 0x4716 <_ZN5Alarm14checkWindAlarmEv+0x5e>
    46d2:	8a 81       	ldd	r24, Y+2	; 0x02
    46d4:	9b 81       	ldd	r25, Y+3	; 0x03
    46d6:	0e 94 42 2c 	call	0x5884	; 0x5884 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    46da:	18 16       	cp	r1, r24
    46dc:	19 06       	cpc	r1, r25
    46de:	dc f4       	brge	.+54     	; 0x4716 <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
    46e0:	8a 81       	ldd	r24, Y+2	; 0x02
    46e2:	9b 81       	ldd	r25, Y+3	; 0x03
    46e4:	0e 94 4e 2c 	call	0x589c	; 0x589c <_ZN14FreeBoardModel14getWindAverageEv>
    46e8:	6b 01       	movw	r12, r22
    46ea:	7c 01       	movw	r14, r24
    46ec:	8a 81       	ldd	r24, Y+2	; 0x02
    46ee:	9b 81       	ldd	r25, Y+3	; 0x03
    46f0:	0e 94 42 2c 	call	0x5884	; 0x5884 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
	}
}

void Alarm::checkWindAlarm(){
	//check alarm val
		if (model->isWindAlarmOn() && model->getWindAlarmSpeed() > 0
    46f4:	bc 01       	movw	r22, r24
    46f6:	88 27       	eor	r24, r24
    46f8:	77 fd       	sbrc	r23, 7
    46fa:	80 95       	com	r24
    46fc:	98 2f       	mov	r25, r24
    46fe:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    4702:	9b 01       	movw	r18, r22
    4704:	ac 01       	movw	r20, r24
    4706:	c7 01       	movw	r24, r14
    4708:	b6 01       	movw	r22, r12
    470a:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    470e:	18 16       	cp	r1, r24
    4710:	14 f4       	brge	.+4      	; 0x4716 <_ZN5Alarm14checkWindAlarmEv+0x5e>
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
    4712:	61 e0       	ldi	r22, 0x01	; 1
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <_ZN5Alarm14checkWindAlarmEv+0x60>
		} else {
			model->setWindAlarmTriggered(false);
    4716:	60 e0       	ldi	r22, 0x00	; 0
    4718:	8a 81       	ldd	r24, Y+2	; 0x02
    471a:	9b 81       	ldd	r25, Y+3	; 0x03
		}
}
    471c:	df 91       	pop	r29
    471e:	cf 91       	pop	r28
    4720:	ff 90       	pop	r15
    4722:	ef 90       	pop	r14
    4724:	df 90       	pop	r13
    4726:	cf 90       	pop	r12
				&& model->getWindAverage() > model->getWindAlarmSpeed()) {
			//TODO: Alarm snooze, better handling of this
			//setSnoozeAlarm(0);
			model->setWindAlarmTriggered(true);
		} else {
			model->setWindAlarmTriggered(false);
    4728:	0c 94 ab 2d 	jmp	0x5b56	; 0x5b56 <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>

0000472c <_ZN6AnchorD1Ev>:

	this->model=model;
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
}

Anchor::~Anchor(){
    472c:	20 e3       	ldi	r18, 0x30	; 48
    472e:	32 e0       	ldi	r19, 0x02	; 2
    4730:	fc 01       	movw	r30, r24
    4732:	31 83       	std	Z+1, r19	; 0x01
    4734:	20 83       	st	Z, r18
    4736:	08 95       	ret

00004738 <_ZN6AnchorD0Ev>:
    4738:	20 e3       	ldi	r18, 0x30	; 48
    473a:	32 e0       	ldi	r19, 0x02	; 2
    473c:	fc 01       	movw	r30, r24
    473e:	31 83       	std	Z+1, r19	; 0x01
    4740:	20 83       	st	Z, r18

}
    4742:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

00004746 <_ZN6Anchor15updateAnchorBoxEff>:


/* Adjust the size of the anchor box. Will not go smaller than MINMTRS */
void Anchor::updateAnchorBox(float laty, float lonx) {
    4746:	2f 92       	push	r2
    4748:	3f 92       	push	r3
    474a:	4f 92       	push	r4
    474c:	5f 92       	push	r5
    474e:	6f 92       	push	r6
    4750:	7f 92       	push	r7
    4752:	8f 92       	push	r8
    4754:	9f 92       	push	r9
    4756:	af 92       	push	r10
    4758:	bf 92       	push	r11
    475a:	cf 92       	push	r12
    475c:	df 92       	push	r13
    475e:	ef 92       	push	r14
    4760:	ff 92       	push	r15
    4762:	0f 93       	push	r16
    4764:	1f 93       	push	r17
    4766:	cf 93       	push	r28
    4768:	df 93       	push	r29
    476a:	00 d0       	rcall	.+0      	; 0x476c <_ZN6Anchor15updateAnchorBoxEff+0x26>
    476c:	00 d0       	rcall	.+0      	; 0x476e <_ZN6Anchor15updateAnchorBoxEff+0x28>
    476e:	cd b7       	in	r28, 0x3d	; 61
    4770:	de b7       	in	r29, 0x3e	; 62
    4772:	9e 83       	std	Y+6, r25	; 0x06
    4774:	8d 83       	std	Y+5, r24	; 0x05
    4776:	4a 01       	movw	r8, r20
    4778:	5b 01       	movw	r10, r22
    477a:	68 01       	movw	r12, r16
    477c:	79 01       	movw	r14, r18
	//TODO: error testing around 0, 90, 180deg

	float n = laty + model->getAnchorRadiusDeg();
    477e:	fc 01       	movw	r30, r24
    4780:	82 81       	ldd	r24, Z+2	; 0x02
    4782:	93 81       	ldd	r25, Z+3	; 0x03
    4784:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    4788:	9b 01       	movw	r18, r22
    478a:	ac 01       	movw	r20, r24
    478c:	c5 01       	movw	r24, r10
    478e:	b4 01       	movw	r22, r8
    4790:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    4794:	69 83       	std	Y+1, r22	; 0x01
    4796:	7a 83       	std	Y+2, r23	; 0x02
    4798:	1c 01       	movw	r2, r24
	float s = laty - model->getAnchorRadiusDeg();
    479a:	ed 81       	ldd	r30, Y+5	; 0x05
    479c:	fe 81       	ldd	r31, Y+6	; 0x06
    479e:	82 81       	ldd	r24, Z+2	; 0x02
    47a0:	93 81       	ldd	r25, Z+3	; 0x03
    47a2:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    47a6:	9b 01       	movw	r18, r22
    47a8:	ac 01       	movw	r20, r24
    47aa:	c5 01       	movw	r24, r10
    47ac:	b4 01       	movw	r22, r8
    47ae:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    47b2:	2b 01       	movw	r4, r22
    47b4:	3c 01       	movw	r6, r24
	float e = lonx + model->getAnchorRadiusDeg();
    47b6:	ed 81       	ldd	r30, Y+5	; 0x05
    47b8:	fe 81       	ldd	r31, Y+6	; 0x06
    47ba:	82 81       	ldd	r24, Z+2	; 0x02
    47bc:	93 81       	ldd	r25, Z+3	; 0x03
    47be:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    47c2:	9b 01       	movw	r18, r22
    47c4:	ac 01       	movw	r20, r24
    47c6:	c7 01       	movw	r24, r14
    47c8:	b6 01       	movw	r22, r12
    47ca:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    47ce:	4b 01       	movw	r8, r22
    47d0:	5c 01       	movw	r10, r24
	float w = lonx - model->getAnchorRadiusDeg();
    47d2:	ed 81       	ldd	r30, Y+5	; 0x05
    47d4:	fe 81       	ldd	r31, Y+6	; 0x06
    47d6:	82 81       	ldd	r24, Z+2	; 0x02
    47d8:	93 81       	ldd	r25, Z+3	; 0x03
    47da:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>
    47de:	9b 01       	movw	r18, r22
    47e0:	ac 01       	movw	r20, r24
    47e2:	c7 01       	movw	r24, r14
    47e4:	b6 01       	movw	r22, r12
    47e6:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    47ea:	16 2f       	mov	r17, r22
    47ec:	7b 83       	std	Y+3, r23	; 0x03
    47ee:	8c 83       	std	Y+4, r24	; 0x04
    47f0:	09 2f       	mov	r16, r25
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
    47f2:	ed 81       	ldd	r30, Y+5	; 0x05
    47f4:	fe 81       	ldd	r31, Y+6	; 0x06
    47f6:	82 81       	ldd	r24, Z+2	; 0x02
    47f8:	93 81       	ldd	r25, Z+3	; 0x03
    47fa:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <_ZN14FreeBoardModel10getAnchorSEv>
    47fe:	6b 01       	movw	r12, r22
    4800:	7c 01       	movw	r14, r24
    4802:	24 e8       	ldi	r18, 0x84	; 132
    4804:	3a eb       	ldi	r19, 0xBA	; 186
    4806:	4c e3       	ldi	r20, 0x3C	; 60
    4808:	58 e3       	ldi	r21, 0x38	; 56
    480a:	b9 81       	ldd	r27, Y+1	; 0x01
    480c:	aa 81       	ldd	r26, Y+2	; 0x02
    480e:	6b 2f       	mov	r22, r27
    4810:	7a 2f       	mov	r23, r26
    4812:	82 2d       	mov	r24, r2
    4814:	93 2d       	mov	r25, r3
    4816:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    481a:	a7 01       	movw	r20, r14
    481c:	96 01       	movw	r18, r12
    481e:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4822:	18 16       	cp	r1, r24
    4824:	94 f4       	brge	.+36     	; 0x484a <_ZN6Anchor15updateAnchorBoxEff+0x104>
    4826:	ed 81       	ldd	r30, Y+5	; 0x05
    4828:	fe 81       	ldd	r31, Y+6	; 0x06
    482a:	82 81       	ldd	r24, Z+2	; 0x02
    482c:	93 81       	ldd	r25, Z+3	; 0x03
    482e:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_ZN14FreeBoardModel10getAnchorNEv>
    4832:	9b 01       	movw	r18, r22
    4834:	ac 01       	movw	r20, r24
    4836:	b9 81       	ldd	r27, Y+1	; 0x01
    4838:	aa 81       	ldd	r26, Y+2	; 0x02
    483a:	6b 2f       	mov	r22, r27
    483c:	7a 2f       	mov	r23, r26
    483e:	82 2d       	mov	r24, r2
    4840:	93 2d       	mov	r25, r3
    4842:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    4846:	87 fd       	sbrc	r24, 7
    4848:	7e c0       	rjmp	.+252    	; 0x4946 <_ZN6Anchor15updateAnchorBoxEff+0x200>
		model->setAnchorN(n);
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
    484a:	ed 81       	ldd	r30, Y+5	; 0x05
    484c:	fe 81       	ldd	r31, Y+6	; 0x06
    484e:	82 81       	ldd	r24, Z+2	; 0x02
    4850:	93 81       	ldd	r25, Z+3	; 0x03
    4852:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_ZN14FreeBoardModel10getAnchorNEv>
    4856:	6b 01       	movw	r12, r22
    4858:	7c 01       	movw	r14, r24
    485a:	24 e8       	ldi	r18, 0x84	; 132
    485c:	3a eb       	ldi	r19, 0xBA	; 186
    485e:	4c e3       	ldi	r20, 0x3C	; 60
    4860:	58 e3       	ldi	r21, 0x38	; 56
    4862:	64 2d       	mov	r22, r4
    4864:	75 2d       	mov	r23, r5
    4866:	86 2d       	mov	r24, r6
    4868:	97 2d       	mov	r25, r7
    486a:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    486e:	a7 01       	movw	r20, r14
    4870:	96 01       	movw	r18, r12
    4872:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    4876:	87 ff       	sbrs	r24, 7
    4878:	11 c0       	rjmp	.+34     	; 0x489c <_ZN6Anchor15updateAnchorBoxEff+0x156>
    487a:	ed 81       	ldd	r30, Y+5	; 0x05
    487c:	fe 81       	ldd	r31, Y+6	; 0x06
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <_ZN14FreeBoardModel10getAnchorSEv>
    4886:	9b 01       	movw	r18, r22
    4888:	ac 01       	movw	r20, r24
    488a:	64 2d       	mov	r22, r4
    488c:	75 2d       	mov	r23, r5
    488e:	86 2d       	mov	r24, r6
    4890:	97 2d       	mov	r25, r7
    4892:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4896:	18 16       	cp	r1, r24
    4898:	0c f4       	brge	.+2      	; 0x489c <_ZN6Anchor15updateAnchorBoxEff+0x156>
    489a:	62 c0       	rjmp	.+196    	; 0x4960 <_ZN6Anchor15updateAnchorBoxEff+0x21a>
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
    489c:	ed 81       	ldd	r30, Y+5	; 0x05
    489e:	fe 81       	ldd	r31, Y+6	; 0x06
    48a0:	82 81       	ldd	r24, Z+2	; 0x02
    48a2:	93 81       	ldd	r25, Z+3	; 0x03
    48a4:	0e 94 84 2a 	call	0x5508	; 0x5508 <_ZN14FreeBoardModel10getAnchorWEv>
    48a8:	2b 01       	movw	r4, r22
    48aa:	3c 01       	movw	r6, r24
    48ac:	24 e8       	ldi	r18, 0x84	; 132
    48ae:	3a eb       	ldi	r19, 0xBA	; 186
    48b0:	4c e3       	ldi	r20, 0x3C	; 60
    48b2:	58 e3       	ldi	r21, 0x38	; 56
    48b4:	68 2d       	mov	r22, r8
    48b6:	79 2d       	mov	r23, r9
    48b8:	8a 2d       	mov	r24, r10
    48ba:	9b 2d       	mov	r25, r11
    48bc:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    48c0:	a3 01       	movw	r20, r6
    48c2:	92 01       	movw	r18, r4
    48c4:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    48c8:	18 16       	cp	r1, r24
    48ca:	84 f4       	brge	.+32     	; 0x48ec <_ZN6Anchor15updateAnchorBoxEff+0x1a6>
    48cc:	ed 81       	ldd	r30, Y+5	; 0x05
    48ce:	fe 81       	ldd	r31, Y+6	; 0x06
    48d0:	82 81       	ldd	r24, Z+2	; 0x02
    48d2:	93 81       	ldd	r25, Z+3	; 0x03
    48d4:	0e 94 2e 2a 	call	0x545c	; 0x545c <_ZN14FreeBoardModel10getAnchorEEv>
    48d8:	9b 01       	movw	r18, r22
    48da:	ac 01       	movw	r20, r24
    48dc:	68 2d       	mov	r22, r8
    48de:	79 2d       	mov	r23, r9
    48e0:	8a 2d       	mov	r24, r10
    48e2:	9b 2d       	mov	r25, r11
    48e4:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    48e8:	87 fd       	sbrc	r24, 7
    48ea:	45 c0       	rjmp	.+138    	; 0x4976 <_ZN6Anchor15updateAnchorBoxEff+0x230>
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
    48ec:	ed 81       	ldd	r30, Y+5	; 0x05
    48ee:	fe 81       	ldd	r31, Y+6	; 0x06
    48f0:	82 81       	ldd	r24, Z+2	; 0x02
    48f2:	93 81       	ldd	r25, Z+3	; 0x03
    48f4:	0e 94 2e 2a 	call	0x545c	; 0x545c <_ZN14FreeBoardModel10getAnchorEEv>
    48f8:	4b 01       	movw	r8, r22
    48fa:	5c 01       	movw	r10, r24
    48fc:	24 e8       	ldi	r18, 0x84	; 132
    48fe:	3a eb       	ldi	r19, 0xBA	; 186
    4900:	4c e3       	ldi	r20, 0x3C	; 60
    4902:	58 e3       	ldi	r21, 0x38	; 56
    4904:	ab 81       	ldd	r26, Y+3	; 0x03
    4906:	fc 80       	ldd	r15, Y+4	; 0x04
    4908:	61 2f       	mov	r22, r17
    490a:	7a 2f       	mov	r23, r26
    490c:	8f 2d       	mov	r24, r15
    490e:	90 2f       	mov	r25, r16
    4910:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    4914:	a5 01       	movw	r20, r10
    4916:	94 01       	movw	r18, r8
    4918:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    491c:	87 ff       	sbrs	r24, 7
    491e:	5a c0       	rjmp	.+180    	; 0x49d4 <_ZN6Anchor15updateAnchorBoxEff+0x28e>
    4920:	ed 81       	ldd	r30, Y+5	; 0x05
    4922:	fe 81       	ldd	r31, Y+6	; 0x06
    4924:	82 81       	ldd	r24, Z+2	; 0x02
    4926:	93 81       	ldd	r25, Z+3	; 0x03
    4928:	0e 94 84 2a 	call	0x5508	; 0x5508 <_ZN14FreeBoardModel10getAnchorWEv>
    492c:	9b 01       	movw	r18, r22
    492e:	ac 01       	movw	r20, r24
    4930:	ab 81       	ldd	r26, Y+3	; 0x03
    4932:	fc 80       	ldd	r15, Y+4	; 0x04
    4934:	61 2f       	mov	r22, r17
    4936:	7a 2f       	mov	r23, r26
    4938:	8f 2d       	mov	r24, r15
    493a:	90 2f       	mov	r25, r16
    493c:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4940:	18 16       	cp	r1, r24
    4942:	24 f1       	brlt	.+72     	; 0x498c <_ZN6Anchor15updateAnchorBoxEff+0x246>
    4944:	47 c0       	rjmp	.+142    	; 0x49d4 <_ZN6Anchor15updateAnchorBoxEff+0x28e>
	float s = laty - model->getAnchorRadiusDeg();
	float e = lonx + model->getAnchorRadiusDeg();
	float w = lonx - model->getAnchorRadiusDeg();
	//shrink anchor box if we can
	if ((n - MINMTRS) > model->getAnchorS() && n < model->getAnchorN())
		model->setAnchorN(n);
    4946:	39 81       	ldd	r19, Y+1	; 0x01
    4948:	2a 81       	ldd	r18, Y+2	; 0x02
    494a:	43 2f       	mov	r20, r19
    494c:	52 2f       	mov	r21, r18
    494e:	62 2d       	mov	r22, r2
    4950:	73 2d       	mov	r23, r3
    4952:	ed 81       	ldd	r30, Y+5	; 0x05
    4954:	fe 81       	ldd	r31, Y+6	; 0x06
    4956:	82 81       	ldd	r24, Z+2	; 0x02
    4958:	93 81       	ldd	r25, Z+3	; 0x03
    495a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN14FreeBoardModel10setAnchorNEf>
    495e:	75 cf       	rjmp	.-278    	; 0x484a <_ZN6Anchor15updateAnchorBoxEff+0x104>
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
    4960:	44 2d       	mov	r20, r4
    4962:	55 2d       	mov	r21, r5
    4964:	66 2d       	mov	r22, r6
    4966:	77 2d       	mov	r23, r7
    4968:	ed 81       	ldd	r30, Y+5	; 0x05
    496a:	fe 81       	ldd	r31, Y+6	; 0x06
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	0e 94 c5 2c 	call	0x598a	; 0x598a <_ZN14FreeBoardModel10setAnchorSEf>
    4974:	93 cf       	rjmp	.-218    	; 0x489c <_ZN6Anchor15updateAnchorBoxEff+0x156>
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
    4976:	48 2d       	mov	r20, r8
    4978:	59 2d       	mov	r21, r9
    497a:	6a 2d       	mov	r22, r10
    497c:	7b 2d       	mov	r23, r11
    497e:	ed 81       	ldd	r30, Y+5	; 0x05
    4980:	fe 81       	ldd	r31, Y+6	; 0x06
    4982:	82 81       	ldd	r24, Z+2	; 0x02
    4984:	93 81       	ldd	r25, Z+3	; 0x03
    4986:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN14FreeBoardModel10setAnchorEEf>
    498a:	b0 cf       	rjmp	.-160    	; 0x48ec <_ZN6Anchor15updateAnchorBoxEff+0x1a6>
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    498c:	2b 81       	ldd	r18, Y+3	; 0x03
    498e:	9c 81       	ldd	r25, Y+4	; 0x04
    4990:	41 2f       	mov	r20, r17
    4992:	52 2f       	mov	r21, r18
    4994:	69 2f       	mov	r22, r25
    4996:	70 2f       	mov	r23, r16
    4998:	ed 81       	ldd	r30, Y+5	; 0x05
    499a:	fe 81       	ldd	r31, Y+6	; 0x06
    499c:	82 81       	ldd	r24, Z+2	; 0x02
    499e:	93 81       	ldd	r25, Z+3	; 0x03

}
    49a0:	26 96       	adiw	r28, 0x06	; 6
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
    49ac:	df 91       	pop	r29
    49ae:	cf 91       	pop	r28
    49b0:	1f 91       	pop	r17
    49b2:	0f 91       	pop	r16
    49b4:	ff 90       	pop	r15
    49b6:	ef 90       	pop	r14
    49b8:	df 90       	pop	r13
    49ba:	cf 90       	pop	r12
    49bc:	bf 90       	pop	r11
    49be:	af 90       	pop	r10
    49c0:	9f 90       	pop	r9
    49c2:	8f 90       	pop	r8
    49c4:	7f 90       	pop	r7
    49c6:	6f 90       	pop	r6
    49c8:	5f 90       	pop	r5
    49ca:	4f 90       	pop	r4
    49cc:	3f 90       	pop	r3
    49ce:	2f 90       	pop	r2
	if ((s + MINMTRS) < model->getAnchorN() && s > model->getAnchorS())
		model->setAnchorS(s);
	if ((e - MINMTRS) > model->getAnchorW() && e < model->getAnchorE())
		model->setAnchorE(e);
	if ((w + MINMTRS) < model->getAnchorE() && w > model->getAnchorW())
		model->setAnchorW(w);
    49d0:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <_ZN14FreeBoardModel10setAnchorWEf>

}
    49d4:	26 96       	adiw	r28, 0x06	; 6
    49d6:	0f b6       	in	r0, 0x3f	; 63
    49d8:	f8 94       	cli
    49da:	de bf       	out	0x3e, r29	; 62
    49dc:	0f be       	out	0x3f, r0	; 63
    49de:	cd bf       	out	0x3d, r28	; 61
    49e0:	df 91       	pop	r29
    49e2:	cf 91       	pop	r28
    49e4:	1f 91       	pop	r17
    49e6:	0f 91       	pop	r16
    49e8:	ff 90       	pop	r15
    49ea:	ef 90       	pop	r14
    49ec:	df 90       	pop	r13
    49ee:	cf 90       	pop	r12
    49f0:	bf 90       	pop	r11
    49f2:	af 90       	pop	r10
    49f4:	9f 90       	pop	r9
    49f6:	8f 90       	pop	r8
    49f8:	7f 90       	pop	r7
    49fa:	6f 90       	pop	r6
    49fc:	5f 90       	pop	r5
    49fe:	4f 90       	pop	r4
    4a00:	3f 90       	pop	r3
    4a02:	2f 90       	pop	r2
    4a04:	08 95       	ret

00004a06 <_ZN6Anchor14resetAnchorBoxEff>:

void Anchor::resetAnchorBox(float laty, float lonx) {
    4a06:	8f 92       	push	r8
    4a08:	9f 92       	push	r9
    4a0a:	af 92       	push	r10
    4a0c:	bf 92       	push	r11
    4a0e:	cf 92       	push	r12
    4a10:	df 92       	push	r13
    4a12:	ef 92       	push	r14
    4a14:	ff 92       	push	r15
    4a16:	0f 93       	push	r16
    4a18:	1f 93       	push	r17
    4a1a:	cf 93       	push	r28
    4a1c:	df 93       	push	r29
    4a1e:	ec 01       	movw	r28, r24
    4a20:	6a 01       	movw	r12, r20
    4a22:	7b 01       	movw	r14, r22
    4a24:	48 01       	movw	r8, r16
    4a26:	59 01       	movw	r10, r18
	model->setAnchorN(90.0);
    4a28:	40 e0       	ldi	r20, 0x00	; 0
    4a2a:	50 e0       	ldi	r21, 0x00	; 0
    4a2c:	64 eb       	ldi	r22, 0xB4	; 180
    4a2e:	72 e4       	ldi	r23, 0x42	; 66
    4a30:	8a 81       	ldd	r24, Y+2	; 0x02
    4a32:	9b 81       	ldd	r25, Y+3	; 0x03
    4a34:	0e 94 b1 2c 	call	0x5962	; 0x5962 <_ZN14FreeBoardModel10setAnchorNEf>
	model->setAnchorS(-90.0);
    4a38:	40 e0       	ldi	r20, 0x00	; 0
    4a3a:	50 e0       	ldi	r21, 0x00	; 0
    4a3c:	64 eb       	ldi	r22, 0xB4	; 180
    4a3e:	72 ec       	ldi	r23, 0xC2	; 194
    4a40:	8a 81       	ldd	r24, Y+2	; 0x02
    4a42:	9b 81       	ldd	r25, Y+3	; 0x03
    4a44:	0e 94 c5 2c 	call	0x598a	; 0x598a <_ZN14FreeBoardModel10setAnchorSEf>
	model->setAnchorE(180.0);
    4a48:	40 e0       	ldi	r20, 0x00	; 0
    4a4a:	50 e0       	ldi	r21, 0x00	; 0
    4a4c:	64 e3       	ldi	r22, 0x34	; 52
    4a4e:	73 e4       	ldi	r23, 0x43	; 67
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	9b 81       	ldd	r25, Y+3	; 0x03
    4a54:	0e 94 95 2c 	call	0x592a	; 0x592a <_ZN14FreeBoardModel10setAnchorEEf>
	model->setAnchorW(-180.0);
    4a58:	40 e0       	ldi	r20, 0x00	; 0
    4a5a:	50 e0       	ldi	r21, 0x00	; 0
    4a5c:	64 e3       	ldi	r22, 0x34	; 52
    4a5e:	73 ec       	ldi	r23, 0xC3	; 195
    4a60:	8a 81       	ldd	r24, Y+2	; 0x02
    4a62:	9b 81       	ldd	r25, Y+3	; 0x03
    4a64:	0e 94 cb 2c 	call	0x5996	; 0x5996 <_ZN14FreeBoardModel10setAnchorWEf>
	model->setAnchorRadiusDeg(model->getAnchorRadius() * LLMTRS);
    4a68:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a6c:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4a70:	2d e9       	ldi	r18, 0x9D	; 157
    4a72:	3b ef       	ldi	r19, 0xFB	; 251
    4a74:	46 e1       	ldi	r20, 0x16	; 22
    4a76:	57 e3       	ldi	r21, 0x37	; 55
    4a78:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    4a7c:	ab 01       	movw	r20, r22
    4a7e:	bc 01       	movw	r22, r24
    4a80:	8a 81       	ldd	r24, Y+2	; 0x02
    4a82:	9b 81       	ldd	r25, Y+3	; 0x03
    4a84:	0e 94 bf 2c 	call	0x597e	; 0x597e <_ZN14FreeBoardModel18setAnchorRadiusDegEf>
	updateAnchorBox(laty, lonx);
    4a88:	95 01       	movw	r18, r10
    4a8a:	84 01       	movw	r16, r8
    4a8c:	b7 01       	movw	r22, r14
    4a8e:	a6 01       	movw	r20, r12
    4a90:	ce 01       	movw	r24, r28
    4a92:	0e 94 a3 23 	call	0x4746	; 0x4746 <_ZN6Anchor15updateAnchorBoxEff>
}
    4a96:	df 91       	pop	r29
    4a98:	cf 91       	pop	r28
    4a9a:	1f 91       	pop	r17
    4a9c:	0f 91       	pop	r16
    4a9e:	ff 90       	pop	r15
    4aa0:	ef 90       	pop	r14
    4aa2:	df 90       	pop	r13
    4aa4:	cf 90       	pop	r12
    4aa6:	bf 90       	pop	r11
    4aa8:	af 90       	pop	r10
    4aaa:	9f 90       	pop	r9
    4aac:	8f 90       	pop	r8
    4aae:	08 95       	ret

00004ab0 <_ZN6AnchorC1EP14FreeBoardModel>:

#include "Anchor.h"



Anchor::Anchor(FreeBoardModel* model) {
    4ab0:	cf 92       	push	r12
    4ab2:	df 92       	push	r13
    4ab4:	ef 92       	push	r14
    4ab6:	ff 92       	push	r15
    4ab8:	0f 93       	push	r16
    4aba:	1f 93       	push	r17
    4abc:	cf 93       	push	r28
    4abe:	df 93       	push	r29
    4ac0:	1f 92       	push	r1
    4ac2:	1f 92       	push	r1
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
    4ac8:	6c 01       	movw	r12, r24
    4aca:	7b 01       	movw	r14, r22
    4acc:	80 e3       	ldi	r24, 0x30	; 48
    4ace:	92 e0       	ldi	r25, 0x02	; 2
    4ad0:	f6 01       	movw	r30, r12
    4ad2:	91 83       	std	Z+1, r25	; 0x01
    4ad4:	80 83       	st	Z, r24


	this->model=model;
    4ad6:	73 83       	std	Z+3, r23	; 0x03
    4ad8:	62 83       	std	Z+2, r22	; 0x02
	resetAnchorBox(model->getAnchorLat(), model->getAnchorLon());
    4ada:	cb 01       	movw	r24, r22
    4adc:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN14FreeBoardModel12getAnchorLonEv>
    4ae0:	8b 01       	movw	r16, r22
    4ae2:	9c 01       	movw	r18, r24
    4ae4:	c7 01       	movw	r24, r14
    4ae6:	29 83       	std	Y+1, r18	; 0x01
    4ae8:	3a 83       	std	Y+2, r19	; 0x02
    4aea:	0e 94 38 2a 	call	0x5470	; 0x5470 <_ZN14FreeBoardModel12getAnchorLatEv>
    4aee:	ab 01       	movw	r20, r22
    4af0:	bc 01       	movw	r22, r24
    4af2:	29 81       	ldd	r18, Y+1	; 0x01
    4af4:	3a 81       	ldd	r19, Y+2	; 0x02
    4af6:	c6 01       	movw	r24, r12
    4af8:	0e 94 03 25 	call	0x4a06	; 0x4a06 <_ZN6Anchor14resetAnchorBoxEff>
}
    4afc:	0f 90       	pop	r0
    4afe:	0f 90       	pop	r0
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	1f 91       	pop	r17
    4b06:	0f 91       	pop	r16
    4b08:	ff 90       	pop	r15
    4b0a:	ef 90       	pop	r14
    4b0c:	df 90       	pop	r13
    4b0e:	cf 90       	pop	r12
    4b10:	08 95       	ret

00004b12 <_ZN6Anchor11checkAnchorEv>:
		model->setAnchorW(model->getAnchorW() - change);

	}
}
/*calc all params, and set alarm buzzer state*/
void Anchor::checkAnchor() {
    4b12:	8f 92       	push	r8
    4b14:	9f 92       	push	r9
    4b16:	af 92       	push	r10
    4b18:	bf 92       	push	r11
    4b1a:	cf 92       	push	r12
    4b1c:	df 92       	push	r13
    4b1e:	ef 92       	push	r14
    4b20:	ff 92       	push	r15
    4b22:	0f 93       	push	r16
    4b24:	1f 93       	push	r17
    4b26:	cf 93       	push	r28
    4b28:	df 93       	push	r29
    4b2a:	00 d0       	rcall	.+0      	; 0x4b2c <_ZN6Anchor11checkAnchorEv+0x1a>
    4b2c:	1f 92       	push	r1
    4b2e:	cd b7       	in	r28, 0x3d	; 61
    4b30:	de b7       	in	r29, 0x3e	; 62
    4b32:	4c 01       	movw	r8, r24

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
    4b34:	fc 01       	movw	r30, r24
    4b36:	82 81       	ldd	r24, Z+2	; 0x02
    4b38:	93 81       	ldd	r25, Z+3	; 0x03
    4b3a:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4b3e:	88 23       	and	r24, r24
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <_ZN6Anchor11checkAnchorEv+0x32>
    4b42:	cf c0       	rjmp	.+414    	; 0x4ce2 <_ZN6Anchor11checkAnchorEv+0x1d0>
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4b44:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    4b48:	6b 01       	movw	r12, r22
    4b4a:	7c 01       	movw	r14, r24
    4b4c:	f4 01       	movw	r30, r8
    4b4e:	82 81       	ldd	r24, Z+2	; 0x02
    4b50:	93 81       	ldd	r25, Z+3	; 0x03
    4b52:	0e 94 0b 2c 	call	0x5816	; 0x5816 <_ZN14FreeBoardModel13getGpsLastFixEv>
    4b56:	c6 1a       	sub	r12, r22
    4b58:	d7 0a       	sbc	r13, r23
    4b5a:	e8 0a       	sbc	r14, r24
    4b5c:	f9 0a       	sbc	r15, r25
    4b5e:	f1 ee       	ldi	r31, 0xE1	; 225
    4b60:	cf 16       	cp	r12, r31
    4b62:	f3 e9       	ldi	r31, 0x93	; 147
    4b64:	df 06       	cpc	r13, r31
    4b66:	f4 e0       	ldi	r31, 0x04	; 4
    4b68:	ef 06       	cpc	r14, r31
    4b6a:	f1 04       	cpc	r15, r1
    4b6c:	38 f0       	brcs	.+14     	; 0x4b7c <_ZN6Anchor11checkAnchorEv+0x6a>
				&& model->isAnchorAlarmOn()) {
    4b6e:	f4 01       	movw	r30, r8
    4b70:	82 81       	ldd	r24, Z+2	; 0x02
    4b72:	93 81       	ldd	r25, Z+3	; 0x03
    4b74:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>

	//we dont need to do this if the anchor alarm is off
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
    4b78:	81 11       	cpse	r24, r1
    4b7a:	84 c0       	rjmp	.+264    	; 0x4c84 <_ZN6Anchor11checkAnchorEv+0x172>
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
			model->setAnchorAlarmTriggered(true);
		}
		//now check position
		if (model->getGpsStatus()) {
    4b7c:	f4 01       	movw	r30, r8
    4b7e:	82 81       	ldd	r24, Z+2	; 0x02
    4b80:	93 81       	ldd	r25, Z+3	; 0x03
    4b82:	0e 94 37 2c 	call	0x586e	; 0x586e <_ZN14FreeBoardModel12getGpsStatusEv>
    4b86:	88 23       	and	r24, r24
    4b88:	09 f4       	brne	.+2      	; 0x4b8c <_ZN6Anchor11checkAnchorEv+0x7a>
    4b8a:	ab c0       	rjmp	.+342    	; 0x4ce2 <_ZN6Anchor11checkAnchorEv+0x1d0>
			model->setAnchorDistance(Gps::getMetersTo(model->getAnchorLat(), model->getAnchorLon(),model->getGpsLatitude(),model->getGpsLongitude()));
    4b8c:	f4 01       	movw	r30, r8
    4b8e:	82 81       	ldd	r24, Z+2	; 0x02
    4b90:	93 81       	ldd	r25, Z+3	; 0x03
    4b92:	0e 94 1f 2c 	call	0x583e	; 0x583e <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4b96:	5b 01       	movw	r10, r22
    4b98:	6c 01       	movw	r12, r24
    4b9a:	f4 01       	movw	r30, r8
    4b9c:	82 81       	ldd	r24, Z+2	; 0x02
    4b9e:	93 81       	ldd	r25, Z+3	; 0x03
    4ba0:	0e 94 13 2c 	call	0x5826	; 0x5826 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4ba4:	7b 01       	movw	r14, r22
    4ba6:	8c 01       	movw	r16, r24
    4ba8:	f4 01       	movw	r30, r8
    4baa:	82 81       	ldd	r24, Z+2	; 0x02
    4bac:	93 81       	ldd	r25, Z+3	; 0x03
    4bae:	0e 94 44 2a 	call	0x5488	; 0x5488 <_ZN14FreeBoardModel12getAnchorLonEv>
    4bb2:	9b 01       	movw	r18, r22
    4bb4:	ac 01       	movw	r20, r24
    4bb6:	f4 01       	movw	r30, r8
    4bb8:	82 81       	ldd	r24, Z+2	; 0x02
    4bba:	93 81       	ldd	r25, Z+3	; 0x03
    4bbc:	2b 83       	std	Y+3, r18	; 0x03
    4bbe:	3c 83       	std	Y+4, r19	; 0x04
    4bc0:	49 83       	std	Y+1, r20	; 0x01
    4bc2:	5a 83       	std	Y+2, r21	; 0x02
    4bc4:	0e 94 38 2a 	call	0x5470	; 0x5470 <_ZN14FreeBoardModel12getAnchorLatEv>
    4bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    4bca:	3c 81       	ldd	r19, Y+4	; 0x04
    4bcc:	49 81       	ldd	r20, Y+1	; 0x01
    4bce:	5a 81       	ldd	r21, Y+2	; 0x02
    4bd0:	0e 94 0f 34 	call	0x681e	; 0x681e <_ZN3Gps11getMetersToEffff>
    4bd4:	ab 01       	movw	r20, r22
    4bd6:	bc 01       	movw	r22, r24
    4bd8:	f4 01       	movw	r30, r8
    4bda:	82 81       	ldd	r24, Z+2	; 0x02
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	0e 94 8f 2c 	call	0x591e	; 0x591e <_ZN14FreeBoardModel17setAnchorDistanceEf>
			if (model->getAnchorDistance() > model->getAnchorMaxDistance())
    4be2:	f4 01       	movw	r30, r8
    4be4:	82 81       	ldd	r24, Z+2	; 0x02
    4be6:	93 81       	ldd	r25, Z+3	; 0x03
    4be8:	0e 94 24 2a 	call	0x5448	; 0x5448 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4bec:	6b 01       	movw	r12, r22
    4bee:	7c 01       	movw	r14, r24
    4bf0:	f4 01       	movw	r30, r8
    4bf2:	82 81       	ldd	r24, Z+2	; 0x02
    4bf4:	93 81       	ldd	r25, Z+3	; 0x03
    4bf6:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>
    4bfa:	9b 01       	movw	r18, r22
    4bfc:	ac 01       	movw	r20, r24
    4bfe:	c7 01       	movw	r24, r14
    4c00:	b6 01       	movw	r22, r12
    4c02:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4c06:	18 16       	cp	r1, r24
    4c08:	64 f4       	brge	.+24     	; 0x4c22 <_ZN6Anchor11checkAnchorEv+0x110>
				model->setAnchorMaxDistance(model->getAnchorDistance());
    4c0a:	f4 01       	movw	r30, r8
    4c0c:	82 81       	ldd	r24, Z+2	; 0x02
    4c0e:	93 81       	ldd	r25, Z+3	; 0x03
    4c10:	0e 94 24 2a 	call	0x5448	; 0x5448 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4c14:	ab 01       	movw	r20, r22
    4c16:	bc 01       	movw	r22, r24
    4c18:	f4 01       	movw	r30, r8
    4c1a:	82 81       	ldd	r24, Z+2	; 0x02
    4c1c:	93 81       	ldd	r25, Z+3	; 0x03
    4c1e:	0e 94 ab 2c 	call	0x5956	; 0x5956 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

			//update the anchor box
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());
    4c22:	f4 01       	movw	r30, r8
    4c24:	82 81       	ldd	r24, Z+2	; 0x02
    4c26:	93 81       	ldd	r25, Z+3	; 0x03
    4c28:	0e 94 1f 2c 	call	0x583e	; 0x583e <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4c2c:	8b 01       	movw	r16, r22
    4c2e:	9c 01       	movw	r18, r24
    4c30:	f4 01       	movw	r30, r8
    4c32:	82 81       	ldd	r24, Z+2	; 0x02
    4c34:	93 81       	ldd	r25, Z+3	; 0x03
    4c36:	2b 83       	std	Y+3, r18	; 0x03
    4c38:	3c 83       	std	Y+4, r19	; 0x04
    4c3a:	0e 94 13 2c 	call	0x5826	; 0x5826 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4c3e:	ab 01       	movw	r20, r22
    4c40:	bc 01       	movw	r22, r24
    4c42:	2b 81       	ldd	r18, Y+3	; 0x03
    4c44:	3c 81       	ldd	r19, Y+4	; 0x04
    4c46:	c4 01       	movw	r24, r8
    4c48:	0e 94 a3 23 	call	0x4746	; 0x4746 <_ZN6Anchor15updateAnchorBoxEff>

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
    4c4c:	f4 01       	movw	r30, r8
    4c4e:	82 81       	ldd	r24, Z+2	; 0x02
    4c50:	93 81       	ldd	r25, Z+3	; 0x03
    4c52:	0e 94 6c 2c 	call	0x58d8	; 0x58d8 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>
    4c56:	88 23       	and	r24, r24
    4c58:	71 f1       	breq	.+92     	; 0x4cb6 <_ZN6Anchor11checkAnchorEv+0x1a4>
    4c5a:	f4 01       	movw	r30, r8
    4c5c:	82 81       	ldd	r24, Z+2	; 0x02
    4c5e:	93 81       	ldd	r25, Z+3	; 0x03
    4c60:	0e 94 24 2a 	call	0x5448	; 0x5448 <_ZN14FreeBoardModel17getAnchorDistanceEv>
    4c64:	6b 01       	movw	r12, r22
    4c66:	7c 01       	movw	r14, r24
    4c68:	f4 01       	movw	r30, r8
    4c6a:	82 81       	ldd	r24, Z+2	; 0x02
    4c6c:	93 81       	ldd	r25, Z+3	; 0x03
    4c6e:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    4c72:	9b 01       	movw	r18, r22
    4c74:	ac 01       	movw	r20, r24
    4c76:	c7 01       	movw	r24, r14
    4c78:	b6 01       	movw	r22, r12
    4c7a:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4c7e:	18 16       	cp	r1, r24
    4c80:	84 f0       	brlt	.+32     	; 0x4ca2 <_ZN6Anchor11checkAnchorEv+0x190>
    4c82:	19 c0       	rjmp	.+50     	; 0x4cb6 <_ZN6Anchor11checkAnchorEv+0x1a4>
	if(model->isAnchorAlarmOn()){
		//TODO: if anchor distance greater than 1000 mtrs its probably a mistake so dont fire alarm?
		// check if GPS positioning was active, if we havent had a signal in a while that may be a problem....
		if ((millis() - model->getGpsLastFix() > MAX_SINCE_LAST_GPS_FIX)
				&& model->isAnchorAlarmOn()) {
			model->setAlarmSnooze(0);
    4c84:	40 e0       	ldi	r20, 0x00	; 0
    4c86:	50 e0       	ldi	r21, 0x00	; 0
    4c88:	ba 01       	movw	r22, r20
    4c8a:	f4 01       	movw	r30, r8
    4c8c:	82 81       	ldd	r24, Z+2	; 0x02
    4c8e:	93 81       	ldd	r25, Z+3	; 0x03
    4c90:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
			model->setAnchorAlarmTriggered(true);
    4c94:	61 e0       	ldi	r22, 0x01	; 1
    4c96:	f4 01       	movw	r30, r8
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    4c9a:	93 81       	ldd	r25, Z+3	; 0x03
    4c9c:	0e 94 8c 2c 	call	0x5918	; 0x5918 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
    4ca0:	6d cf       	rjmp	.-294    	; 0x4b7c <_ZN6Anchor11checkAnchorEv+0x6a>
			updateAnchorBox(model->getGpsLatitude(), model->getGpsLongitude());

			// read distance to anchorPoint in meters and set anchorAlarm accordingly
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
    4ca2:	40 e0       	ldi	r20, 0x00	; 0
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	ba 01       	movw	r22, r20
    4ca8:	f4 01       	movw	r30, r8
    4caa:	82 81       	ldd	r24, Z+2	; 0x02
    4cac:	93 81       	ldd	r25, Z+3	; 0x03
    4cae:	0e 94 81 2c 	call	0x5902	; 0x5902 <_ZN14FreeBoardModel14setAlarmSnoozeEm>
				model->setAnchorAlarmTriggered(true);
    4cb2:	61 e0       	ldi	r22, 0x01	; 1
    4cb4:	01 c0       	rjmp	.+2      	; 0x4cb8 <_ZN6Anchor11checkAnchorEv+0x1a6>
			} else {
				model->setAnchorAlarmTriggered(false);
    4cb6:	60 e0       	ldi	r22, 0x00	; 0
    4cb8:	f4 01       	movw	r30, r8
    4cba:	82 81       	ldd	r24, Z+2	; 0x02
    4cbc:	93 81       	ldd	r25, Z+3	; 0x03
			}
		}
	}

}
    4cbe:	0f 90       	pop	r0
    4cc0:	0f 90       	pop	r0
    4cc2:	0f 90       	pop	r0
    4cc4:	0f 90       	pop	r0
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	1f 91       	pop	r17
    4ccc:	0f 91       	pop	r16
    4cce:	ff 90       	pop	r15
    4cd0:	ef 90       	pop	r14
    4cd2:	df 90       	pop	r13
    4cd4:	cf 90       	pop	r12
    4cd6:	bf 90       	pop	r11
    4cd8:	af 90       	pop	r10
    4cda:	9f 90       	pop	r9
    4cdc:	8f 90       	pop	r8
			// if ( anchorAlarmOn && (anchorDistance > anchorRadius || !inAnchorBox(gps->gprmc_latitude(),gps->gprmc_longitude()))) {
			if (model->isAnchorAlarmOn() && model->getAnchorDistance() > model->getAnchorRadius()) {
				model->setAlarmSnooze(0);
				model->setAnchorAlarmTriggered(true);
			} else {
				model->setAnchorAlarmTriggered(false);
    4cde:	0c 94 8c 2c 	jmp	0x5918	; 0x5918 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>
			}
		}
	}

}
    4ce2:	0f 90       	pop	r0
    4ce4:	0f 90       	pop	r0
    4ce6:	0f 90       	pop	r0
    4ce8:	0f 90       	pop	r0
    4cea:	df 91       	pop	r29
    4cec:	cf 91       	pop	r28
    4cee:	1f 91       	pop	r17
    4cf0:	0f 91       	pop	r16
    4cf2:	ff 90       	pop	r15
    4cf4:	ef 90       	pop	r14
    4cf6:	df 90       	pop	r13
    4cf8:	cf 90       	pop	r12
    4cfa:	bf 90       	pop	r11
    4cfc:	af 90       	pop	r10
    4cfe:	9f 90       	pop	r9
    4d00:	8f 90       	pop	r8
    4d02:	08 95       	ret

00004d04 <_ZN6Anchor14setAnchorPointEv>:

/*Set anchor position*/
void Anchor::setAnchorPoint() {
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	ec 01       	movw	r28, r24
	model->setAnchorLat(model->getGpsLatitude());
    4d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d0e:	0e 94 13 2c 	call	0x5826	; 0x5826 <_ZN14FreeBoardModel14getGpsLatitudeEv>
    4d12:	ab 01       	movw	r20, r22
    4d14:	bc 01       	movw	r22, r24
    4d16:	8a 81       	ldd	r24, Y+2	; 0x02
    4d18:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1a:	0e 94 9b 2c 	call	0x5936	; 0x5936 <_ZN14FreeBoardModel12setAnchorLatEf>
	model->setAnchorLon(model->getGpsLongitude());
    4d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d20:	9b 81       	ldd	r25, Y+3	; 0x03
    4d22:	0e 94 1f 2c 	call	0x583e	; 0x583e <_ZN14FreeBoardModel15getGpsLongitudeEv>
    4d26:	ab 01       	movw	r20, r22
    4d28:	bc 01       	movw	r22, r24
    4d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d2e:	0e 94 a3 2c 	call	0x5946	; 0x5946 <_ZN14FreeBoardModel12setAnchorLonEf>
	model->setAnchorMaxDistance(0);
    4d32:	40 e0       	ldi	r20, 0x00	; 0
    4d34:	50 e0       	ldi	r21, 0x00	; 0
    4d36:	ba 01       	movw	r22, r20
    4d38:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3a:	9b 81       	ldd	r25, Y+3	; 0x03

}
    4d3c:	df 91       	pop	r29
    4d3e:	cf 91       	pop	r28

/*Set anchor position*/
void Anchor::setAnchorPoint() {
	model->setAnchorLat(model->getGpsLatitude());
	model->setAnchorLon(model->getGpsLongitude());
	model->setAnchorMaxDistance(0);
    4d40:	0c 94 ab 2c 	jmp	0x5956	; 0x5956 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>

00004d44 <_ZN9AutopilotC1EP14FreeBoardModel>:
 * And lastly, if the second you enable the controller the output goes in the wrong direction and pegs at 0 or 100%, you've got the sign of the P_Param wrong.
 * That is, if you've got a 3 in there, make it -3.
 */
#include "Autopilot.h"

Autopilot::Autopilot(FreeBoardModel* model) {
    4d44:	6f 92       	push	r6
    4d46:	7f 92       	push	r7
    4d48:	8f 92       	push	r8
    4d4a:	9f 92       	push	r9
    4d4c:	af 92       	push	r10
    4d4e:	bf 92       	push	r11
    4d50:	cf 92       	push	r12
    4d52:	df 92       	push	r13
    4d54:	ef 92       	push	r14
    4d56:	ff 92       	push	r15
    4d58:	0f 93       	push	r16
    4d5a:	1f 93       	push	r17
    4d5c:	cf 93       	push	r28
    4d5e:	df 93       	push	r29
    4d60:	cd b7       	in	r28, 0x3d	; 61
    4d62:	de b7       	in	r29, 0x3e	; 62
    4d64:	e7 97       	sbiw	r28, 0x37	; 55
    4d66:	0f b6       	in	r0, 0x3f	; 63
    4d68:	f8 94       	cli
    4d6a:	de bf       	out	0x3e, r29	; 62
    4d6c:	0f be       	out	0x3f, r0	; 63
    4d6e:	cd bf       	out	0x3d, r28	; 61
    4d70:	4c 01       	movw	r8, r24
    4d72:	8b 01       	movw	r16, r22
    4d74:	3c 01       	movw	r6, r24
    4d76:	83 e1       	ldi	r24, 0x13	; 19
    4d78:	68 0e       	add	r6, r24
    4d7a:	71 1c       	adc	r7, r1
    4d7c:	c3 01       	movw	r24, r6
    4d7e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_ZN3PIDC1Ev>
	this->model = model;
    4d82:	f4 01       	movw	r30, r8
    4d84:	12 8b       	std	Z+18, r17	; 0x12
    4d86:	01 8b       	std	Z+17, r16	; 0x11
	autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    4d88:	c8 01       	movw	r24, r16
    4d8a:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    4d8e:	20 e0       	ldi	r18, 0x00	; 0
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	44 e3       	ldi	r20, 0x34	; 52
    4d94:	54 e4       	ldi	r21, 0x44	; 68
    4d96:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    4d9a:	6b 01       	movw	r12, r22
    4d9c:	7c 01       	movw	r14, r24
    4d9e:	98 2f       	mov	r25, r24
    4da0:	4c 2d       	mov	r20, r12
    4da2:	5d 2d       	mov	r21, r13
    4da4:	69 2f       	mov	r22, r25
    4da6:	7f 2d       	mov	r23, r15
    4da8:	f4 01       	movw	r30, r8
    4daa:	40 83       	st	Z, r20
    4dac:	51 83       	std	Z+1, r21	; 0x01
    4dae:	62 83       	std	Z+2, r22	; 0x02
    4db0:	73 83       	std	Z+3, r23	; 0x03
	autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    4db2:	c8 01       	movw	r24, r16
    4db4:	0e 94 b6 2a 	call	0x556c	; 0x556c <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    4db8:	9b 01       	movw	r18, r22
    4dba:	ac 01       	movw	r20, r24
    4dbc:	6c 2d       	mov	r22, r12
    4dbe:	7d 2d       	mov	r23, r13
    4dc0:	8e 2d       	mov	r24, r14
    4dc2:	9f 2d       	mov	r25, r15
    4dc4:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    4dc8:	f4 01       	movw	r30, r8
    4dca:	64 83       	std	Z+4, r22	; 0x04
    4dcc:	75 83       	std	Z+5, r23	; 0x05
    4dce:	86 83       	std	Z+6, r24	; 0x06
    4dd0:	97 83       	std	Z+7, r25	; 0x07
	autopilotRudderCommand = model->getAutopilotRudderCommand();
    4dd2:	c8 01       	movw	r24, r16
    4dd4:	0e 94 8e 2a 	call	0x551c	; 0x551c <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>
    4dd8:	f4 01       	movw	r30, r8
    4dda:	60 87       	std	Z+8, r22	; 0x08
    4ddc:	71 87       	std	Z+9, r23	; 0x09
    4dde:	82 87       	std	Z+10, r24	; 0x0a
    4de0:	93 87       	std	Z+11, r25	; 0x0b
	lastDirection=true;
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	80 8b       	std	Z+16, r24	; 0x10
	this->headingPid = PID(&autopilotCurrentHeading, &autopilotRudderCommand, &autopilotTargetHeading, P_Param, I_Param, D_Param, REVERSE);
    4de6:	a4 01       	movw	r20, r8
    4de8:	48 5f       	subi	r20, 0xF8	; 248
    4dea:	5f 4f       	sbci	r21, 0xFF	; 255
    4dec:	b4 01       	movw	r22, r8
    4dee:	6c 5f       	subi	r22, 0xFC	; 252
    4df0:	7f 4f       	sbci	r23, 0xFF	; 255
    4df2:	1f 92       	push	r1
    4df4:	8f 93       	push	r24
    4df6:	8f e3       	ldi	r24, 0x3F	; 63
    4df8:	8f 93       	push	r24
    4dfa:	85 e0       	ldi	r24, 0x05	; 5
    4dfc:	8f 93       	push	r24
    4dfe:	8e e1       	ldi	r24, 0x1E	; 30
    4e00:	8f 93       	push	r24
    4e02:	88 eb       	ldi	r24, 0xB8	; 184
    4e04:	8f 93       	push	r24
    4e06:	8a e0       	ldi	r24, 0x0A	; 10
    4e08:	a8 2e       	mov	r10, r24
    4e0a:	87 ed       	ldi	r24, 0xD7	; 215
    4e0c:	b8 2e       	mov	r11, r24
    4e0e:	83 ea       	ldi	r24, 0xA3	; 163
    4e10:	c8 2e       	mov	r12, r24
    4e12:	8d e3       	ldi	r24, 0x3D	; 61
    4e14:	d8 2e       	mov	r13, r24
    4e16:	16 e6       	ldi	r17, 0x66	; 102
    4e18:	e1 2e       	mov	r14, r17
    4e1a:	fe 2c       	mov	r15, r14
    4e1c:	06 ee       	ldi	r16, 0xE6	; 230
    4e1e:	1e e3       	ldi	r17, 0x3E	; 62
    4e20:	94 01       	movw	r18, r8
    4e22:	ce 01       	movw	r24, r28
    4e24:	01 96       	adiw	r24, 0x01	; 1
    4e26:	0e 94 3c 1b 	call	0x3678	; 0x3678 <_ZN3PIDC1EPdS0_S0_dddi>
    4e2a:	87 e3       	ldi	r24, 0x37	; 55
    4e2c:	fe 01       	movw	r30, r28
    4e2e:	31 96       	adiw	r30, 0x01	; 1
    4e30:	d3 01       	movw	r26, r6
    4e32:	01 90       	ld	r0, Z+
    4e34:	0d 92       	st	X+, r0
    4e36:	8a 95       	dec	r24
    4e38:	e1 f7       	brne	.-8      	; 0x4e32 <_ZN9AutopilotC1EP14FreeBoardModel+0xee>

	headingPid.SetOutputLimits(0.0, 66.0); //output limits
    4e3a:	00 e0       	ldi	r16, 0x00	; 0
    4e3c:	10 e0       	ldi	r17, 0x00	; 0
    4e3e:	24 e8       	ldi	r18, 0x84	; 132
    4e40:	32 e4       	ldi	r19, 0x42	; 66
    4e42:	40 e0       	ldi	r20, 0x00	; 0
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	ba 01       	movw	r22, r20
    4e48:	c3 01       	movw	r24, r6
    4e4a:	0e 94 26 1a 	call	0x344c	; 0x344c <_ZN3PID15SetOutputLimitsEdd>
	headingPid.SetSampleTime(100);
    4e4e:	64 e6       	ldi	r22, 0x64	; 100
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	c3 01       	movw	r24, r6
    4e54:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <_ZN3PID13SetSampleTimeEi>
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	0f 90       	pop	r0
    4e5e:	0f 90       	pop	r0
    4e60:	0f 90       	pop	r0
    4e62:	0f 90       	pop	r0

}
    4e64:	e7 96       	adiw	r28, 0x37	; 55
    4e66:	0f b6       	in	r0, 0x3f	; 63
    4e68:	f8 94       	cli
    4e6a:	de bf       	out	0x3e, r29	; 62
    4e6c:	0f be       	out	0x3f, r0	; 63
    4e6e:	cd bf       	out	0x3d, r28	; 61
    4e70:	df 91       	pop	r29
    4e72:	cf 91       	pop	r28
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	ff 90       	pop	r15
    4e7a:	ef 90       	pop	r14
    4e7c:	df 90       	pop	r13
    4e7e:	cf 90       	pop	r12
    4e80:	bf 90       	pop	r11
    4e82:	af 90       	pop	r10
    4e84:	9f 90       	pop	r9
    4e86:	8f 90       	pop	r8
    4e88:	7f 90       	pop	r7
    4e8a:	6f 90       	pop	r6
    4e8c:	08 95       	ret

00004e8e <_ZN9AutopilotD1Ev>:
Autopilot::~Autopilot() {
    4e8e:	08 95       	ret

00004e90 <_ZN9Autopilot13calcAutoPilotEv>:

}

void Autopilot::calcAutoPilot() {
    4e90:	8f 92       	push	r8
    4e92:	9f 92       	push	r9
    4e94:	af 92       	push	r10
    4e96:	bf 92       	push	r11
    4e98:	cf 92       	push	r12
    4e9a:	df 92       	push	r13
    4e9c:	ef 92       	push	r14
    4e9e:	ff 92       	push	r15
    4ea0:	0f 93       	push	r16
    4ea2:	1f 93       	push	r17
    4ea4:	cf 93       	push	r28
    4ea6:	df 93       	push	r29
    4ea8:	ec 01       	movw	r28, r24
	//we dont do this if the autopilot is MANUAL
	if (model->isAutopilotOn()) {
    4eaa:	89 89       	ldd	r24, Y+17	; 0x11
    4eac:	9a 89       	ldd	r25, Y+18	; 0x12
    4eae:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <_ZN14FreeBoardModel13isAutopilotOnEv>
    4eb2:	8e 01       	movw	r16, r28
    4eb4:	0d 5e       	subi	r16, 0xED	; 237
    4eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb8:	88 23       	and	r24, r24
    4eba:	09 f4       	brne	.+2      	; 0x4ebe <_ZN9Autopilot13calcAutoPilotEv+0x2e>
    4ebc:	cd c0       	rjmp	.+410    	; 0x5058 <_ZN9Autopilot13calcAutoPilotEv+0x1c8>
		//does nothing if its already on, inits if off
		headingPid.SetMode(AUTOMATIC);
    4ebe:	61 e0       	ldi	r22, 0x01	; 1
    4ec0:	70 e0       	ldi	r23, 0x00	; 0
    4ec2:	c8 01       	movw	r24, r16
    4ec4:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <_ZN3PID7SetModeEi>
		autopilotTargetHeading = model->getAutopilotTargetHeading() + 720;
    4ec8:	89 89       	ldd	r24, Y+17	; 0x11
    4eca:	9a 89       	ldd	r25, Y+18	; 0x12
    4ecc:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    4ed0:	20 e0       	ldi	r18, 0x00	; 0
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	44 e3       	ldi	r20, 0x34	; 52
    4ed6:	54 e4       	ldi	r21, 0x44	; 68
    4ed8:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    4edc:	6b 01       	movw	r12, r22
    4ede:	7c 01       	movw	r14, r24
    4ee0:	98 2f       	mov	r25, r24
    4ee2:	4c 2d       	mov	r20, r12
    4ee4:	5d 2d       	mov	r21, r13
    4ee6:	69 2f       	mov	r22, r25
    4ee8:	7f 2d       	mov	r23, r15
    4eea:	48 83       	st	Y, r20
    4eec:	59 83       	std	Y+1, r21	; 0x01
    4eee:	6a 83       	std	Y+2, r22	; 0x02
    4ef0:	7b 83       	std	Y+3, r23	; 0x03
		autopilotCurrentHeading = autopilotTargetHeading + model->getAutopilotOffCourse();
    4ef2:	89 89       	ldd	r24, Y+17	; 0x11
    4ef4:	9a 89       	ldd	r25, Y+18	; 0x12
    4ef6:	0e 94 b6 2a 	call	0x556c	; 0x556c <_ZN14FreeBoardModel21getAutopilotOffCourseEv>
    4efa:	9b 01       	movw	r18, r22
    4efc:	ac 01       	movw	r20, r24
    4efe:	6c 2d       	mov	r22, r12
    4f00:	7d 2d       	mov	r23, r13
    4f02:	8e 2d       	mov	r24, r14
    4f04:	9f 2d       	mov	r25, r15
    4f06:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    4f0a:	6c 83       	std	Y+4, r22	; 0x04
    4f0c:	7d 83       	std	Y+5, r23	; 0x05
    4f0e:	8e 83       	std	Y+6, r24	; 0x06
    4f10:	9f 83       	std	Y+7, r25	; 0x07
		headingPid.Compute();
    4f12:	c8 01       	movw	r24, r16
    4f14:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZN3PID7ComputeEv>
		//check deadzone
		if (abs(autopilotRudderCommand - lastRudderCommand) > model->getAutopilotDeadZone()) {
    4f18:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    4f1c:	4e 85       	ldd	r20, Y+14	; 0x0e
    4f1e:	5f 85       	ldd	r21, Y+15	; 0x0f
    4f20:	68 85       	ldd	r22, Y+8	; 0x08
    4f22:	79 85       	ldd	r23, Y+9	; 0x09
    4f24:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f26:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f28:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    4f2c:	b6 2f       	mov	r27, r22
    4f2e:	a7 2f       	mov	r26, r23
    4f30:	46 2f       	mov	r20, r22
    4f32:	57 2f       	mov	r21, r23
    4f34:	68 2f       	mov	r22, r24
    4f36:	79 2f       	mov	r23, r25
    4f38:	4a 01       	movw	r8, r20
    4f3a:	5b 01       	movw	r10, r22
    4f3c:	20 e0       	ldi	r18, 0x00	; 0
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	a9 01       	movw	r20, r18
    4f42:	6b 2f       	mov	r22, r27
    4f44:	7a 2f       	mov	r23, r26
    4f46:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4f4a:	18 16       	cp	r1, r24
    4f4c:	24 f0       	brlt	.+8      	; 0x4f56 <_ZN9Autopilot13calcAutoPilotEv+0xc6>
    4f4e:	b7 fa       	bst	r11, 7
    4f50:	b0 94       	com	r11
    4f52:	b7 f8       	bld	r11, 7
    4f54:	b0 94       	com	r11
    4f56:	89 89       	ldd	r24, Y+17	; 0x11
    4f58:	9a 89       	ldd	r25, Y+18	; 0x12
    4f5a:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>
    4f5e:	bc 01       	movw	r22, r24
    4f60:	88 27       	eor	r24, r24
    4f62:	77 fd       	sbrc	r23, 7
    4f64:	80 95       	com	r24
    4f66:	98 2f       	mov	r25, r24
    4f68:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    4f6c:	9b 01       	movw	r18, r22
    4f6e:	ac 01       	movw	r20, r24
    4f70:	c5 01       	movw	r24, r10
    4f72:	b4 01       	movw	r22, r8
    4f74:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4f78:	18 16       	cp	r1, r24
    4f7a:	0c f0       	brlt	.+2      	; 0x4f7e <_ZN9Autopilot13calcAutoPilotEv+0xee>
    4f7c:	7e c0       	rjmp	.+252    	; 0x507a <_ZN9Autopilot13calcAutoPilotEv+0x1ea>
			//then we move the rudder.
			//is it changing movement direction, we need to compensate for slack
			if (lastDirection && autopilotRudderCommand > lastRudderCommand) {
    4f7e:	88 89       	ldd	r24, Y+16	; 0x10
    4f80:	c8 84       	ldd	r12, Y+8	; 0x08
    4f82:	d9 84       	ldd	r13, Y+9	; 0x09
    4f84:	ea 84       	ldd	r14, Y+10	; 0x0a
    4f86:	fb 84       	ldd	r15, Y+11	; 0x0b
    4f88:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f8a:	9d 84       	ldd	r9, Y+13	; 0x0d
    4f8c:	ae 84       	ldd	r10, Y+14	; 0x0e
    4f8e:	bf 84       	ldd	r11, Y+15	; 0x0f
    4f90:	a5 01       	movw	r20, r10
    4f92:	94 01       	movw	r18, r8
    4f94:	88 23       	and	r24, r24
    4f96:	11 f1       	breq	.+68     	; 0x4fdc <_ZN9Autopilot13calcAutoPilotEv+0x14c>
    4f98:	c7 01       	movw	r24, r14
    4f9a:	b6 01       	movw	r22, r12
    4f9c:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4fa0:	18 16       	cp	r1, r24
    4fa2:	0c f4       	brge	.+2      	; 0x4fa6 <_ZN9Autopilot13calcAutoPilotEv+0x116>
    4fa4:	21 c0       	rjmp	.+66     	; 0x4fe8 <_ZN9Autopilot13calcAutoPilotEv+0x158>
				//same direction to stbd, no slack
				lastRudderCommand = autopilotRudderCommand;
			}else if (lastDirection && autopilotRudderCommand < lastRudderCommand) {
    4fa6:	a5 01       	movw	r20, r10
    4fa8:	94 01       	movw	r18, r8
    4faa:	c7 01       	movw	r24, r14
    4fac:	b6 01       	movw	r22, r12
    4fae:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    4fb2:	87 ff       	sbrs	r24, 7
    4fb4:	3d c0       	rjmp	.+122    	; 0x5030 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to port, subtract slack
				lastDirection = false;
    4fb6:	18 8a       	std	Y+16, r1	; 0x10
				lastRudderCommand = autopilotRudderCommand - model->getAutopilotSlack();
    4fb8:	89 89       	ldd	r24, Y+17	; 0x11
    4fba:	9a 89       	ldd	r25, Y+18	; 0x12
    4fbc:	0e 94 05 2c 	call	0x580a	; 0x580a <_ZN14FreeBoardModel17getAutopilotSlackEv>
    4fc0:	bc 01       	movw	r22, r24
    4fc2:	88 27       	eor	r24, r24
    4fc4:	77 fd       	sbrc	r23, 7
    4fc6:	80 95       	com	r24
    4fc8:	98 2f       	mov	r25, r24
    4fca:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    4fce:	9b 01       	movw	r18, r22
    4fd0:	ac 01       	movw	r20, r24
    4fd2:	c7 01       	movw	r24, r14
    4fd4:	b6 01       	movw	r22, r12
    4fd6:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    4fda:	26 c0       	rjmp	.+76     	; 0x5028 <_ZN9Autopilot13calcAutoPilotEv+0x198>
			}else if (!lastDirection && autopilotRudderCommand < lastRudderCommand) {
    4fdc:	c7 01       	movw	r24, r14
    4fde:	b6 01       	movw	r22, r12
    4fe0:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    4fe4:	87 ff       	sbrs	r24, 7
    4fe6:	05 c0       	rjmp	.+10     	; 0x4ff2 <_ZN9Autopilot13calcAutoPilotEv+0x162>
				//same direction to port
				lastRudderCommand = autopilotRudderCommand;
    4fe8:	cc 86       	std	Y+12, r12	; 0x0c
    4fea:	dd 86       	std	Y+13, r13	; 0x0d
    4fec:	ee 86       	std	Y+14, r14	; 0x0e
    4fee:	ff 86       	std	Y+15, r15	; 0x0f
    4ff0:	1f c0       	rjmp	.+62     	; 0x5030 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
			}else if (!lastDirection && autopilotRudderCommand > lastRudderCommand) {
    4ff2:	a5 01       	movw	r20, r10
    4ff4:	94 01       	movw	r18, r8
    4ff6:	c7 01       	movw	r24, r14
    4ff8:	b6 01       	movw	r22, r12
    4ffa:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    4ffe:	18 16       	cp	r1, r24
    5000:	bc f4       	brge	.+46     	; 0x5030 <_ZN9Autopilot13calcAutoPilotEv+0x1a0>
				//changed direction to stbd, add slack
				lastDirection = true;
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	88 8b       	std	Y+16, r24	; 0x10
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
    5006:	89 89       	ldd	r24, Y+17	; 0x11
    5008:	9a 89       	ldd	r25, Y+18	; 0x12
    500a:	0e 94 05 2c 	call	0x580a	; 0x580a <_ZN14FreeBoardModel17getAutopilotSlackEv>
    500e:	bc 01       	movw	r22, r24
    5010:	88 27       	eor	r24, r24
    5012:	77 fd       	sbrc	r23, 7
    5014:	80 95       	com	r24
    5016:	98 2f       	mov	r25, r24
    5018:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    501c:	9b 01       	movw	r18, r22
    501e:	ac 01       	movw	r20, r24
    5020:	c7 01       	movw	r24, r14
    5022:	b6 01       	movw	r22, r12
    5024:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    5028:	6c 87       	std	Y+12, r22	; 0x0c
    502a:	7d 87       	std	Y+13, r23	; 0x0d
    502c:	8e 87       	std	Y+14, r24	; 0x0e
    502e:	9f 87       	std	Y+15, r25	; 0x0f
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    5030:	4c 85       	ldd	r20, Y+12	; 0x0c
    5032:	5d 85       	ldd	r21, Y+13	; 0x0d
    5034:	6e 85       	ldd	r22, Y+14	; 0x0e
    5036:	7f 85       	ldd	r23, Y+15	; 0x0f
    5038:	89 89       	ldd	r24, Y+17	; 0x11
    503a:	9a 89       	ldd	r25, Y+18	; 0x12
		}

	} else {
		headingPid.SetMode(MANUAL);
	}
}
    503c:	df 91       	pop	r29
    503e:	cf 91       	pop	r28
    5040:	1f 91       	pop	r17
    5042:	0f 91       	pop	r16
    5044:	ff 90       	pop	r15
    5046:	ef 90       	pop	r14
    5048:	df 90       	pop	r13
    504a:	cf 90       	pop	r12
    504c:	bf 90       	pop	r11
    504e:	af 90       	pop	r10
    5050:	9f 90       	pop	r9
    5052:	8f 90       	pop	r8
				lastDirection = true;
				lastRudderCommand = autopilotRudderCommand + model->getAutopilotSlack();
			}
			//constrain(lastRudderCommand,0.0,66.0);
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
    5054:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>
		}

	} else {
		headingPid.SetMode(MANUAL);
    5058:	60 e0       	ldi	r22, 0x00	; 0
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	c8 01       	movw	r24, r16
	}
}
    505e:	df 91       	pop	r29
    5060:	cf 91       	pop	r28
    5062:	1f 91       	pop	r17
    5064:	0f 91       	pop	r16
    5066:	ff 90       	pop	r15
    5068:	ef 90       	pop	r14
    506a:	df 90       	pop	r13
    506c:	cf 90       	pop	r12
    506e:	bf 90       	pop	r11
    5070:	af 90       	pop	r10
    5072:	9f 90       	pop	r9
    5074:	8f 90       	pop	r8
			//update model
			model->setAutopilotRudderCommand(lastRudderCommand);
		}

	} else {
		headingPid.SetMode(MANUAL);
    5076:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <_ZN3PID7SetModeEi>
	}
}
    507a:	df 91       	pop	r29
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	0f 91       	pop	r16
    5082:	ff 90       	pop	r15
    5084:	ef 90       	pop	r14
    5086:	df 90       	pop	r13
    5088:	cf 90       	pop	r12
    508a:	bf 90       	pop	r11
    508c:	af 90       	pop	r10
    508e:	9f 90       	pop	r9
    5090:	8f 90       	pop	r8
    5092:	08 95       	ret

00005094 <_ZN14FreeBoardModelC1Ev>:
 *      Author: robert
 */

#include "FreeBoardModel.h"

FreeBoardModel::FreeBoardModel() {
    5094:	fc 01       	movw	r30, r24
	alarmLast = 0; //millis time of last beep state change
    5096:	10 82       	st	Z, r1
    5098:	11 82       	std	Z+1, r1	; 0x01
    509a:	12 82       	std	Z+2, r1	; 0x02
    509c:	13 82       	std	Z+3, r1	; 0x03
	alarmSnooze = 0; //5 minute alarm snooze
    509e:	14 82       	std	Z+4, r1	; 0x04
    50a0:	15 82       	std	Z+5, r1	; 0x05
    50a2:	16 82       	std	Z+6, r1	; 0x06
    50a4:	17 82       	std	Z+7, r1	; 0x07
	//unsigned long alarmTriggered ; //true if any alarm is triggered - derived

	//anchor
	//float anchorRadius; //anchor alarm radius in meters
	anchorState.anchorRadiusDeg = 0.0; //anchor alarm radius in decimal degrees, eg 1deg = 60NM.
    50a6:	10 8a       	std	Z+16, r1	; 0x10
    50a8:	11 8a       	std	Z+17, r1	; 0x11
    50aa:	12 8a       	std	Z+18, r1	; 0x12
    50ac:	13 8a       	std	Z+19, r1	; 0x13

	//anchor alarm data
	//float anchorLat; // variable for reading the anchor latitude
	//float anchorLon; // variable for reading the anchor longitude
	anchorState.anchorDistance = 0.0;
    50ae:	14 8a       	std	Z+20, r1	; 0x14
    50b0:	15 8a       	std	Z+21, r1	; 0x15
    50b2:	16 8a       	std	Z+22, r1	; 0x16
    50b4:	17 8a       	std	Z+23, r1	; 0x17
	anchorState.anchorMaxDistance = 0.0;
    50b6:	10 8e       	std	Z+24, r1	; 0x18
    50b8:	11 8e       	std	Z+25, r1	; 0x19
    50ba:	12 8e       	std	Z+26, r1	; 0x1a
    50bc:	13 8e       	std	Z+27, r1	; 0x1b
	//bool anchorAlarmOn; //flag to turn anchor alarm on/off toggle
	anchorState.anchorAlarmTriggered = false; //set to true to trigger anchor alarm
    50be:	14 8e       	std	Z+28, r1	; 0x1c

	//a box around the anchor, shrinks with every GPS reading to home in on the anchor itself
	anchorState.anchorN = 90.0;
    50c0:	40 e0       	ldi	r20, 0x00	; 0
    50c2:	50 e0       	ldi	r21, 0x00	; 0
    50c4:	64 eb       	ldi	r22, 0xB4	; 180
    50c6:	72 e4       	ldi	r23, 0x42	; 66
    50c8:	45 8f       	std	Z+29, r20	; 0x1d
    50ca:	56 8f       	std	Z+30, r21	; 0x1e
    50cc:	67 8f       	std	Z+31, r22	; 0x1f
    50ce:	70 a3       	std	Z+32, r23	; 0x20
	anchorState.anchorS = -90.0;
    50d0:	40 e0       	ldi	r20, 0x00	; 0
    50d2:	50 e0       	ldi	r21, 0x00	; 0
    50d4:	64 eb       	ldi	r22, 0xB4	; 180
    50d6:	72 ec       	ldi	r23, 0xC2	; 194
    50d8:	41 a3       	std	Z+33, r20	; 0x21
    50da:	52 a3       	std	Z+34, r21	; 0x22
    50dc:	63 a3       	std	Z+35, r22	; 0x23
    50de:	74 a3       	std	Z+36, r23	; 0x24
	anchorState.anchorE = 180.0;
    50e0:	40 e0       	ldi	r20, 0x00	; 0
    50e2:	50 e0       	ldi	r21, 0x00	; 0
    50e4:	64 e3       	ldi	r22, 0x34	; 52
    50e6:	73 e4       	ldi	r23, 0x43	; 67
    50e8:	45 a3       	std	Z+37, r20	; 0x25
    50ea:	56 a3       	std	Z+38, r21	; 0x26
    50ec:	67 a3       	std	Z+39, r22	; 0x27
    50ee:	70 a7       	std	Z+40, r23	; 0x28
	anchorState.anchorW = -180.0;
    50f0:	40 e0       	ldi	r20, 0x00	; 0
    50f2:	50 e0       	ldi	r21, 0x00	; 0
    50f4:	64 e3       	ldi	r22, 0x34	; 52
    50f6:	73 ec       	ldi	r23, 0xC3	; 195
    50f8:	41 a7       	std	Z+41, r20	; 0x29
    50fa:	52 a7       	std	Z+42, r21	; 0x2a
    50fc:	63 a7       	std	Z+43, r22	; 0x2b
    50fe:	74 a7       	std	Z+44, r23	; 0x2c

	//autopilot
	autopilotState.autopilotOn=false;
    5100:	15 a6       	std	Z+45, r1	; 0x2d
	//disengage the autopilot if we reboot!!
	//Dont want to go screaming off on wrong course.
	autopilotState.autopilotReference = AUTOPILOT_COMPASS;
    5102:	83 e4       	ldi	r24, 0x43	; 67
    5104:	82 ab       	std	Z+50, r24	; 0x32
	autopilotState.autopilotTargetHeading = 0; //Setpoint
    5106:	13 aa       	std	Z+51, r1	; 0x33
    5108:	14 aa       	std	Z+52, r1	; 0x34
    510a:	15 aa       	std	Z+53, r1	; 0x35
    510c:	16 aa       	std	Z+54, r1	; 0x36
	autopilotState.autopilotRudderCommand = 33; //Output (rudder central)
    510e:	40 e0       	ldi	r20, 0x00	; 0
    5110:	50 e0       	ldi	r21, 0x00	; 0
    5112:	64 e0       	ldi	r22, 0x04	; 4
    5114:	72 e4       	ldi	r23, 0x42	; 66
    5116:	47 ab       	std	Z+55, r20	; 0x37
    5118:	50 af       	std	Z+56, r21	; 0x38
    511a:	61 af       	std	Z+57, r22	; 0x39
    511c:	72 af       	std	Z+58, r23	; 0x3a
	//bool autopilotAlarmOn;
	autopilotState.autopilotAlarmTriggered = false;
    511e:	13 ae       	std	Z+59, r1	; 0x3b
	autopilotState.autopilotAlarmMaxXTError = 100; // +/- meters cross track error
    5120:	40 e0       	ldi	r20, 0x00	; 0
    5122:	50 e0       	ldi	r21, 0x00	; 0
    5124:	68 ec       	ldi	r22, 0xC8	; 200
    5126:	72 e4       	ldi	r23, 0x42	; 66
    5128:	44 af       	std	Z+60, r20	; 0x3c
    512a:	55 af       	std	Z+61, r21	; 0x3d
    512c:	66 af       	std	Z+62, r22	; 0x3e
    512e:	77 af       	std	Z+63, r23	; 0x3f
	autopilotState.autopilotAlarmMaxWindError = 10; // +/- wind angle change, for over 1 minute
    5130:	df 01       	movw	r26, r30
    5132:	a0 5c       	subi	r26, 0xC0	; 192
    5134:	bf 4f       	sbci	r27, 0xFF	; 255
    5136:	40 e0       	ldi	r20, 0x00	; 0
    5138:	50 e0       	ldi	r21, 0x00	; 0
    513a:	60 e2       	ldi	r22, 0x20	; 32
    513c:	71 e4       	ldi	r23, 0x41	; 65
    513e:	4d 93       	st	X+, r20
    5140:	5d 93       	st	X+, r21
    5142:	6d 93       	st	X+, r22
    5144:	7c 93       	st	X, r23
    5146:	13 97       	sbiw	r26, 0x03	; 3
	autopilotState.autopilotAlarmMaxCourseError = 10; // +/- course error, for over 1 minute
    5148:	df 01       	movw	r26, r30
    514a:	ac 5b       	subi	r26, 0xBC	; 188
    514c:	bf 4f       	sbci	r27, 0xFF	; 255
    514e:	4d 93       	st	X+, r20
    5150:	5d 93       	st	X+, r21
    5152:	6d 93       	st	X+, r22
    5154:	7c 93       	st	X, r23
    5156:	13 97       	sbiw	r26, 0x03	; 3

	//compass
	magneticHeading=0;
    5158:	10 86       	std	Z+8, r1	; 0x08
    515a:	11 86       	std	Z+9, r1	; 0x09
    515c:	12 86       	std	Z+10, r1	; 0x0a
    515e:	13 86       	std	Z+11, r1	; 0x0b
	declination=0;
    5160:	14 86       	std	Z+12, r1	; 0x0c
    5162:	15 86       	std	Z+13, r1	; 0x0d
    5164:	16 86       	std	Z+14, r1	; 0x0e
    5166:	17 86       	std	Z+15, r1	; 0x0f
	//gps
	gpsState.gpsDecode = false; //flag to indicate a new sentence was decoded.
    5168:	df 01       	movw	r26, r30
    516a:	a8 5b       	subi	r26, 0xB8	; 184
    516c:	bf 4f       	sbci	r27, 0xFF	; 255
    516e:	1c 92       	st	X, r1
	gpsState.gpsLastFix = 0; //time of last good gps fix.
    5170:	df 01       	movw	r26, r30
    5172:	a7 5b       	subi	r26, 0xB7	; 183
    5174:	bf 4f       	sbci	r27, 0xFF	; 255
    5176:	1d 92       	st	X+, r1
    5178:	1d 92       	st	X+, r1
    517a:	1d 92       	st	X+, r1
    517c:	1c 92       	st	X, r1
    517e:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsUtc = 0; // decimal value of UTC term in last full GPRMC sentence
    5180:	df 01       	movw	r26, r30
    5182:	a3 5b       	subi	r26, 0xB3	; 179
    5184:	bf 4f       	sbci	r27, 0xFF	; 255
    5186:	1d 92       	st	X+, r1
    5188:	1d 92       	st	X+, r1
    518a:	1d 92       	st	X+, r1
    518c:	1c 92       	st	X, r1
    518e:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsStatus = 'V'; //  status character in last full GPRMC sentence ('A' or 'V')
    5190:	df 01       	movw	r26, r30
    5192:	af 5a       	subi	r26, 0xAF	; 175
    5194:	bf 4f       	sbci	r27, 0xFF	; 255
    5196:	86 e5       	ldi	r24, 0x56	; 86
    5198:	8c 93       	st	X, r24
	gpsState.gpsLatitude = 0.0; // signed degree-decimal value of latitude terms in last full GPRMC sentence
    519a:	df 01       	movw	r26, r30
    519c:	ae 5a       	subi	r26, 0xAE	; 174
    519e:	bf 4f       	sbci	r27, 0xFF	; 255
    51a0:	1d 92       	st	X+, r1
    51a2:	1d 92       	st	X+, r1
    51a4:	1d 92       	st	X+, r1
    51a6:	1c 92       	st	X, r1
    51a8:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsLongitude = 0.0; // signed degree-decimal value of longitude terms in last full GPRMC sentence
    51aa:	df 01       	movw	r26, r30
    51ac:	aa 5a       	subi	r26, 0xAA	; 170
    51ae:	bf 4f       	sbci	r27, 0xFF	; 255
    51b0:	1d 92       	st	X+, r1
    51b2:	1d 92       	st	X+, r1
    51b4:	1d 92       	st	X+, r1
    51b6:	1c 92       	st	X, r1
    51b8:	13 97       	sbiw	r26, 0x03	; 3
	//float gpsSpeedUnit; //unit multiplier for gpsSpeed. 1.0 = KNT,1.1507794	=MPH, see nmea.h
	gpsState.gpsSpeed = 0.0; // speed-on-ground term in last full GPRMC sentence
    51ba:	df 01       	movw	r26, r30
    51bc:	a6 5a       	subi	r26, 0xA6	; 166
    51be:	bf 4f       	sbci	r27, 0xFF	; 255
    51c0:	1d 92       	st	X+, r1
    51c2:	1d 92       	st	X+, r1
    51c4:	1d 92       	st	X+, r1
    51c6:	1c 92       	st	X, r1
    51c8:	13 97       	sbiw	r26, 0x03	; 3
	gpsState.gpsCourse = 0.0; // track-angle-made-good term in last full GPRMC sentence
    51ca:	df 01       	movw	r26, r30
    51cc:	a2 5a       	subi	r26, 0xA2	; 162
    51ce:	bf 4f       	sbci	r27, 0xFF	; 255
    51d0:	1d 92       	st	X+, r1
    51d2:	1d 92       	st	X+, r1
    51d4:	1d 92       	st	X+, r1
    51d6:	1c 92       	st	X, r1
    51d8:	13 97       	sbiw	r26, 0x03	; 3
	//bool gpsAlarmOn; //true to engage alarm
	gpsState.gpsAlarmTriggered = false; //set to true to trigger gps alarm
    51da:	df 01       	movw	r26, r30
    51dc:	ae 59       	subi	r26, 0x9E	; 158
    51de:	bf 4f       	sbci	r27, 0xFF	; 255
    51e0:	1c 92       	st	X, r1
	//double gpsAlarmFixTime; //max time in millis without fix

	//seatalk
	//volatile bool radarAlarmOn; //set to true to enable radar alarm
	radarAlarmTriggered = false; //set to true to trigger radar alarm
    51e2:	df 01       	movw	r26, r30
    51e4:	ad 59       	subi	r26, 0x9D	; 157
    51e6:	bf 4f       	sbci	r27, 0xFF	; 255
    51e8:	1c 92       	st	X, r1
	//volatile bool mobAlarmOn; //set to true to enable mob alarm
	mobAlarmTriggered = false; //set to true to trigger MOB alarm
    51ea:	df 01       	movw	r26, r30
    51ec:	ac 59       	subi	r26, 0x9C	; 156
    51ee:	bf 4f       	sbci	r27, 0xFF	; 255
    51f0:	1c 92       	st	X, r1

	//wind
	windState.windLastUpdate = 0;
    51f2:	df 01       	movw	r26, r30
    51f4:	ab 59       	subi	r26, 0x9B	; 155
    51f6:	bf 4f       	sbci	r27, 0xFF	; 255
    51f8:	1d 92       	st	X+, r1
    51fa:	1d 92       	st	X+, r1
    51fc:	1d 92       	st	X+, r1
    51fe:	1c 92       	st	X, r1
    5200:	13 97       	sbiw	r26, 0x03	; 3
	windState.windAverage = 0.0;
    5202:	df 01       	movw	r26, r30
    5204:	a7 59       	subi	r26, 0x97	; 151
    5206:	bf 4f       	sbci	r27, 0xFF	; 255
    5208:	1d 92       	st	X+, r1
    520a:	1d 92       	st	X+, r1
    520c:	1d 92       	st	X+, r1
    520e:	1c 92       	st	X, r1
    5210:	13 97       	sbiw	r26, 0x03	; 3
	//windState.windFactor=0;
	windState.windMax = 0;
    5212:	df 01       	movw	r26, r30
    5214:	a3 59       	subi	r26, 0x93	; 147
    5216:	bf 4f       	sbci	r27, 0xFF	; 255
    5218:	1d 92       	st	X+, r1
    521a:	1c 92       	st	X, r1
	windState.windApparentDir = 0;
    521c:	df 01       	movw	r26, r30
    521e:	a1 59       	subi	r26, 0x91	; 145
    5220:	bf 4f       	sbci	r27, 0xFF	; 255
    5222:	1d 92       	st	X+, r1
    5224:	1c 92       	st	X, r1
	windState.windTrueDir=0;
    5226:	df 01       	movw	r26, r30
    5228:	af 58       	subi	r26, 0x8F	; 143
    522a:	bf 4f       	sbci	r27, 0xFF	; 255
    522c:	1d 92       	st	X+, r1
    522e:	1c 92       	st	X, r1
	//int windAlarmSpeed;
	//bool windAlarmOn;
	windState.windAlarmTriggered = false;
    5230:	df 01       	movw	r26, r30
    5232:	ad 58       	subi	r26, 0x8D	; 141
    5234:	bf 4f       	sbci	r27, 0xFF	; 255
    5236:	1c 92       	st	X, r1

	//struct Configuration{
	config.anchorLat = 0.0;
    5238:	df 01       	movw	r26, r30
    523a:	ac 58       	subi	r26, 0x8C	; 140
    523c:	bf 4f       	sbci	r27, 0xFF	; 255
    523e:	1d 92       	st	X+, r1
    5240:	1d 92       	st	X+, r1
    5242:	1d 92       	st	X+, r1
    5244:	1c 92       	st	X, r1
    5246:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorLon = 0.0;
    5248:	df 01       	movw	r26, r30
    524a:	a8 58       	subi	r26, 0x88	; 136
    524c:	bf 4f       	sbci	r27, 0xFF	; 255
    524e:	1d 92       	st	X+, r1
    5250:	1d 92       	st	X+, r1
    5252:	1d 92       	st	X+, r1
    5254:	1c 92       	st	X, r1
    5256:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorRadius = 40.0;
    5258:	df 01       	movw	r26, r30
    525a:	a4 58       	subi	r26, 0x84	; 132
    525c:	bf 4f       	sbci	r27, 0xFF	; 255
    525e:	40 e0       	ldi	r20, 0x00	; 0
    5260:	50 e0       	ldi	r21, 0x00	; 0
    5262:	60 e2       	ldi	r22, 0x20	; 32
    5264:	72 e4       	ldi	r23, 0x42	; 66
    5266:	4d 93       	st	X+, r20
    5268:	5d 93       	st	X+, r21
    526a:	6d 93       	st	X+, r22
    526c:	7c 93       	st	X, r23
    526e:	13 97       	sbiw	r26, 0x03	; 3
	config.anchorAlarmOn = false;
    5270:	df 01       	movw	r26, r30
    5272:	a0 58       	subi	r26, 0x80	; 128
    5274:	bf 4f       	sbci	r27, 0xFF	; 255
    5276:	1c 92       	st	X, r1
	config.autopilotAlarmOn = false;
    5278:	df 01       	movw	r26, r30
    527a:	af 57       	subi	r26, 0x7F	; 127
    527c:	bf 4f       	sbci	r27, 0xFF	; 255
    527e:	1c 92       	st	X, r1
	config.autopilotDeadZone = 0;
    5280:	df 01       	movw	r26, r30
    5282:	ae 57       	subi	r26, 0x7E	; 126
    5284:	bf 4f       	sbci	r27, 0xFF	; 255
    5286:	1d 92       	st	X+, r1
    5288:	1c 92       	st	X, r1
	config.autopilotSlack = 0;
    528a:	df 01       	movw	r26, r30
    528c:	ac 57       	subi	r26, 0x7C	; 124
    528e:	bf 4f       	sbci	r27, 0xFF	; 255
    5290:	1d 92       	st	X+, r1
    5292:	1c 92       	st	X, r1
	config.gpsSpeedUnit = KTS;
    5294:	df 01       	movw	r26, r30
    5296:	aa 57       	subi	r26, 0x7A	; 122
    5298:	bf 4f       	sbci	r27, 0xFF	; 255
    529a:	40 e0       	ldi	r20, 0x00	; 0
    529c:	50 e0       	ldi	r21, 0x00	; 0
    529e:	60 e8       	ldi	r22, 0x80	; 128
    52a0:	7f e3       	ldi	r23, 0x3F	; 63
    52a2:	4d 93       	st	X+, r20
    52a4:	5d 93       	st	X+, r21
    52a6:	6d 93       	st	X+, r22
    52a8:	7c 93       	st	X, r23
    52aa:	13 97       	sbiw	r26, 0x03	; 3
	config.gpsAlarmOn = false;
    52ac:	df 01       	movw	r26, r30
    52ae:	a6 57       	subi	r26, 0x76	; 118
    52b0:	bf 4f       	sbci	r27, 0xFF	; 255
    52b2:	1c 92       	st	X, r1
	config.gpsAlarmFixTime = 1000l * 60 * 5; //5 min
    52b4:	df 01       	movw	r26, r30
    52b6:	a5 57       	subi	r26, 0x75	; 117
    52b8:	bf 4f       	sbci	r27, 0xFF	; 255
    52ba:	40 ee       	ldi	r20, 0xE0	; 224
    52bc:	53 e9       	ldi	r21, 0x93	; 147
    52be:	64 e0       	ldi	r22, 0x04	; 4
    52c0:	70 e0       	ldi	r23, 0x00	; 0
    52c2:	4d 93       	st	X+, r20
    52c4:	5d 93       	st	X+, r21
    52c6:	6d 93       	st	X+, r22
    52c8:	7c 93       	st	X, r23
    52ca:	13 97       	sbiw	r26, 0x03	; 3
	config.radarAlarmOn = false;
    52cc:	df 01       	movw	r26, r30
    52ce:	a1 57       	subi	r26, 0x71	; 113
    52d0:	bf 4f       	sbci	r27, 0xFF	; 255
    52d2:	1c 92       	st	X, r1
	config.mobAlarmOn = false;
    52d4:	df 01       	movw	r26, r30
    52d6:	a0 57       	subi	r26, 0x70	; 112
    52d8:	bf 4f       	sbci	r27, 0xFF	; 255
    52da:	1c 92       	st	X, r1
	config.windAlarmSpeed = 99;
    52dc:	df 01       	movw	r26, r30
    52de:	af 56       	subi	r26, 0x6F	; 111
    52e0:	bf 4f       	sbci	r27, 0xFF	; 255
    52e2:	83 e6       	ldi	r24, 0x63	; 99
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	8d 93       	st	X+, r24
    52e8:	9c 93       	st	X, r25
	config.windAlarmOn = false;
    52ea:	df 01       	movw	r26, r30
    52ec:	ad 56       	subi	r26, 0x6D	; 109
    52ee:	bf 4f       	sbci	r27, 0xFF	; 255
    52f0:	1c 92       	st	X, r1
	config.windFactor = 10000.0;
    52f2:	df 01       	movw	r26, r30
    52f4:	ac 56       	subi	r26, 0x6C	; 108
    52f6:	bf 4f       	sbci	r27, 0xFF	; 255
    52f8:	40 e0       	ldi	r20, 0x00	; 0
    52fa:	50 e4       	ldi	r21, 0x40	; 64
    52fc:	6c e1       	ldi	r22, 0x1C	; 28
    52fe:	76 e4       	ldi	r23, 0x46	; 70
    5300:	4d 93       	st	X+, r20
    5302:	5d 93       	st	X+, r21
    5304:	6d 93       	st	X+, r22
    5306:	7c 93       	st	X, r23
    5308:	13 97       	sbiw	r26, 0x03	; 3
	config.windZeroOffset = 0;
    530a:	df 01       	movw	r26, r30
    530c:	a8 56       	subi	r26, 0x68	; 104
    530e:	bf 4f       	sbci	r27, 0xFF	; 255
    5310:	1d 92       	st	X+, r1
    5312:	1c 92       	st	X, r1
	//ver6
	config.gpsModel= GPS_EM_406A;
    5314:	df 01       	movw	r26, r30
    5316:	a6 56       	subi	r26, 0x66	; 102
    5318:	bf 4f       	sbci	r27, 0xFF	; 255
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	8d 93       	st	X+, r24
    5320:	9c 93       	st	X, r25
	config.serialBaud=38400;
    5322:	df 01       	movw	r26, r30
    5324:	a4 56       	subi	r26, 0x64	; 100
    5326:	bf 4f       	sbci	r27, 0xFF	; 255
    5328:	80 e0       	ldi	r24, 0x00	; 0
    532a:	96 e9       	ldi	r25, 0x96	; 150
    532c:	8d 93       	st	X+, r24
    532e:	9c 93       	st	X, r25
	config.serialBaud1=38400;
    5330:	df 01       	movw	r26, r30
    5332:	a2 56       	subi	r26, 0x62	; 98
    5334:	bf 4f       	sbci	r27, 0xFF	; 255
    5336:	8d 93       	st	X+, r24
    5338:	9c 93       	st	X, r25
	config.serialBaud2=9600; //seatalk?
    533a:	df 01       	movw	r26, r30
    533c:	a0 56       	subi	r26, 0x60	; 96
    533e:	bf 4f       	sbci	r27, 0xFF	; 255
    5340:	80 e8       	ldi	r24, 0x80	; 128
    5342:	95 e2       	ldi	r25, 0x25	; 37
    5344:	8d 93       	st	X+, r24
    5346:	9c 93       	st	X, r25
	config.serialBaud3=9600; //16 bytes
    5348:	df 01       	movw	r26, r30
    534a:	ae 55       	subi	r26, 0x5E	; 94
    534c:	bf 4f       	sbci	r27, 0xFF	; 255
    534e:	8d 93       	st	X+, r24
    5350:	9c 93       	st	X, r25
	config.seaTalk=false;
    5352:	df 01       	movw	r26, r30
    5354:	ac 55       	subi	r26, 0x5C	; 92
    5356:	bf 4f       	sbci	r27, 0xFF	; 255
    5358:	1c 92       	st	X, r1
	//}config;

//we change this if we change the struct so we can tell before reloading incompatible versions
	version = EEPROM_VER;
    535a:	eb 55       	subi	r30, 0x5B	; 91
    535c:	ff 4f       	sbci	r31, 0xFF	; 255
    535e:	86 e0       	ldi	r24, 0x06	; 6
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	91 83       	std	Z+1, r25	; 0x01
    5364:	80 83       	st	Z, r24
    5366:	08 95       	ret

00005368 <_ZN14FreeBoardModel10saveConfigEv>:
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
	return i;
}
void FreeBoardModel::saveConfig() {
    5368:	0f 93       	push	r16
    536a:	1f 93       	push	r17
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	ec 01       	movw	r28, r24

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    5372:	fc 01       	movw	r30, r24
    5374:	eb 55       	subi	r30, 0x5B	; 91
    5376:	ff 4f       	sbci	r31, 0xFF	; 255
    5378:	40 81       	ld	r20, Z
    537a:	60 e0       	ldi	r22, 0x00	; 0
    537c:	70 e0       	ldi	r23, 0x00	; 0
    537e:	85 e4       	ldi	r24, 0x45	; 69
    5380:	99 e0       	ldi	r25, 0x09	; 9
    5382:	0e 94 c7 20 	call	0x418e	; 0x418e <_ZN11EEPROMClass5writeEih>
    5386:	fe 01       	movw	r30, r28
    5388:	ea 55       	subi	r30, 0x5A	; 90
    538a:	ff 4f       	sbci	r31, 0xFF	; 255
    538c:	40 81       	ld	r20, Z
    538e:	61 e0       	ldi	r22, 0x01	; 1
    5390:	70 e0       	ldi	r23, 0x00	; 0
    5392:	85 e4       	ldi	r24, 0x45	; 69
    5394:	99 e0       	ldi	r25, 0x09	; 9
    5396:	0e 94 c7 20 	call	0x418e	; 0x418e <_ZN11EEPROMClass5writeEih>
}
void FreeBoardModel::saveConfig() {
	//write out a current version
	EEPROM_writeAnything(0, version);
	//write data
	EEPROM_writeAnything(EEPROM_VER, config);
    539a:	cc 58       	subi	r28, 0x8C	; 140
    539c:	df 4f       	sbci	r29, 0xFF	; 255
    539e:	66 e0       	ldi	r22, 0x06	; 6
    53a0:	70 e0       	ldi	r23, 0x00	; 0

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		EEPROM.write(ee++, *p++);
    53a2:	49 91       	ld	r20, Y+
    53a4:	8b 01       	movw	r16, r22
    53a6:	0f 5f       	subi	r16, 0xFF	; 255
    53a8:	1f 4f       	sbci	r17, 0xFF	; 255
    53aa:	85 e4       	ldi	r24, 0x45	; 69
    53ac:	99 e0       	ldi	r25, 0x09	; 9
    53ae:	0e 94 c7 20 	call	0x418e	; 0x418e <_ZN11EEPROMClass5writeEih>
    53b2:	b8 01       	movw	r22, r16
}

template<class T> int EEPROM_writeAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    53b4:	07 33       	cpi	r16, 0x37	; 55
    53b6:	11 05       	cpc	r17, r1
    53b8:	a1 f7       	brne	.-24     	; 0x53a2 <_ZN14FreeBoardModel10saveConfigEv+0x3a>
void FreeBoardModel::saveConfig() {
	//write out a current version
	EEPROM_writeAnything(0, version);
	//write data
	EEPROM_writeAnything(EEPROM_VER, config);
}
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	1f 91       	pop	r17
    53c0:	0f 91       	pop	r16
    53c2:	08 95       	ret

000053c4 <_ZN14FreeBoardModel10readConfigEv>:

void FreeBoardModel::readConfig() {
    53c4:	ef 92       	push	r14
    53c6:	ff 92       	push	r15
    53c8:	0f 93       	push	r16
    53ca:	1f 93       	push	r17
    53cc:	cf 93       	push	r28
    53ce:	df 93       	push	r29
    53d0:	1f 92       	push	r1
    53d2:	1f 92       	push	r1
    53d4:	cd b7       	in	r28, 0x3d	; 61
    53d6:	de b7       	in	r29, 0x3e	; 62
    53d8:	8c 01       	movw	r16, r24
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    53da:	60 e0       	ldi	r22, 0x00	; 0
    53dc:	70 e0       	ldi	r23, 0x00	; 0
    53de:	85 e4       	ldi	r24, 0x45	; 69
    53e0:	99 e0       	ldi	r25, 0x09	; 9
    53e2:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN11EEPROMClass4readEi>
    53e6:	89 83       	std	Y+1, r24	; 0x01
    53e8:	61 e0       	ldi	r22, 0x01	; 1
    53ea:	70 e0       	ldi	r23, 0x00	; 0
    53ec:	85 e4       	ldi	r24, 0x45	; 69
    53ee:	99 e0       	ldi	r25, 0x09	; 9
    53f0:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN11EEPROMClass4readEi>
    53f4:	8a 83       	std	Y+2, r24	; 0x02

void FreeBoardModel::readConfig() {
	//check versions here
	int ver;
	EEPROM_readAnything(0, ver);
	if (ver != version) {
    53f6:	f8 01       	movw	r30, r16
    53f8:	eb 55       	subi	r30, 0x5B	; 91
    53fa:	ff 4f       	sbci	r31, 0xFF	; 255
    53fc:	29 81       	ldd	r18, Y+1	; 0x01
    53fe:	3a 81       	ldd	r19, Y+2	; 0x02
    5400:	80 81       	ld	r24, Z
    5402:	91 81       	ldd	r25, Z+1	; 0x01
    5404:	28 17       	cp	r18, r24
    5406:	39 07       	cpc	r19, r25
    5408:	19 f0       	breq	.+6      	; 0x5410 <_ZN14FreeBoardModel10readConfigEv+0x4c>
		//if windfactor <10 then 100000000
		if(EEPROM_VER<6 && config.windFactor<1000.0){
			config.windFactor=10000.0;
		}
		//save
		saveConfig();
    540a:	c8 01       	movw	r24, r16
    540c:	0e 94 b4 29 	call	0x5368	; 0x5368 <_ZN14FreeBoardModel10saveConfigEv>
	}

	//now we know its compatible
	EEPROM_readAnything(EEPROM_VER, config);
    5410:	0c 58       	subi	r16, 0x8C	; 140
    5412:	1f 4f       	sbci	r17, 0xFF	; 255
    5414:	66 e0       	ldi	r22, 0x06	; 6
    5416:	70 e0       	ldi	r23, 0x00	; 0
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
		*p++ = EEPROM.read(ee++);
    5418:	7b 01       	movw	r14, r22
    541a:	8f ef       	ldi	r24, 0xFF	; 255
    541c:	e8 1a       	sub	r14, r24
    541e:	f8 0a       	sbc	r15, r24
    5420:	85 e4       	ldi	r24, 0x45	; 69
    5422:	99 e0       	ldi	r25, 0x09	; 9
    5424:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN11EEPROMClass4readEi>
    5428:	f8 01       	movw	r30, r16
    542a:	81 93       	st	Z+, r24
    542c:	8f 01       	movw	r16, r30
    542e:	b7 01       	movw	r22, r14
}
//saving
template<class T> int EEPROM_readAnything(int ee, T& value) {
	unsigned char* p = (unsigned char*) (void*) &value;
	unsigned int i;
	for (i = 0; i < sizeof(value); i++)
    5430:	67 33       	cpi	r22, 0x37	; 55
    5432:	71 05       	cpc	r23, r1
    5434:	89 f7       	brne	.-30     	; 0x5418 <_ZN14FreeBoardModel10readConfigEv+0x54>
	}

	//now we know its compatible
	EEPROM_readAnything(EEPROM_VER, config);

}
    5436:	0f 90       	pop	r0
    5438:	0f 90       	pop	r0
    543a:	df 91       	pop	r29
    543c:	cf 91       	pop	r28
    543e:	1f 91       	pop	r17
    5440:	0f 91       	pop	r16
    5442:	ff 90       	pop	r15
    5444:	ef 90       	pop	r14
    5446:	08 95       	ret

00005448 <_ZN14FreeBoardModel17getAnchorDistanceEv>:

unsigned long FreeBoardModel::getAlarmSnooze() {
	return alarmSnooze;
}

float FreeBoardModel::getAnchorDistance() {
    5448:	fc 01       	movw	r30, r24
	return anchorState.anchorDistance;
}
    544a:	54 89       	ldd	r21, Z+20	; 0x14
    544c:	45 89       	ldd	r20, Z+21	; 0x15
    544e:	36 89       	ldd	r19, Z+22	; 0x16
    5450:	27 89       	ldd	r18, Z+23	; 0x17
    5452:	65 2f       	mov	r22, r21
    5454:	74 2f       	mov	r23, r20
    5456:	83 2f       	mov	r24, r19
    5458:	92 2f       	mov	r25, r18
    545a:	08 95       	ret

0000545c <_ZN14FreeBoardModel10getAnchorEEv>:

float FreeBoardModel::getAnchorE() {
    545c:	fc 01       	movw	r30, r24
	return anchorState.anchorE;
}
    545e:	55 a1       	ldd	r21, Z+37	; 0x25
    5460:	46 a1       	ldd	r20, Z+38	; 0x26
    5462:	37 a1       	ldd	r19, Z+39	; 0x27
    5464:	20 a5       	ldd	r18, Z+40	; 0x28
    5466:	65 2f       	mov	r22, r21
    5468:	74 2f       	mov	r23, r20
    546a:	83 2f       	mov	r24, r19
    546c:	92 2f       	mov	r25, r18
    546e:	08 95       	ret

00005470 <_ZN14FreeBoardModel12getAnchorLatEv>:

float FreeBoardModel::getAnchorLat() {
	return config.anchorLat;
    5470:	fc 01       	movw	r30, r24
    5472:	ec 58       	subi	r30, 0x8C	; 140
    5474:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5476:	50 81       	ld	r21, Z
    5478:	41 81       	ldd	r20, Z+1	; 0x01
    547a:	32 81       	ldd	r19, Z+2	; 0x02
    547c:	23 81       	ldd	r18, Z+3	; 0x03
    547e:	65 2f       	mov	r22, r21
    5480:	74 2f       	mov	r23, r20
    5482:	83 2f       	mov	r24, r19
    5484:	92 2f       	mov	r25, r18
    5486:	08 95       	ret

00005488 <_ZN14FreeBoardModel12getAnchorLonEv>:

float FreeBoardModel::getAnchorLon() {
	return config.anchorLon;
    5488:	fc 01       	movw	r30, r24
    548a:	e8 58       	subi	r30, 0x88	; 136
    548c:	ff 4f       	sbci	r31, 0xFF	; 255
}
    548e:	50 81       	ld	r21, Z
    5490:	41 81       	ldd	r20, Z+1	; 0x01
    5492:	32 81       	ldd	r19, Z+2	; 0x02
    5494:	23 81       	ldd	r18, Z+3	; 0x03
    5496:	65 2f       	mov	r22, r21
    5498:	74 2f       	mov	r23, r20
    549a:	83 2f       	mov	r24, r19
    549c:	92 2f       	mov	r25, r18
    549e:	08 95       	ret

000054a0 <_ZN14FreeBoardModel20getAnchorMaxDistanceEv>:

float FreeBoardModel::getAnchorMaxDistance() {
    54a0:	fc 01       	movw	r30, r24
	return anchorState.anchorMaxDistance;
}
    54a2:	50 8d       	ldd	r21, Z+24	; 0x18
    54a4:	41 8d       	ldd	r20, Z+25	; 0x19
    54a6:	32 8d       	ldd	r19, Z+26	; 0x1a
    54a8:	23 8d       	ldd	r18, Z+27	; 0x1b
    54aa:	65 2f       	mov	r22, r21
    54ac:	74 2f       	mov	r23, r20
    54ae:	83 2f       	mov	r24, r19
    54b0:	92 2f       	mov	r25, r18
    54b2:	08 95       	ret

000054b4 <_ZN14FreeBoardModel10getAnchorNEv>:

float FreeBoardModel::getAnchorN() {
    54b4:	fc 01       	movw	r30, r24
	return anchorState.anchorN;
}
    54b6:	55 8d       	ldd	r21, Z+29	; 0x1d
    54b8:	46 8d       	ldd	r20, Z+30	; 0x1e
    54ba:	37 8d       	ldd	r19, Z+31	; 0x1f
    54bc:	20 a1       	ldd	r18, Z+32	; 0x20
    54be:	65 2f       	mov	r22, r21
    54c0:	74 2f       	mov	r23, r20
    54c2:	83 2f       	mov	r24, r19
    54c4:	92 2f       	mov	r25, r18
    54c6:	08 95       	ret

000054c8 <_ZN14FreeBoardModel15getAnchorRadiusEv>:

float FreeBoardModel::getAnchorRadius() {
	return config.anchorRadius;
    54c8:	fc 01       	movw	r30, r24
    54ca:	e4 58       	subi	r30, 0x84	; 132
    54cc:	ff 4f       	sbci	r31, 0xFF	; 255
}
    54ce:	50 81       	ld	r21, Z
    54d0:	41 81       	ldd	r20, Z+1	; 0x01
    54d2:	32 81       	ldd	r19, Z+2	; 0x02
    54d4:	23 81       	ldd	r18, Z+3	; 0x03
    54d6:	65 2f       	mov	r22, r21
    54d8:	74 2f       	mov	r23, r20
    54da:	83 2f       	mov	r24, r19
    54dc:	92 2f       	mov	r25, r18
    54de:	08 95       	ret

000054e0 <_ZN14FreeBoardModel18getAnchorRadiusDegEv>:

float FreeBoardModel::getAnchorRadiusDeg() {
    54e0:	fc 01       	movw	r30, r24
	return anchorState.anchorRadiusDeg;
}
    54e2:	50 89       	ldd	r21, Z+16	; 0x10
    54e4:	41 89       	ldd	r20, Z+17	; 0x11
    54e6:	32 89       	ldd	r19, Z+18	; 0x12
    54e8:	23 89       	ldd	r18, Z+19	; 0x13
    54ea:	65 2f       	mov	r22, r21
    54ec:	74 2f       	mov	r23, r20
    54ee:	83 2f       	mov	r24, r19
    54f0:	92 2f       	mov	r25, r18
    54f2:	08 95       	ret

000054f4 <_ZN14FreeBoardModel10getAnchorSEv>:

float FreeBoardModel::getAnchorS() {
    54f4:	fc 01       	movw	r30, r24
	return anchorState.anchorS;
}
    54f6:	51 a1       	ldd	r21, Z+33	; 0x21
    54f8:	42 a1       	ldd	r20, Z+34	; 0x22
    54fa:	33 a1       	ldd	r19, Z+35	; 0x23
    54fc:	24 a1       	ldd	r18, Z+36	; 0x24
    54fe:	65 2f       	mov	r22, r21
    5500:	74 2f       	mov	r23, r20
    5502:	83 2f       	mov	r24, r19
    5504:	92 2f       	mov	r25, r18
    5506:	08 95       	ret

00005508 <_ZN14FreeBoardModel10getAnchorWEv>:

float FreeBoardModel::getAnchorW() {
    5508:	fc 01       	movw	r30, r24
	return anchorState.anchorW;
}
    550a:	51 a5       	ldd	r21, Z+41	; 0x29
    550c:	42 a5       	ldd	r20, Z+42	; 0x2a
    550e:	33 a5       	ldd	r19, Z+43	; 0x2b
    5510:	24 a5       	ldd	r18, Z+44	; 0x2c
    5512:	65 2f       	mov	r22, r21
    5514:	74 2f       	mov	r23, r20
    5516:	83 2f       	mov	r24, r19
    5518:	92 2f       	mov	r25, r18
    551a:	08 95       	ret

0000551c <_ZN14FreeBoardModel25getAutopilotRudderCommandEv>:

double FreeBoardModel::getAutopilotAlarmMaxXtError() {
	return autopilotState.autopilotAlarmMaxXTError;
}

double FreeBoardModel::getAutopilotRudderCommand() {
    551c:	fc 01       	movw	r30, r24
	return autopilotState.autopilotRudderCommand;
}
    551e:	57 a9       	ldd	r21, Z+55	; 0x37
    5520:	40 ad       	ldd	r20, Z+56	; 0x38
    5522:	31 ad       	ldd	r19, Z+57	; 0x39
    5524:	22 ad       	ldd	r18, Z+58	; 0x3a
    5526:	65 2f       	mov	r22, r21
    5528:	74 2f       	mov	r23, r20
    552a:	83 2f       	mov	r24, r19
    552c:	92 2f       	mov	r25, r18
    552e:	08 95       	ret

00005530 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>:

double FreeBoardModel::getAutopilotTargetHeading() {
    5530:	fc 01       	movw	r30, r24
	return autopilotState.autopilotTargetHeading;
}
    5532:	53 a9       	ldd	r21, Z+51	; 0x33
    5534:	44 a9       	ldd	r20, Z+52	; 0x34
    5536:	35 a9       	ldd	r19, Z+53	; 0x35
    5538:	26 a9       	ldd	r18, Z+54	; 0x36
    553a:	65 2f       	mov	r22, r21
    553c:	74 2f       	mov	r23, r20
    553e:	83 2f       	mov	r24, r19
    5540:	92 2f       	mov	r25, r18
    5542:	08 95       	ret

00005544 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>:
double FreeBoardModel::getAutopilotCurrentHeading() {
    5544:	fc 01       	movw	r30, r24
	if(autopilotState.autopilotReference == AUTOPILOT_WIND){
    5546:	82 a9       	ldd	r24, Z+50	; 0x32
    5548:	87 35       	cpi	r24, 0x57	; 87
    554a:	59 f4       	brne	.+22     	; 0x5562 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x1e>
		return windState.windApparentDir;
    554c:	e1 59       	subi	r30, 0x91	; 145
    554e:	ff 4f       	sbci	r31, 0xFF	; 255
    5550:	60 81       	ld	r22, Z
    5552:	71 81       	ldd	r23, Z+1	; 0x01
    5554:	88 27       	eor	r24, r24
    5556:	77 fd       	sbrc	r23, 7
    5558:	80 95       	com	r24
    555a:	98 2f       	mov	r25, r24
    555c:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    5560:	04 c0       	rjmp	.+8      	; 0x556a <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv+0x26>
	}
	//default option - compass
	return magneticHeading;
    5562:	60 85       	ldd	r22, Z+8	; 0x08
    5564:	71 85       	ldd	r23, Z+9	; 0x09
    5566:	82 85       	ldd	r24, Z+10	; 0x0a
    5568:	93 85       	ldd	r25, Z+11	; 0x0b
}
    556a:	08 95       	ret

0000556c <_ZN14FreeBoardModel21getAutopilotOffCourseEv>:
}

/*
 * Returns -179 to +180 as the degrees off course
 */
double FreeBoardModel::getAutopilotOffCourse() {
    556c:	ef 92       	push	r14
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	ec 01       	movw	r28, r24
	//get degrees between
	autopilotState.autopilotOffCourse = getAutopilotTargetHeading()	- getAutopilotCurrentHeading();
    557a:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    557e:	9b 01       	movw	r18, r22
    5580:	ac 01       	movw	r20, r24
    5582:	6b a9       	ldd	r22, Y+51	; 0x33
    5584:	7c a9       	ldd	r23, Y+52	; 0x34
    5586:	8d a9       	ldd	r24, Y+53	; 0x35
    5588:	9e a9       	ldd	r25, Y+54	; 0x36
    558a:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    558e:	7b 01       	movw	r14, r22
    5590:	8c 01       	movw	r16, r24
	autopilotState.autopilotOffCourse += (autopilotState.autopilotOffCourse>180) ? -360 : (autopilotState.autopilotOffCourse<-180) ? 360 : 0;
    5592:	20 e0       	ldi	r18, 0x00	; 0
    5594:	30 e0       	ldi	r19, 0x00	; 0
    5596:	44 e3       	ldi	r20, 0x34	; 52
    5598:	53 e4       	ldi	r21, 0x43	; 67
    559a:	7f 2d       	mov	r23, r15
    559c:	91 2f       	mov	r25, r17
    559e:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    55a2:	18 16       	cp	r1, r24
    55a4:	8c f0       	brlt	.+34     	; 0x55c8 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x5c>
    55a6:	20 e0       	ldi	r18, 0x00	; 0
    55a8:	30 e0       	ldi	r19, 0x00	; 0
    55aa:	44 e3       	ldi	r20, 0x34	; 52
    55ac:	53 ec       	ldi	r21, 0xC3	; 195
    55ae:	6e 2d       	mov	r22, r14
    55b0:	7f 2d       	mov	r23, r15
    55b2:	80 2f       	mov	r24, r16
    55b4:	91 2f       	mov	r25, r17
    55b6:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    55ba:	87 ff       	sbrs	r24, 7
    55bc:	0a c0       	rjmp	.+20     	; 0x55d2 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x66>
    55be:	20 e0       	ldi	r18, 0x00	; 0
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	44 eb       	ldi	r20, 0xB4	; 180
    55c4:	53 e4       	ldi	r21, 0x43	; 67
    55c6:	08 c0       	rjmp	.+16     	; 0x55d8 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	44 eb       	ldi	r20, 0xB4	; 180
    55ce:	53 ec       	ldi	r21, 0xC3	; 195
    55d0:	03 c0       	rjmp	.+6      	; 0x55d8 <_ZN14FreeBoardModel21getAutopilotOffCourseEv+0x6c>
    55d2:	20 e0       	ldi	r18, 0x00	; 0
    55d4:	30 e0       	ldi	r19, 0x00	; 0
    55d6:	a9 01       	movw	r20, r18
    55d8:	6e 2d       	mov	r22, r14
    55da:	7f 2d       	mov	r23, r15
    55dc:	80 2f       	mov	r24, r16
    55de:	91 2f       	mov	r25, r17
    55e0:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    55e4:	9b 01       	movw	r18, r22
    55e6:	46 2f       	mov	r20, r22
    55e8:	53 2f       	mov	r21, r19
    55ea:	68 2f       	mov	r22, r24
    55ec:	79 2f       	mov	r23, r25
    55ee:	4e a7       	std	Y+46, r20	; 0x2e
    55f0:	5f a7       	std	Y+47, r21	; 0x2f
    55f2:	68 ab       	std	Y+48, r22	; 0x30
    55f4:	79 ab       	std	Y+49, r23	; 0x31

	return autopilotState.autopilotOffCourse;
}
    55f6:	62 2f       	mov	r22, r18
    55f8:	73 2f       	mov	r23, r19
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	1f 91       	pop	r17
    5600:	0f 91       	pop	r16
    5602:	ff 90       	pop	r15
    5604:	ef 90       	pop	r14
    5606:	08 95       	ret

00005608 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>:
	return i;

}


int FreeBoardModel::writeSimple(HardwareSerial ser) {
    5608:	ef 92       	push	r14
    560a:	ff 92       	push	r15
    560c:	0f 93       	push	r16
    560e:	1f 93       	push	r17
    5610:	cf 93       	push	r28
    5612:	df 93       	push	r29
    5614:	8c 01       	movw	r16, r24
    5616:	d6 2f       	mov	r29, r22
    5618:	c7 2f       	mov	r28, r23
	//ArduIMU output format
	//!!VER:1.9,RLL:-0.52,PCH:0.06,YAW:80.24,IMUH:253,MGX:44,MGY:-254,MGZ:-257,MGH:80.11,LAT:-412937350,LON:1732472000,ALT:14,COG:116,SOG:0,FIX:1,SAT:5,TOW:22504700,

	ser.print("!!VER:1.9,");
    561a:	64 e5       	ldi	r22, 0x54	; 84
    561c:	72 e0       	ldi	r23, 0x02	; 2
    561e:	8d 2f       	mov	r24, r29
    5620:	9c 2f       	mov	r25, r28
    5622:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	ser.print("UID:MEGA,APX:");
    5626:	6f e5       	ldi	r22, 0x5F	; 95
    5628:	72 e0       	ldi	r23, 0x02	; 2
    562a:	8d 2f       	mov	r24, r29
    562c:	9c 2f       	mov	r25, r28
    562e:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	ser.print(autopilotState.autopilotOn);
    5632:	f8 01       	movw	r30, r16
    5634:	65 a5       	ldd	r22, Z+45	; 0x2d
    5636:	4a e0       	ldi	r20, 0x0A	; 10
    5638:	50 e0       	ldi	r21, 0x00	; 0
    563a:	70 e0       	ldi	r23, 0x00	; 0
    563c:	8d 2f       	mov	r24, r29
    563e:	9c 2f       	mov	r25, r28
    5640:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>
	ser.print(",APS:");
    5644:	6d e6       	ldi	r22, 0x6D	; 109
    5646:	72 e0       	ldi	r23, 0x02	; 2
    5648:	8d 2f       	mov	r24, r29
    564a:	9c 2f       	mov	r25, r28
    564c:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	ser.print(autopilotState.autopilotReference);
    5650:	f8 01       	movw	r30, r16
    5652:	62 a9       	ldd	r22, Z+50	; 0x32
    5654:	8d 2f       	mov	r24, r29
    5656:	9c 2f       	mov	r25, r28
    5658:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
	//if autopilot on, send autopilot data
	if (autopilotState.autopilotOn) {
    565c:	f8 01       	movw	r30, r16
    565e:	85 a5       	ldd	r24, Z+45	; 0x2d
    5660:	88 23       	and	r24, r24
    5662:	d9 f1       	breq	.+118    	; 0x56da <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0xd2>
		ser.print(",APT:");
    5664:	63 e7       	ldi	r22, 0x73	; 115
    5666:	72 e0       	ldi	r23, 0x02	; 2
    5668:	8d 2f       	mov	r24, r29
    566a:	9c 2f       	mov	r25, r28
    566c:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		ser.print(getAutopilotTargetHeading());
    5670:	f8 01       	movw	r30, r16
    5672:	43 a9       	ldd	r20, Z+51	; 0x33
    5674:	54 a9       	ldd	r21, Z+52	; 0x34
    5676:	65 a9       	ldd	r22, Z+53	; 0x35
    5678:	76 a9       	ldd	r23, Z+54	; 0x36
    567a:	22 e0       	ldi	r18, 0x02	; 2
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	8d 2f       	mov	r24, r29
    5680:	9c 2f       	mov	r25, r28
    5682:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
		ser.print(",APC:");
    5686:	69 e7       	ldi	r22, 0x79	; 121
    5688:	72 e0       	ldi	r23, 0x02	; 2
    568a:	8d 2f       	mov	r24, r29
    568c:	9c 2f       	mov	r25, r28
    568e:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		ser.print(getAutopilotCurrentHeading());
    5692:	c8 01       	movw	r24, r16
    5694:	0e 94 a2 2a 	call	0x5544	; 0x5544 <_ZN14FreeBoardModel26getAutopilotCurrentHeadingEv>
    5698:	ab 01       	movw	r20, r22
    569a:	bc 01       	movw	r22, r24
    569c:	22 e0       	ldi	r18, 0x02	; 2
    569e:	30 e0       	ldi	r19, 0x00	; 0
    56a0:	8d 2f       	mov	r24, r29
    56a2:	9c 2f       	mov	r25, r28
    56a4:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
		ser.print(",APR:");
    56a8:	6f e7       	ldi	r22, 0x7F	; 127
    56aa:	72 e0       	ldi	r23, 0x02	; 2
    56ac:	8d 2f       	mov	r24, r29
    56ae:	9c 2f       	mov	r25, r28
    56b0:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		ser.print(autopilotState.autopilotRudderCommand-33.0);// 0-66 in model
    56b4:	20 e0       	ldi	r18, 0x00	; 0
    56b6:	30 e0       	ldi	r19, 0x00	; 0
    56b8:	44 e0       	ldi	r20, 0x04	; 4
    56ba:	52 e4       	ldi	r21, 0x42	; 66
    56bc:	f8 01       	movw	r30, r16
    56be:	67 a9       	ldd	r22, Z+55	; 0x37
    56c0:	70 ad       	ldd	r23, Z+56	; 0x38
    56c2:	81 ad       	ldd	r24, Z+57	; 0x39
    56c4:	92 ad       	ldd	r25, Z+58	; 0x3a
    56c6:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    56ca:	ab 01       	movw	r20, r22
    56cc:	bc 01       	movw	r22, r24
    56ce:	22 e0       	ldi	r18, 0x02	; 2
    56d0:	30 e0       	ldi	r19, 0x00	; 0
    56d2:	8d 2f       	mov	r24, r29
    56d4:	9c 2f       	mov	r25, r28
    56d6:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
	}
	//if anchor alarm on, send data
	ser.print(",AAX:");
    56da:	65 e8       	ldi	r22, 0x85	; 133
    56dc:	72 e0       	ldi	r23, 0x02	; 2
    56de:	8d 2f       	mov	r24, r29
    56e0:	9c 2f       	mov	r25, r28
    56e2:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	ser.print(config.anchorAlarmOn);
    56e6:	78 01       	movw	r14, r16
    56e8:	f0 e8       	ldi	r31, 0x80	; 128
    56ea:	ef 0e       	add	r14, r31
    56ec:	f1 1c       	adc	r15, r1
    56ee:	f7 01       	movw	r30, r14
    56f0:	60 81       	ld	r22, Z
    56f2:	4a e0       	ldi	r20, 0x0A	; 10
    56f4:	50 e0       	ldi	r21, 0x00	; 0
    56f6:	70 e0       	ldi	r23, 0x00	; 0
    56f8:	8d 2f       	mov	r24, r29
    56fa:	9c 2f       	mov	r25, r28
    56fc:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>
	ser.print(",AAR:");
    5700:	6b e8       	ldi	r22, 0x8B	; 139
    5702:	72 e0       	ldi	r23, 0x02	; 2
    5704:	8d 2f       	mov	r24, r29
    5706:	9c 2f       	mov	r25, r28
    5708:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	ser.print(config.anchorRadius);
    570c:	f8 01       	movw	r30, r16
    570e:	e4 58       	subi	r30, 0x84	; 132
    5710:	ff 4f       	sbci	r31, 0xFF	; 255
    5712:	40 81       	ld	r20, Z
    5714:	51 81       	ldd	r21, Z+1	; 0x01
    5716:	62 81       	ldd	r22, Z+2	; 0x02
    5718:	73 81       	ldd	r23, Z+3	; 0x03
    571a:	22 e0       	ldi	r18, 0x02	; 2
    571c:	30 e0       	ldi	r19, 0x00	; 0
    571e:	8d 2f       	mov	r24, r29
    5720:	9c 2f       	mov	r25, r28
    5722:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
	if (config.anchorAlarmOn) {
    5726:	f7 01       	movw	r30, r14
    5728:	80 81       	ld	r24, Z
    572a:	88 23       	and	r24, r24
    572c:	b9 f1       	breq	.+110    	; 0x579c <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial+0x194>
		ser.print(",AAN:");
    572e:	61 e9       	ldi	r22, 0x91	; 145
    5730:	72 e0       	ldi	r23, 0x02	; 2
    5732:	8d 2f       	mov	r24, r29
    5734:	9c 2f       	mov	r25, r28
    5736:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		ser.print(config.anchorLat);
    573a:	f8 01       	movw	r30, r16
    573c:	ec 58       	subi	r30, 0x8C	; 140
    573e:	ff 4f       	sbci	r31, 0xFF	; 255
    5740:	40 81       	ld	r20, Z
    5742:	51 81       	ldd	r21, Z+1	; 0x01
    5744:	62 81       	ldd	r22, Z+2	; 0x02
    5746:	73 81       	ldd	r23, Z+3	; 0x03
    5748:	22 e0       	ldi	r18, 0x02	; 2
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	8d 2f       	mov	r24, r29
    574e:	9c 2f       	mov	r25, r28
    5750:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
		ser.print(",AAE:");
    5754:	67 e9       	ldi	r22, 0x97	; 151
    5756:	72 e0       	ldi	r23, 0x02	; 2
    5758:	8d 2f       	mov	r24, r29
    575a:	9c 2f       	mov	r25, r28
    575c:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		ser.print(config.anchorLon);
    5760:	f8 01       	movw	r30, r16
    5762:	e8 58       	subi	r30, 0x88	; 136
    5764:	ff 4f       	sbci	r31, 0xFF	; 255
    5766:	40 81       	ld	r20, Z
    5768:	51 81       	ldd	r21, Z+1	; 0x01
    576a:	62 81       	ldd	r22, Z+2	; 0x02
    576c:	73 81       	ldd	r23, Z+3	; 0x03
    576e:	22 e0       	ldi	r18, 0x02	; 2
    5770:	30 e0       	ldi	r19, 0x00	; 0
    5772:	8d 2f       	mov	r24, r29
    5774:	9c 2f       	mov	r25, r28
    5776:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
		ser.print(",AAD:");
    577a:	6d e9       	ldi	r22, 0x9D	; 157
    577c:	72 e0       	ldi	r23, 0x02	; 2
    577e:	8d 2f       	mov	r24, r29
    5780:	9c 2f       	mov	r25, r28
    5782:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		ser.print(getAnchorDistance());
    5786:	f8 01       	movw	r30, r16
    5788:	44 89       	ldd	r20, Z+20	; 0x14
    578a:	55 89       	ldd	r21, Z+21	; 0x15
    578c:	66 89       	ldd	r22, Z+22	; 0x16
    578e:	77 89       	ldd	r23, Z+23	; 0x17
    5790:	22 e0       	ldi	r18, 0x02	; 2
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	8d 2f       	mov	r24, r29
    5796:	9c 2f       	mov	r25, r28
    5798:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
	}
	//if wind alarm on, send data
	ser.print(",WSX:");
    579c:	63 ea       	ldi	r22, 0xA3	; 163
    579e:	72 e0       	ldi	r23, 0x02	; 2
    57a0:	8d 2f       	mov	r24, r29
    57a2:	9c 2f       	mov	r25, r28
    57a4:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	ser.print(config.windAlarmOn);
    57a8:	f8 01       	movw	r30, r16
    57aa:	ed 56       	subi	r30, 0x6D	; 109
    57ac:	ff 4f       	sbci	r31, 0xFF	; 255
    57ae:	60 81       	ld	r22, Z
    57b0:	4a e0       	ldi	r20, 0x0A	; 10
    57b2:	50 e0       	ldi	r21, 0x00	; 0
    57b4:	70 e0       	ldi	r23, 0x00	; 0
    57b6:	8d 2f       	mov	r24, r29
    57b8:	9c 2f       	mov	r25, r28
    57ba:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>
	ser.print(",WSK:");
    57be:	69 ea       	ldi	r22, 0xA9	; 169
    57c0:	72 e0       	ldi	r23, 0x02	; 2
    57c2:	8d 2f       	mov	r24, r29
    57c4:	9c 2f       	mov	r25, r28
    57c6:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	ser.print(config.windAlarmSpeed);
    57ca:	f8 01       	movw	r30, r16
    57cc:	ef 56       	subi	r30, 0x6F	; 111
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	60 81       	ld	r22, Z
    57d2:	71 81       	ldd	r23, Z+1	; 0x01
    57d4:	4a e0       	ldi	r20, 0x0A	; 10
    57d6:	50 e0       	ldi	r21, 0x00	; 0
    57d8:	8d 2f       	mov	r24, r29
    57da:	9c 2f       	mov	r25, r28
    57dc:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>

	ser.println(",");
    57e0:	66 ee       	ldi	r22, 0xE6	; 230
    57e2:	74 e0       	ldi	r23, 0x04	; 4
    57e4:	8d 2f       	mov	r24, r29
    57e6:	9c 2f       	mov	r25, r28
    57e8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	return 0;
}
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	1f 91       	pop	r17
    57f6:	0f 91       	pop	r16
    57f8:	ff 90       	pop	r15
    57fa:	ef 90       	pop	r14
    57fc:	08 95       	ret

000057fe <_ZN14FreeBoardModel20getAutopilotDeadZoneEv>:
	//default option - compass
	return magneticHeading;
}

int FreeBoardModel::getAutopilotDeadZone(){
	return this->config.autopilotDeadZone;
    57fe:	fc 01       	movw	r30, r24
    5800:	ee 57       	subi	r30, 0x7E	; 126
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5804:	80 81       	ld	r24, Z
    5806:	91 81       	ldd	r25, Z+1	; 0x01
    5808:	08 95       	ret

0000580a <_ZN14FreeBoardModel17getAutopilotSlackEv>:
int FreeBoardModel::getAutopilotSlack(){
	return this->config.autopilotSlack;
    580a:	fc 01       	movw	r30, r24
    580c:	ec 57       	subi	r30, 0x7C	; 124
    580e:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5810:	80 81       	ld	r24, Z
    5812:	91 81       	ldd	r25, Z+1	; 0x01
    5814:	08 95       	ret

00005816 <_ZN14FreeBoardModel13getGpsLastFixEv>:
float FreeBoardModel::getGpsCourse() {
	return gpsState.gpsCourse;
}

unsigned long FreeBoardModel::getGpsLastFix() {
	return gpsState.gpsLastFix;
    5816:	fc 01       	movw	r30, r24
    5818:	e7 5b       	subi	r30, 0xB7	; 183
    581a:	ff 4f       	sbci	r31, 0xFF	; 255
    581c:	60 81       	ld	r22, Z
    581e:	71 81       	ldd	r23, Z+1	; 0x01
}
    5820:	82 81       	ldd	r24, Z+2	; 0x02
    5822:	93 81       	ldd	r25, Z+3	; 0x03
    5824:	08 95       	ret

00005826 <_ZN14FreeBoardModel14getGpsLatitudeEv>:

float FreeBoardModel::getGpsLatitude() {
	return gpsState.gpsLatitude;
    5826:	fc 01       	movw	r30, r24
    5828:	ee 5a       	subi	r30, 0xAE	; 174
    582a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    582c:	50 81       	ld	r21, Z
    582e:	41 81       	ldd	r20, Z+1	; 0x01
    5830:	32 81       	ldd	r19, Z+2	; 0x02
    5832:	23 81       	ldd	r18, Z+3	; 0x03
    5834:	65 2f       	mov	r22, r21
    5836:	74 2f       	mov	r23, r20
    5838:	83 2f       	mov	r24, r19
    583a:	92 2f       	mov	r25, r18
    583c:	08 95       	ret

0000583e <_ZN14FreeBoardModel15getGpsLongitudeEv>:

float FreeBoardModel::getGpsLongitude() {
	return gpsState.gpsLongitude;
    583e:	fc 01       	movw	r30, r24
    5840:	ea 5a       	subi	r30, 0xAA	; 170
    5842:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5844:	50 81       	ld	r21, Z
    5846:	41 81       	ldd	r20, Z+1	; 0x01
    5848:	32 81       	ldd	r19, Z+2	; 0x02
    584a:	23 81       	ldd	r18, Z+3	; 0x03
    584c:	65 2f       	mov	r22, r21
    584e:	74 2f       	mov	r23, r20
    5850:	83 2f       	mov	r24, r19
    5852:	92 2f       	mov	r25, r18
    5854:	08 95       	ret

00005856 <_ZN14FreeBoardModel15getGpsSpeedUnitEv>:
float FreeBoardModel::getGpsSpeed() {
	return gpsState.gpsSpeed;
}

float FreeBoardModel::getGpsSpeedUnit() {
	return config.gpsSpeedUnit;
    5856:	fc 01       	movw	r30, r24
    5858:	ea 57       	subi	r30, 0x7A	; 122
    585a:	ff 4f       	sbci	r31, 0xFF	; 255
}
    585c:	50 81       	ld	r21, Z
    585e:	41 81       	ldd	r20, Z+1	; 0x01
    5860:	32 81       	ldd	r19, Z+2	; 0x02
    5862:	23 81       	ldd	r18, Z+3	; 0x03
    5864:	65 2f       	mov	r22, r21
    5866:	74 2f       	mov	r23, r20
    5868:	83 2f       	mov	r24, r19
    586a:	92 2f       	mov	r25, r18
    586c:	08 95       	ret

0000586e <_ZN14FreeBoardModel12getGpsStatusEv>:

char FreeBoardModel::getGpsStatus() {
	return gpsState.gpsStatus;
    586e:	8f 5a       	subi	r24, 0xAF	; 175
    5870:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5872:	fc 01       	movw	r30, r24
    5874:	80 81       	ld	r24, Z
    5876:	08 95       	ret

00005878 <_ZN14FreeBoardModel17getWindZeroOffsetEv>:
volatile bool FreeBoardModel::isRadarAlarmTriggered() {
	return radarAlarmTriggered;
}

int FreeBoardModel::getWindZeroOffset() {
	return config.windZeroOffset;
    5878:	fc 01       	movw	r30, r24
    587a:	e8 56       	subi	r30, 0x68	; 104
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
}
    587e:	80 81       	ld	r24, Z
    5880:	91 81       	ldd	r25, Z+1	; 0x01
    5882:	08 95       	ret

00005884 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>:

int FreeBoardModel::getWindAlarmSpeed() {
	return config.windAlarmSpeed;
    5884:	fc 01       	movw	r30, r24
    5886:	ef 56       	subi	r30, 0x6F	; 111
    5888:	ff 4f       	sbci	r31, 0xFF	; 255
}
    588a:	80 81       	ld	r24, Z
    588c:	91 81       	ldd	r25, Z+1	; 0x01
    588e:	08 95       	ret

00005890 <_ZN14FreeBoardModel18getWindApparentDirEv>:

int FreeBoardModel::getWindApparentDir() {
	return windState.windApparentDir;
    5890:	fc 01       	movw	r30, r24
    5892:	e1 59       	subi	r30, 0x91	; 145
    5894:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5896:	80 81       	ld	r24, Z
    5898:	91 81       	ldd	r25, Z+1	; 0x01
    589a:	08 95       	ret

0000589c <_ZN14FreeBoardModel14getWindAverageEv>:
int FreeBoardModel::getWindTrueDir() {
	return windState.windTrueDir;
}

float FreeBoardModel::getWindAverage() {
	return windState.windAverage;
    589c:	fc 01       	movw	r30, r24
    589e:	e7 59       	subi	r30, 0x97	; 151
    58a0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58a2:	50 81       	ld	r21, Z
    58a4:	41 81       	ldd	r20, Z+1	; 0x01
    58a6:	32 81       	ldd	r19, Z+2	; 0x02
    58a8:	23 81       	ldd	r18, Z+3	; 0x03
    58aa:	65 2f       	mov	r22, r21
    58ac:	74 2f       	mov	r23, r20
    58ae:	83 2f       	mov	r24, r19
    58b0:	92 2f       	mov	r25, r18
    58b2:	08 95       	ret

000058b4 <_ZN14FreeBoardModel13getWindFactorEv>:

float FreeBoardModel::getWindFactor() {
	return config.windFactor;
    58b4:	fc 01       	movw	r30, r24
    58b6:	ec 56       	subi	r30, 0x6C	; 108
    58b8:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58ba:	50 81       	ld	r21, Z
    58bc:	41 81       	ldd	r20, Z+1	; 0x01
    58be:	32 81       	ldd	r19, Z+2	; 0x02
    58c0:	23 81       	ldd	r18, Z+3	; 0x03
    58c2:	65 2f       	mov	r22, r21
    58c4:	74 2f       	mov	r23, r20
    58c6:	83 2f       	mov	r24, r19
    58c8:	92 2f       	mov	r25, r18
    58ca:	08 95       	ret

000058cc <_ZN14FreeBoardModel10getWindMaxEv>:
unsigned long FreeBoardModel::getWindLastUpdate() {
	return windState.windLastUpdate;
}

int FreeBoardModel::getWindMax() {
	return windState.windMax;
    58cc:	fc 01       	movw	r30, r24
    58ce:	e3 59       	subi	r30, 0x93	; 147
    58d0:	ff 4f       	sbci	r31, 0xFF	; 255
}
    58d2:	80 81       	ld	r24, Z
    58d4:	91 81       	ldd	r25, Z+1	; 0x01
    58d6:	08 95       	ret

000058d8 <_ZN14FreeBoardModel15isAnchorAlarmOnEv>:

bool FreeBoardModel::isAnchorAlarmOn() {
	return config.anchorAlarmOn;
    58d8:	80 58       	subi	r24, 0x80	; 128
    58da:	9f 4f       	sbci	r25, 0xFF	; 255
}
    58dc:	fc 01       	movw	r30, r24
    58de:	80 81       	ld	r24, Z
    58e0:	08 95       	ret

000058e2 <_ZN14FreeBoardModel11isGpsDecodeEv>:
bool FreeBoardModel::isGpsAlarmTriggered() {
	return gpsState.gpsAlarmTriggered;
}

bool FreeBoardModel::isGpsDecode() {
	return gpsState.gpsDecode;
    58e2:	88 5b       	subi	r24, 0xB8	; 184
    58e4:	9f 4f       	sbci	r25, 0xFF	; 255
}
    58e6:	fc 01       	movw	r30, r24
    58e8:	80 81       	ld	r24, Z
    58ea:	08 95       	ret

000058ec <_ZN14FreeBoardModel13isWindAlarmOnEv>:

bool FreeBoardModel::isWindAlarmOn() {
	return config.windAlarmOn;
    58ec:	8d 56       	subi	r24, 0x6D	; 109
    58ee:	9f 4f       	sbci	r25, 0xFF	; 255
}
    58f0:	fc 01       	movw	r30, r24
    58f2:	80 81       	ld	r24, Z
    58f4:	08 95       	ret

000058f6 <_ZN14FreeBoardModel12setAlarmLastEm>:

void FreeBoardModel::setAlarmLast(unsigned long alarmLast) {
	this->alarmLast = alarmLast;
    58f6:	fc 01       	movw	r30, r24
    58f8:	40 83       	st	Z, r20
    58fa:	51 83       	std	Z+1, r21	; 0x01
    58fc:	62 83       	std	Z+2, r22	; 0x02
    58fe:	73 83       	std	Z+3, r23	; 0x03
    5900:	08 95       	ret

00005902 <_ZN14FreeBoardModel14setAlarmSnoozeEm>:
}

void FreeBoardModel::setAlarmSnooze(unsigned long alarmSnooze) {
	this->alarmSnooze = alarmSnooze;
    5902:	fc 01       	movw	r30, r24
    5904:	44 83       	std	Z+4, r20	; 0x04
    5906:	55 83       	std	Z+5, r21	; 0x05
    5908:	66 83       	std	Z+6, r22	; 0x06
    590a:	77 83       	std	Z+7, r23	; 0x07
    590c:	08 95       	ret

0000590e <_ZN14FreeBoardModel16setAnchorAlarmOnEb>:
}

void FreeBoardModel::setAnchorAlarmOn(bool anchorAlarmOn) {
	this->config.anchorAlarmOn = anchorAlarmOn;
    590e:	80 58       	subi	r24, 0x80	; 128
    5910:	9f 4f       	sbci	r25, 0xFF	; 255
    5912:	fc 01       	movw	r30, r24
    5914:	60 83       	st	Z, r22
    5916:	08 95       	ret

00005918 <_ZN14FreeBoardModel23setAnchorAlarmTriggeredEb>:
}

void FreeBoardModel::setAnchorAlarmTriggered(bool anchorAlarmTriggered) {
	this->anchorState.anchorAlarmTriggered = anchorAlarmTriggered;
    5918:	fc 01       	movw	r30, r24
    591a:	64 8f       	std	Z+28, r22	; 0x1c
    591c:	08 95       	ret

0000591e <_ZN14FreeBoardModel17setAnchorDistanceEf>:
}

void FreeBoardModel::setAnchorDistance(float anchorDistance) {
	this->anchorState.anchorDistance = anchorDistance;
    591e:	fc 01       	movw	r30, r24
    5920:	44 8b       	std	Z+20, r20	; 0x14
    5922:	55 8b       	std	Z+21, r21	; 0x15
    5924:	66 8b       	std	Z+22, r22	; 0x16
    5926:	77 8b       	std	Z+23, r23	; 0x17
    5928:	08 95       	ret

0000592a <_ZN14FreeBoardModel10setAnchorEEf>:
}

void FreeBoardModel::setAnchorE(float anchorE) {
	this->anchorState.anchorE = anchorE;
    592a:	fc 01       	movw	r30, r24
    592c:	45 a3       	std	Z+37, r20	; 0x25
    592e:	56 a3       	std	Z+38, r21	; 0x26
    5930:	67 a3       	std	Z+39, r22	; 0x27
    5932:	70 a7       	std	Z+40, r23	; 0x28
    5934:	08 95       	ret

00005936 <_ZN14FreeBoardModel12setAnchorLatEf>:
}

void FreeBoardModel::setAnchorLat(float anchorLat) {
	this->config.anchorLat = anchorLat;
    5936:	8c 58       	subi	r24, 0x8C	; 140
    5938:	9f 4f       	sbci	r25, 0xFF	; 255
    593a:	fc 01       	movw	r30, r24
    593c:	40 83       	st	Z, r20
    593e:	51 83       	std	Z+1, r21	; 0x01
    5940:	62 83       	std	Z+2, r22	; 0x02
    5942:	73 83       	std	Z+3, r23	; 0x03
    5944:	08 95       	ret

00005946 <_ZN14FreeBoardModel12setAnchorLonEf>:
}

void FreeBoardModel::setAnchorLon(float anchorLon) {
	this->config.anchorLon = anchorLon;
    5946:	88 58       	subi	r24, 0x88	; 136
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
    594a:	fc 01       	movw	r30, r24
    594c:	40 83       	st	Z, r20
    594e:	51 83       	std	Z+1, r21	; 0x01
    5950:	62 83       	std	Z+2, r22	; 0x02
    5952:	73 83       	std	Z+3, r23	; 0x03
    5954:	08 95       	ret

00005956 <_ZN14FreeBoardModel20setAnchorMaxDistanceEf>:
}

void FreeBoardModel::setAnchorMaxDistance(float anchorMaxDistance) {
	this->anchorState.anchorMaxDistance = anchorMaxDistance;
    5956:	fc 01       	movw	r30, r24
    5958:	40 8f       	std	Z+24, r20	; 0x18
    595a:	51 8f       	std	Z+25, r21	; 0x19
    595c:	62 8f       	std	Z+26, r22	; 0x1a
    595e:	73 8f       	std	Z+27, r23	; 0x1b
    5960:	08 95       	ret

00005962 <_ZN14FreeBoardModel10setAnchorNEf>:
}

void FreeBoardModel::setAnchorN(float anchorN) {
	this->anchorState.anchorN = anchorN;
    5962:	fc 01       	movw	r30, r24
    5964:	45 8f       	std	Z+29, r20	; 0x1d
    5966:	56 8f       	std	Z+30, r21	; 0x1e
    5968:	67 8f       	std	Z+31, r22	; 0x1f
    596a:	70 a3       	std	Z+32, r23	; 0x20
    596c:	08 95       	ret

0000596e <_ZN14FreeBoardModel15setAnchorRadiusEf>:
}

void FreeBoardModel::setAnchorRadius(float anchorRadius) {
	this->config.anchorRadius = anchorRadius;
    596e:	84 58       	subi	r24, 0x84	; 132
    5970:	9f 4f       	sbci	r25, 0xFF	; 255
    5972:	fc 01       	movw	r30, r24
    5974:	40 83       	st	Z, r20
    5976:	51 83       	std	Z+1, r21	; 0x01
    5978:	62 83       	std	Z+2, r22	; 0x02
    597a:	73 83       	std	Z+3, r23	; 0x03
    597c:	08 95       	ret

0000597e <_ZN14FreeBoardModel18setAnchorRadiusDegEf>:
}

void FreeBoardModel::setAnchorRadiusDeg(float anchorRadiusDeg) {
	this->anchorState.anchorRadiusDeg = anchorRadiusDeg;
    597e:	fc 01       	movw	r30, r24
    5980:	40 8b       	std	Z+16, r20	; 0x10
    5982:	51 8b       	std	Z+17, r21	; 0x11
    5984:	62 8b       	std	Z+18, r22	; 0x12
    5986:	73 8b       	std	Z+19, r23	; 0x13
    5988:	08 95       	ret

0000598a <_ZN14FreeBoardModel10setAnchorSEf>:
}

void FreeBoardModel::setAnchorS(float anchorS) {
	this->anchorState.anchorS = anchorS;
    598a:	fc 01       	movw	r30, r24
    598c:	41 a3       	std	Z+33, r20	; 0x21
    598e:	52 a3       	std	Z+34, r21	; 0x22
    5990:	63 a3       	std	Z+35, r22	; 0x23
    5992:	74 a3       	std	Z+36, r23	; 0x24
    5994:	08 95       	ret

00005996 <_ZN14FreeBoardModel10setAnchorWEf>:
}

void FreeBoardModel::setAnchorW(float anchorW) {
	this->anchorState.anchorW = anchorW;
    5996:	fc 01       	movw	r30, r24
    5998:	41 a7       	std	Z+41, r20	; 0x29
    599a:	52 a7       	std	Z+42, r21	; 0x2a
    599c:	63 a7       	std	Z+43, r22	; 0x2b
    599e:	74 a7       	std	Z+44, r23	; 0x2c
    59a0:	08 95       	ret

000059a2 <_ZN14FreeBoardModel21setAutopilotReferenceEc>:
}

void FreeBoardModel::setAutopilotReference(char autopilotReference) {
    59a2:	cf 93       	push	r28
    59a4:	df 93       	push	r29
    59a6:	ec 01       	movw	r28, r24

	if(autopilotReference != AUTOPILOT_WIND && autopilotReference != AUTOPILOT_COMPASS) return;
    59a8:	67 35       	cpi	r22, 0x57	; 87
    59aa:	11 f0       	breq	.+4      	; 0x59b0 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0xe>
    59ac:	63 34       	cpi	r22, 0x43	; 67
    59ae:	29 f5       	brne	.+74     	; 0x59fa <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x58>
	this->autopilotState.autopilotReference = autopilotReference;
    59b0:	6a ab       	std	Y+50, r22	; 0x32
	if(autopilotState.autopilotReference ==AUTOPILOT_WIND){
    59b2:	67 35       	cpi	r22, 0x57	; 87
    59b4:	81 f4       	brne	.+32     	; 0x59d6 <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x34>
			autopilotState.autopilotTargetHeading=windState.windApparentDir;
    59b6:	fe 01       	movw	r30, r28
    59b8:	e1 59       	subi	r30, 0x91	; 145
    59ba:	ff 4f       	sbci	r31, 0xFF	; 255
    59bc:	60 81       	ld	r22, Z
    59be:	71 81       	ldd	r23, Z+1	; 0x01
    59c0:	88 27       	eor	r24, r24
    59c2:	77 fd       	sbrc	r23, 7
    59c4:	80 95       	com	r24
    59c6:	98 2f       	mov	r25, r24
    59c8:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    59cc:	6b ab       	std	Y+51, r22	; 0x33
    59ce:	7c ab       	std	Y+52, r23	; 0x34
    59d0:	8d ab       	std	Y+53, r24	; 0x35
    59d2:	9e ab       	std	Y+54, r25	; 0x36
    59d4:	0a c0       	rjmp	.+20     	; 0x59ea <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
	}
	if(autopilotState.autopilotReference == AUTOPILOT_COMPASS){
    59d6:	63 34       	cpi	r22, 0x43	; 67
    59d8:	41 f4       	brne	.+16     	; 0x59ea <_ZN14FreeBoardModel21setAutopilotReferenceEc+0x48>
		autopilotState.autopilotTargetHeading=magneticHeading;
    59da:	48 85       	ldd	r20, Y+8	; 0x08
    59dc:	59 85       	ldd	r21, Y+9	; 0x09
    59de:	6a 85       	ldd	r22, Y+10	; 0x0a
    59e0:	7b 85       	ldd	r23, Y+11	; 0x0b
    59e2:	4b ab       	std	Y+51, r20	; 0x33
    59e4:	5c ab       	std	Y+52, r21	; 0x34
    59e6:	6d ab       	std	Y+53, r22	; 0x35
    59e8:	7e ab       	std	Y+54, r23	; 0x36
	}
	//and netralise the rudder position too.
	this->autopilotState.autopilotRudderCommand=33;
    59ea:	40 e0       	ldi	r20, 0x00	; 0
    59ec:	50 e0       	ldi	r21, 0x00	; 0
    59ee:	64 e0       	ldi	r22, 0x04	; 4
    59f0:	72 e4       	ldi	r23, 0x42	; 66
    59f2:	4f ab       	std	Y+55, r20	; 0x37
    59f4:	58 af       	std	Y+56, r21	; 0x38
    59f6:	69 af       	std	Y+57, r22	; 0x39
    59f8:	7a af       	std	Y+58, r23	; 0x3a
}
    59fa:	df 91       	pop	r29
    59fc:	cf 91       	pop	r28
    59fe:	08 95       	ret

00005a00 <_ZN14FreeBoardModel25setAutopilotRudderCommandEd>:
	this->autopilotState.autopilotAlarmTriggered = autopilotAlarmTriggered;
}


void FreeBoardModel::setAutopilotRudderCommand(double autopilotRudderCommand) {
	this->autopilotState.autopilotRudderCommand = autopilotRudderCommand;
    5a00:	fc 01       	movw	r30, r24
    5a02:	47 ab       	std	Z+55, r20	; 0x37
    5a04:	50 af       	std	Z+56, r21	; 0x38
    5a06:	61 af       	std	Z+57, r22	; 0x39
    5a08:	72 af       	std	Z+58, r23	; 0x3a
    5a0a:	08 95       	ret

00005a0c <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>:
/**
 * For magnetic it will be 0-360degM
 * For wind it will be -180 to +180 from bow.
 * Since this matches with target heading, and we convert in autopilot to 0-360, alls good?
 */
void FreeBoardModel::setAutopilotTargetHeading(double autopilotTargetHeading) {
    5a0c:	cf 93       	push	r28
    5a0e:	df 93       	push	r29
    5a10:	ec 01       	movw	r28, r24
	//make this 0-360 range only
		this->autopilotState.autopilotTargetHeading = (double)(((int)autopilotTargetHeading+360) % 360);
    5a12:	cb 01       	movw	r24, r22
    5a14:	ba 01       	movw	r22, r20
    5a16:	0e 94 f6 40 	call	0x81ec	; 0x81ec <__fixsfsi>
    5a1a:	cb 01       	movw	r24, r22
    5a1c:	88 59       	subi	r24, 0x98	; 152
    5a1e:	9e 4f       	sbci	r25, 0xFE	; 254
    5a20:	68 e6       	ldi	r22, 0x68	; 104
    5a22:	71 e0       	ldi	r23, 0x01	; 1
    5a24:	0e 94 86 43 	call	0x870c	; 0x870c <__divmodhi4>
    5a28:	bc 01       	movw	r22, r24
    5a2a:	88 27       	eor	r24, r24
    5a2c:	77 fd       	sbrc	r23, 7
    5a2e:	80 95       	com	r24
    5a30:	98 2f       	mov	r25, r24
    5a32:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    5a36:	6b ab       	std	Y+51, r22	; 0x33
    5a38:	7c ab       	std	Y+52, r23	; 0x34
    5a3a:	8d ab       	std	Y+53, r24	; 0x35
    5a3c:	9e ab       	std	Y+54, r25	; 0x36
}
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	08 95       	ret

00005a44 <_ZN14FreeBoardModel12setGpsCourseEf>:
void FreeBoardModel::setGpsAlarmTriggered(bool gpsAlarmTriggered) {
	this->gpsState.gpsAlarmTriggered = gpsAlarmTriggered;
}

void FreeBoardModel::setGpsCourse(float gpsCourse) {
	this->gpsState.gpsCourse = gpsCourse;
    5a44:	82 5a       	subi	r24, 0xA2	; 162
    5a46:	9f 4f       	sbci	r25, 0xFF	; 255
    5a48:	fc 01       	movw	r30, r24
    5a4a:	40 83       	st	Z, r20
    5a4c:	51 83       	std	Z+1, r21	; 0x01
    5a4e:	62 83       	std	Z+2, r22	; 0x02
    5a50:	73 83       	std	Z+3, r23	; 0x03
    5a52:	08 95       	ret

00005a54 <_ZN14FreeBoardModel12setGpsDecodeEb>:
}

void FreeBoardModel::setGpsDecode(bool gpsDecode) {
	this->gpsState.gpsDecode = gpsDecode;
    5a54:	88 5b       	subi	r24, 0xB8	; 184
    5a56:	9f 4f       	sbci	r25, 0xFF	; 255
    5a58:	fc 01       	movw	r30, r24
    5a5a:	60 83       	st	Z, r22
    5a5c:	08 95       	ret

00005a5e <_ZN14FreeBoardModel13setGpsLastFixEm>:
}

void FreeBoardModel::setGpsLastFix(unsigned long gpsLastFix) {
	this->gpsState.gpsLastFix = gpsLastFix;
    5a5e:	87 5b       	subi	r24, 0xB7	; 183
    5a60:	9f 4f       	sbci	r25, 0xFF	; 255
    5a62:	fc 01       	movw	r30, r24
    5a64:	40 83       	st	Z, r20
    5a66:	51 83       	std	Z+1, r21	; 0x01
    5a68:	62 83       	std	Z+2, r22	; 0x02
    5a6a:	73 83       	std	Z+3, r23	; 0x03
    5a6c:	08 95       	ret

00005a6e <_ZN14FreeBoardModel14setGpsLatitudeEf>:
}

void FreeBoardModel::setGpsLatitude(float gpsLatitude) {
	this->gpsState.gpsLatitude = gpsLatitude;
    5a6e:	8e 5a       	subi	r24, 0xAE	; 174
    5a70:	9f 4f       	sbci	r25, 0xFF	; 255
    5a72:	fc 01       	movw	r30, r24
    5a74:	40 83       	st	Z, r20
    5a76:	51 83       	std	Z+1, r21	; 0x01
    5a78:	62 83       	std	Z+2, r22	; 0x02
    5a7a:	73 83       	std	Z+3, r23	; 0x03
    5a7c:	08 95       	ret

00005a7e <_ZN14FreeBoardModel15setGpsLongitudeEf>:
}

void FreeBoardModel::setGpsLongitude(float gpsLongitude) {
	this->gpsState.gpsLongitude = gpsLongitude;
    5a7e:	8a 5a       	subi	r24, 0xAA	; 170
    5a80:	9f 4f       	sbci	r25, 0xFF	; 255
    5a82:	fc 01       	movw	r30, r24
    5a84:	40 83       	st	Z, r20
    5a86:	51 83       	std	Z+1, r21	; 0x01
    5a88:	62 83       	std	Z+2, r22	; 0x02
    5a8a:	73 83       	std	Z+3, r23	; 0x03
    5a8c:	08 95       	ret

00005a8e <_ZN14FreeBoardModel11setGpsSpeedEf>:
}

void FreeBoardModel::setGpsSpeed(float gpsSpeed) {
	this->gpsState.gpsSpeed = gpsSpeed;
    5a8e:	86 5a       	subi	r24, 0xA6	; 166
    5a90:	9f 4f       	sbci	r25, 0xFF	; 255
    5a92:	fc 01       	movw	r30, r24
    5a94:	40 83       	st	Z, r20
    5a96:	51 83       	std	Z+1, r21	; 0x01
    5a98:	62 83       	std	Z+2, r22	; 0x02
    5a9a:	73 83       	std	Z+3, r23	; 0x03
    5a9c:	08 95       	ret

00005a9e <_ZN14FreeBoardModel12setGpsStatusEc>:
void FreeBoardModel::setGpsSpeedUnit(float gpsSpeedUnit) {
	this->config.gpsSpeedUnit = gpsSpeedUnit;
}

void FreeBoardModel::setGpsStatus(char gpsStatus) {
	this->gpsState.gpsStatus = gpsStatus;
    5a9e:	8f 5a       	subi	r24, 0xAF	; 175
    5aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	60 83       	st	Z, r22
    5aa6:	08 95       	ret

00005aa8 <_ZN14FreeBoardModel9setGpsUtcEf>:
}

void FreeBoardModel::setGpsUtc(float gpsUtc) {
	this->gpsState.gpsUtc = gpsUtc;
    5aa8:	83 5b       	subi	r24, 0xB3	; 179
    5aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    5aac:	fc 01       	movw	r30, r24
    5aae:	40 83       	st	Z, r20
    5ab0:	51 83       	std	Z+1, r21	; 0x01
    5ab2:	62 83       	std	Z+2, r22	; 0x02
    5ab4:	73 83       	std	Z+3, r23	; 0x03
    5ab6:	08 95       	ret

00005ab8 <_ZN14FreeBoardModel18setMagneticHeadingEf>:
}

void FreeBoardModel::setMagneticHeading(float magneticHeading){
	this->magneticHeading=magneticHeading;
    5ab8:	fc 01       	movw	r30, r24
    5aba:	40 87       	std	Z+8, r20	; 0x08
    5abc:	51 87       	std	Z+9, r21	; 0x09
    5abe:	62 87       	std	Z+10, r22	; 0x0a
    5ac0:	73 87       	std	Z+11, r23	; 0x0b
    5ac2:	08 95       	ret

00005ac4 <_ZN14FreeBoardModel14setDeclinationEf>:
}

void FreeBoardModel::setDeclination(float declination){
	this->declination=declination;
    5ac4:	fc 01       	movw	r30, r24
    5ac6:	44 87       	std	Z+12, r20	; 0x0c
    5ac8:	55 87       	std	Z+13, r21	; 0x0d
    5aca:	66 87       	std	Z+14, r22	; 0x0e
    5acc:	77 87       	std	Z+15, r23	; 0x0f
    5ace:	08 95       	ret

00005ad0 <_ZN14FreeBoardModel17setWindZeroOffsetEi>:
void FreeBoardModel::setRadarAlarmTriggered(volatile bool radarAlarmTriggered) {
	this->radarAlarmTriggered = radarAlarmTriggered;
}

void FreeBoardModel::setWindZeroOffset(int windZeroOffset) {
	this->config.windZeroOffset = windZeroOffset;
    5ad0:	88 56       	subi	r24, 0x68	; 104
    5ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad4:	fc 01       	movw	r30, r24
    5ad6:	71 83       	std	Z+1, r23	; 0x01
    5ad8:	60 83       	st	Z, r22
    5ada:	08 95       	ret

00005adc <_ZN14FreeBoardModel14setWindAlarmOnEb>:
}

void FreeBoardModel::setWindAlarmOn(bool windAlarmOn) {
	this->config.windAlarmOn = windAlarmOn;
    5adc:	8d 56       	subi	r24, 0x6D	; 109
    5ade:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae0:	fc 01       	movw	r30, r24
    5ae2:	60 83       	st	Z, r22
    5ae4:	08 95       	ret

00005ae6 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>:
}

void FreeBoardModel::setWindAlarmSpeed(int windAlarmSpeed) {
	this->config.windAlarmSpeed = windAlarmSpeed;
    5ae6:	8f 56       	subi	r24, 0x6F	; 111
    5ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    5aea:	fc 01       	movw	r30, r24
    5aec:	71 83       	std	Z+1, r23	; 0x01
    5aee:	60 83       	st	Z, r22
    5af0:	08 95       	ret

00005af2 <_ZN14FreeBoardModel18setWindApparentDirEi>:
}

void FreeBoardModel::setWindApparentDir(int windApparentDir) {
	this->windState.windApparentDir = windApparentDir;
    5af2:	81 59       	subi	r24, 0x91	; 145
    5af4:	9f 4f       	sbci	r25, 0xFF	; 255
    5af6:	fc 01       	movw	r30, r24
    5af8:	71 83       	std	Z+1, r23	; 0x01
    5afa:	60 83       	st	Z, r22
    5afc:	08 95       	ret

00005afe <_ZN14FreeBoardModel14setWindTrueDirEi>:
}
void FreeBoardModel::setWindTrueDir(int windTrueDir) {
	this->windState.windTrueDir = windTrueDir;
    5afe:	8f 58       	subi	r24, 0x8F	; 143
    5b00:	9f 4f       	sbci	r25, 0xFF	; 255
    5b02:	fc 01       	movw	r30, r24
    5b04:	71 83       	std	Z+1, r23	; 0x01
    5b06:	60 83       	st	Z, r22
    5b08:	08 95       	ret

00005b0a <_ZN14FreeBoardModel14setWindAverageEf>:
}

void FreeBoardModel::setWindAverage(float windAverage) {
	this->windState.windAverage = windAverage;
    5b0a:	87 59       	subi	r24, 0x97	; 151
    5b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b0e:	fc 01       	movw	r30, r24
    5b10:	40 83       	st	Z, r20
    5b12:	51 83       	std	Z+1, r21	; 0x01
    5b14:	62 83       	std	Z+2, r22	; 0x02
    5b16:	73 83       	std	Z+3, r23	; 0x03
    5b18:	08 95       	ret

00005b1a <_ZN14FreeBoardModel17setWindLastUpdateEm>:
void FreeBoardModel::setWindFactor(float windFactor) {
	this->config.windFactor = windFactor;
}

void FreeBoardModel::setWindLastUpdate(unsigned long windLastUpdate) {
	this->windState.windLastUpdate = windLastUpdate;
    5b1a:	8b 59       	subi	r24, 0x9B	; 155
    5b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1e:	fc 01       	movw	r30, r24
    5b20:	40 83       	st	Z, r20
    5b22:	51 83       	std	Z+1, r21	; 0x01
    5b24:	62 83       	std	Z+2, r22	; 0x02
    5b26:	73 83       	std	Z+3, r23	; 0x03
    5b28:	08 95       	ret

00005b2a <_ZN14FreeBoardModel13isAutopilotOnEv>:
	this->config.mobAlarmOn = mobAlarmOn;
}

bool FreeBoardModel::isAutopilotOn() {
	return autopilotState.autopilotOn;
}
    5b2a:	fc 01       	movw	r30, r24
    5b2c:	85 a5       	ldd	r24, Z+45	; 0x2d
    5b2e:	08 95       	ret

00005b30 <_ZN14FreeBoardModel14setAutopilotOnEb>:

void FreeBoardModel::setAutopilotOn(bool autopilotOn) {
    5b30:	1f 93       	push	r17
    5b32:	cf 93       	push	r28
    5b34:	df 93       	push	r29
    5b36:	ec 01       	movw	r28, r24
    5b38:	16 2f       	mov	r17, r22
	//this is potentally dangerous, since we dont want the boat diving off on an old target heading.
	//ALWAYS reset target heading to current magnetic or wind dir here
	setAutopilotReference(getAutopilotReference());
    5b3a:	6a a9       	ldd	r22, Y+50	; 0x32
    5b3c:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
	this->autopilotState.autopilotOn = autopilotOn;
    5b40:	1d a7       	std	Y+45, r17	; 0x2d
}
    5b42:	df 91       	pop	r29
    5b44:	cf 91       	pop	r28
    5b46:	1f 91       	pop	r17
    5b48:	08 95       	ret

00005b4a <_ZN14FreeBoardModel10setWindMaxEi>:
void FreeBoardModel::setRadarAlarmOn(volatile bool radarAlarmOn) {
	this->config.radarAlarmOn = radarAlarmOn;
}

void FreeBoardModel::setWindMax(int windMax) {
	this->windState.windMax = windMax;
    5b4a:	83 59       	subi	r24, 0x93	; 147
    5b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b4e:	fc 01       	movw	r30, r24
    5b50:	71 83       	std	Z+1, r23	; 0x01
    5b52:	60 83       	st	Z, r22
    5b54:	08 95       	ret

00005b56 <_ZN14FreeBoardModel21setWindAlarmTriggeredEb>:
}

void FreeBoardModel::setWindAlarmTriggered(bool windAlarmTriggered) {
	this->windState.windAlarmTriggered = windAlarmTriggered;
    5b56:	8d 58       	subi	r24, 0x8D	; 141
    5b58:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	60 83       	st	Z, r22
    5b5e:	08 95       	ret

00005b60 <_ZN14FreeBoardModel11getGpsModelEv>:
}

short FreeBoardModel::getGpsModel(){
	return this->config.gpsModel;
    5b60:	fc 01       	movw	r30, r24
    5b62:	e6 56       	subi	r30, 0x66	; 102
    5b64:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5b66:	80 81       	ld	r24, Z
    5b68:	91 81       	ldd	r25, Z+1	; 0x01
    5b6a:	08 95       	ret

00005b6c <_ZN14FreeBoardModel11setGpsModelEs>:
void FreeBoardModel::setGpsModel(short gpsModel){
	this->config.gpsModel=gpsModel;
    5b6c:	86 56       	subi	r24, 0x66	; 102
    5b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b70:	fc 01       	movw	r30, r24
    5b72:	71 83       	std	Z+1, r23	; 0x01
    5b74:	60 83       	st	Z, r22
    5b76:	08 95       	ret

00005b78 <_ZN14FreeBoardModel13getSerialBaudEv>:
}
int FreeBoardModel::getSerialBaud(){
	return this->config.serialBaud;
    5b78:	fc 01       	movw	r30, r24
    5b7a:	e4 56       	subi	r30, 0x64	; 100
    5b7c:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5b7e:	80 81       	ld	r24, Z
    5b80:	91 81       	ldd	r25, Z+1	; 0x01
    5b82:	08 95       	ret

00005b84 <_ZN14FreeBoardModel13setSerialBaudEi>:
void FreeBoardModel::setSerialBaud(int serialBaud){
	this->config.serialBaud=serialBaud;
    5b84:	84 56       	subi	r24, 0x64	; 100
    5b86:	9f 4f       	sbci	r25, 0xFF	; 255
    5b88:	fc 01       	movw	r30, r24
    5b8a:	71 83       	std	Z+1, r23	; 0x01
    5b8c:	60 83       	st	Z, r22
    5b8e:	08 95       	ret

00005b90 <_ZN14FreeBoardModel14getSerialBaud1Ev>:
}
int FreeBoardModel::getSerialBaud1(){
	return this->config.serialBaud1;
    5b90:	fc 01       	movw	r30, r24
    5b92:	e2 56       	subi	r30, 0x62	; 98
    5b94:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5b96:	80 81       	ld	r24, Z
    5b98:	91 81       	ldd	r25, Z+1	; 0x01
    5b9a:	08 95       	ret

00005b9c <_ZN14FreeBoardModel14setSerialBaud1Ei>:
void FreeBoardModel::setSerialBaud1(int serialBaud1){
	this->config.serialBaud1=serialBaud1;
    5b9c:	82 56       	subi	r24, 0x62	; 98
    5b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba0:	fc 01       	movw	r30, r24
    5ba2:	71 83       	std	Z+1, r23	; 0x01
    5ba4:	60 83       	st	Z, r22
    5ba6:	08 95       	ret

00005ba8 <_ZN14FreeBoardModel14getSerialBaud2Ev>:
}
int FreeBoardModel::getSerialBaud2(){
	return this->config.serialBaud2;
    5ba8:	fc 01       	movw	r30, r24
    5baa:	e0 56       	subi	r30, 0x60	; 96
    5bac:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5bae:	80 81       	ld	r24, Z
    5bb0:	91 81       	ldd	r25, Z+1	; 0x01
    5bb2:	08 95       	ret

00005bb4 <_ZN14FreeBoardModel14setSerialBaud2Ei>:
void FreeBoardModel::setSerialBaud2(int serialBaud2){
	this->config.serialBaud2=serialBaud2;
    5bb4:	80 56       	subi	r24, 0x60	; 96
    5bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb8:	fc 01       	movw	r30, r24
    5bba:	71 83       	std	Z+1, r23	; 0x01
    5bbc:	60 83       	st	Z, r22
    5bbe:	08 95       	ret

00005bc0 <_ZN14FreeBoardModel14getSerialBaud3Ev>:
}
int FreeBoardModel::getSerialBaud3(){
	return this->config.serialBaud3;
    5bc0:	fc 01       	movw	r30, r24
    5bc2:	ee 55       	subi	r30, 0x5E	; 94
    5bc4:	ff 4f       	sbci	r31, 0xFF	; 255
}
    5bc6:	80 81       	ld	r24, Z
    5bc8:	91 81       	ldd	r25, Z+1	; 0x01
    5bca:	08 95       	ret

00005bcc <_ZN14FreeBoardModel14setSerialBaud3Ei>:
void FreeBoardModel::setSerialBaud3(int serialBaud3){
	this->config.serialBaud3=serialBaud3;
    5bcc:	8e 55       	subi	r24, 0x5E	; 94
    5bce:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd0:	fc 01       	movw	r30, r24
    5bd2:	71 83       	std	Z+1, r23	; 0x01
    5bd4:	60 83       	st	Z, r22
    5bd6:	08 95       	ret

00005bd8 <_ZN14FreeBoardModel10getSeaTalkEv>:
}
bool FreeBoardModel::getSeaTalk(){
	return this->config.seaTalk;
    5bd8:	8c 55       	subi	r24, 0x5C	; 92
    5bda:	9f 4f       	sbci	r25, 0xFF	; 255
}
    5bdc:	fc 01       	movw	r30, r24
    5bde:	80 81       	ld	r24, Z
    5be0:	08 95       	ret

00005be2 <_ZN14FreeBoardModel10setSeaTalkEb>:
void FreeBoardModel::setSeaTalk(bool seaTalk){
	this->config.seaTalk=seaTalk;
    5be2:	8c 55       	subi	r24, 0x5C	; 92
    5be4:	9f 4f       	sbci	r25, 0xFF	; 255
    5be6:	fc 01       	movw	r30, r24
    5be8:	60 83       	st	Z, r22
    5bea:	08 95       	ret

00005bec <_Z9calculatev>:
 * Timer interrupt driven method to do time sensitive calculations
 * The calc flag causes the main loop to execute other less sensitive calls.
 */
void calculate() {
	//we create 100ms pings here
	execute = true;
    5bec:	81 e0       	ldi	r24, 0x01	; 1
    5bee:	80 93 14 11 	sts	0x1114, r24
	//we record the ping count out to 2 secs
	interval++;
    5bf2:	80 91 12 11 	lds	r24, 0x1112
    5bf6:	90 91 13 11 	lds	r25, 0x1113
    5bfa:	01 96       	adiw	r24, 0x01	; 1
    5bfc:	90 93 13 11 	sts	0x1113, r25
    5c00:	80 93 12 11 	sts	0x1112, r24
	interval = interval % 20;
    5c04:	80 91 12 11 	lds	r24, 0x1112
    5c08:	90 91 13 11 	lds	r25, 0x1113
    5c0c:	64 e1       	ldi	r22, 0x14	; 20
    5c0e:	70 e0       	ldi	r23, 0x00	; 0
    5c10:	0e 94 86 43 	call	0x870c	; 0x870c <__divmodhi4>
    5c14:	90 93 13 11 	sts	0x1113, r25
    5c18:	80 93 12 11 	sts	0x1112, r24
    5c1c:	08 95       	ret

00005c1e <_Z7readWDDv>:
	wind.readWindDataSpeed();
}

void readWDD() {
	//intCnt++;
	wind.readWindDataDir();
    5c1e:	8f e7       	ldi	r24, 0x7F	; 127
    5c20:	9a e0       	ldi	r25, 0x0A	; 10
    5c22:	0c 94 2e 39 	jmp	0x725c	; 0x725c <_ZN4Wind15readWindDataDirEv>

00005c26 <_Z7readWDSv>:
	interval = interval % 20;
}

void readWDS() {
	//intCnt++;
	wind.readWindDataSpeed();
    5c26:	8f e7       	ldi	r24, 0x7F	; 127
    5c28:	9a e0       	ldi	r25, 0x0A	; 10
    5c2a:	0c 94 e8 38 	jmp	0x71d0	; 0x71d0 <_ZN4Wind17readWindDataSpeedEv>

00005c2e <setup>:
boolean inputSerial2Complete = false; // whether the string is complete
boolean inputSerial3Complete = false; // whether the string is complete

void setup() {

	model.readConfig();
    5c2e:	8b e6       	ldi	r24, 0x6B	; 107
    5c30:	90 e1       	ldi	r25, 0x10	; 16
    5c32:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <_ZN14FreeBoardModel10readConfigEv>
	inputSerial.reserve(40);
    5c36:	68 e2       	ldi	r22, 0x28	; 40
    5c38:	70 e0       	ldi	r23, 0x00	; 0
    5c3a:	8a e0       	ldi	r24, 0x0A	; 10
    5c3c:	9a e0       	ldi	r25, 0x0A	; 10
    5c3e:	0e 94 ce 0b 	call	0x179c	; 0x179c <_ZN6String7reserveEj>
	// initialize  serial ports:
	Serial.begin(model.getSerialBaud(), SERIAL_8N1);
    5c42:	8b e6       	ldi	r24, 0x6B	; 107
    5c44:	90 e1       	ldi	r25, 0x10	; 16
    5c46:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <_ZN14FreeBoardModel13getSerialBaudEv>
    5c4a:	ac 01       	movw	r20, r24
    5c4c:	66 27       	eor	r22, r22
    5c4e:	57 fd       	sbrc	r21, 7
    5c50:	60 95       	com	r22
    5c52:	76 2f       	mov	r23, r22
    5c54:	26 e0       	ldi	r18, 0x06	; 6
    5c56:	8a ed       	ldi	r24, 0xDA	; 218
    5c58:	96 e0       	ldi	r25, 0x06	; 6
    5c5a:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN14HardwareSerial5beginEmh>
	if (DEBUG) Serial.println("Initializing..");
    5c5e:	6f ea       	ldi	r22, 0xAF	; 175
    5c60:	72 e0       	ldi	r23, 0x02	; 2
    5c62:	8a ed       	ldi	r24, 0xDA	; 218
    5c64:	96 e0       	ldi	r25, 0x06	; 6
    5c66:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>

	//start gps on serial1, autobaud
	if (DEBUG) Serial.println("Start gps..");
    5c6a:	6e eb       	ldi	r22, 0xBE	; 190
    5c6c:	72 e0       	ldi	r23, 0x02	; 2
    5c6e:	8a ed       	ldi	r24, 0xDA	; 218
    5c70:	96 e0       	ldi	r25, 0x06	; 6
    5c72:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	gps.setupGps();
    5c76:	89 e7       	ldi	r24, 0x79	; 121
    5c78:	9a e0       	ldi	r25, 0x0A	; 10
    5c7a:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <_ZN3Gps8setupGpsEv>
	Serial1.begin(model.getSerialBaud1());
    5c7e:	8b e6       	ldi	r24, 0x6B	; 107
    5c80:	90 e1       	ldi	r25, 0x10	; 16
    5c82:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    5c86:	ac 01       	movw	r20, r24
    5c88:	66 27       	eor	r22, r22
    5c8a:	57 fd       	sbrc	r21, 7
    5c8c:	60 95       	com	r22
    5c8e:	76 2f       	mov	r23, r22
    5c90:	88 eb       	ldi	r24, 0xB8	; 184
    5c92:	96 e0       	ldi	r25, 0x06	; 6
    5c94:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN14HardwareSerial5beginEm>

	if (DEBUG) Serial.println("Start seatalk - serial2..");
    5c98:	6a ec       	ldi	r22, 0xCA	; 202
    5c9a:	72 e0       	ldi	r23, 0x02	; 2
    5c9c:	8a ed       	ldi	r24, 0xDA	; 218
    5c9e:	96 e0       	ldi	r25, 0x06	; 6
    5ca0:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	if(model.getSeaTalk()){
    5ca4:	8b e6       	ldi	r24, 0x6B	; 107
    5ca6:	90 e1       	ldi	r25, 0x10	; 16
    5ca8:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <_ZN14FreeBoardModel10getSeaTalkEv>
    5cac:	88 23       	and	r24, r24
    5cae:	31 f0       	breq	.+12     	; 0x5cbc <setup+0x8e>
		Serial2.begin(4800, SERIAL_9N1); //Seatalk interface
    5cb0:	27 e0       	ldi	r18, 0x07	; 7
    5cb2:	40 ec       	ldi	r20, 0xC0	; 192
    5cb4:	52 e1       	ldi	r21, 0x12	; 18
    5cb6:	60 e0       	ldi	r22, 0x00	; 0
    5cb8:	70 e0       	ldi	r23, 0x00	; 0
    5cba:	0a c0       	rjmp	.+20     	; 0x5cd0 <setup+0xa2>
	}else{
		Serial2.begin(model.getSerialBaud2(), SERIAL_8N1);
    5cbc:	8b e6       	ldi	r24, 0x6B	; 107
    5cbe:	90 e1       	ldi	r25, 0x10	; 16
    5cc0:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <_ZN14FreeBoardModel14getSerialBaud2Ev>
    5cc4:	ac 01       	movw	r20, r24
    5cc6:	66 27       	eor	r22, r22
    5cc8:	57 fd       	sbrc	r21, 7
    5cca:	60 95       	com	r22
    5ccc:	76 2f       	mov	r23, r22
    5cce:	26 e0       	ldi	r18, 0x06	; 6
    5cd0:	86 e9       	ldi	r24, 0x96	; 150
    5cd2:	96 e0       	ldi	r25, 0x06	; 6
    5cd4:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN14HardwareSerial5beginEmh>
	}

	if (DEBUG) Serial.println("Start nmea Rx - serial3..");
    5cd8:	64 ee       	ldi	r22, 0xE4	; 228
    5cda:	72 e0       	ldi	r23, 0x02	; 2
    5cdc:	8a ed       	ldi	r24, 0xDA	; 218
    5cde:	96 e0       	ldi	r25, 0x06	; 6
    5ce0:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	Serial3.begin(model.getSerialBaud3(), SERIAL_8N1); //talker2
    5ce4:	8b e6       	ldi	r24, 0x6B	; 107
    5ce6:	90 e1       	ldi	r25, 0x10	; 16
    5ce8:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <_ZN14FreeBoardModel14getSerialBaud3Ev>
    5cec:	ac 01       	movw	r20, r24
    5cee:	66 27       	eor	r22, r22
    5cf0:	57 fd       	sbrc	r21, 7
    5cf2:	60 95       	com	r22
    5cf4:	76 2f       	mov	r23, r22
    5cf6:	26 e0       	ldi	r18, 0x06	; 6
    5cf8:	84 e7       	ldi	r24, 0x74	; 116
    5cfa:	96 e0       	ldi	r25, 0x06	; 6
    5cfc:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN14HardwareSerial5beginEmh>

	if (DEBUG) Serial.println("Start nmea Tx..");
    5d00:	6e ef       	ldi	r22, 0xFE	; 254
    5d02:	72 e0       	ldi	r23, 0x02	; 2
    5d04:	8a ed       	ldi	r24, 0xDA	; 218
    5d06:	96 e0       	ldi	r25, 0x06	; 6
    5d08:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	pinMode(nmeaRxPin, INPUT);
    5d0c:	60 e0       	ldi	r22, 0x00	; 0
    5d0e:	84 e3       	ldi	r24, 0x34	; 52
    5d10:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	pinMode(nmeaTxPin, OUTPUT);
    5d14:	61 e0       	ldi	r22, 0x01	; 1
    5d16:	85 e3       	ldi	r24, 0x35	; 53
    5d18:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	nmea.begin(4800);
    5d1c:	40 ec       	ldi	r20, 0xC0	; 192
    5d1e:	52 e1       	ldi	r21, 0x12	; 18
    5d20:	60 e0       	ldi	r22, 0x00	; 0
    5d22:	70 e0       	ldi	r23, 0x00	; 0
    5d24:	8a e2       	ldi	r24, 0x2A	; 42
    5d26:	90 e1       	ldi	r25, 0x10	; 16
    5d28:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <_ZN10NmeaSerial5beginEl>

	//setup interrupts to windPins
	if (DEBUG) Serial.println("Start wind..");
    5d2c:	6e e0       	ldi	r22, 0x0E	; 14
    5d2e:	73 e0       	ldi	r23, 0x03	; 3
    5d30:	8a ed       	ldi	r24, 0xDA	; 218
    5d32:	96 e0       	ldi	r25, 0x06	; 6
    5d34:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	pinMode(windSpeedPin, INPUT);
    5d38:	60 e0       	ldi	r22, 0x00	; 0
    5d3a:	83 e0       	ldi	r24, 0x03	; 3
    5d3c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	attachInterrupt(windSpeedInterrupt, readWDS, CHANGE);
    5d40:	41 e0       	ldi	r20, 0x01	; 1
    5d42:	50 e0       	ldi	r21, 0x00	; 0
    5d44:	63 e1       	ldi	r22, 0x13	; 19
    5d46:	7e e2       	ldi	r23, 0x2E	; 46
    5d48:	81 e0       	ldi	r24, 0x01	; 1
    5d4a:	0e 94 6d 09 	call	0x12da	; 0x12da <attachInterrupt>
	pinMode(windDirPin, INPUT);
    5d4e:	60 e0       	ldi	r22, 0x00	; 0
    5d50:	82 e0       	ldi	r24, 0x02	; 2
    5d52:	0e 94 23 17 	call	0x2e46	; 0x2e46 <pinMode>
	attachInterrupt(windDirInterrupt, readWDD, CHANGE);
    5d56:	41 e0       	ldi	r20, 0x01	; 1
    5d58:	50 e0       	ldi	r21, 0x00	; 0
    5d5a:	6f e0       	ldi	r22, 0x0F	; 15
    5d5c:	7e e2       	ldi	r23, 0x2E	; 46
    5d5e:	80 e0       	ldi	r24, 0x00	; 0
    5d60:	0e 94 6d 09 	call	0x12da	; 0x12da <attachInterrupt>

//	//setup timers
	if (DEBUG) Serial.println("Start timer..");
    5d64:	6b e1       	ldi	r22, 0x1B	; 27
    5d66:	73 e0       	ldi	r23, 0x03	; 3
    5d68:	8a ed       	ldi	r24, 0xDA	; 218
    5d6a:	96 e0       	ldi	r25, 0x06	; 6
    5d6c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	FlexiTimer2::set(100, calculate); // 100ms period
    5d70:	46 ef       	ldi	r20, 0xF6	; 246
    5d72:	5d e2       	ldi	r21, 0x2D	; 45
    5d74:	64 e6       	ldi	r22, 0x64	; 100
    5d76:	70 e0       	ldi	r23, 0x00	; 0
    5d78:	80 e0       	ldi	r24, 0x00	; 0
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	0e 94 45 20 	call	0x408a	; 0x408a <_ZN11FlexiTimer23setEmPFvvE>
	FlexiTimer2::start();
    5d80:	0e 94 51 20 	call	0x40a2	; 0x40a2 <_ZN11FlexiTimer25startEv>
	//lcd.clearLcd();

	if (DEBUG) Serial.println("Setup complete..");
    5d84:	69 e2       	ldi	r22, 0x29	; 41
    5d86:	73 e0       	ldi	r23, 0x03	; 3
    5d88:	8a ed       	ldi	r24, 0xDA	; 218
    5d8a:	96 e0       	ldi	r25, 0x06	; 6
    5d8c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>

00005d90 <_Z12serialEvent1v>:

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5d90:	1f c0       	rjmp	.+62     	; 0x5dd0 <_Z12serialEvent1v+0x40>
		inputSerial1Complete = gps.decode(Serial1.read());
    5d92:	88 eb       	ldi	r24, 0xB8	; 184
    5d94:	96 e0       	ldi	r25, 0x06	; 6
    5d96:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial4readEv>
    5d9a:	68 2f       	mov	r22, r24
    5d9c:	89 e7       	ldi	r24, 0x79	; 121
    5d9e:	9a e0       	ldi	r25, 0x0A	; 10
    5da0:	0e 94 19 35 	call	0x6a32	; 0x6a32 <_ZN3Gps6decodeEh>
    5da4:	80 93 09 0a 	sts	0x0A09, r24
		// read from port 1 (GPS), send to port 0:
		if (inputSerial1Complete) {
    5da8:	88 23       	and	r24, r24
    5daa:	91 f0       	breq	.+36     	; 0x5dd0 <_Z12serialEvent1v+0x40>
			if (MUX) nmea.printNmea(gpsSource.sentence());
    5dac:	81 ec       	ldi	r24, 0xC1	; 193
    5dae:	9e e0       	ldi	r25, 0x0E	; 14
    5db0:	0e 94 4f 1c 	call	0x389e	; 0x389e <_ZN4NMEA8sentenceEv>
    5db4:	bc 01       	movw	r22, r24
    5db6:	8a e2       	ldi	r24, 0x2A	; 42
    5db8:	90 e1       	ldi	r25, 0x10	; 16
    5dba:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(gpsSource.sentence());
    5dbe:	81 ec       	ldi	r24, 0xC1	; 193
    5dc0:	9e e0       	ldi	r25, 0x0E	; 14
    5dc2:	0e 94 4f 1c 	call	0x389e	; 0x389e <_ZN4NMEA8sentenceEv>
    5dc6:	bc 01       	movw	r22, r24
    5dc8:	8a ed       	ldi	r24, 0xDA	; 218
    5dca:	96 e0       	ldi	r25, 0x06	; 6
    5dcc:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>

	}
}

void serialEvent1() {
	while (Serial1.available()) {
    5dd0:	88 eb       	ldi	r24, 0xB8	; 184
    5dd2:	96 e0       	ldi	r25, 0x06	; 6
    5dd4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
    5dd8:	89 2b       	or	r24, r25
    5dda:	d9 f6       	brne	.-74     	; 0x5d92 <_Z12serialEvent1v+0x2>
			Serial.println(gpsSource.sentence());
			//loop every sentence
			break;
		}
	}
}
    5ddc:	08 95       	ret

00005dde <_Z12serialEvent2v>:

void serialEvent2() {
	while (Serial2.available()) {
    5dde:	86 e9       	ldi	r24, 0x96	; 150
    5de0:	96 e0       	ldi	r25, 0x06	; 6
    5de2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
    5de6:	89 2b       	or	r24, r25
    5de8:	79 f1       	breq	.+94     	; 0x5e48 <_Z12serialEvent2v+0x6a>
		if(model.getSeaTalk()){
    5dea:	8b e6       	ldi	r24, 0x6B	; 107
    5dec:	90 e1       	ldi	r25, 0x10	; 16
    5dee:	0e 94 ec 2d 	call	0x5bd8	; 0x5bd8 <_ZN14FreeBoardModel10getSeaTalkEv>
    5df2:	88 23       	and	r24, r24
    5df4:	51 f0       	breq	.+20     	; 0x5e0a <_Z12serialEvent2v+0x2c>
			seatalk.processSeaTalkByte(Serial2.read());
    5df6:	86 e9       	ldi	r24, 0x96	; 150
    5df8:	96 e0       	ldi	r25, 0x06	; 6
    5dfa:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial4readEv>
    5dfe:	68 2f       	mov	r22, r24
    5e00:	81 e1       	ldi	r24, 0x11	; 17
    5e02:	9a e0       	ldi	r25, 0x0A	; 10
    5e04:	0e 94 99 37 	call	0x6f32	; 0x6f32 <_ZN7Seatalk18processSeaTalkByteEh>
    5e08:	ea cf       	rjmp	.-44     	; 0x5dde <_Z12serialEvent2v>
		}else{
			inputSerial2Complete = talker2.decode(Serial2.read());
    5e0a:	86 e9       	ldi	r24, 0x96	; 150
    5e0c:	96 e0       	ldi	r25, 0x06	; 6
    5e0e:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial4readEv>
    5e12:	68 2f       	mov	r22, r24
    5e14:	8f ee       	ldi	r24, 0xEF	; 239
    5e16:	9b e0       	ldi	r25, 0x0B	; 11
    5e18:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN4NMEA6decodeEc>
    5e1c:	80 93 08 0a 	sts	0x0A08, r24
			if (inputSerial2Complete) {
    5e20:	88 23       	and	r24, r24
    5e22:	e9 f2       	breq	.-70     	; 0x5dde <_Z12serialEvent2v>
				if (MUX) nmea.printNmea(talker2.sentence());
    5e24:	8f ee       	ldi	r24, 0xEF	; 239
    5e26:	9b e0       	ldi	r25, 0x0B	; 11
    5e28:	0e 94 4f 1c 	call	0x389e	; 0x389e <_ZN4NMEA8sentenceEv>
    5e2c:	bc 01       	movw	r22, r24
    5e2e:	8a e2       	ldi	r24, 0x2A	; 42
    5e30:	90 e1       	ldi	r25, 0x10	; 16
    5e32:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <_ZN10NmeaSerial9printNmeaEPc>
				Serial.println(talker2.sentence());
    5e36:	8f ee       	ldi	r24, 0xEF	; 239
    5e38:	9b e0       	ldi	r25, 0x0B	; 11
    5e3a:	0e 94 4f 1c 	call	0x389e	; 0x389e <_ZN4NMEA8sentenceEv>
    5e3e:	bc 01       	movw	r22, r24
    5e40:	8a ed       	ldi	r24, 0xDA	; 218
    5e42:	96 e0       	ldi	r25, 0x06	; 6
    5e44:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
    5e48:	08 95       	ret

00005e4a <_Z12serialEvent3v>:
		}
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    5e4a:	1f c0       	rjmp	.+62     	; 0x5e8a <_Z12serialEvent3v+0x40>
		inputSerial3Complete = talker3.decode(Serial3.read());
    5e4c:	84 e7       	ldi	r24, 0x74	; 116
    5e4e:	96 e0       	ldi	r25, 0x06	; 6
    5e50:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial4readEv>
    5e54:	68 2f       	mov	r22, r24
    5e56:	86 e8       	ldi	r24, 0x86	; 134
    5e58:	9a e0       	ldi	r25, 0x0A	; 10
    5e5a:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN4NMEA6decodeEc>
    5e5e:	80 93 07 0a 	sts	0x0A07, r24
		if (inputSerial3Complete) {
    5e62:	88 23       	and	r24, r24
    5e64:	91 f0       	breq	.+36     	; 0x5e8a <_Z12serialEvent3v+0x40>
			if (MUX) nmea.printNmea(talker3.sentence());
    5e66:	86 e8       	ldi	r24, 0x86	; 134
    5e68:	9a e0       	ldi	r25, 0x0A	; 10
    5e6a:	0e 94 4f 1c 	call	0x389e	; 0x389e <_ZN4NMEA8sentenceEv>
    5e6e:	bc 01       	movw	r22, r24
    5e70:	8a e2       	ldi	r24, 0x2A	; 42
    5e72:	90 e1       	ldi	r25, 0x10	; 16
    5e74:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <_ZN10NmeaSerial9printNmeaEPc>
			Serial.println(talker3.sentence());
    5e78:	86 e8       	ldi	r24, 0x86	; 134
    5e7a:	9a e0       	ldi	r25, 0x0A	; 10
    5e7c:	0e 94 4f 1c 	call	0x389e	; 0x389e <_ZN4NMEA8sentenceEv>
    5e80:	bc 01       	movw	r22, r24
    5e82:	8a ed       	ldi	r24, 0xDA	; 218
    5e84:	96 e0       	ldi	r25, 0x06	; 6
    5e86:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		}
	}
}

void serialEvent3() {
	while (Serial3.available()) {
    5e8a:	84 e7       	ldi	r24, 0x74	; 116
    5e8c:	96 e0       	ldi	r25, 0x06	; 6
    5e8e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
    5e92:	89 2b       	or	r24, r25
    5e94:	d9 f6       	brne	.-74     	; 0x5e4c <_Z12serialEvent3v+0x2>
			Serial.println(talker3.sentence());
			//loop every sentence
			break;
		}
	}
}
    5e96:	08 95       	ret

00005e98 <loop>:

void loop() {
    5e98:	cf 93       	push	r28
    5e9a:	df 93       	push	r29
    5e9c:	cd b7       	in	r28, 0x3d	; 61
    5e9e:	de b7       	in	r29, 0x3e	; 62
    5ea0:	a2 97       	sbiw	r28, 0x22	; 34
    5ea2:	0f b6       	in	r0, 0x3f	; 63
    5ea4:	f8 94       	cli
    5ea6:	de bf       	out	0x3e, r29	; 62
    5ea8:	0f be       	out	0x3f, r0	; 63
    5eaa:	cd bf       	out	0x3d, r28	; 61

	//if (DEBUG)
	//Serial.println("Looping..");

	if (execute) {
    5eac:	80 91 14 11 	lds	r24, 0x1114
    5eb0:	88 23       	and	r24, r24
    5eb2:	09 f4       	brne	.+2      	; 0x5eb6 <loop+0x1e>
    5eb4:	a0 c0       	rjmp	.+320    	; 0x5ff6 <loop+0x15e>
		//timer ping
		//do these every 100ms
		autopilot.calcAutoPilot();
    5eb6:	8f e2       	ldi	r24, 0x2F	; 47
    5eb8:	9a e0       	ldi	r25, 0x0A	; 10
    5eba:	0e 94 48 27 	call	0x4e90	; 0x4e90 <_ZN9Autopilot13calcAutoPilotEv>

		if (interval % 2 == 0) {
    5ebe:	80 91 12 11 	lds	r24, 0x1112
    5ec2:	90 91 13 11 	lds	r25, 0x1113
    5ec6:	80 fd       	sbrc	r24, 0
    5ec8:	04 c0       	rjmp	.+8      	; 0x5ed2 <loop+0x3a>
			//do every 200ms
			wind.calcWindSpeedAndDir();
    5eca:	8f e7       	ldi	r24, 0x7F	; 127
    5ecc:	9a e0       	ldi	r25, 0x0A	; 10
    5ece:	0e 94 74 39 	call	0x72e8	; 0x72e8 <_ZN4Wind19calcWindSpeedAndDirEv>
		}
		if (interval % 5 == 0) {
    5ed2:	80 91 12 11 	lds	r24, 0x1112
    5ed6:	90 91 13 11 	lds	r25, 0x1113
    5eda:	65 e0       	ldi	r22, 0x05	; 5
    5edc:	70 e0       	ldi	r23, 0x00	; 0
    5ede:	0e 94 86 43 	call	0x870c	; 0x870c <__divmodhi4>
    5ee2:	89 2b       	or	r24, r25
    5ee4:	09 f0       	breq	.+2      	; 0x5ee8 <loop+0x50>
    5ee6:	73 c0       	rjmp	.+230    	; 0x5fce <loop+0x136>
			//do every 500ms
			wind.calcWindData();
    5ee8:	8f e7       	ldi	r24, 0x7F	; 127
    5eea:	9a e0       	ldi	r25, 0x0A	; 10
    5eec:	0e 94 13 3c 	call	0x7826	; 0x7826 <_ZN4Wind12calcWindDataEv>
			nmea.printWindNmea();
    5ef0:	8a e2       	ldi	r24, 0x2A	; 42
    5ef2:	90 e1       	ldi	r25, 0x10	; 16
    5ef4:	0e 94 11 37 	call	0x6e22	; 0x6e22 <_ZN10NmeaSerial13printWindNmeaEv>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    5ef8:	80 91 dc 06 	lds	r24, 0x06DC
    5efc:	90 91 dd 06 	lds	r25, 0x06DD
    5f00:	9c 83       	std	Y+4, r25	; 0x04
    5f02:	8b 83       	std	Y+3, r24	; 0x03
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
    5f04:	80 91 de 06 	lds	r24, 0x06DE
    5f08:	90 91 df 06 	lds	r25, 0x06DF
    5f0c:	a0 91 e0 06 	lds	r26, 0x06E0
    5f10:	b0 91 e1 06 	lds	r27, 0x06E1
    5f14:	8d 83       	std	Y+5, r24	; 0x05
    5f16:	9e 83       	std	Y+6, r25	; 0x06
    5f18:	af 83       	std	Y+7, r26	; 0x07
    5f1a:	b8 87       	std	Y+8, r27	; 0x08
    5f1c:	80 91 e2 06 	lds	r24, 0x06E2
    5f20:	90 91 e3 06 	lds	r25, 0x06E3
    5f24:	a0 91 e4 06 	lds	r26, 0x06E4
    5f28:	b0 91 e5 06 	lds	r27, 0x06E5
    5f2c:	89 87       	std	Y+9, r24	; 0x09
    5f2e:	9a 87       	std	Y+10, r25	; 0x0a
    5f30:	ab 87       	std	Y+11, r26	; 0x0b
    5f32:	bc 87       	std	Y+12, r27	; 0x0c

#include "Stream.h"

struct ring_buffer;

class HardwareSerial : public Stream
    5f34:	8a e5       	ldi	r24, 0x5A	; 90
    5f36:	96 e0       	ldi	r25, 0x06	; 6
    5f38:	9a 83       	std	Y+2, r25	; 0x02
    5f3a:	89 83       	std	Y+1, r24	; 0x01
    5f3c:	80 91 e6 06 	lds	r24, 0x06E6
    5f40:	90 91 e7 06 	lds	r25, 0x06E7
    5f44:	9e 87       	std	Y+14, r25	; 0x0e
    5f46:	8d 87       	std	Y+13, r24	; 0x0d
    5f48:	80 91 e8 06 	lds	r24, 0x06E8
    5f4c:	90 91 e9 06 	lds	r25, 0x06E9
    5f50:	98 8b       	std	Y+16, r25	; 0x10
    5f52:	8f 87       	std	Y+15, r24	; 0x0f
    5f54:	80 91 ea 06 	lds	r24, 0x06EA
    5f58:	90 91 eb 06 	lds	r25, 0x06EB
    5f5c:	9a 8b       	std	Y+18, r25	; 0x12
    5f5e:	89 8b       	std	Y+17, r24	; 0x11
    5f60:	80 91 ec 06 	lds	r24, 0x06EC
    5f64:	90 91 ed 06 	lds	r25, 0x06ED
    5f68:	9c 8b       	std	Y+20, r25	; 0x14
    5f6a:	8b 8b       	std	Y+19, r24	; 0x13
    5f6c:	80 91 ee 06 	lds	r24, 0x06EE
    5f70:	90 91 ef 06 	lds	r25, 0x06EF
    5f74:	9e 8b       	std	Y+22, r25	; 0x16
    5f76:	8d 8b       	std	Y+21, r24	; 0x15
    5f78:	80 91 f0 06 	lds	r24, 0x06F0
    5f7c:	90 91 f1 06 	lds	r25, 0x06F1
    5f80:	98 8f       	std	Y+24, r25	; 0x18
    5f82:	8f 8b       	std	Y+23, r24	; 0x17
    5f84:	80 91 f2 06 	lds	r24, 0x06F2
    5f88:	90 91 f3 06 	lds	r25, 0x06F3
    5f8c:	9a 8f       	std	Y+26, r25	; 0x1a
    5f8e:	89 8f       	std	Y+25, r24	; 0x19
    5f90:	80 91 f4 06 	lds	r24, 0x06F4
    5f94:	90 91 f5 06 	lds	r25, 0x06F5
    5f98:	9c 8f       	std	Y+28, r25	; 0x1c
    5f9a:	8b 8f       	std	Y+27, r24	; 0x1b
    5f9c:	80 91 f6 06 	lds	r24, 0x06F6
    5fa0:	8d 8f       	std	Y+29, r24	; 0x1d
    5fa2:	80 91 f7 06 	lds	r24, 0x06F7
    5fa6:	8e 8f       	std	Y+30, r24	; 0x1e
    5fa8:	80 91 f8 06 	lds	r24, 0x06F8
    5fac:	8f 8f       	std	Y+31, r24	; 0x1f
    5fae:	80 91 f9 06 	lds	r24, 0x06F9
    5fb2:	88 a3       	std	Y+32, r24	; 0x20
    5fb4:	80 91 fa 06 	lds	r24, 0x06FA
    5fb8:	89 a3       	std	Y+33, r24	; 0x21
    5fba:	80 91 fb 06 	lds	r24, 0x06FB
    5fbe:	8a a3       	std	Y+34, r24	; 0x22
			//fire any alarms
			//alarm.checkAlarms();
			model.writeSimple(Serial);
    5fc0:	be 01       	movw	r22, r28
    5fc2:	6f 5f       	subi	r22, 0xFF	; 255
    5fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fc6:	8b e6       	ldi	r24, 0x6B	; 107
    5fc8:	90 e1       	ldi	r25, 0x10	; 16
    5fca:	0e 94 04 2b 	call	0x5608	; 0x5608 <_ZN14FreeBoardModel11writeSimpleE14HardwareSerial>
		}
		if (interval % 10 == 0) {
    5fce:	80 91 12 11 	lds	r24, 0x1112
    5fd2:	90 91 13 11 	lds	r25, 0x1113
    5fd6:	6a e0       	ldi	r22, 0x0A	; 10
    5fd8:	70 e0       	ldi	r23, 0x00	; 0
    5fda:	0e 94 86 43 	call	0x870c	; 0x870c <__divmodhi4>
    5fde:	89 2b       	or	r24, r25
    5fe0:	41 f4       	brne	.+16     	; 0x5ff2 <loop+0x15a>
			//do every 1000ms
			anchor.checkAnchor();
    5fe2:	8b e2       	ldi	r24, 0x2B	; 43
    5fe4:	9a e0       	ldi	r25, 0x0A	; 10
    5fe6:	0e 94 89 25 	call	0x4b12	; 0x4b12 <_ZN6Anchor11checkAnchorEv>
			alarm.checkWindAlarm();
    5fea:	81 e8       	ldi	r24, 0x81	; 129
    5fec:	9a e0       	ldi	r25, 0x0A	; 10
    5fee:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <_ZN5Alarm14checkWindAlarmEv>
		}
		//if (interval % 20 == 0) {
		//do every 2000ms
		//}

		execute = false;
    5ff2:	10 92 14 11 	sts	0x1114, r1
	 s.append(", stack: ");
	 s.append((int)stackptr);
	 if(DEBUG)Serial.println(s);
	 */

}
    5ff6:	a2 96       	adiw	r28, 0x22	; 34
    5ff8:	0f b6       	in	r0, 0x3f	; 63
    5ffa:	f8 94       	cli
    5ffc:	de bf       	out	0x3e, r29	; 62
    5ffe:	0f be       	out	0x3f, r0	; 63
    6000:	cd bf       	out	0x3d, r28	; 61
    6002:	df 91       	pop	r29
    6004:	cf 91       	pop	r28
    6006:	08 95       	ret

00006008 <_Z7processPcc>:

void process(char * s, char parser) {
    6008:	6f 92       	push	r6
    600a:	7f 92       	push	r7
    600c:	8f 92       	push	r8
    600e:	9f 92       	push	r9
    6010:	af 92       	push	r10
    6012:	bf 92       	push	r11
    6014:	cf 92       	push	r12
    6016:	df 92       	push	r13
    6018:	ef 92       	push	r14
    601a:	ff 92       	push	r15
    601c:	0f 93       	push	r16
    601e:	1f 93       	push	r17
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
    6024:	00 d0       	rcall	.+0      	; 0x6026 <_Z7processPcc+0x1e>
    6026:	1f 92       	push	r1
    6028:	1f 92       	push	r1
    602a:	cd b7       	in	r28, 0x3d	; 61
    602c:	de b7       	in	r29, 0x3e	; 62
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    602e:	8d b6       	in	r8, 0x3d	; 61
    6030:	9e b6       	in	r9, 0x3e	; 62
}

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
    6032:	66 ee       	ldi	r22, 0xE6	; 230
    6034:	74 e0       	ldi	r23, 0x04	; 4
    6036:	d7 c1       	rjmp	.+942    	; 0x63e6 <_Z7processPcc+0x3de>
    6038:	bd b6       	in	r11, 0x3d	; 61
    603a:	ae b6       	in	r10, 0x3e	; 62
		char key[5];
		int l = strlen(cmd);
		bool save=false;
		if (cmd[0] == '#') {
			//
			strncpy(key, cmd, 4);
    603c:	44 e0       	ldi	r20, 0x04	; 4
    603e:	50 e0       	ldi	r21, 0x00	; 0
    6040:	b7 01       	movw	r22, r14
    6042:	ce 01       	movw	r24, r28
    6044:	01 96       	adiw	r24, 0x01	; 1
    6046:	0e 94 a5 44 	call	0x894a	; 0x894a <strncpy>
			key[4] = '\0';
    604a:	1d 82       	std	Y+5, r1	; 0x05
			char val[l - 4];
    604c:	68 01       	movw	r12, r16
    604e:	85 e0       	ldi	r24, 0x05	; 5
    6050:	c8 1a       	sub	r12, r24
    6052:	d1 08       	sbc	r13, r1
    6054:	04 50       	subi	r16, 0x04	; 4
    6056:	11 09       	sbc	r17, r1
    6058:	ad b7       	in	r26, 0x3d	; 61
    605a:	be b7       	in	r27, 0x3e	; 62
    605c:	a0 1b       	sub	r26, r16
    605e:	b1 0b       	sbc	r27, r17
    6060:	0f b6       	in	r0, 0x3f	; 63
    6062:	f8 94       	cli
    6064:	be bf       	out	0x3e, r27	; 62
    6066:	0f be       	out	0x3f, r0	; 63
    6068:	ad bf       	out	0x3d, r26	; 61
    606a:	0d b7       	in	r16, 0x3d	; 61
    606c:	1e b7       	in	r17, 0x3e	; 62
    606e:	0f 5f       	subi	r16, 0xFF	; 255
    6070:	1f 4f       	sbci	r17, 0xFF	; 255
			memcpy(val, &cmd[5], l - 5);
    6072:	38 01       	movw	r6, r16
    6074:	b5 e0       	ldi	r27, 0x05	; 5
    6076:	eb 0e       	add	r14, r27
    6078:	f1 1c       	adc	r15, r1
    607a:	a6 01       	movw	r20, r12
    607c:	b7 01       	movw	r22, r14
    607e:	c8 01       	movw	r24, r16
    6080:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
			val[l - 5] = '\0';
    6084:	f8 01       	movw	r30, r16
    6086:	ec 0d       	add	r30, r12
    6088:	fd 1d       	adc	r31, r13
    608a:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);

			//anchor
			if (strcmp(key, ANCHOR_ALARM_STATE) == 0) {
    608c:	6a e3       	ldi	r22, 0x3A	; 58
    608e:	73 e0       	ldi	r23, 0x03	; 3
    6090:	ce 01       	movw	r24, r28
    6092:	01 96       	adiw	r24, 0x01	; 1
    6094:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    6098:	00 97       	sbiw	r24, 0x00	; 0
    609a:	b1 f4       	brne	.+44     	; 0x60c8 <_Z7processPcc+0xc0>
				//if (DEBUG) Serial.print("AA Entered..");
				model.setAnchorAlarmOn(atoi(val));
    609c:	c8 01       	movw	r24, r16
    609e:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    60a2:	61 e0       	ldi	r22, 0x01	; 1
    60a4:	89 2b       	or	r24, r25
    60a6:	09 f4       	brne	.+2      	; 0x60aa <_Z7processPcc+0xa2>
    60a8:	60 e0       	ldi	r22, 0x00	; 0
    60aa:	8b e6       	ldi	r24, 0x6B	; 107
    60ac:	90 e1       	ldi	r25, 0x10	; 16
    60ae:	0e 94 87 2c 	call	0x590e	; 0x590e <_ZN14FreeBoardModel16setAnchorAlarmOnEb>
				if (atoi(val) == 1) {
    60b2:	c3 01       	movw	r24, r6
    60b4:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    60b8:	01 97       	sbiw	r24, 0x01	; 1
    60ba:	09 f0       	breq	.+2      	; 0x60be <_Z7processPcc+0xb6>
    60bc:	29 c1       	rjmp	.+594    	; 0x6310 <_Z7processPcc+0x308>
					anchor.setAnchorPoint();
    60be:	8b e2       	ldi	r24, 0x2B	; 43
    60c0:	9a e0       	ldi	r25, 0x0A	; 10
    60c2:	0e 94 82 26 	call	0x4d04	; 0x4d04 <_ZN6Anchor14setAnchorPointEv>
    60c6:	24 c1       	rjmp	.+584    	; 0x6310 <_Z7processPcc+0x308>
				}
			} else if (strcmp(key, ANCHOR_ALARM_ADJUST) == 0) {
    60c8:	6f e3       	ldi	r22, 0x3F	; 63
    60ca:	73 e0       	ldi	r23, 0x03	; 3
    60cc:	ce 01       	movw	r24, r28
    60ce:	01 96       	adiw	r24, 0x01	; 1
    60d0:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    60d4:	00 97       	sbiw	r24, 0x00	; 0
    60d6:	b1 f4       	brne	.+44     	; 0x6104 <_Z7processPcc+0xfc>
				model.setAnchorRadius(model.getAnchorRadius() + atof(val));
    60d8:	8b e6       	ldi	r24, 0x6B	; 107
    60da:	90 e1       	ldi	r25, 0x10	; 16
    60dc:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <_ZN14FreeBoardModel15getAnchorRadiusEv>
    60e0:	6b 01       	movw	r12, r22
    60e2:	7c 01       	movw	r14, r24
    60e4:	c8 01       	movw	r24, r16
    60e6:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <atof>
    60ea:	9b 01       	movw	r18, r22
    60ec:	ac 01       	movw	r20, r24
    60ee:	c7 01       	movw	r24, r14
    60f0:	b6 01       	movw	r22, r12
    60f2:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    60f6:	ab 01       	movw	r20, r22
    60f8:	bc 01       	movw	r22, r24
    60fa:	8b e6       	ldi	r24, 0x6B	; 107
    60fc:	90 e1       	ldi	r25, 0x10	; 16
    60fe:	0e 94 b7 2c 	call	0x596e	; 0x596e <_ZN14FreeBoardModel15setAnchorRadiusEf>
    6102:	06 c1       	rjmp	.+524    	; 0x6310 <_Z7processPcc+0x308>
			} else if (strcmp(key, ANCHOR_ALARM_LAT) == 0) {
    6104:	64 e4       	ldi	r22, 0x44	; 68
    6106:	73 e0       	ldi	r23, 0x03	; 3
    6108:	ce 01       	movw	r24, r28
    610a:	01 96       	adiw	r24, 0x01	; 1
    610c:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    6110:	00 97       	sbiw	r24, 0x00	; 0
    6112:	51 f4       	brne	.+20     	; 0x6128 <_Z7processPcc+0x120>
				model.setAnchorLat(atof(val));
    6114:	c8 01       	movw	r24, r16
    6116:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <atof>
    611a:	ab 01       	movw	r20, r22
    611c:	bc 01       	movw	r22, r24
    611e:	8b e6       	ldi	r24, 0x6B	; 107
    6120:	90 e1       	ldi	r25, 0x10	; 16
    6122:	0e 94 9b 2c 	call	0x5936	; 0x5936 <_ZN14FreeBoardModel12setAnchorLatEf>
    6126:	f4 c0       	rjmp	.+488    	; 0x6310 <_Z7processPcc+0x308>
			} else if (strcmp(key, ANCHOR_ALARM_LON) == 0) {
    6128:	69 e4       	ldi	r22, 0x49	; 73
    612a:	73 e0       	ldi	r23, 0x03	; 3
    612c:	ce 01       	movw	r24, r28
    612e:	01 96       	adiw	r24, 0x01	; 1
    6130:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    6134:	00 97       	sbiw	r24, 0x00	; 0
    6136:	51 f4       	brne	.+20     	; 0x614c <_Z7processPcc+0x144>
				model.setAnchorLon(atof(val));
    6138:	c8 01       	movw	r24, r16
    613a:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <atof>
    613e:	ab 01       	movw	r20, r22
    6140:	bc 01       	movw	r22, r24
    6142:	8b e6       	ldi	r24, 0x6B	; 107
    6144:	90 e1       	ldi	r25, 0x10	; 16
    6146:	0e 94 a3 2c 	call	0x5946	; 0x5946 <_ZN14FreeBoardModel12setAnchorLonEf>
    614a:	e2 c0       	rjmp	.+452    	; 0x6310 <_Z7processPcc+0x308>
			}
			//autopliot
			else if (strcmp(key, AUTOPILOT_STATE) == 0) {
    614c:	6e e4       	ldi	r22, 0x4E	; 78
    614e:	73 e0       	ldi	r23, 0x03	; 3
    6150:	ce 01       	movw	r24, r28
    6152:	01 96       	adiw	r24, 0x01	; 1
    6154:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    6158:	00 97       	sbiw	r24, 0x00	; 0
    615a:	61 f4       	brne	.+24     	; 0x6174 <_Z7processPcc+0x16c>
				//if (DEBUG) Serial.print("AP Entered..");
				//if (DEBUG) Serial.println(val);
				//this is potentailly dangerous, since we dont want the boat diving off on an old target heading.
				//in model we ALWAYS reset to current magnetic or wind heading at this point
				model.setAutopilotOn(atoi(val));
    615c:	c8 01       	movw	r24, r16
    615e:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    6162:	61 e0       	ldi	r22, 0x01	; 1
    6164:	89 2b       	or	r24, r25
    6166:	09 f4       	brne	.+2      	; 0x616a <_Z7processPcc+0x162>
    6168:	60 e0       	ldi	r22, 0x00	; 0
    616a:	8b e6       	ldi	r24, 0x6B	; 107
    616c:	90 e1       	ldi	r25, 0x10	; 16
    616e:	0e 94 98 2d 	call	0x5b30	; 0x5b30 <_ZN14FreeBoardModel14setAutopilotOnEb>
    6172:	ce c0       	rjmp	.+412    	; 0x6310 <_Z7processPcc+0x308>
			} else if (strcmp(key, AUTOPILOT_ADJUST) == 0) {
    6174:	63 e5       	ldi	r22, 0x53	; 83
    6176:	73 e0       	ldi	r23, 0x03	; 3
    6178:	ce 01       	movw	r24, r28
    617a:	01 96       	adiw	r24, 0x01	; 1
    617c:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    6180:	00 97       	sbiw	r24, 0x00	; 0
    6182:	c1 f4       	brne	.+48     	; 0x61b4 <_Z7processPcc+0x1ac>
				model.setAutopilotTargetHeading(model.getAutopilotTargetHeading() + atol(val));
    6184:	8b e6       	ldi	r24, 0x6B	; 107
    6186:	90 e1       	ldi	r25, 0x10	; 16
    6188:	0e 94 98 2a 	call	0x5530	; 0x5530 <_ZN14FreeBoardModel25getAutopilotTargetHeadingEv>
    618c:	6b 01       	movw	r12, r22
    618e:	7c 01       	movw	r14, r24
    6190:	c8 01       	movw	r24, r16
    6192:	0e 94 1e 44 	call	0x883c	; 0x883c <atol>
    6196:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    619a:	9b 01       	movw	r18, r22
    619c:	ac 01       	movw	r20, r24
    619e:	c7 01       	movw	r24, r14
    61a0:	b6 01       	movw	r22, r12
    61a2:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    61a6:	ab 01       	movw	r20, r22
    61a8:	bc 01       	movw	r22, r24
    61aa:	8b e6       	ldi	r24, 0x6B	; 107
    61ac:	90 e1       	ldi	r25, 0x10	; 16
    61ae:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <_ZN14FreeBoardModel25setAutopilotTargetHeadingEd>
    61b2:	ae c0       	rjmp	.+348    	; 0x6310 <_Z7processPcc+0x308>
			} else if (strcmp(key, AUTOPILOT_SOURCE) == 0) {
    61b4:	68 e5       	ldi	r22, 0x58	; 88
    61b6:	73 e0       	ldi	r23, 0x03	; 3
    61b8:	ce 01       	movw	r24, r28
    61ba:	01 96       	adiw	r24, 0x01	; 1
    61bc:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    61c0:	00 97       	sbiw	r24, 0x00	; 0
    61c2:	39 f4       	brne	.+14     	; 0x61d2 <_Z7processPcc+0x1ca>
				model.setAutopilotReference(val[0]);
    61c4:	f8 01       	movw	r30, r16
    61c6:	60 81       	ld	r22, Z
    61c8:	8b e6       	ldi	r24, 0x6B	; 107
    61ca:	90 e1       	ldi	r25, 0x10	; 16
    61cc:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <_ZN14FreeBoardModel21setAutopilotReferenceEc>
    61d0:	9f c0       	rjmp	.+318    	; 0x6310 <_Z7processPcc+0x308>
			}
			//wind
			else if (strcmp(key, WIND_SPEED_ALARM_STATE) == 0) {
    61d2:	6d e5       	ldi	r22, 0x5D	; 93
    61d4:	73 e0       	ldi	r23, 0x03	; 3
    61d6:	ce 01       	movw	r24, r28
    61d8:	01 96       	adiw	r24, 0x01	; 1
    61da:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    61de:	00 97       	sbiw	r24, 0x00	; 0
    61e0:	61 f4       	brne	.+24     	; 0x61fa <_Z7processPcc+0x1f2>
				model.setWindAlarmOn(atoi(val));
    61e2:	c8 01       	movw	r24, r16
    61e4:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    61e8:	61 e0       	ldi	r22, 0x01	; 1
    61ea:	89 2b       	or	r24, r25
    61ec:	09 f4       	brne	.+2      	; 0x61f0 <_Z7processPcc+0x1e8>
    61ee:	60 e0       	ldi	r22, 0x00	; 0
    61f0:	8b e6       	ldi	r24, 0x6B	; 107
    61f2:	90 e1       	ldi	r25, 0x10	; 16
    61f4:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <_ZN14FreeBoardModel14setWindAlarmOnEb>
    61f8:	8b c0       	rjmp	.+278    	; 0x6310 <_Z7processPcc+0x308>
			} else if (strcpy(key, WIND_ALARM_KNOTS) == 0) {
    61fa:	62 e6       	ldi	r22, 0x62	; 98
    61fc:	73 e0       	ldi	r23, 0x03	; 3
    61fe:	ce 01       	movw	r24, r28
    6200:	01 96       	adiw	r24, 0x01	; 1
    6202:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    6206:	00 97       	sbiw	r24, 0x00	; 0
    6208:	49 f4       	brne	.+18     	; 0x621c <_Z7processPcc+0x214>
				model.setWindAlarmSpeed(atoi(val));
    620a:	c8 01       	movw	r24, r16
    620c:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    6210:	bc 01       	movw	r22, r24
    6212:	8b e6       	ldi	r24, 0x6B	; 107
    6214:	90 e1       	ldi	r25, 0x10	; 16
    6216:	0e 94 73 2d 	call	0x5ae6	; 0x5ae6 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
    621a:	7a c0       	rjmp	.+244    	; 0x6310 <_Z7processPcc+0x308>
			} else if (strcpy(key, WIND_ZERO_ADJUST) == 0) {
    621c:	67 e6       	ldi	r22, 0x67	; 103
    621e:	73 e0       	ldi	r23, 0x03	; 3
    6220:	ce 01       	movw	r24, r28
    6222:	01 96       	adiw	r24, 0x01	; 1
    6224:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    6228:	00 97       	sbiw	r24, 0x00	; 0
    622a:	49 f4       	brne	.+18     	; 0x623e <_Z7processPcc+0x236>
				model.setWindZeroOffset(atoi(val));
    622c:	c8 01       	movw	r24, r16
    622e:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    6232:	bc 01       	movw	r22, r24
    6234:	8b e6       	ldi	r24, 0x6B	; 107
    6236:	90 e1       	ldi	r25, 0x10	; 16
    6238:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <_ZN14FreeBoardModel17setWindZeroOffsetEi>
    623c:	69 c0       	rjmp	.+210    	; 0x6310 <_Z7processPcc+0x308>
			}
			//gps,serial,seatalk
			else if (strcmp(key, GPS_MODEL) == 0) {
    623e:	6c e6       	ldi	r22, 0x6C	; 108
    6240:	73 e0       	ldi	r23, 0x03	; 3
    6242:	ce 01       	movw	r24, r28
    6244:	01 96       	adiw	r24, 0x01	; 1
    6246:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    624a:	00 97       	sbiw	r24, 0x00	; 0
    624c:	49 f4       	brne	.+18     	; 0x6260 <_Z7processPcc+0x258>
				model.setGpsModel(atoi(val));
    624e:	c8 01       	movw	r24, r16
    6250:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    6254:	bc 01       	movw	r22, r24
    6256:	8b e6       	ldi	r24, 0x6B	; 107
    6258:	90 e1       	ldi	r25, 0x10	; 16
    625a:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <_ZN14FreeBoardModel11setGpsModelEs>
    625e:	d5 c0       	rjmp	.+426    	; 0x640a <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD0) == 0) {
    6260:	61 e7       	ldi	r22, 0x71	; 113
    6262:	73 e0       	ldi	r23, 0x03	; 3
    6264:	ce 01       	movw	r24, r28
    6266:	01 96       	adiw	r24, 0x01	; 1
    6268:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    626c:	00 97       	sbiw	r24, 0x00	; 0
    626e:	49 f4       	brne	.+18     	; 0x6282 <_Z7processPcc+0x27a>
				model.setSerialBaud(atoi(val));
    6270:	c8 01       	movw	r24, r16
    6272:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    6276:	bc 01       	movw	r22, r24
    6278:	8b e6       	ldi	r24, 0x6B	; 107
    627a:	90 e1       	ldi	r25, 0x10	; 16
    627c:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <_ZN14FreeBoardModel13setSerialBaudEi>
    6280:	c4 c0       	rjmp	.+392    	; 0x640a <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD1) == 0) {
    6282:	66 e7       	ldi	r22, 0x76	; 118
    6284:	73 e0       	ldi	r23, 0x03	; 3
    6286:	ce 01       	movw	r24, r28
    6288:	01 96       	adiw	r24, 0x01	; 1
    628a:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    628e:	00 97       	sbiw	r24, 0x00	; 0
    6290:	49 f4       	brne	.+18     	; 0x62a4 <_Z7processPcc+0x29c>
				model.setSerialBaud1(atoi(val));
    6292:	c8 01       	movw	r24, r16
    6294:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    6298:	bc 01       	movw	r22, r24
    629a:	8b e6       	ldi	r24, 0x6B	; 107
    629c:	90 e1       	ldi	r25, 0x10	; 16
    629e:	0e 94 ce 2d 	call	0x5b9c	; 0x5b9c <_ZN14FreeBoardModel14setSerialBaud1Ei>
    62a2:	b3 c0       	rjmp	.+358    	; 0x640a <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD2) == 0) {
    62a4:	6b e7       	ldi	r22, 0x7B	; 123
    62a6:	73 e0       	ldi	r23, 0x03	; 3
    62a8:	ce 01       	movw	r24, r28
    62aa:	01 96       	adiw	r24, 0x01	; 1
    62ac:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    62b0:	00 97       	sbiw	r24, 0x00	; 0
    62b2:	49 f4       	brne	.+18     	; 0x62c6 <_Z7processPcc+0x2be>
				model.setSerialBaud2(atoi(val));
    62b4:	c8 01       	movw	r24, r16
    62b6:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    62ba:	bc 01       	movw	r22, r24
    62bc:	8b e6       	ldi	r24, 0x6B	; 107
    62be:	90 e1       	ldi	r25, 0x10	; 16
    62c0:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <_ZN14FreeBoardModel14setSerialBaud2Ei>
    62c4:	a2 c0       	rjmp	.+324    	; 0x640a <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SERIAL_BAUD3) == 0) {
    62c6:	60 e8       	ldi	r22, 0x80	; 128
    62c8:	73 e0       	ldi	r23, 0x03	; 3
    62ca:	ce 01       	movw	r24, r28
    62cc:	01 96       	adiw	r24, 0x01	; 1
    62ce:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    62d2:	00 97       	sbiw	r24, 0x00	; 0
    62d4:	49 f4       	brne	.+18     	; 0x62e8 <_Z7processPcc+0x2e0>
				model.setSerialBaud3(atoi(val));
    62d6:	c8 01       	movw	r24, r16
    62d8:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    62dc:	bc 01       	movw	r22, r24
    62de:	8b e6       	ldi	r24, 0x6B	; 107
    62e0:	90 e1       	ldi	r25, 0x10	; 16
    62e2:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <_ZN14FreeBoardModel14setSerialBaud3Ei>
    62e6:	91 c0       	rjmp	.+290    	; 0x640a <_Z7processPcc+0x402>
				save=true;
			} else if (strcpy(key, SEATALK) == 0) {
    62e8:	65 e8       	ldi	r22, 0x85	; 133
    62ea:	73 e0       	ldi	r23, 0x03	; 3
    62ec:	ce 01       	movw	r24, r28
    62ee:	01 96       	adiw	r24, 0x01	; 1
    62f0:	0e 94 90 44 	call	0x8920	; 0x8920 <strcpy>
    62f4:	00 97       	sbiw	r24, 0x00	; 0
    62f6:	61 f4       	brne	.+24     	; 0x6310 <_Z7processPcc+0x308>
				model.setSeaTalk(atoi(val));
    62f8:	c8 01       	movw	r24, r16
    62fa:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    62fe:	61 e0       	ldi	r22, 0x01	; 1
    6300:	89 2b       	or	r24, r25
    6302:	09 f4       	brne	.+2      	; 0x6306 <_Z7processPcc+0x2fe>
    6304:	60 e0       	ldi	r22, 0x00	; 0
    6306:	8b e6       	ldi	r24, 0x6B	; 107
    6308:	90 e1       	ldi	r25, 0x10	; 16
    630a:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <_ZN14FreeBoardModel10setSeaTalkEb>
    630e:	7d c0       	rjmp	.+250    	; 0x640a <_Z7processPcc+0x402>
    6310:	95 01       	movw	r18, r10
    6312:	5e c0       	rjmp	.+188    	; 0x63d0 <_Z7processPcc+0x3c8>
    6314:	6d b6       	in	r6, 0x3d	; 61
    6316:	7e b6       	in	r7, 0x3e	; 62
				save=true;
			}
			if(save)model.saveConfig();

		} else {
			strncpy(key, cmd, 3);
    6318:	43 e0       	ldi	r20, 0x03	; 3
    631a:	50 e0       	ldi	r21, 0x00	; 0
    631c:	b7 01       	movw	r22, r14
    631e:	ce 01       	movw	r24, r28
    6320:	01 96       	adiw	r24, 0x01	; 1
    6322:	0e 94 a5 44 	call	0x894a	; 0x894a <strncpy>
			key[3] = '\0';
    6326:	1c 82       	std	Y+4, r1	; 0x04
			char val[l - 3];
    6328:	68 01       	movw	r12, r16
    632a:	f4 e0       	ldi	r31, 0x04	; 4
    632c:	cf 1a       	sub	r12, r31
    632e:	d1 08       	sbc	r13, r1
    6330:	03 50       	subi	r16, 0x03	; 3
    6332:	11 09       	sbc	r17, r1
    6334:	8d b7       	in	r24, 0x3d	; 61
    6336:	9e b7       	in	r25, 0x3e	; 62
    6338:	80 1b       	sub	r24, r16
    633a:	91 0b       	sbc	r25, r17
    633c:	0f b6       	in	r0, 0x3f	; 63
    633e:	f8 94       	cli
    6340:	9e bf       	out	0x3e, r25	; 62
    6342:	0f be       	out	0x3f, r0	; 63
    6344:	8d bf       	out	0x3d, r24	; 61
    6346:	0d b7       	in	r16, 0x3d	; 61
    6348:	1e b7       	in	r17, 0x3e	; 62
    634a:	0f 5f       	subi	r16, 0xFF	; 255
    634c:	1f 4f       	sbci	r17, 0xFF	; 255
			memcpy(val, &cmd[4], l - 4);
    634e:	58 01       	movw	r10, r16
    6350:	94 e0       	ldi	r25, 0x04	; 4
    6352:	e9 0e       	add	r14, r25
    6354:	f1 1c       	adc	r15, r1
    6356:	a6 01       	movw	r20, r12
    6358:	b7 01       	movw	r22, r14
    635a:	c8 01       	movw	r24, r16
    635c:	0e 94 61 44 	call	0x88c2	; 0x88c2 <memcpy>
			val[l - 4] = '\0';
    6360:	f8 01       	movw	r30, r16
    6362:	ec 0d       	add	r30, r12
    6364:	fd 1d       	adc	r31, r13
    6366:	10 82       	st	Z, r1
			//if (DEBUG) Serial.print(key);
			//if (DEBUG) Serial.print(" = ");
			//if (DEBUG) Serial.println(val);
			// incoming data = WST,WSA,WDT,WDA,WSU,LAT,LON,COG,MGH,SOG,YAW
			if (strcmp(key, MGH) == 0) {
    6368:	6a e8       	ldi	r22, 0x8A	; 138
    636a:	73 e0       	ldi	r23, 0x03	; 3
    636c:	ce 01       	movw	r24, r28
    636e:	01 96       	adiw	r24, 0x01	; 1
    6370:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    6374:	00 97       	sbiw	r24, 0x00	; 0
    6376:	49 f4       	brne	.+18     	; 0x638a <_Z7processPcc+0x382>
				model.setMagneticHeading(atof(val));
    6378:	c8 01       	movw	r24, r16
    637a:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <atof>
    637e:	ab 01       	movw	r20, r22
    6380:	bc 01       	movw	r22, r24
    6382:	8b e6       	ldi	r24, 0x6B	; 107
    6384:	90 e1       	ldi	r25, 0x10	; 16
    6386:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <_ZN14FreeBoardModel18setMagneticHeadingEf>
			}
			if (strcmp(key, DECL) == 0) {
    638a:	6e e8       	ldi	r22, 0x8E	; 142
    638c:	73 e0       	ldi	r23, 0x03	; 3
    638e:	ce 01       	movw	r24, r28
    6390:	01 96       	adiw	r24, 0x01	; 1
    6392:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    6396:	00 97       	sbiw	r24, 0x00	; 0
    6398:	49 f4       	brne	.+18     	; 0x63ac <_Z7processPcc+0x3a4>
				model.setDeclination(atof(val));
    639a:	c5 01       	movw	r24, r10
    639c:	0e 94 fc 43 	call	0x87f8	; 0x87f8 <atof>
    63a0:	ab 01       	movw	r20, r22
    63a2:	bc 01       	movw	r22, r24
    63a4:	8b e6       	ldi	r24, 0x6B	; 107
    63a6:	90 e1       	ldi	r25, 0x10	; 16
    63a8:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <_ZN14FreeBoardModel14setDeclinationEf>
			}
			if (strcmp(key, WDT) == 0) {
    63ac:	62 e9       	ldi	r22, 0x92	; 146
    63ae:	73 e0       	ldi	r23, 0x03	; 3
    63b0:	ce 01       	movw	r24, r28
    63b2:	01 96       	adiw	r24, 0x01	; 1
    63b4:	0e 94 87 44 	call	0x890e	; 0x890e <strcmp>
    63b8:	00 97       	sbiw	r24, 0x00	; 0
    63ba:	41 f4       	brne	.+16     	; 0x63cc <_Z7processPcc+0x3c4>
				model.setWindTrueDir(atoi(val));
    63bc:	c5 01       	movw	r24, r10
    63be:	0e 94 00 44 	call	0x8800	; 0x8800 <atoi>
    63c2:	bc 01       	movw	r22, r24
    63c4:	8b e6       	ldi	r24, 0x6B	; 107
    63c6:	90 e1       	ldi	r25, 0x10	; 16
    63c8:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <_ZN14FreeBoardModel14setWindTrueDirEi>
    63cc:	36 2d       	mov	r19, r6
    63ce:	27 2d       	mov	r18, r7
    63d0:	83 2f       	mov	r24, r19
    63d2:	92 2f       	mov	r25, r18
    63d4:	0f b6       	in	r0, 0x3f	; 63
    63d6:	f8 94       	cli
    63d8:	9e bf       	out	0x3e, r25	; 62
    63da:	0f be       	out	0x3f, r0	; 63
    63dc:	8d bf       	out	0x3d, r24	; 61
			}

		}
		//next token
		cmd = strtok(NULL, ",");
    63de:	66 ee       	ldi	r22, 0xE6	; 230
    63e0:	74 e0       	ldi	r23, 0x04	; 4
    63e2:	80 e0       	ldi	r24, 0x00	; 0
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	0e 94 5d 44 	call	0x88ba	; 0x88ba <strtok>
    63ea:	7c 01       	movw	r14, r24

void process(char * s, char parser) {
	//if (DEBUG) Serial.print("Process str:");
	//if (DEBUG) Serial.println(s);
	char *cmd = strtok(s, ",");
	while (cmd != NULL && strlen(cmd) > 3) {
    63ec:	00 97       	sbiw	r24, 0x00	; 0
    63ee:	c1 f0       	breq	.+48     	; 0x6420 <_Z7processPcc+0x418>
    63f0:	dc 01       	movw	r26, r24
    63f2:	0d 90       	ld	r0, X+
    63f4:	00 20       	and	r0, r0
    63f6:	e9 f7       	brne	.-6      	; 0x63f2 <_Z7processPcc+0x3ea>
    63f8:	8d 01       	movw	r16, r26
    63fa:	01 50       	subi	r16, 0x01	; 1
    63fc:	11 09       	sbc	r17, r1
    63fe:	08 1b       	sub	r16, r24
    6400:	19 0b       	sbc	r17, r25
    6402:	04 30       	cpi	r16, 0x04	; 4
    6404:	11 05       	cpc	r17, r1
    6406:	30 f4       	brcc	.+12     	; 0x6414 <_Z7processPcc+0x40c>
    6408:	0b c0       	rjmp	.+22     	; 0x6420 <_Z7processPcc+0x418>
				save=true;
			} else if (strcpy(key, SEATALK) == 0) {
				model.setSeaTalk(atoi(val));
				save=true;
			}
			if(save)model.saveConfig();
    640a:	8b e6       	ldi	r24, 0x6B	; 107
    640c:	90 e1       	ldi	r25, 0x10	; 16
    640e:	0e 94 b4 29 	call	0x5368	; 0x5368 <_ZN14FreeBoardModel10saveConfigEv>
    6412:	7e cf       	rjmp	.-260    	; 0x6310 <_Z7processPcc+0x308>
		//if (DEBUG) Serial.println(cmd);

		char key[5];
		int l = strlen(cmd);
		bool save=false;
		if (cmd[0] == '#') {
    6414:	fc 01       	movw	r30, r24
    6416:	80 81       	ld	r24, Z
    6418:	83 32       	cpi	r24, 0x23	; 35
    641a:	09 f0       	breq	.+2      	; 0x641e <_Z7processPcc+0x416>
    641c:	7b cf       	rjmp	.-266    	; 0x6314 <_Z7processPcc+0x30c>
    641e:	0c ce       	rjmp	.-1000   	; 0x6038 <_Z7processPcc+0x30>
		}
		//next token
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}
    6420:	0f b6       	in	r0, 0x3f	; 63
    6422:	f8 94       	cli
    6424:	9e be       	out	0x3e, r9	; 62
    6426:	0f be       	out	0x3f, r0	; 63
    6428:	8d be       	out	0x3d, r8	; 61
    642a:	0f 90       	pop	r0
    642c:	0f 90       	pop	r0
    642e:	0f 90       	pop	r0
    6430:	0f 90       	pop	r0
    6432:	0f 90       	pop	r0
    6434:	df 91       	pop	r29
    6436:	cf 91       	pop	r28
    6438:	1f 91       	pop	r17
    643a:	0f 91       	pop	r16
    643c:	ff 90       	pop	r15
    643e:	ef 90       	pop	r14
    6440:	df 90       	pop	r13
    6442:	cf 90       	pop	r12
    6444:	bf 90       	pop	r11
    6446:	af 90       	pop	r10
    6448:	9f 90       	pop	r9
    644a:	8f 90       	pop	r8
    644c:	7f 90       	pop	r7
    644e:	6f 90       	pop	r6
    6450:	08 95       	ret

00006452 <_Z11serialEventv>:
 SerialEvent occurs whenever a new data comes in the
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
    6452:	cf 92       	push	r12
    6454:	df 92       	push	r13
    6456:	ef 92       	push	r14
    6458:	ff 92       	push	r15
    645a:	0f 93       	push	r16
    645c:	1f 93       	push	r17
    645e:	cf 93       	push	r28
    6460:	df 93       	push	r29
    6462:	cd b7       	in	r28, 0x3d	; 61
    6464:	de b7       	in	r29, 0x3e	; 62
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    6466:	ed b6       	in	r14, 0x3d	; 61
    6468:	fe b6       	in	r15, 0x3e	; 62
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    646a:	39 c0       	rjmp	.+114    	; 0x64de <_Z11serialEventv+0x8c>
		// get the new byte:
		char inChar = (char) Serial.read();
    646c:	8a ed       	ldi	r24, 0xDA	; 218
    646e:	96 e0       	ldi	r25, 0x06	; 6
    6470:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial4readEv>
    6474:	18 2f       	mov	r17, r24
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    6476:	68 2f       	mov	r22, r24
    6478:	8a e0       	ldi	r24, 0x0A	; 10
    647a:	9a e0       	ldi	r25, 0x0A	; 10
    647c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN6String6concatEc>
		// add it to the inputString:
		inputSerial += inChar;
		if (inChar == '\n') {
    6480:	1a 30       	cpi	r17, 0x0A	; 10
    6482:	69 f5       	brne	.+90     	; 0x64de <_Z11serialEventv+0x8c>
    6484:	cd b6       	in	r12, 0x3d	; 61
    6486:	de b6       	in	r13, 0x3e	; 62
			//inputSerialComplete = true;
			char carray[inputSerial.length() + 1]; //determine size of the array
    6488:	40 91 0e 0a 	lds	r20, 0x0A0E
    648c:	50 91 0f 0a 	lds	r21, 0x0A0F
    6490:	4f 5f       	subi	r20, 0xFF	; 255
    6492:	5f 4f       	sbci	r21, 0xFF	; 255
    6494:	8d b7       	in	r24, 0x3d	; 61
    6496:	9e b7       	in	r25, 0x3e	; 62
    6498:	84 1b       	sub	r24, r20
    649a:	95 0b       	sbc	r25, r21
    649c:	0f b6       	in	r0, 0x3f	; 63
    649e:	f8 94       	cli
    64a0:	9e bf       	out	0x3e, r25	; 62
    64a2:	0f be       	out	0x3f, r0	; 63
    64a4:	8d bf       	out	0x3d, r24	; 61
    64a6:	0d b7       	in	r16, 0x3d	; 61
    64a8:	1e b7       	in	r17, 0x3e	; 62
    64aa:	0f 5f       	subi	r16, 0xFF	; 255
    64ac:	1f 4f       	sbci	r17, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    64ae:	20 e0       	ldi	r18, 0x00	; 0
    64b0:	30 e0       	ldi	r19, 0x00	; 0
    64b2:	b8 01       	movw	r22, r16
    64b4:	8a e0       	ldi	r24, 0x0A	; 10
    64b6:	9a e0       	ldi	r25, 0x0A	; 10
    64b8:	0e 94 88 10 	call	0x2110	; 0x2110 <_ZNK6String8getBytesEPhjj>
			inputSerial.toCharArray(carray, sizeof(carray));
			process(carray, ',');
    64bc:	6c e2       	ldi	r22, 0x2C	; 44
    64be:	c8 01       	movw	r24, r16
    64c0:	0e 94 04 30 	call	0x6008	; 0x6008 <_Z7processPcc>
			inputSerial = "";
    64c4:	63 ef       	ldi	r22, 0xF3	; 243
    64c6:	74 e0       	ldi	r23, 0x04	; 4
    64c8:	8a e0       	ldi	r24, 0x0A	; 10
    64ca:	9a e0       	ldi	r25, 0x0A	; 10
    64cc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_ZN6StringaSEPKc>
    64d0:	8c 2d       	mov	r24, r12
    64d2:	9d 2d       	mov	r25, r13
    64d4:	0f b6       	in	r0, 0x3f	; 63
    64d6:	f8 94       	cli
    64d8:	9e bf       	out	0x3e, r25	; 62
    64da:	0f be       	out	0x3f, r0	; 63
    64dc:	8d bf       	out	0x3d, r24	; 61
 hardware serial RX.  This routine is run between each
 time loop() runs, so using delay inside loop can delay
 response.  Multiple bytes of data may be available.
 */
void serialEvent() {
	while (Serial.available()) {
    64de:	8a ed       	ldi	r24, 0xDA	; 218
    64e0:	96 e0       	ldi	r25, 0x06	; 6
    64e2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
    64e6:	89 2b       	or	r24, r25
    64e8:	09 f6       	brne	.-126    	; 0x646c <_Z11serialEventv+0x1a>
			inputSerial = "";
			//inputSerialComplete = false;
		}

	}
}
    64ea:	0f b6       	in	r0, 0x3f	; 63
    64ec:	f8 94       	cli
    64ee:	fe be       	out	0x3e, r15	; 62
    64f0:	0f be       	out	0x3f, r0	; 63
    64f2:	ed be       	out	0x3d, r14	; 61
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	1f 91       	pop	r17
    64fa:	0f 91       	pop	r16
    64fc:	ff 90       	pop	r15
    64fe:	ef 90       	pop	r14
    6500:	df 90       	pop	r13
    6502:	cf 90       	pop	r12
    6504:	08 95       	ret

00006506 <_Z11getChecksumPc>:
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
	byte cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    6506:	fc 01       	movw	r30, r24
    6508:	01 90       	ld	r0, Z+
    650a:	00 20       	and	r0, r0
    650c:	e9 f7       	brne	.-6      	; 0x6508 <_Z11getChecksumPc+0x2>
    650e:	e8 1b       	sub	r30, r24
    6510:	f9 0b       	sbc	r31, r25
    6512:	32 97       	sbiw	r30, 0x02	; 2
		cmd = strtok(NULL, ",");
	}
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
    6514:	dc 01       	movw	r26, r24
    6516:	11 96       	adiw	r26, 0x01	; 1
	byte cs = 0; //clear any old checksum
    6518:	40 e0       	ldi	r20, 0x00	; 0
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    651a:	02 c0       	rjmp	.+4      	; 0x6520 <_Z11getChecksumPc+0x1a>
		cs ^= str[n]; //calculates the checksum
    651c:	2d 91       	ld	r18, X+
    651e:	42 27       	eor	r20, r18
	//if (DEBUG) Serial.println("Process str exit");
}

byte getChecksum(char* str){
	byte cs = 0; //clear any old checksum
	for (unsigned int n = 1; n < strlen(str) - 1; n++) {
    6520:	9d 01       	movw	r18, r26
    6522:	28 1b       	sub	r18, r24
    6524:	39 0b       	sbc	r19, r25
    6526:	2e 17       	cp	r18, r30
    6528:	3f 07       	cpc	r19, r31
    652a:	c0 f3       	brcs	.-16     	; 0x651c <_Z11getChecksumPc+0x16>
		cs ^= str[n]; //calculates the checksum
	}
	return cs;
}
    652c:	84 2f       	mov	r24, r20
    652e:	08 95       	ret

00006530 <_GLOBAL__sub_I_execute>:
int inByteSerial3;
char input;
//volatile int intCnt = 0;

//freeboard model
FreeBoardModel model;
    6530:	8b e6       	ldi	r24, 0x6B	; 107
    6532:	90 e1       	ldi	r25, 0x10	; 16
    6534:	0e 94 4a 28 	call	0x5094	; 0x5094 <_ZN14FreeBoardModelC1Ev>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6538:	10 92 2d 10 	sts	0x102D, r1
    653c:	10 92 2c 10 	sts	0x102C, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    6540:	88 ee       	ldi	r24, 0xE8	; 232
    6542:	93 e0       	ldi	r25, 0x03	; 3
    6544:	a0 e0       	ldi	r26, 0x00	; 0
    6546:	b0 e0       	ldi	r27, 0x00	; 0
    6548:	80 93 2e 10 	sts	0x102E, r24
    654c:	90 93 2f 10 	sts	0x102F, r25
    6550:	a0 93 30 10 	sts	0x1030, r26
    6554:	b0 93 31 10 	sts	0x1031, r27
#include "FreeBoardModel.h"
#include "FreeBoardPLC.h"

class NmeaSerial: AltSoftSerial {
public:
	NmeaSerial(FreeBoardModel* model):model(model){};
    6558:	85 e7       	ldi	r24, 0x75	; 117
    655a:	95 e0       	ldi	r25, 0x05	; 5
    655c:	90 93 2b 10 	sts	0x102B, r25
    6560:	80 93 2a 10 	sts	0x102A, r24
    6564:	8b e6       	ldi	r24, 0x6B	; 107
    6566:	90 e1       	ldi	r25, 0x10	; 16
    6568:	90 93 37 10 	sts	0x1037, r25
    656c:	80 93 36 10 	sts	0x1036, r24
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);

//NMEA ports
NMEA gpsSource(ALL);
    6570:	60 e0       	ldi	r22, 0x00	; 0
    6572:	70 e0       	ldi	r23, 0x00	; 0
    6574:	81 ec       	ldi	r24, 0xC1	; 193
    6576:	9e e0       	ldi	r25, 0x0E	; 14
    6578:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN4NMEAC1Ei>
NMEA talker0(ALL);
    657c:	60 e0       	ldi	r22, 0x00	; 0
    657e:	70 e0       	ldi	r23, 0x00	; 0
    6580:	88 e5       	ldi	r24, 0x58	; 88
    6582:	9d e0       	ldi	r25, 0x0D	; 13
    6584:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN4NMEAC1Ei>
NMEA talker2(ALL);
    6588:	60 e0       	ldi	r22, 0x00	; 0
    658a:	70 e0       	ldi	r23, 0x00	; 0
    658c:	8f ee       	ldi	r24, 0xEF	; 239
    658e:	9b e0       	ldi	r25, 0x0B	; 11
    6590:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN4NMEAC1Ei>
NMEA talker3(ALL);
    6594:	60 e0       	ldi	r22, 0x00	; 0
    6596:	70 e0       	ldi	r23, 0x00	; 0
    6598:	86 e8       	ldi	r24, 0x86	; 134
    659a:	9a e0       	ldi	r25, 0x0A	; 10
    659c:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN4NMEAC1Ei>

//alarm
Alarm alarm(&model);
    65a0:	6b e6       	ldi	r22, 0x6B	; 107
    65a2:	70 e1       	ldi	r23, 0x10	; 16
    65a4:	81 e8       	ldi	r24, 0x81	; 129
    65a6:	9a e0       	ldi	r25, 0x0A	; 10
    65a8:	0e 94 3e 23 	call	0x467c	; 0x467c <_ZN5AlarmC1EP14FreeBoardModel>

//wind
Wind wind(&model);
    65ac:	6b e6       	ldi	r22, 0x6B	; 107
    65ae:	70 e1       	ldi	r23, 0x10	; 16
    65b0:	8f e7       	ldi	r24, 0x7F	; 127
    65b2:	9a e0       	ldi	r25, 0x0A	; 10
    65b4:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <_ZN4WindC1EP14FreeBoardModel>

//Gps
Gps gps(&gpsSource, &model);
    65b8:	4b e6       	ldi	r20, 0x6B	; 107
    65ba:	50 e1       	ldi	r21, 0x10	; 16
    65bc:	61 ec       	ldi	r22, 0xC1	; 193
    65be:	7e e0       	ldi	r23, 0x0E	; 14
    65c0:	89 e7       	ldi	r24, 0x79	; 121
    65c2:	9a e0       	ldi	r25, 0x0A	; 10
    65c4:	0e 94 23 33 	call	0x6646	; 0x6646 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>

//Autopilot
Autopilot autopilot(&model);
    65c8:	6b e6       	ldi	r22, 0x6B	; 107
    65ca:	70 e1       	ldi	r23, 0x10	; 16
    65cc:	8f e2       	ldi	r24, 0x2F	; 47
    65ce:	9a e0       	ldi	r25, 0x0A	; 10
    65d0:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <_ZN9AutopilotC1EP14FreeBoardModel>

//Anchor
Anchor anchor(&model);
    65d4:	6b e6       	ldi	r22, 0x6B	; 107
    65d6:	70 e1       	ldi	r23, 0x10	; 16
    65d8:	8b e2       	ldi	r24, 0x2B	; 43
    65da:	9a e0       	ldi	r25, 0x0A	; 10
    65dc:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <_ZN6AnchorC1EP14FreeBoardModel>

Seatalk seatalk(&Serial2, &model);
    65e0:	4b e6       	ldi	r20, 0x6B	; 107
    65e2:	50 e1       	ldi	r21, 0x10	; 16
    65e4:	66 e9       	ldi	r22, 0x96	; 150
    65e6:	76 e0       	ldi	r23, 0x06	; 6
    65e8:	81 e1       	ldi	r24, 0x11	; 17
    65ea:	9a e0       	ldi	r25, 0x0A	; 10
    65ec:	0e 94 91 37 	call	0x6f22	; 0x6f22 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>

String inputSerial = ""; // a string to hold incoming data
    65f0:	63 ef       	ldi	r22, 0xF3	; 243
    65f2:	74 e0       	ldi	r23, 0x04	; 4
    65f4:	8a e0       	ldi	r24, 0x0A	; 10
    65f6:	9a e0       	ldi	r25, 0x0A	; 10
    65f8:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <_ZN6StringC1EPKc>

000065fc <_GLOBAL__sub_D_execute>:
    65fc:	8a e0       	ldi	r24, 0x0A	; 10
    65fe:	9a e0       	ldi	r25, 0x0A	; 10
    6600:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN6StringD1Ev>

//Autopilot
Autopilot autopilot(&model);

//Anchor
Anchor anchor(&model);
    6604:	8b e2       	ldi	r24, 0x2B	; 43
    6606:	9a e0       	ldi	r25, 0x0A	; 10
    6608:	0e 94 96 23 	call	0x472c	; 0x472c <_ZN6AnchorD1Ev>

//Gps
Gps gps(&gpsSource, &model);

//Autopilot
Autopilot autopilot(&model);
    660c:	8f e2       	ldi	r24, 0x2F	; 47
    660e:	9a e0       	ldi	r25, 0x0A	; 10
    6610:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <_ZN9AutopilotD1Ev>

//wind
Wind wind(&model);

//Gps
Gps gps(&gpsSource, &model);
    6614:	89 e7       	ldi	r24, 0x79	; 121
    6616:	9a e0       	ldi	r25, 0x0A	; 10
    6618:	0e 94 16 33 	call	0x662c	; 0x662c <_ZN3GpsD1Ev>
NMEA talker0(ALL);
NMEA talker2(ALL);
NMEA talker3(ALL);

//alarm
Alarm alarm(&model);
    661c:	81 e8       	ldi	r24, 0x81	; 129
    661e:	9a e0       	ldi	r25, 0x0A	; 10
    6620:	0e 94 31 23 	call	0x4662	; 0x4662 <_ZN5AlarmD1Ev>

//NMEA output - The arduino puts out TTL, NMEA is RS232. They are different V and amps. The +-5V levels may need inverting or you get
// garbage.
// See http://forums.parallax.com/forums/default.aspx?f=19&m=50925
// See http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=63469&start=0
NmeaSerial nmea(&model);
    6624:	8a e2       	ldi	r24, 0x2A	; 42
    6626:	90 e1       	ldi	r25, 0x10	; 16
    6628:	0c 94 e9 36 	jmp	0x6dd2	; 0x6dd2 <_ZN10NmeaSerialD1Ev>

0000662c <_ZN3GpsD1Ev>:
 */
#include "Gps.h"
char gpsBuffer[40];
PString gpsStr(gpsBuffer, sizeof(gpsBuffer));

Gps::~Gps() {
    662c:	2d e4       	ldi	r18, 0x4D	; 77
    662e:	35 e0       	ldi	r19, 0x05	; 5
    6630:	fc 01       	movw	r30, r24
    6632:	31 83       	std	Z+1, r19	; 0x01
    6634:	20 83       	st	Z, r18
    6636:	08 95       	ret

00006638 <_ZN3GpsD0Ev>:
    6638:	2d e4       	ldi	r18, 0x4D	; 77
    663a:	35 e0       	ldi	r19, 0x05	; 5
    663c:	fc 01       	movw	r30, r24
    663e:	31 83       	std	Z+1, r19	; 0x01
    6640:	20 83       	st	Z, r18
}
    6642:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

00006646 <_ZN3GpsC1EP4NMEAP14FreeBoardModel>:
Gps::Gps(NMEA* gpsSource, FreeBoardModel* model) {
    6646:	fc 01       	movw	r30, r24
    6648:	8d e4       	ldi	r24, 0x4D	; 77
    664a:	95 e0       	ldi	r25, 0x05	; 5
    664c:	91 83       	std	Z+1, r25	; 0x01
    664e:	80 83       	st	Z, r24

	this->model = model;
    6650:	55 83       	std	Z+5, r21	; 0x05
    6652:	44 83       	std	Z+4, r20	; 0x04
	this->gpsSource = gpsSource;
    6654:	73 83       	std	Z+3, r23	; 0x03
    6656:	62 83       	std	Z+2, r22	; 0x02
    6658:	08 95       	ret

0000665a <_ZN3Gps7testMsgEv>:
	//setupGps();
}

bool Gps::testMsg() {
    665a:	cf 92       	push	r12
    665c:	df 92       	push	r13
    665e:	ef 92       	push	r14
    6660:	ff 92       	push	r15
    6662:	cf 93       	push	r28
    6664:	df 93       	push	r29
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    6666:	c5 e6       	ldi	r28, 0x65	; 101
    6668:	d0 e0       	ldi	r29, 0x00	; 0
    666a:	0a c0       	rjmp	.+20     	; 0x6680 <_ZN3Gps7testMsgEv+0x26>
		if (Serial1.available()) {
    666c:	88 eb       	ldi	r24, 0xB8	; 184
    666e:	96 e0       	ldi	r25, 0x06	; 6
    6670:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
    6674:	89 2b       	or	r24, r25
    6676:	d1 f3       	breq	.-12     	; 0x666c <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
    6678:	88 eb       	ldi	r24, 0xB8	; 184
    667a:	96 e0       	ldi	r25, 0x06	; 6
    667c:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial4readEv>
    6680:	21 97       	sbiw	r28, 0x01	; 1
}

bool Gps::testMsg() {
	//clear buffer of rubbish
	int x = 0;
	while (x < 100) {
    6682:	a1 f7       	brne	.-24     	; 0x666c <_ZN3Gps7testMsgEv+0x12>
			Serial1.read();
			x++;
		}
	}
	//5 secs
	unsigned long now = millis();
    6684:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    6688:	6b 01       	movw	r12, r22
    668a:	7c 01       	movw	r14, r24
	bool valid = true;
    668c:	c1 e0       	ldi	r28, 0x01	; 1
	while (now + 5000 > millis() && valid) {
    668e:	88 e8       	ldi	r24, 0x88	; 136
    6690:	c8 0e       	add	r12, r24
    6692:	83 e1       	ldi	r24, 0x13	; 19
    6694:	d8 1e       	adc	r13, r24
    6696:	e1 1c       	adc	r14, r1
    6698:	f1 1c       	adc	r15, r1
    669a:	09 c0       	rjmp	.+18     	; 0x66ae <_ZN3Gps7testMsgEv+0x54>
		if (Serial1.available()) {
			int c = Serial1.read();
    669c:	88 eb       	ldi	r24, 0xB8	; 184
    669e:	96 e0       	ldi	r25, 0x06	; 6
    66a0:	0e 94 ac 01 	call	0x358	; 0x358 <_ZN14HardwareSerial4readEv>
			//Serial.print(c);
			//Serial.print(",");
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
    66a4:	c1 e0       	ldi	r28, 0x01	; 1
    66a6:	81 38       	cpi	r24, 0x81	; 129
    66a8:	91 05       	cpc	r25, r1
    66aa:	0c f0       	brlt	.+2      	; 0x66ae <_ZN3Gps7testMsgEv+0x54>
    66ac:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
    66ae:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    66b2:	6c 15       	cp	r22, r12
    66b4:	7d 05       	cpc	r23, r13
    66b6:	8e 05       	cpc	r24, r14
    66b8:	9f 05       	cpc	r25, r15
    66ba:	18 f4       	brcc	.+6      	; 0x66c2 <_ZN3Gps7testMsgEv+0x68>
    66bc:	c1 11       	cpse	r28, r1
    66be:	12 c0       	rjmp	.+36     	; 0x66e4 <_ZN3Gps7testMsgEv+0x8a>
    66c0:	09 c0       	rjmp	.+18     	; 0x66d4 <_ZN3Gps7testMsgEv+0x7a>
			//not Cntrl-n or printable so invalid
			if (c > 128) valid = false;
		}
	}
	if (DEBUG) {
		if (valid)
    66c2:	cc 23       	and	r28, r28
    66c4:	39 f0       	breq	.+14     	; 0x66d4 <_ZN3Gps7testMsgEv+0x7a>
			Serial.println("OK");
    66c6:	66 e9       	ldi	r22, 0x96	; 150
    66c8:	73 e0       	ldi	r23, 0x03	; 3
    66ca:	8a ed       	ldi	r24, 0xDA	; 218
    66cc:	96 e0       	ldi	r25, 0x06	; 6
    66ce:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
    66d2:	0f c0       	rjmp	.+30     	; 0x66f2 <_ZN3Gps7testMsgEv+0x98>
		else
			Serial.println("FAIL");
    66d4:	69 e9       	ldi	r22, 0x99	; 153
    66d6:	73 e0       	ldi	r23, 0x03	; 3
    66d8:	8a ed       	ldi	r24, 0xDA	; 218
    66da:	96 e0       	ldi	r25, 0x06	; 6
    66dc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
    66e0:	c0 e0       	ldi	r28, 0x00	; 0
    66e2:	07 c0       	rjmp	.+14     	; 0x66f2 <_ZN3Gps7testMsgEv+0x98>
	}
	//5 secs
	unsigned long now = millis();
	bool valid = true;
	while (now + 5000 > millis() && valid) {
		if (Serial1.available()) {
    66e4:	88 eb       	ldi	r24, 0xB8	; 184
    66e6:	96 e0       	ldi	r25, 0x06	; 6
    66e8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN14HardwareSerial9availableEv>
    66ec:	89 2b       	or	r24, r25
    66ee:	f9 f2       	breq	.-66     	; 0x66ae <_ZN3Gps7testMsgEv+0x54>
    66f0:	d5 cf       	rjmp	.-86     	; 0x669c <_ZN3Gps7testMsgEv+0x42>
			Serial.println("OK");
		else
			Serial.println("FAIL");
	}
	return valid;
}
    66f2:	8c 2f       	mov	r24, r28
    66f4:	df 91       	pop	r29
    66f6:	cf 91       	pop	r28
    66f8:	ff 90       	pop	r15
    66fa:	ef 90       	pop	r14
    66fc:	df 90       	pop	r13
    66fe:	cf 90       	pop	r12
    6700:	08 95       	ret

00006702 <_ZN3Gps8autoBaudEv>:


int Gps::autoBaud() {
    6702:	cf 93       	push	r28
    6704:	df 93       	push	r29
    6706:	ec 01       	movw	r28, r24
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
    6708:	6e e9       	ldi	r22, 0x9E	; 158
    670a:	73 e0       	ldi	r23, 0x03	; 3
    670c:	8a ed       	ldi	r24, 0xDA	; 218
    670e:	96 e0       	ldi	r25, 0x06	; 6
    6710:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	Serial1.begin(4800);
    6714:	40 ec       	ldi	r20, 0xC0	; 192
    6716:	52 e1       	ldi	r21, 0x12	; 18
    6718:	60 e0       	ldi	r22, 0x00	; 0
    671a:	70 e0       	ldi	r23, 0x00	; 0
    671c:	88 eb       	ldi	r24, 0xB8	; 184
    671e:	96 e0       	ldi	r25, 0x06	; 6
    6720:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 4800;
    6724:	ce 01       	movw	r24, r28
    6726:	0e 94 2d 33 	call	0x665a	; 0x665a <_ZN3Gps7testMsgEv>
    672a:	81 11       	cpse	r24, r1
    672c:	66 c0       	rjmp	.+204    	; 0x67fa <_ZN3Gps8autoBaudEv+0xf8>
	Serial1.end();
    672e:	88 eb       	ldi	r24, 0xB8	; 184
    6730:	96 e0       	ldi	r25, 0x06	; 6
    6732:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 9600..");
    6736:	65 eb       	ldi	r22, 0xB5	; 181
    6738:	73 e0       	ldi	r23, 0x03	; 3
    673a:	8a ed       	ldi	r24, 0xDA	; 218
    673c:	96 e0       	ldi	r25, 0x06	; 6
    673e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	Serial1.begin(9600);
    6742:	40 e8       	ldi	r20, 0x80	; 128
    6744:	55 e2       	ldi	r21, 0x25	; 37
    6746:	60 e0       	ldi	r22, 0x00	; 0
    6748:	70 e0       	ldi	r23, 0x00	; 0
    674a:	88 eb       	ldi	r24, 0xB8	; 184
    674c:	96 e0       	ldi	r25, 0x06	; 6
    674e:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 9600;
    6752:	ce 01       	movw	r24, r28
    6754:	0e 94 2d 33 	call	0x665a	; 0x665a <_ZN3Gps7testMsgEv>
    6758:	81 11       	cpse	r24, r1
    675a:	52 c0       	rjmp	.+164    	; 0x6800 <_ZN3Gps8autoBaudEv+0xfe>
	Serial1.end();
    675c:	88 eb       	ldi	r24, 0xB8	; 184
    675e:	96 e0       	ldi	r25, 0x06	; 6
    6760:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 19200..");
    6764:	6c ec       	ldi	r22, 0xCC	; 204
    6766:	73 e0       	ldi	r23, 0x03	; 3
    6768:	8a ed       	ldi	r24, 0xDA	; 218
    676a:	96 e0       	ldi	r25, 0x06	; 6
    676c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	Serial1.begin(19200);
    6770:	40 e0       	ldi	r20, 0x00	; 0
    6772:	5b e4       	ldi	r21, 0x4B	; 75
    6774:	60 e0       	ldi	r22, 0x00	; 0
    6776:	70 e0       	ldi	r23, 0x00	; 0
    6778:	88 eb       	ldi	r24, 0xB8	; 184
    677a:	96 e0       	ldi	r25, 0x06	; 6
    677c:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 19200;
    6780:	ce 01       	movw	r24, r28
    6782:	0e 94 2d 33 	call	0x665a	; 0x665a <_ZN3Gps7testMsgEv>
    6786:	81 11       	cpse	r24, r1
    6788:	3e c0       	rjmp	.+124    	; 0x6806 <_ZN3Gps8autoBaudEv+0x104>
	Serial1.end();
    678a:	88 eb       	ldi	r24, 0xB8	; 184
    678c:	96 e0       	ldi	r25, 0x06	; 6
    678e:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 38400..");
    6792:	64 ee       	ldi	r22, 0xE4	; 228
    6794:	73 e0       	ldi	r23, 0x03	; 3
    6796:	8a ed       	ldi	r24, 0xDA	; 218
    6798:	96 e0       	ldi	r25, 0x06	; 6
    679a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	Serial1.begin(38400);
    679e:	40 e0       	ldi	r20, 0x00	; 0
    67a0:	56 e9       	ldi	r21, 0x96	; 150
    67a2:	60 e0       	ldi	r22, 0x00	; 0
    67a4:	70 e0       	ldi	r23, 0x00	; 0
    67a6:	88 eb       	ldi	r24, 0xB8	; 184
    67a8:	96 e0       	ldi	r25, 0x06	; 6
    67aa:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 38400;
    67ae:	ce 01       	movw	r24, r28
    67b0:	0e 94 2d 33 	call	0x665a	; 0x665a <_ZN3Gps7testMsgEv>
    67b4:	81 11       	cpse	r24, r1
    67b6:	2a c0       	rjmp	.+84     	; 0x680c <_ZN3Gps8autoBaudEv+0x10a>
	Serial1.end();
    67b8:	88 eb       	ldi	r24, 0xB8	; 184
    67ba:	96 e0       	ldi	r25, 0x06	; 6
    67bc:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   try autobaud 57600..");
    67c0:	6c ef       	ldi	r22, 0xFC	; 252
    67c2:	73 e0       	ldi	r23, 0x03	; 3
    67c4:	8a ed       	ldi	r24, 0xDA	; 218
    67c6:	96 e0       	ldi	r25, 0x06	; 6
    67c8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	Serial1.begin(57600);
    67cc:	40 e0       	ldi	r20, 0x00	; 0
    67ce:	51 ee       	ldi	r21, 0xE1	; 225
    67d0:	60 e0       	ldi	r22, 0x00	; 0
    67d2:	70 e0       	ldi	r23, 0x00	; 0
    67d4:	88 eb       	ldi	r24, 0xB8	; 184
    67d6:	96 e0       	ldi	r25, 0x06	; 6
    67d8:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN14HardwareSerial5beginEm>
	if (testMsg()) return 57600;
    67dc:	ce 01       	movw	r24, r28
    67de:	0e 94 2d 33 	call	0x665a	; 0x665a <_ZN3Gps7testMsgEv>
    67e2:	81 11       	cpse	r24, r1
    67e4:	16 c0       	rjmp	.+44     	; 0x6812 <_ZN3Gps8autoBaudEv+0x110>
	Serial1.end();
    67e6:	88 eb       	ldi	r24, 0xB8	; 184
    67e8:	96 e0       	ldi	r25, 0x06	; 6
    67ea:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN14HardwareSerial3endEv>
	if (DEBUG) Serial.println("   default to 4800..");
    67ee:	64 e1       	ldi	r22, 0x14	; 20
    67f0:	74 e0       	ldi	r23, 0x04	; 4
    67f2:	8a ed       	ldi	r24, 0xDA	; 218
    67f4:	96 e0       	ldi	r25, 0x06	; 6
    67f6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	//try the various baud rates until one makes sense
	//should only output simple NMEA [$A-Z0-9*\r\c]

	if (DEBUG) Serial.println("   try autobaud 4800..");
	Serial1.begin(4800);
	if (testMsg()) return 4800;
    67fa:	20 ec       	ldi	r18, 0xC0	; 192
    67fc:	32 e1       	ldi	r19, 0x12	; 18
    67fe:	0b c0       	rjmp	.+22     	; 0x6816 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 9600..");
	Serial1.begin(9600);
	if (testMsg()) return 9600;
    6800:	20 e8       	ldi	r18, 0x80	; 128
    6802:	35 e2       	ldi	r19, 0x25	; 37
    6804:	08 c0       	rjmp	.+16     	; 0x6816 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 19200..");
	Serial1.begin(19200);
	if (testMsg()) return 19200;
    6806:	20 e0       	ldi	r18, 0x00	; 0
    6808:	3b e4       	ldi	r19, 0x4B	; 75
    680a:	05 c0       	rjmp	.+10     	; 0x6816 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 38400..");
	Serial1.begin(38400);
	if (testMsg()) return 38400;
    680c:	20 e0       	ldi	r18, 0x00	; 0
    680e:	36 e9       	ldi	r19, 0x96	; 150
    6810:	02 c0       	rjmp	.+4      	; 0x6816 <_ZN3Gps8autoBaudEv+0x114>
	Serial1.end();
	if (DEBUG) Serial.println("   try autobaud 57600..");
	Serial1.begin(57600);
	if (testMsg()) return 57600;
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	31 ee       	ldi	r19, 0xE1	; 225
	Serial1.end();
	if (DEBUG) Serial.println("   default to 4800..");
	return 4800;
}
    6816:	c9 01       	movw	r24, r18
    6818:	df 91       	pop	r29
    681a:	cf 91       	pop	r28
    681c:	08 95       	ret

0000681e <_ZN3Gps11getMetersToEffff>:
	Serial1.flush();
	Serial1.end();
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
}

float Gps::getMetersTo(float targetLat, float targetLon, float currentLat, float currentLon) {
    681e:	2f 92       	push	r2
    6820:	3f 92       	push	r3
    6822:	4f 92       	push	r4
    6824:	5f 92       	push	r5
    6826:	6f 92       	push	r6
    6828:	7f 92       	push	r7
    682a:	8f 92       	push	r8
    682c:	9f 92       	push	r9
    682e:	af 92       	push	r10
    6830:	bf 92       	push	r11
    6832:	cf 92       	push	r12
    6834:	df 92       	push	r13
    6836:	ef 92       	push	r14
    6838:	ff 92       	push	r15
    683a:	0f 93       	push	r16
    683c:	1f 93       	push	r17
    683e:	cf 93       	push	r28
    6840:	df 93       	push	r29
    6842:	cd b7       	in	r28, 0x3d	; 61
    6844:	de b7       	in	r29, 0x3e	; 62
    6846:	60 97       	sbiw	r28, 0x10	; 16
    6848:	0f b6       	in	r0, 0x3f	; 63
    684a:	f8 94       	cli
    684c:	de bf       	out	0x3e, r29	; 62
    684e:	0f be       	out	0x3f, r0	; 63
    6850:	cd bf       	out	0x3d, r28	; 61
    6852:	69 83       	std	Y+1, r22	; 0x01
    6854:	7a 83       	std	Y+2, r23	; 0x02
    6856:	8b 83       	std	Y+3, r24	; 0x03
    6858:	9c 83       	std	Y+4, r25	; 0x04
    685a:	ca 01       	movw	r24, r20
    685c:	b9 01       	movw	r22, r18
    685e:	a6 01       	movw	r20, r12
    6860:	95 01       	movw	r18, r10
	// returns distance in meters between two positions, both specified
	// as signed decimal-degrees latitude and longitude. Uses great-circle
	// distance computation for hypothised sphere of radius 6372795 meters.
	// Because Earth is no exact sphere, rounding errors may be upto 0.5%.
	float delta = radians(targetLon - currentLon);
    6862:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
    6866:	25 e3       	ldi	r18, 0x35	; 53
    6868:	3a ef       	ldi	r19, 0xFA	; 250
    686a:	4e e8       	ldi	r20, 0x8E	; 142
    686c:	5c e3       	ldi	r21, 0x3C	; 60
    686e:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    6872:	6b 01       	movw	r12, r22
    6874:	5c 01       	movw	r10, r24
	float sdlong = sin(delta);
    6876:	7d 2d       	mov	r23, r13
    6878:	9b 2d       	mov	r25, r11
    687a:	0e 94 f8 42 	call	0x85f0	; 0x85f0 <sin>
    687e:	2b 01       	movw	r4, r22
    6880:	3c 01       	movw	r6, r24
	float cdlong = cos(delta);
    6882:	6c 2d       	mov	r22, r12
    6884:	7d 2d       	mov	r23, r13
    6886:	8a 2d       	mov	r24, r10
    6888:	9b 2d       	mov	r25, r11
    688a:	0e 94 8b 40 	call	0x8116	; 0x8116 <cos>
    688e:	6d 83       	std	Y+5, r22	; 0x05
    6890:	7e 83       	std	Y+6, r23	; 0x06
    6892:	8f 83       	std	Y+7, r24	; 0x07
    6894:	98 87       	std	Y+8, r25	; 0x08
	targetLat = radians(targetLat);
    6896:	25 e3       	ldi	r18, 0x35	; 53
    6898:	3a ef       	ldi	r19, 0xFA	; 250
    689a:	4e e8       	ldi	r20, 0x8E	; 142
    689c:	5c e3       	ldi	r21, 0x3C	; 60
    689e:	69 81       	ldd	r22, Y+1	; 0x01
    68a0:	7a 81       	ldd	r23, Y+2	; 0x02
    68a2:	8b 81       	ldd	r24, Y+3	; 0x03
    68a4:	9c 81       	ldd	r25, Y+4	; 0x04
    68a6:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    68aa:	6b 01       	movw	r12, r22
    68ac:	89 83       	std	Y+1, r24	; 0x01
    68ae:	99 87       	std	Y+9, r25	; 0x09
	currentLat = radians(currentLat);
    68b0:	25 e3       	ldi	r18, 0x35	; 53
    68b2:	3a ef       	ldi	r19, 0xFA	; 250
    68b4:	4e e8       	ldi	r20, 0x8E	; 142
    68b6:	5c e3       	ldi	r21, 0x3C	; 60
    68b8:	c8 01       	movw	r24, r16
    68ba:	b7 01       	movw	r22, r14
    68bc:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    68c0:	16 2f       	mov	r17, r22
    68c2:	07 2f       	mov	r16, r23
    68c4:	38 2e       	mov	r3, r24
    68c6:	29 2e       	mov	r2, r25
	float slat1 = sin(targetLat);
    68c8:	39 81       	ldd	r19, Y+1	; 0x01
    68ca:	29 85       	ldd	r18, Y+9	; 0x09
    68cc:	6c 2d       	mov	r22, r12
    68ce:	7d 2d       	mov	r23, r13
    68d0:	83 2f       	mov	r24, r19
    68d2:	92 2f       	mov	r25, r18
    68d4:	0e 94 f8 42 	call	0x85f0	; 0x85f0 <sin>
    68d8:	4b 01       	movw	r8, r22
    68da:	5c 01       	movw	r10, r24
	float clat1 = cos(targetLat);
    68dc:	39 81       	ldd	r19, Y+1	; 0x01
    68de:	29 85       	ldd	r18, Y+9	; 0x09
    68e0:	6c 2d       	mov	r22, r12
    68e2:	7d 2d       	mov	r23, r13
    68e4:	83 2f       	mov	r24, r19
    68e6:	92 2f       	mov	r25, r18
    68e8:	0e 94 8b 40 	call	0x8116	; 0x8116 <cos>
    68ec:	69 83       	std	Y+1, r22	; 0x01
    68ee:	7a 83       	std	Y+2, r23	; 0x02
    68f0:	8b 83       	std	Y+3, r24	; 0x03
    68f2:	9c 83       	std	Y+4, r25	; 0x04
	float slat2 = sin(currentLat);
    68f4:	a8 01       	movw	r20, r16
    68f6:	91 01       	movw	r18, r2
    68f8:	65 2f       	mov	r22, r21
    68fa:	74 2f       	mov	r23, r20
    68fc:	83 2f       	mov	r24, r19
    68fe:	92 2f       	mov	r25, r18
    6900:	0e 94 f8 42 	call	0x85f0	; 0x85f0 <sin>
    6904:	69 87       	std	Y+9, r22	; 0x09
    6906:	7a 87       	std	Y+10, r23	; 0x0a
    6908:	8b 87       	std	Y+11, r24	; 0x0b
    690a:	9c 87       	std	Y+12, r25	; 0x0c
	float clat2 = cos(currentLat);
    690c:	a8 01       	movw	r20, r16
    690e:	91 01       	movw	r18, r2
    6910:	65 2f       	mov	r22, r21
    6912:	74 2f       	mov	r23, r20
    6914:	83 2f       	mov	r24, r19
    6916:	92 2f       	mov	r25, r18
    6918:	0e 94 8b 40 	call	0x8116	; 0x8116 <cos>
    691c:	6b 01       	movw	r12, r22
    691e:	7c 01       	movw	r14, r24
	delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
    6920:	29 85       	ldd	r18, Y+9	; 0x09
    6922:	3a 85       	ldd	r19, Y+10	; 0x0a
    6924:	4b 85       	ldd	r20, Y+11	; 0x0b
    6926:	5c 85       	ldd	r21, Y+12	; 0x0c
    6928:	69 81       	ldd	r22, Y+1	; 0x01
    692a:	7a 81       	ldd	r23, Y+2	; 0x02
    692c:	8b 81       	ldd	r24, Y+3	; 0x03
    692e:	9c 81       	ldd	r25, Y+4	; 0x04
    6930:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    6934:	6d 87       	std	Y+13, r22	; 0x0d
    6936:	7e 87       	std	Y+14, r23	; 0x0e
    6938:	8f 87       	std	Y+15, r24	; 0x0f
    693a:	98 8b       	std	Y+16, r25	; 0x10
    693c:	a7 01       	movw	r20, r14
    693e:	96 01       	movw	r18, r12
    6940:	c5 01       	movw	r24, r10
    6942:	b4 01       	movw	r22, r8
    6944:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    6948:	2d 81       	ldd	r18, Y+5	; 0x05
    694a:	3e 81       	ldd	r19, Y+6	; 0x06
    694c:	4f 81       	ldd	r20, Y+7	; 0x07
    694e:	58 85       	ldd	r21, Y+8	; 0x08
    6950:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    6954:	9b 01       	movw	r18, r22
    6956:	ac 01       	movw	r20, r24
    6958:	6d 85       	ldd	r22, Y+13	; 0x0d
    695a:	7e 85       	ldd	r23, Y+14	; 0x0e
    695c:	8f 85       	ldd	r24, Y+15	; 0x0f
    695e:	98 89       	ldd	r25, Y+16	; 0x10
    6960:	0e 94 c0 3f 	call	0x7f80	; 0x7f80 <__subsf3>
	delta = sq(delta);
    6964:	26 2f       	mov	r18, r22
    6966:	37 2f       	mov	r19, r23
    6968:	48 2f       	mov	r20, r24
    696a:	59 2f       	mov	r21, r25
    696c:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    6970:	36 2e       	mov	r3, r22
    6972:	27 2e       	mov	r2, r23
    6974:	18 2f       	mov	r17, r24
    6976:	09 2f       	mov	r16, r25
	delta += sq(clat2 * sdlong);
    6978:	a3 01       	movw	r20, r6
    697a:	92 01       	movw	r18, r4
    697c:	c7 01       	movw	r24, r14
    697e:	b6 01       	movw	r22, r12
    6980:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    6984:	26 2f       	mov	r18, r22
    6986:	37 2f       	mov	r19, r23
    6988:	48 2f       	mov	r20, r24
    698a:	59 2f       	mov	r21, r25
    698c:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    6990:	9b 01       	movw	r18, r22
    6992:	ac 01       	movw	r20, r24
    6994:	d1 01       	movw	r26, r2
    6996:	f8 01       	movw	r30, r16
    6998:	6b 2f       	mov	r22, r27
    699a:	7a 2f       	mov	r23, r26
    699c:	8f 2f       	mov	r24, r31
    699e:	9e 2f       	mov	r25, r30
    69a0:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
	delta = sqrt(delta);
    69a4:	0e 94 02 43 	call	0x8604	; 0x8604 <sqrt>
    69a8:	2b 01       	movw	r4, r22
    69aa:	3c 01       	movw	r6, r24
	float denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
    69ac:	29 85       	ldd	r18, Y+9	; 0x09
    69ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    69b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    69b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    69b4:	c5 01       	movw	r24, r10
    69b6:	b4 01       	movw	r22, r8
    69b8:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    69bc:	4b 01       	movw	r8, r22
    69be:	5c 01       	movw	r10, r24
    69c0:	a7 01       	movw	r20, r14
    69c2:	96 01       	movw	r18, r12
    69c4:	69 81       	ldd	r22, Y+1	; 0x01
    69c6:	7a 81       	ldd	r23, Y+2	; 0x02
    69c8:	8b 81       	ldd	r24, Y+3	; 0x03
    69ca:	9c 81       	ldd	r25, Y+4	; 0x04
    69cc:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    69d0:	2d 81       	ldd	r18, Y+5	; 0x05
    69d2:	3e 81       	ldd	r19, Y+6	; 0x06
    69d4:	4f 81       	ldd	r20, Y+7	; 0x07
    69d6:	58 85       	ldd	r21, Y+8	; 0x08
    69d8:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    69dc:	9b 01       	movw	r18, r22
    69de:	ac 01       	movw	r20, r24
    69e0:	c5 01       	movw	r24, r10
    69e2:	b4 01       	movw	r22, r8
    69e4:	0e 94 c1 3f 	call	0x7f82	; 0x7f82 <__addsf3>
    69e8:	9b 01       	movw	r18, r22
    69ea:	ac 01       	movw	r20, r24
	delta = atan2(delta, denom);
    69ec:	c3 01       	movw	r24, r6
    69ee:	b2 01       	movw	r22, r4
    69f0:	0e 94 34 40 	call	0x8068	; 0x8068 <atan2>
	return delta * 6372795 * MTR;
    69f4:	26 e7       	ldi	r18, 0x76	; 118
    69f6:	3b e7       	ldi	r19, 0x7B	; 123
    69f8:	42 ec       	ldi	r20, 0xC2	; 194
    69fa:	5a e4       	ldi	r21, 0x4A	; 74
    69fc:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
}
    6a00:	60 96       	adiw	r28, 0x10	; 16
    6a02:	0f b6       	in	r0, 0x3f	; 63
    6a04:	f8 94       	cli
    6a06:	de bf       	out	0x3e, r29	; 62
    6a08:	0f be       	out	0x3f, r0	; 63
    6a0a:	cd bf       	out	0x3d, r28	; 61
    6a0c:	df 91       	pop	r29
    6a0e:	cf 91       	pop	r28
    6a10:	1f 91       	pop	r17
    6a12:	0f 91       	pop	r16
    6a14:	ff 90       	pop	r15
    6a16:	ef 90       	pop	r14
    6a18:	df 90       	pop	r13
    6a1a:	cf 90       	pop	r12
    6a1c:	bf 90       	pop	r11
    6a1e:	af 90       	pop	r10
    6a20:	9f 90       	pop	r9
    6a22:	8f 90       	pop	r8
    6a24:	7f 90       	pop	r7
    6a26:	6f 90       	pop	r6
    6a28:	5f 90       	pop	r5
    6a2a:	4f 90       	pop	r4
    6a2c:	3f 90       	pop	r3
    6a2e:	2f 90       	pop	r2
    6a30:	08 95       	ret

00006a32 <_ZN3Gps6decodeEh>:

bool Gps::decode(byte inByte) {
    6a32:	cf 93       	push	r28
    6a34:	df 93       	push	r29
    6a36:	ec 01       	movw	r28, r24
	// check if the character completes a valid GPS sentence
	model->setGpsDecode(gpsSource->decode(inByte));
    6a38:	8a 81       	ldd	r24, Y+2	; 0x02
    6a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a3c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <_ZN4NMEA6decodeEc>
    6a40:	61 e0       	ldi	r22, 0x01	; 1
    6a42:	89 2b       	or	r24, r25
    6a44:	09 f4       	brne	.+2      	; 0x6a48 <_ZN3Gps6decodeEh+0x16>
    6a46:	60 e0       	ldi	r22, 0x00	; 0
    6a48:	8c 81       	ldd	r24, Y+4	; 0x04
    6a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    6a4c:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <_ZN14FreeBoardModel12setGpsDecodeEb>
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
    6a50:	8c 81       	ldd	r24, Y+4	; 0x04
    6a52:	9d 81       	ldd	r25, Y+5	; 0x05
    6a54:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <_ZN14FreeBoardModel11isGpsDecodeEv>
    6a58:	88 23       	and	r24, r24
    6a5a:	69 f1       	breq	.+90     	; 0x6ab6 <_ZN3Gps6decodeEh+0x84>
		model->setGpsStatus(gpsSource->gprmc_status());
    6a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a60:	0e 94 1a 1c 	call	0x3834	; 0x3834 <_ZN4NMEA12gprmc_statusEv>
    6a64:	68 2f       	mov	r22, r24
    6a66:	8c 81       	ldd	r24, Y+4	; 0x04
    6a68:	9d 81       	ldd	r25, Y+5	; 0x05
    6a6a:	0e 94 4f 2d 	call	0x5a9e	; 0x5a9e <_ZN14FreeBoardModel12setGpsStatusEc>
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
    6a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a70:	9b 81       	ldd	r25, Y+3	; 0x03
    6a72:	0e 94 1a 1c 	call	0x3834	; 0x3834 <_ZN4NMEA12gprmc_statusEv>
    6a76:	81 34       	cpi	r24, 0x41	; 65
    6a78:	f1 f4       	brne	.+60     	; 0x6ab6 <_ZN3Gps6decodeEh+0x84>
    6a7a:	60 e0       	ldi	r22, 0x00	; 0
    6a7c:	70 e0       	ldi	r23, 0x00	; 0
    6a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a80:	9b 81       	ldd	r25, Y+3	; 0x03
    6a82:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <_ZN4NMEA4termEi>
    6a86:	fc 01       	movw	r30, r24
    6a88:	82 81       	ldd	r24, Z+2	; 0x02
    6a8a:	82 35       	cpi	r24, 0x52	; 82
    6a8c:	a1 f0       	breq	.+40     	; 0x6ab6 <_ZN3Gps6decodeEh+0x84>
    6a8e:	60 e0       	ldi	r22, 0x00	; 0
    6a90:	70 e0       	ldi	r23, 0x00	; 0
    6a92:	8a 81       	ldd	r24, Y+2	; 0x02
    6a94:	9b 81       	ldd	r25, Y+3	; 0x03
    6a96:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <_ZN4NMEA4termEi>
    6a9a:	fc 01       	movw	r30, r24
    6a9c:	83 81       	ldd	r24, Z+3	; 0x03
    6a9e:	8d 34       	cpi	r24, 0x4D	; 77
    6aa0:	51 f0       	breq	.+20     	; 0x6ab6 <_ZN3Gps6decodeEh+0x84>
    6aa2:	60 e0       	ldi	r22, 0x00	; 0
    6aa4:	70 e0       	ldi	r23, 0x00	; 0
    6aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    6aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    6aaa:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <_ZN4NMEA4termEi>
    6aae:	fc 01       	movw	r30, r24
    6ab0:	84 81       	ldd	r24, Z+4	; 0x04
    6ab2:	83 34       	cpi	r24, 0x43	; 67
    6ab4:	31 f4       	brne	.+12     	; 0x6ac2 <_ZN3Gps6decodeEh+0x90>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    6ab8:	9d 81       	ldd	r25, Y+5	; 0x05
}
    6aba:	df 91       	pop	r29
    6abc:	cf 91       	pop	r28
			model->setGpsLongitude(gpsSource->gprmc_longitude());
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
			model->setGpsUtc(gpsSource->gprmc_utc());
		}
	}
	return model->isGpsDecode();
    6abe:	0c 94 71 2c 	jmp	0x58e2	; 0x58e2 <_ZN14FreeBoardModel11isGpsDecodeEv>
	model->setGpsDecode(gpsSource->decode(inByte));
	//if(DEBUG)Serial.print(inByte,BYTE);
	if (model->isGpsDecode()) {
		model->setGpsStatus(gpsSource->gprmc_status());
		if (gpsSource->gprmc_status() == 'A' && gpsSource->term(0)[2] != 'R' && gpsSource->term(0)[3] != 'M' && gpsSource->term(0)[4] != 'C') {
			model->setGpsLastFix(millis());
    6ac2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    6ac6:	ab 01       	movw	r20, r22
    6ac8:	bc 01       	movw	r22, r24
    6aca:	8c 81       	ldd	r24, Y+4	; 0x04
    6acc:	9d 81       	ldd	r25, Y+5	; 0x05
    6ace:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <_ZN14FreeBoardModel13setGpsLastFixEm>
			model->setGpsCourse(gpsSource->gprmc_course());
    6ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ad6:	0e 94 45 1c 	call	0x388a	; 0x388a <_ZN4NMEA12gprmc_courseEv>
    6ada:	ab 01       	movw	r20, r22
    6adc:	bc 01       	movw	r22, r24
    6ade:	8c 81       	ldd	r24, Y+4	; 0x04
    6ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    6ae2:	0e 94 22 2d 	call	0x5a44	; 0x5a44 <_ZN14FreeBoardModel12setGpsCourseEf>
			model->setGpsLatitude(gpsSource->gprmc_latitude());
    6ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    6aea:	0e 94 1d 1c 	call	0x383a	; 0x383a <_ZN4NMEA14gprmc_latitudeEv>
    6aee:	ab 01       	movw	r20, r22
    6af0:	bc 01       	movw	r22, r24
    6af2:	8c 81       	ldd	r24, Y+4	; 0x04
    6af4:	9d 81       	ldd	r25, Y+5	; 0x05
    6af6:	0e 94 37 2d 	call	0x5a6e	; 0x5a6e <_ZN14FreeBoardModel14setGpsLatitudeEf>
			model->setGpsLongitude(gpsSource->gprmc_longitude());
    6afa:	8a 81       	ldd	r24, Y+2	; 0x02
    6afc:	9b 81       	ldd	r25, Y+3	; 0x03
    6afe:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN4NMEA15gprmc_longitudeEv>
    6b02:	ab 01       	movw	r20, r22
    6b04:	bc 01       	movw	r22, r24
    6b06:	8c 81       	ldd	r24, Y+4	; 0x04
    6b08:	9d 81       	ldd	r25, Y+5	; 0x05
    6b0a:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <_ZN14FreeBoardModel15setGpsLongitudeEf>
			model->setGpsSpeed(gpsSource->gprmc_speed(model->getGpsSpeedUnit()));
    6b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b10:	9d 81       	ldd	r25, Y+5	; 0x05
    6b12:	0e 94 2b 2c 	call	0x5856	; 0x5856 <_ZN14FreeBoardModel15getGpsSpeedUnitEv>
    6b16:	ab 01       	movw	r20, r22
    6b18:	bc 01       	movw	r22, r24
    6b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b1e:	0e 94 31 1c 	call	0x3862	; 0x3862 <_ZN4NMEA11gprmc_speedEf>
    6b22:	ab 01       	movw	r20, r22
    6b24:	bc 01       	movw	r22, r24
    6b26:	8c 81       	ldd	r24, Y+4	; 0x04
    6b28:	9d 81       	ldd	r25, Y+5	; 0x05
    6b2a:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <_ZN14FreeBoardModel11setGpsSpeedEf>
			model->setGpsUtc(gpsSource->gprmc_utc());
    6b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b30:	9b 81       	ldd	r25, Y+3	; 0x03
    6b32:	0e 94 10 1c 	call	0x3820	; 0x3820 <_ZN4NMEA9gprmc_utcEv>
    6b36:	ab 01       	movw	r20, r22
    6b38:	bc 01       	movw	r22, r24
    6b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    6b3e:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <_ZN14FreeBoardModel9setGpsUtcEf>
    6b42:	b9 cf       	rjmp	.-142    	; 0x6ab6 <_ZN3Gps6decodeEh+0x84>

00006b44 <_ZN3Gps12setupGpsImplEv>:
}
/*
 * setup implementations for various models of GPS.
 * Define the GPS in GPS.h
 */
void Gps::setupGpsImpl(){
    6b44:	ef 92       	push	r14
    6b46:	ff 92       	push	r15
    6b48:	0f 93       	push	r16
    6b4a:	1f 93       	push	r17
    6b4c:	cf 93       	push	r28
    6b4e:	df 93       	push	r29
    6b50:	cd b7       	in	r28, 0x3d	; 61
    6b52:	de b7       	in	r29, 0x3e	; 62
    6b54:	6e 97       	sbiw	r28, 0x1e	; 30
    6b56:	0f b6       	in	r0, 0x3f	; 63
    6b58:	f8 94       	cli
    6b5a:	de bf       	out	0x3e, r29	; 62
    6b5c:	0f be       	out	0x3f, r0	; 63
    6b5e:	cd bf       	out	0x3d, r28	; 61
    6b60:	8c 01       	movw	r16, r24
	//setup based on GPS type - probably wants a more modular way if many GPS types appear
	if(GPS_EM_406A == model->getGpsModel()){
    6b62:	fc 01       	movw	r30, r24
    6b64:	84 81       	ldd	r24, Z+4	; 0x04
    6b66:	95 81       	ldd	r25, Z+5	; 0x05
    6b68:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <_ZN14FreeBoardModel11getGpsModelEv>
    6b6c:	01 97       	sbiw	r24, 0x01	; 1
    6b6e:	09 f0       	breq	.+2      	; 0x6b72 <_ZN3Gps12setupGpsImplEv+0x2e>
    6b70:	8f c0       	rjmp	.+286    	; 0x6c90 <_ZN3Gps12setupGpsImplEv+0x14c>
		//Serial1.begin(38400, 8, 1, 0); //gps
		//set debug on
		Serial1.println("$PSRF105,1*3E");
    6b72:	60 e3       	ldi	r22, 0x30	; 48
    6b74:	74 e0       	ldi	r23, 0x04	; 4
    6b76:	88 eb       	ldi	r24, 0xB8	; 184
    6b78:	96 e0       	ldi	r25, 0x06	; 6
    6b7a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>

		//set VTG off -  Vector track an Speed over the Ground
		Serial1.println("$PSRF103,05,00,00,01*21");
    6b7e:	6e e3       	ldi	r22, 0x3E	; 62
    6b80:	74 e0       	ldi	r23, 0x04	; 4
    6b82:	88 eb       	ldi	r24, 0xB8	; 184
    6b84:	96 e0       	ldi	r25, 0x06	; 6
    6b86:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		//set GLL off -  Lat/Lon data
		Serial1.println("$PSRF103,01,00,00,01*25");
    6b8a:	66 e5       	ldi	r22, 0x56	; 86
    6b8c:	74 e0       	ldi	r23, 0x04	; 4
    6b8e:	88 eb       	ldi	r24, 0xB8	; 184
    6b90:	96 e0       	ldi	r25, 0x06	; 6
    6b92:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		//set GGA on, 5sec, constant -  Fix information
		Serial1.println("$PSRF103,00,00,05,01*21");
    6b96:	6e e6       	ldi	r22, 0x6E	; 110
    6b98:	74 e0       	ldi	r23, 0x04	; 4
    6b9a:	88 eb       	ldi	r24, 0xB8	; 184
    6b9c:	96 e0       	ldi	r25, 0x06	; 6
    6b9e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		//set GSA on, 5 sec, constant - Overall Satellite data
		Serial1.println("$PSRF103,02,00,05,01*23");
    6ba2:	66 e8       	ldi	r22, 0x86	; 134
    6ba4:	74 e0       	ldi	r23, 0x04	; 4
    6ba6:	88 eb       	ldi	r24, 0xB8	; 184
    6ba8:	96 e0       	ldi	r25, 0x06	; 6
    6baa:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		//set GSV on, 20sec, constant -Detailed Satellite data
		Serial1.println("$PSRF103,03,00,20,01*25");
    6bae:	6e e9       	ldi	r22, 0x9E	; 158
    6bb0:	74 e0       	ldi	r23, 0x04	; 4
    6bb2:	88 eb       	ldi	r24, 0xB8	; 184
    6bb4:	96 e0       	ldi	r25, 0x06	; 6
    6bb6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		//set RMC on, 1sec, constant, Recommended minimum info
		Serial1.println("$PSRF103,04,00,01,01*21");
    6bba:	66 eb       	ldi	r22, 0xB6	; 182
    6bbc:	74 e0       	ldi	r23, 0x04	; 4
    6bbe:	88 eb       	ldi	r24, 0xB8	; 184
    6bc0:	96 e0       	ldi	r25, 0x06	; 6
    6bc2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>

		//debug off
		Serial1.println("$PSRF105,0*3F");
    6bc6:	6e ec       	ldi	r22, 0xCE	; 206
    6bc8:	74 e0       	ldi	r23, 0x04	; 4
    6bca:	88 eb       	ldi	r24, 0xB8	; 184
    6bcc:	96 e0       	ldi	r25, 0x06	; 6
    6bce:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		//#define SIRF_BAUD_RATE_38400    "$PSRF100,1,38400,8,1,0*3D\r\n"
		//#define SIRF_BAUD_RATE_57600    "$PSRF100,1,57600,8,1,0*36\r\n"

		//$PSRF100,1,38400,8,1,0*3D\r\n
		char gpsSentence [20];
		Serial1.print("$PSRF100,1,");
    6bd2:	6c ed       	ldi	r22, 0xDC	; 220
    6bd4:	74 e0       	ldi	r23, 0x04	; 4
    6bd6:	88 eb       	ldi	r24, 0xB8	; 184
    6bd8:	96 e0       	ldi	r25, 0x06	; 6
    6bda:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		Serial1.print(model->getSerialBaud1());
    6bde:	f8 01       	movw	r30, r16
    6be0:	84 81       	ldd	r24, Z+4	; 0x04
    6be2:	95 81       	ldd	r25, Z+5	; 0x05
    6be4:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6be8:	4a e0       	ldi	r20, 0x0A	; 10
    6bea:	50 e0       	ldi	r21, 0x00	; 0
    6bec:	bc 01       	movw	r22, r24
    6bee:	88 eb       	ldi	r24, 0xB8	; 184
    6bf0:	96 e0       	ldi	r25, 0x06	; 6
    6bf2:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>
		Serial.print(",8,1,0*3D\r\n");
    6bf6:	68 ee       	ldi	r22, 0xE8	; 232
    6bf8:	74 e0       	ldi	r23, 0x04	; 4
    6bfa:	8a ed       	ldi	r24, 0xDA	; 218
    6bfc:	96 e0       	ldi	r25, 0x06	; 6
    6bfe:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
    6c02:	18 8e       	std	Y+24, r1	; 0x18
    6c04:	1f 8a       	std	Y+23, r1	; 0x17
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6c06:	88 e0       	ldi	r24, 0x08	; 8
    6c08:	92 e0       	ldi	r25, 0x02	; 2
    6c0a:	9e 8b       	std	Y+22, r25	; 0x16
    6c0c:	8d 8b       	std	Y+21, r24	; 0x15
    6c0e:	ee 24       	eor	r14, r14
    6c10:	e3 94       	inc	r14
    6c12:	f1 2c       	mov	r15, r1
    6c14:	ec 0e       	add	r14, r28
    6c16:	fd 1e       	adc	r15, r29
    6c18:	fa 8e       	std	Y+26, r15	; 0x1a
    6c1a:	e9 8e       	std	Y+25, r14	; 0x19
    6c1c:	84 e1       	ldi	r24, 0x14	; 20
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	9e 8f       	std	Y+30, r25	; 0x1e
    6c22:	8d 8f       	std	Y+29, r24	; 0x1d
  { begin(); }
    6c24:	ce 01       	movw	r24, r28
    6c26:	45 96       	adiw	r24, 0x15	; 21
    6c28:	0e 94 d7 17 	call	0x2fae	; 0x2fae <_ZN7PString5beginEv>
		PString str(gpsSentence, sizeof(gpsSentence));
		str.print("$PSRF100,1,");
    6c2c:	6c ed       	ldi	r22, 0xDC	; 220
    6c2e:	74 e0       	ldi	r23, 0x04	; 4
    6c30:	ce 01       	movw	r24, r28
    6c32:	45 96       	adiw	r24, 0x15	; 21
    6c34:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		str.print(model->getSerialBaud1());
    6c38:	f8 01       	movw	r30, r16
    6c3a:	84 81       	ldd	r24, Z+4	; 0x04
    6c3c:	95 81       	ldd	r25, Z+5	; 0x05
    6c3e:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6c42:	4a e0       	ldi	r20, 0x0A	; 10
    6c44:	50 e0       	ldi	r21, 0x00	; 0
    6c46:	bc 01       	movw	r22, r24
    6c48:	ce 01       	movw	r24, r28
    6c4a:	45 96       	adiw	r24, 0x15	; 21
    6c4c:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>
		str.print(",8,1,0*");
    6c50:	64 ef       	ldi	r22, 0xF4	; 244
    6c52:	74 e0       	ldi	r23, 0x04	; 4
    6c54:	ce 01       	movw	r24, r28
    6c56:	45 96       	adiw	r24, 0x15	; 21
    6c58:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		//calculate the checksum
		byte cs = getChecksum(gpsSentence); //clear any old checksum
    6c5c:	c7 01       	movw	r24, r14
    6c5e:	0e 94 83 32 	call	0x6506	; 0x6506 <_Z11getChecksumPc>
    6c62:	f8 2e       	mov	r15, r24
		//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
		if (cs < 0x10) str.print('0');
    6c64:	ff e0       	ldi	r31, 0x0F	; 15
    6c66:	f8 17       	cp	r31, r24
    6c68:	28 f0       	brcs	.+10     	; 0x6c74 <_ZN3Gps12setupGpsImplEv+0x130>
    6c6a:	60 e3       	ldi	r22, 0x30	; 48
    6c6c:	ce 01       	movw	r24, r28
    6c6e:	45 96       	adiw	r24, 0x15	; 21
    6c70:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6c74:	40 e1       	ldi	r20, 0x10	; 16
    6c76:	50 e0       	ldi	r21, 0x00	; 0
    6c78:	6f 2d       	mov	r22, r15
    6c7a:	ce 01       	movw	r24, r28
    6c7c:	45 96       	adiw	r24, 0x15	; 21
    6c7e:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN5Print5printEhi>
		Serial.println(gpsSentence);
    6c82:	be 01       	movw	r22, r28
    6c84:	6f 5f       	subi	r22, 0xFF	; 255
    6c86:	7f 4f       	sbci	r23, 0xFF	; 255
    6c88:	8a ed       	ldi	r24, 0xDA	; 218
    6c8a:	96 e0       	ldi	r25, 0x06	; 6
    6c8c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	}
	if(GPS_MTEK_3329 == model->getGpsModel()){
    6c90:	f8 01       	movw	r30, r16
    6c92:	84 81       	ldd	r24, Z+4	; 0x04
    6c94:	95 81       	ldd	r25, Z+5	; 0x05
    6c96:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <_ZN14FreeBoardModel11getGpsModelEv>
    6c9a:	02 97       	sbiw	r24, 0x02	; 2
    6c9c:	09 f0       	breq	.+2      	; 0x6ca0 <_ZN3Gps12setupGpsImplEv+0x15c>
    6c9e:	52 c0       	rjmp	.+164    	; 0x6d44 <_ZN3Gps12setupGpsImplEv+0x200>

		//setting update rate to 1Hz
		Serial1.println("$PMTK220,1000*1F");
    6ca0:	6c ef       	ldi	r22, 0xFC	; 252
    6ca2:	74 e0       	ldi	r23, 0x04	; 4
    6ca4:	88 eb       	ldi	r24, 0xB8	; 184
    6ca6:	96 e0       	ldi	r25, 0x06	; 6
    6ca8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
		//setting the NMEA Output to get RMC, GGA, GSA & GSV.
		Serial1.println("$PMTK314,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0*28");
    6cac:	6d e0       	ldi	r22, 0x0D	; 13
    6cae:	75 e0       	ldi	r23, 0x05	; 5
    6cb0:	88 eb       	ldi	r24, 0xB8	; 184
    6cb2:	96 e0       	ldi	r25, 0x06	; 6
    6cb4:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
    6cb8:	18 8e       	std	Y+24, r1	; 0x18
    6cba:	1f 8a       	std	Y+23, r1	; 0x17
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6cbc:	88 e0       	ldi	r24, 0x08	; 8
    6cbe:	92 e0       	ldi	r25, 0x02	; 2
    6cc0:	9e 8b       	std	Y+22, r25	; 0x16
    6cc2:	8d 8b       	std	Y+21, r24	; 0x15
    6cc4:	ee 24       	eor	r14, r14
    6cc6:	e3 94       	inc	r14
    6cc8:	f1 2c       	mov	r15, r1
    6cca:	ec 0e       	add	r14, r28
    6ccc:	fd 1e       	adc	r15, r29
    6cce:	fa 8e       	std	Y+26, r15	; 0x1a
    6cd0:	e9 8e       	std	Y+25, r14	; 0x19
    6cd2:	84 e1       	ldi	r24, 0x14	; 20
    6cd4:	90 e0       	ldi	r25, 0x00	; 0
    6cd6:	9e 8f       	std	Y+30, r25	; 0x1e
    6cd8:	8d 8f       	std	Y+29, r24	; 0x1d
  { begin(); }
    6cda:	ce 01       	movw	r24, r28
    6cdc:	45 96       	adiw	r24, 0x15	; 21
    6cde:	0e 94 d7 17 	call	0x2fae	; 0x2fae <_ZN7PString5beginEv>
		You can also set the GPS to any desired baud rate speed by changing the value inside the string and generate a new checksum here: http://www.hhhh.org/wiml/proj/nmeaxor.html
		 */

		char gpsSentence [20];
		PString str(gpsSentence, sizeof(gpsSentence));
		str.print("$PMTK251,");
    6ce2:	6f e3       	ldi	r22, 0x3F	; 63
    6ce4:	75 e0       	ldi	r23, 0x05	; 5
    6ce6:	ce 01       	movw	r24, r28
    6ce8:	45 96       	adiw	r24, 0x15	; 21
    6cea:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		str.print(model->getSerialBaud1());
    6cee:	f8 01       	movw	r30, r16
    6cf0:	84 81       	ldd	r24, Z+4	; 0x04
    6cf2:	95 81       	ldd	r25, Z+5	; 0x05
    6cf4:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6cf8:	4a e0       	ldi	r20, 0x0A	; 10
    6cfa:	50 e0       	ldi	r21, 0x00	; 0
    6cfc:	bc 01       	movw	r22, r24
    6cfe:	ce 01       	movw	r24, r28
    6d00:	45 96       	adiw	r24, 0x15	; 21
    6d02:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>
		str.print("*");
    6d06:	6a ef       	ldi	r22, 0xFA	; 250
    6d08:	74 e0       	ldi	r23, 0x04	; 4
    6d0a:	ce 01       	movw	r24, r28
    6d0c:	45 96       	adiw	r24, 0x15	; 21
    6d0e:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		//calculate the checksum
		byte cs = getChecksum(gpsSentence); //clear any old checksum
    6d12:	c7 01       	movw	r24, r14
    6d14:	0e 94 83 32 	call	0x6506	; 0x6506 <_Z11getChecksumPc>
    6d18:	18 2f       	mov	r17, r24
		//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
		if (cs < 0x10) str.print('0');
    6d1a:	80 31       	cpi	r24, 0x10	; 16
    6d1c:	28 f4       	brcc	.+10     	; 0x6d28 <_ZN3Gps12setupGpsImplEv+0x1e4>
    6d1e:	60 e3       	ldi	r22, 0x30	; 48
    6d20:	ce 01       	movw	r24, r28
    6d22:	45 96       	adiw	r24, 0x15	; 21
    6d24:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
		str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6d28:	40 e1       	ldi	r20, 0x10	; 16
    6d2a:	50 e0       	ldi	r21, 0x00	; 0
    6d2c:	61 2f       	mov	r22, r17
    6d2e:	ce 01       	movw	r24, r28
    6d30:	45 96       	adiw	r24, 0x15	; 21
    6d32:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN5Print5printEhi>
		Serial.println(gpsSentence);
    6d36:	be 01       	movw	r22, r28
    6d38:	6f 5f       	subi	r22, 0xFF	; 255
    6d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d3c:	8a ed       	ldi	r24, 0xDA	; 218
    6d3e:	96 e0       	ldi	r25, 0x06	; 6
    6d40:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>


	}
}
    6d44:	6e 96       	adiw	r28, 0x1e	; 30
    6d46:	0f b6       	in	r0, 0x3f	; 63
    6d48:	f8 94       	cli
    6d4a:	de bf       	out	0x3e, r29	; 62
    6d4c:	0f be       	out	0x3f, r0	; 63
    6d4e:	cd bf       	out	0x3d, r28	; 61
    6d50:	df 91       	pop	r29
    6d52:	cf 91       	pop	r28
    6d54:	1f 91       	pop	r17
    6d56:	0f 91       	pop	r16
    6d58:	ff 90       	pop	r15
    6d5a:	ef 90       	pop	r14
    6d5c:	08 95       	ret

00006d5e <_ZN3Gps8setupGpsEv>:
//	return gpsDecode;
//}
/*
 Set baud rate and various message frequencies.
 */
void Gps::setupGps() {
    6d5e:	cf 93       	push	r28
    6d60:	df 93       	push	r29
    6d62:	ec 01       	movw	r28, r24
	 6 MSS (If internal beacon is supported)
	 7 Not defined
	 8 ZDA (if 1PPS output is supported)
	 9 Not defined
	 */
	autoBaud();
    6d64:	0e 94 81 33 	call	0x6702	; 0x6702 <_ZN3Gps8autoBaudEv>

	setupGpsImpl();
    6d68:	ce 01       	movw	r24, r28
    6d6a:	0e 94 a2 35 	call	0x6b44	; 0x6b44 <_ZN3Gps12setupGpsImplEv>
	//now flush and restart
	Serial1.flush();
    6d6e:	88 eb       	ldi	r24, 0xB8	; 184
    6d70:	96 e0       	ldi	r25, 0x06	; 6
    6d72:	0e 94 ce 01 	call	0x39c	; 0x39c <_ZN14HardwareSerial5flushEv>
	Serial1.end();
    6d76:	88 eb       	ldi	r24, 0xB8	; 184
    6d78:	96 e0       	ldi	r25, 0x06	; 6
    6d7a:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN14HardwareSerial3endEv>
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
    6d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d80:	9d 81       	ldd	r25, Y+5	; 0x05
    6d82:	0e 94 c8 2d 	call	0x5b90	; 0x5b90 <_ZN14FreeBoardModel14getSerialBaud1Ev>
    6d86:	ac 01       	movw	r20, r24
    6d88:	66 27       	eor	r22, r22
    6d8a:	57 fd       	sbrc	r21, 7
    6d8c:	60 95       	com	r22
    6d8e:	76 2f       	mov	r23, r22
    6d90:	26 e0       	ldi	r18, 0x06	; 6
    6d92:	88 eb       	ldi	r24, 0xB8	; 184
    6d94:	96 e0       	ldi	r25, 0x06	; 6
}
    6d96:	df 91       	pop	r29
    6d98:	cf 91       	pop	r28

	setupGpsImpl();
	//now flush and restart
	Serial1.flush();
	Serial1.end();
	Serial1.begin(model->getSerialBaud1(), SERIAL_8N1);
    6d9a:	0c 94 29 05 	jmp	0xa52	; 0xa52 <_ZN14HardwareSerial5beginEmh>

00006d9e <_GLOBAL__sub_I_gpsBuffer>:
    6d9e:	10 92 18 11 	sts	0x1118, r1
    6da2:	10 92 17 11 	sts	0x1117, r1
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6da6:	88 e0       	ldi	r24, 0x08	; 8
    6da8:	92 e0       	ldi	r25, 0x02	; 2
    6daa:	90 93 16 11 	sts	0x1116, r25
    6dae:	80 93 15 11 	sts	0x1115, r24
    6db2:	8f e1       	ldi	r24, 0x1F	; 31
    6db4:	91 e1       	ldi	r25, 0x11	; 17
    6db6:	90 93 1a 11 	sts	0x111A, r25
    6dba:	80 93 19 11 	sts	0x1119, r24
    6dbe:	88 e2       	ldi	r24, 0x28	; 40
    6dc0:	90 e0       	ldi	r25, 0x00	; 0
    6dc2:	90 93 1e 11 	sts	0x111E, r25
    6dc6:	80 93 1d 11 	sts	0x111D, r24
  { begin(); }
    6dca:	85 e1       	ldi	r24, 0x15	; 21
    6dcc:	91 e1       	ldi	r25, 0x11	; 17
    6dce:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <_ZN7PString5beginEv>

00006dd2 <_ZN10NmeaSerialD1Ev>:

class AltSoftSerial : public Stream
{
public:
	AltSoftSerial() { }
	~AltSoftSerial() { end(); }
    6dd2:	28 e1       	ldi	r18, 0x18	; 24
    6dd4:	32 e0       	ldi	r19, 0x02	; 2
    6dd6:	fc 01       	movw	r30, r24
    6dd8:	31 83       	std	Z+1, r19	; 0x01
    6dda:	20 83       	st	Z, r18
    6ddc:	0c 94 1d 23 	jmp	0x463a	; 0x463a <_ZN13AltSoftSerial3endEv>

00006de0 <_ZN10NmeaSerialD0Ev>:
 *      Author: robert
 */

#include "NmeaSerial.h"

NmeaSerial::~NmeaSerial() {
    6de0:	cf 93       	push	r28
    6de2:	df 93       	push	r29
    6de4:	ec 01       	movw	r28, r24
    6de6:	88 e1       	ldi	r24, 0x18	; 24
    6de8:	92 e0       	ldi	r25, 0x02	; 2
    6dea:	99 83       	std	Y+1, r25	; 0x01
    6dec:	88 83       	st	Y, r24
    6dee:	0e 94 1d 23 	call	0x463a	; 0x463a <_ZN13AltSoftSerial3endEv>

}
    6df2:	ce 01       	movw	r24, r28
    6df4:	df 91       	pop	r29
    6df6:	cf 91       	pop	r28
    6df8:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_ZdlPv>

00006dfc <_ZN10NmeaSerial5beginEl>:
void NmeaSerial::begin(long speed) {
	//initialise the nmea output
	//pinMode(nmeaRxPin, INPUT);
	//pinMode(nmeaTxPin, OUTPUT);
	AltSoftSerial::begin(speed);
    6dfc:	9a 01       	movw	r18, r20
    6dfe:	ab 01       	movw	r20, r22
	static void begin(uint32_t baud) { init((F_CPU + baud / 2) / baud); }
    6e00:	ca 01       	movw	r24, r20
    6e02:	b9 01       	movw	r22, r18
    6e04:	96 95       	lsr	r25
    6e06:	87 95       	ror	r24
    6e08:	77 95       	ror	r23
    6e0a:	67 95       	ror	r22
    6e0c:	7c 5d       	subi	r23, 0xDC	; 220
    6e0e:	8b 40       	sbci	r24, 0x0B	; 11
    6e10:	9f 4f       	sbci	r25, 0xFF	; 255
    6e12:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    6e16:	ca 01       	movw	r24, r20
    6e18:	b9 01       	movw	r22, r18
    6e1a:	0c 94 03 21 	jmp	0x4206	; 0x4206 <_ZN13AltSoftSerial4initEm>

00006e1e <_ZN10NmeaSerial9printNmeaEPc>:

void NmeaSerial::printNmea(char* sentence) {
	//sentence can be up to 80 chars
	//make it as perfect as possible, as the Raymarine C70 is very touchy
	// noInterrupts();
	println(sentence);
    6e1e:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>

00006e22 <_ZN10NmeaSerial13printWindNmeaEv>:
 * 4. Wind Speed Units, K/M/N
 * 5. Status, A = Data Valid
 * 6. Checksum
 *
 */
void NmeaSerial::printWindNmea() {
    6e22:	cf 92       	push	r12
    6e24:	df 92       	push	r13
    6e26:	ef 92       	push	r14
    6e28:	ff 92       	push	r15
    6e2a:	0f 93       	push	r16
    6e2c:	1f 93       	push	r17
    6e2e:	cf 93       	push	r28
    6e30:	df 93       	push	r29
    6e32:	cd b7       	in	r28, 0x3d	; 61
    6e34:	de b7       	in	r29, 0x3e	; 62
    6e36:	2a 97       	sbiw	r28, 0x0a	; 10
    6e38:	0f b6       	in	r0, 0x3f	; 63
    6e3a:	f8 94       	cli
    6e3c:	de bf       	out	0x3e, r29	; 62
    6e3e:	0f be       	out	0x3f, r0	; 63
    6e40:	cd bf       	out	0x3d, r28	; 61
    6e42:	8c 01       	movw	r16, r24
	//Assemble a sentence of the various parts so that we can calculate the proper checksum

	PString str(windSentence, sizeof(windSentence));
    6e44:	7c 01       	movw	r14, r24
    6e46:	8e e0       	ldi	r24, 0x0E	; 14
    6e48:	e8 0e       	add	r14, r24
    6e4a:	f1 1c       	adc	r15, r1
    6e4c:	1c 82       	std	Y+4, r1	; 0x04
    6e4e:	1b 82       	std	Y+3, r1	; 0x03
#endif

public:

  // Basic constructor requires a preallocated buffer
  PString(char *buf, size_t size) : _buf(buf), _size(size)
    6e50:	88 e0       	ldi	r24, 0x08	; 8
    6e52:	92 e0       	ldi	r25, 0x02	; 2
    6e54:	9a 83       	std	Y+2, r25	; 0x02
    6e56:	89 83       	std	Y+1, r24	; 0x01
    6e58:	fe 82       	std	Y+6, r15	; 0x06
    6e5a:	ed 82       	std	Y+5, r14	; 0x05
    6e5c:	8e e1       	ldi	r24, 0x1E	; 30
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
    6e60:	9a 87       	std	Y+10, r25	; 0x0a
    6e62:	89 87       	std	Y+9, r24	; 0x09
  { begin(); }
    6e64:	ce 01       	movw	r24, r28
    6e66:	01 96       	adiw	r24, 0x01	; 1
    6e68:	0e 94 d7 17 	call	0x2fae	; 0x2fae <_ZN7PString5beginEv>
	str.print("$WIMWV,");
    6e6c:	61 e5       	ldi	r22, 0x51	; 81
    6e6e:	75 e0       	ldi	r23, 0x05	; 5
    6e70:	ce 01       	movw	r24, r28
    6e72:	01 96       	adiw	r24, 0x01	; 1
    6e74:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	str.print(model->getWindApparentDir());
    6e78:	f8 01       	movw	r30, r16
    6e7a:	84 85       	ldd	r24, Z+12	; 0x0c
    6e7c:	95 85       	ldd	r25, Z+13	; 0x0d
    6e7e:	0e 94 48 2c 	call	0x5890	; 0x5890 <_ZN14FreeBoardModel18getWindApparentDirEv>
    6e82:	4a e0       	ldi	r20, 0x0A	; 10
    6e84:	50 e0       	ldi	r21, 0x00	; 0
    6e86:	bc 01       	movw	r22, r24
    6e88:	ce 01       	movw	r24, r28
    6e8a:	01 96       	adiw	r24, 0x01	; 1
    6e8c:	0e 94 41 08 	call	0x1082	; 0x1082 <_ZN5Print5printEii>
	str.print(".0,R,");
    6e90:	69 e5       	ldi	r22, 0x59	; 89
    6e92:	75 e0       	ldi	r23, 0x05	; 5
    6e94:	ce 01       	movw	r24, r28
    6e96:	01 96       	adiw	r24, 0x01	; 1
    6e98:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	str.print(model->getWindAverage());
    6e9c:	f8 01       	movw	r30, r16
    6e9e:	84 85       	ldd	r24, Z+12	; 0x0c
    6ea0:	95 85       	ldd	r25, Z+13	; 0x0d
    6ea2:	0e 94 4e 2c 	call	0x589c	; 0x589c <_ZN14FreeBoardModel14getWindAverageEv>
    6ea6:	ab 01       	movw	r20, r22
    6ea8:	bc 01       	movw	r22, r24
    6eaa:	22 e0       	ldi	r18, 0x02	; 2
    6eac:	30 e0       	ldi	r19, 0x00	; 0
    6eae:	ce 01       	movw	r24, r28
    6eb0:	01 96       	adiw	r24, 0x01	; 1
    6eb2:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN5Print5printEdi>
	str.print(",N,A*");
    6eb6:	6f e5       	ldi	r22, 0x5F	; 95
    6eb8:	75 e0       	ldi	r23, 0x05	; 5
    6eba:	ce 01       	movw	r24, r28
    6ebc:	01 96       	adiw	r24, 0x01	; 1
    6ebe:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	//calculate the checksum

	cs = getChecksum(windSentence); //clear any old checksum
    6ec2:	c7 01       	movw	r24, r14
    6ec4:	0e 94 83 32 	call	0x6506	; 0x6506 <_Z11getChecksumPc>
    6ec8:	68 01       	movw	r12, r16
    6eca:	f0 e4       	ldi	r31, 0x40	; 64
    6ecc:	cf 0e       	add	r12, r31
    6ece:	d1 1c       	adc	r13, r1
    6ed0:	f6 01       	movw	r30, r12
    6ed2:	80 83       	st	Z, r24
	//bug - arduino prints 0x007 as 7, 0x02B as 2B, so we add it now
	if (cs < 0x10) str.print('0');
    6ed4:	80 31       	cpi	r24, 0x10	; 16
    6ed6:	28 f4       	brcc	.+10     	; 0x6ee2 <_ZN10NmeaSerial13printWindNmeaEv+0xc0>
    6ed8:	60 e3       	ldi	r22, 0x30	; 48
    6eda:	ce 01       	movw	r24, r28
    6edc:	01 96       	adiw	r24, 0x01	; 1
    6ede:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN5Print5printEc>
	str.print(cs, HEX); // Assemble the final message and send it out the serial port
    6ee2:	40 e1       	ldi	r20, 0x10	; 16
    6ee4:	50 e0       	ldi	r21, 0x00	; 0
    6ee6:	f6 01       	movw	r30, r12
    6ee8:	60 81       	ld	r22, Z
    6eea:	ce 01       	movw	r24, r28
    6eec:	01 96       	adiw	r24, 0x01	; 1
    6eee:	0e 94 c1 07 	call	0xf82	; 0xf82 <_ZN5Print5printEhi>
	Serial.println(windSentence);
    6ef2:	b7 01       	movw	r22, r14
    6ef4:	8a ed       	ldi	r24, 0xDA	; 218
    6ef6:	96 e0       	ldi	r25, 0x06	; 6
    6ef8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZN5Print7printlnEPKc>
	printNmea(windSentence);
    6efc:	b7 01       	movw	r22, r14
    6efe:	c8 01       	movw	r24, r16
    6f00:	0e 94 0f 37 	call	0x6e1e	; 0x6e1e <_ZN10NmeaSerial9printNmeaEPc>

}
    6f04:	2a 96       	adiw	r28, 0x0a	; 10
    6f06:	0f b6       	in	r0, 0x3f	; 63
    6f08:	f8 94       	cli
    6f0a:	de bf       	out	0x3e, r29	; 62
    6f0c:	0f be       	out	0x3f, r0	; 63
    6f0e:	cd bf       	out	0x3d, r28	; 61
    6f10:	df 91       	pop	r29
    6f12:	cf 91       	pop	r28
    6f14:	1f 91       	pop	r17
    6f16:	0f 91       	pop	r16
    6f18:	ff 90       	pop	r15
    6f1a:	ef 90       	pop	r14
    6f1c:	df 90       	pop	r13
    6f1e:	cf 90       	pop	r12
    6f20:	08 95       	ret

00006f22 <_ZN7SeatalkC1EP14HardwareSerialP14FreeBoardModel>:

 */

#include "Seatalk.h"

	Seatalk::Seatalk( HardwareSerial* serial, FreeBoardModel* model) {
    6f22:	fc 01       	movw	r30, r24
	this->model=model;
    6f24:	57 8b       	std	Z+23, r21	; 0x17
    6f26:	46 8b       	std	Z+22, r20	; 0x16
	this->serial=serial;
    6f28:	71 8f       	std	Z+25, r23	; 0x19
    6f2a:	60 8f       	std	Z+24, r22	; 0x18
	seaTalkPos = 0;
    6f2c:	11 82       	std	Z+1, r1	; 0x01
    6f2e:	10 82       	st	Z, r1
    6f30:	08 95       	ret

00006f32 <_ZN7Seatalk18processSeaTalkByteEh>:
	// Send 36  00  01      Cancel MOB (Man Over Board) condition
	serial->write9(0x36, true);
	serial->write9(0x00, false);
	serial->write9(0x01, false);
}
void Seatalk::processSeaTalkByte(byte inByte) {
    6f32:	fc 01       	movw	r30, r24
		processSeatalk(seatalkStream);
		seaTalkPos = 0;
		// Serial.print("Command:");
		inByte = inByte - 256;
	}
	seatalkStream[seaTalkPos] = inByte;
    6f34:	a0 81       	ld	r26, Z
    6f36:	b1 81       	ldd	r27, Z+1	; 0x01
    6f38:	a8 0f       	add	r26, r24
    6f3a:	b9 1f       	adc	r27, r25
    6f3c:	12 96       	adiw	r26, 0x02	; 2
    6f3e:	6c 93       	st	X, r22
	if (seaTalkPos < 19)
    6f40:	80 81       	ld	r24, Z
    6f42:	91 81       	ldd	r25, Z+1	; 0x01
    6f44:	43 97       	sbiw	r24, 0x13	; 19
    6f46:	2c f4       	brge	.+10     	; 0x6f52 <_ZN7Seatalk18processSeaTalkByteEh+0x20>
		seaTalkPos++;
    6f48:	80 81       	ld	r24, Z
    6f4a:	91 81       	ldd	r25, Z+1	; 0x01
    6f4c:	01 96       	adiw	r24, 0x01	; 1
    6f4e:	91 83       	std	Z+1, r25	; 0x01
    6f50:	80 83       	st	Z, r24
    6f52:	08 95       	ret

00006f54 <_ZN4WindC1EP14FreeBoardModel>:
		57318, 57864, 58392, 58902, 59395, 59869, 60325, 60763, 61182, 61583, 61965, 62327, 62671, 62996, 63302, 63588, 63855, 64103, 64331, 64539, 64728,
		64897, 65047, 65176, 65286, 65375, 65445, 65495, 65525, 65535, };

AverageList<val> dirList = AverageList<val>(dirStorage, MAX_NUMBER_OF_READINGS);

Wind::Wind(FreeBoardModel* model) {
    6f54:	cf 93       	push	r28
    6f56:	df 93       	push	r29
    6f58:	eb 01       	movw	r28, r22
	this->model = model;
    6f5a:	fc 01       	movw	r30, r24
    6f5c:	71 83       	std	Z+1, r23	; 0x01
    6f5e:	60 83       	st	Z, r22
	//initialise the wind interrupt
	windSpeedMicros = micros();
    6f60:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    6f64:	60 93 84 11 	sts	0x1184, r22
    6f68:	70 93 85 11 	sts	0x1185, r23
    6f6c:	80 93 86 11 	sts	0x1186, r24
    6f70:	90 93 87 11 	sts	0x1187, r25
	windSpeedMicrosLast = windSpeedMicros;
    6f74:	40 91 84 11 	lds	r20, 0x1184
    6f78:	50 91 85 11 	lds	r21, 0x1185
    6f7c:	60 91 86 11 	lds	r22, 0x1186
    6f80:	70 91 87 11 	lds	r23, 0x1187
    6f84:	40 93 80 11 	sts	0x1180, r20
    6f88:	50 93 81 11 	sts	0x1181, r21
    6f8c:	60 93 82 11 	sts	0x1182, r22
    6f90:	70 93 83 11 	sts	0x1183, r23
	windDirDur = 0;
    6f94:	10 92 70 11 	sts	0x1170, r1
    6f98:	10 92 71 11 	sts	0x1171, r1
    6f9c:	10 92 72 11 	sts	0x1172, r1
    6fa0:	10 92 73 11 	sts	0x1173, r1
	windSpeedDur = 0;
    6fa4:	10 92 74 11 	sts	0x1174, r1
    6fa8:	10 92 75 11 	sts	0x1175, r1
    6fac:	10 92 76 11 	sts	0x1176, r1
    6fb0:	10 92 77 11 	sts	0x1177, r1
	windSpeedFlag = true;
    6fb4:	81 e0       	ldi	r24, 0x01	; 1
    6fb6:	80 93 57 11 	sts	0x1157, r24
	windDirFlag = true;
    6fba:	80 93 56 11 	sts	0x1156, r24
			return min;
		}
		
		//reset the AverageList
		void reset(){ 
			currentSize = 0; 
    6fbe:	10 92 4a 11 	sts	0x114A, r1
			currentIndex = 0;
    6fc2:	10 92 4b 11 	sts	0x114B, r1
			for (byte i=0; i<size; i++){ values[i]=0; }
    6fc6:	80 91 47 11 	lds	r24, 0x1147
    6fca:	90 91 48 11 	lds	r25, 0x1148
    6fce:	20 e0       	ldi	r18, 0x00	; 0
    6fd0:	09 c0       	rjmp	.+18     	; 0x6fe4 <_ZN4WindC1EP14FreeBoardModel+0x90>
    6fd2:	fc 01       	movw	r30, r24
    6fd4:	32 e0       	ldi	r19, 0x02	; 2
    6fd6:	23 9f       	mul	r18, r19
    6fd8:	e0 0d       	add	r30, r0
    6fda:	f1 1d       	adc	r31, r1
    6fdc:	11 24       	eor	r1, r1
    6fde:	11 82       	std	Z+1, r1	; 0x01
    6fe0:	10 82       	st	Z, r1
    6fe2:	2f 5f       	subi	r18, 0xFF	; 255
    6fe4:	30 91 49 11 	lds	r19, 0x1149
    6fe8:	23 17       	cp	r18, r19
    6fea:	98 f3       	brcs	.-26     	; 0x6fd2 <_ZN4WindC1EP14FreeBoardModel+0x7e>
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
    6fec:	ce 01       	movw	r24, r28
    6fee:	0e 94 42 2c 	call	0x5884	; 0x5884 <_ZN14FreeBoardModel17getWindAlarmSpeedEv>
    6ff2:	84 36       	cpi	r24, 0x64	; 100
    6ff4:	91 05       	cpc	r25, r1
    6ff6:	3c f0       	brlt	.+14     	; 0x7006 <_ZN4WindC1EP14FreeBoardModel+0xb2>
		model->setWindAlarmSpeed(99);
    6ff8:	63 e6       	ldi	r22, 0x63	; 99
    6ffa:	70 e0       	ldi	r23, 0x00	; 0
    6ffc:	ce 01       	movw	r24, r28
	}
}
    6ffe:	df 91       	pop	r29
    7000:	cf 91       	pop	r28
	windDirFlag = true;
	dirList.reset();

	// read the last wind alarm values
	if (model->getWindAlarmSpeed() > 99) {
		model->setWindAlarmSpeed(99);
    7002:	0c 94 73 2d 	jmp	0x5ae6	; 0x5ae6 <_ZN14FreeBoardModel17setWindAlarmSpeedEi>
	}
}
    7006:	df 91       	pop	r29
    7008:	cf 91       	pop	r28
    700a:	08 95       	ret

0000700c <_ZN4Wind8isinLongEl>:

//routines for fast sin and cos

long Wind::isinLong(long x) {
    700c:	cf 92       	push	r12
    700e:	df 92       	push	r13
    7010:	ef 92       	push	r14
    7012:	ff 92       	push	r15
    7014:	0f 93       	push	r16
    7016:	1f 93       	push	r17
    7018:	cf 93       	push	r28
    701a:	cb 01       	movw	r24, r22
    701c:	ba 01       	movw	r22, r20
	boolean pos = true; // positive - keeps an eye on the sign.
	if (x < 0) {
    701e:	97 ff       	sbrs	r25, 7
    7020:	09 c0       	rjmp	.+18     	; 0x7034 <_ZN4Wind8isinLongEl+0x28>
		x = -x;
    7022:	90 95       	com	r25
    7024:	80 95       	com	r24
    7026:	70 95       	com	r23
    7028:	61 95       	neg	r22
    702a:	7f 4f       	sbci	r23, 0xFF	; 255
    702c:	8f 4f       	sbci	r24, 0xFF	; 255
    702e:	9f 4f       	sbci	r25, 0xFF	; 255
		pos = !pos;
    7030:	c0 e0       	ldi	r28, 0x00	; 0
    7032:	01 c0       	rjmp	.+2      	; 0x7036 <_ZN4Wind8isinLongEl+0x2a>
}

//routines for fast sin and cos

long Wind::isinLong(long x) {
	boolean pos = true; // positive - keeps an eye on the sign.
    7034:	c1 e0       	ldi	r28, 0x01	; 1
	if (x < 0) {
		x = -x;
		pos = !pos;
	}
	if (x >= 360) x %= 360;
    7036:	68 36       	cpi	r22, 0x68	; 104
    7038:	21 e0       	ldi	r18, 0x01	; 1
    703a:	72 07       	cpc	r23, r18
    703c:	81 05       	cpc	r24, r1
    703e:	91 05       	cpc	r25, r1
    7040:	34 f0       	brlt	.+12     	; 0x704e <_ZN4Wind8isinLongEl+0x42>
    7042:	28 e6       	ldi	r18, 0x68	; 104
    7044:	31 e0       	ldi	r19, 0x01	; 1
    7046:	40 e0       	ldi	r20, 0x00	; 0
    7048:	50 e0       	ldi	r21, 0x00	; 0
    704a:	0e 94 bc 43 	call	0x8778	; 0x8778 <__divmodsi4>
	if (x > 180) {
    704e:	65 3b       	cpi	r22, 0xB5	; 181
    7050:	71 05       	cpc	r23, r1
    7052:	81 05       	cpc	r24, r1
    7054:	91 05       	cpc	r25, r1
    7056:	34 f0       	brlt	.+12     	; 0x7064 <_ZN4Wind8isinLongEl+0x58>
		x -= 180;
    7058:	64 5b       	subi	r22, 0xB4	; 180
    705a:	71 09       	sbc	r23, r1
    705c:	81 09       	sbc	r24, r1
    705e:	91 09       	sbc	r25, r1
    7060:	21 e0       	ldi	r18, 0x01	; 1
    7062:	c2 27       	eor	r28, r18
		pos = !pos;
	}
	if (x > 90) x = 180 - x;
    7064:	6b 35       	cpi	r22, 0x5B	; 91
    7066:	71 05       	cpc	r23, r1
    7068:	81 05       	cpc	r24, r1
    706a:	91 05       	cpc	r25, r1
    706c:	64 f0       	brlt	.+24     	; 0x7086 <_ZN4Wind8isinLongEl+0x7a>
    706e:	04 eb       	ldi	r16, 0xB4	; 180
    7070:	10 e0       	ldi	r17, 0x00	; 0
    7072:	20 e0       	ldi	r18, 0x00	; 0
    7074:	30 e0       	ldi	r19, 0x00	; 0
    7076:	68 01       	movw	r12, r16
    7078:	79 01       	movw	r14, r18
    707a:	c6 1a       	sub	r12, r22
    707c:	d7 0a       	sbc	r13, r23
    707e:	e8 0a       	sbc	r14, r24
    7080:	f9 0a       	sbc	r15, r25
    7082:	c7 01       	movw	r24, r14
    7084:	b6 01       	movw	r22, r12

	if (pos) return isinTable16[x]; // = /65535.0
    7086:	fb 01       	movw	r30, r22
    7088:	ee 0f       	add	r30, r30
    708a:	ff 1f       	adc	r31, r31
    708c:	e0 56       	subi	r30, 0x60	; 96
    708e:	fa 4f       	sbci	r31, 0xFA	; 250
    7090:	00 81       	ld	r16, Z
    7092:	11 81       	ldd	r17, Z+1	; 0x01
    7094:	c1 11       	cpse	r28, r1
    7096:	03 c0       	rjmp	.+6      	; 0x709e <_ZN4Wind8isinLongEl+0x92>
	return 0 - isinTable16[x];
    7098:	11 95       	neg	r17
    709a:	01 95       	neg	r16
    709c:	11 09       	sbc	r17, r1
    709e:	20 e0       	ldi	r18, 0x00	; 0
    70a0:	30 e0       	ldi	r19, 0x00	; 0
}
    70a2:	b8 01       	movw	r22, r16
    70a4:	c9 01       	movw	r24, r18
    70a6:	cf 91       	pop	r28
    70a8:	1f 91       	pop	r17
    70aa:	0f 91       	pop	r16
    70ac:	ff 90       	pop	r15
    70ae:	ef 90       	pop	r14
    70b0:	df 90       	pop	r13
    70b2:	cf 90       	pop	r12
    70b4:	08 95       	ret

000070b6 <_ZN4Wind8icosLongEl>:
float Wind::isin(long x) {
	return isinLong(x) * 0.0000152590219;
}

long Wind::icosLong(long x) {
	return isinLong(x + 90);
    70b6:	46 5a       	subi	r20, 0xA6	; 166
    70b8:	5f 4f       	sbci	r21, 0xFF	; 255
    70ba:	6f 4f       	sbci	r22, 0xFF	; 255
    70bc:	7f 4f       	sbci	r23, 0xFF	; 255
    70be:	0c 94 06 38 	jmp	0x700c	; 0x700c <_ZN4Wind8isinLongEl>

000070c2 <_ZN4Wind20getRotationalAverageEv>:

/*
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
    70c2:	4f 92       	push	r4
    70c4:	5f 92       	push	r5
    70c6:	6f 92       	push	r6
    70c8:	7f 92       	push	r7
    70ca:	8f 92       	push	r8
    70cc:	9f 92       	push	r9
    70ce:	af 92       	push	r10
    70d0:	bf 92       	push	r11
    70d2:	cf 92       	push	r12
    70d4:	df 92       	push	r13
    70d6:	ef 92       	push	r14
    70d8:	ff 92       	push	r15
    70da:	cf 93       	push	r28
    70dc:	df 93       	push	r29
    70de:	3c 01       	movw	r6, r24
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    70e0:	40 90 4a 11 	lds	r4, 0x114A
    70e4:	c0 91 47 11 	lds	r28, 0x1147
    70e8:	d0 91 48 11 	lds	r29, 0x1148
int Wind::getRotationalAverage() {
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
    70ec:	51 2c       	mov	r5, r1
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
	long x =0;
	long y = 0;
    70ee:	81 2c       	mov	r8, r1
    70f0:	91 2c       	mov	r9, r1
    70f2:	54 01       	movw	r10, r8
/*
 * return the average of all circular (0-360) values in DEGREES added with an addRotationalValue call
 * Range is 0-360 DEGREES
 */
int Wind::getRotationalAverage() {
	long x =0;
    70f4:	c1 2c       	mov	r12, r1
    70f6:	d1 2c       	mov	r13, r1
    70f8:	76 01       	movw	r14, r12
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    70fa:	19 c0       	rjmp	.+50     	; 0x712e <_ZN4Wind20getRotationalAverageEv+0x6c>
			return false;
		}
		//return the current index
		byte getCurrentIndex() { return currentIndex; }
		byte getCurrentSize() { return currentSize; }
		datatype getValue(byte x) { return values[x]; }
    70fc:	88 81       	ld	r24, Y
    70fe:	99 81       	ldd	r25, Y+1	; 0x01
		x += icosLong(dirList.getValue(i));
    7100:	ac 01       	movw	r20, r24
    7102:	60 e0       	ldi	r22, 0x00	; 0
    7104:	70 e0       	ldi	r23, 0x00	; 0
    7106:	c3 01       	movw	r24, r6
    7108:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <_ZN4Wind8icosLongEl>
    710c:	c6 0e       	add	r12, r22
    710e:	d7 1e       	adc	r13, r23
    7110:	e8 1e       	adc	r14, r24
    7112:	f9 1e       	adc	r15, r25
    7114:	89 91       	ld	r24, Y+
    7116:	99 91       	ld	r25, Y+
		y += isinLong(dirList.getValue(i));
    7118:	ac 01       	movw	r20, r24
    711a:	60 e0       	ldi	r22, 0x00	; 0
    711c:	70 e0       	ldi	r23, 0x00	; 0
    711e:	c3 01       	movw	r24, r6
    7120:	0e 94 06 38 	call	0x700c	; 0x700c <_ZN4Wind8isinLongEl>
    7124:	86 0e       	add	r8, r22
    7126:	97 1e       	adc	r9, r23
    7128:	a8 1e       	adc	r10, r24
    712a:	b9 1e       	adc	r11, r25
	long x =0;
	long y = 0;
	float xf, yf = 0;

	byte i = 0;
	for (; i < dirList.getCurrentSize(); i++) {
    712c:	53 94       	inc	r5
    712e:	54 10       	cpse	r5, r4
    7130:	e5 cf       	rjmp	.-54     	; 0x70fc <_ZN4Wind20getRotationalAverageEv+0x3a>
		y += isinLong(dirList.getValue(i));
		//Serial.print("DEBUG:angle=");
		//Serial.println(dirList.getValue(i));
	}
	//TODO:watch out for zeros
	if (x == 0l && y == 0l) {
    7132:	c1 14       	cp	r12, r1
    7134:	d1 04       	cpc	r13, r1
    7136:	e1 04       	cpc	r14, r1
    7138:	f1 04       	cpc	r15, r1
    713a:	29 f4       	brne	.+10     	; 0x7146 <_ZN4Wind20getRotationalAverageEv+0x84>
    713c:	81 14       	cp	r8, r1
    713e:	91 04       	cpc	r9, r1
    7140:	a1 04       	cpc	r10, r1
    7142:	b1 04       	cpc	r11, r1
    7144:	99 f1       	breq	.+102    	; 0x71ac <_ZN4Wind20getRotationalAverageEv+0xea>
		return 0l;
	}
	xf = (x* 0.0000152590219) / i;
    7146:	64 2d       	mov	r22, r4
    7148:	70 e0       	ldi	r23, 0x00	; 0
    714a:	80 e0       	ldi	r24, 0x00	; 0
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    7152:	2b 01       	movw	r4, r22
    7154:	3c 01       	movw	r6, r24
    7156:	c7 01       	movw	r24, r14
    7158:	b6 01       	movw	r22, r12
    715a:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    715e:	20 e8       	ldi	r18, 0x80	; 128
    7160:	30 e0       	ldi	r19, 0x00	; 0
    7162:	40 e8       	ldi	r20, 0x80	; 128
    7164:	57 e3       	ldi	r21, 0x37	; 55
    7166:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    716a:	a3 01       	movw	r20, r6
    716c:	92 01       	movw	r18, r4
    716e:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    7172:	6b 01       	movw	r12, r22
    7174:	7c 01       	movw	r14, r24
	yf = (y* 0.0000152590219) / i;
    7176:	c5 01       	movw	r24, r10
    7178:	b4 01       	movw	r22, r8
    717a:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    717e:	20 e8       	ldi	r18, 0x80	; 128
    7180:	30 e0       	ldi	r19, 0x00	; 0
    7182:	40 e8       	ldi	r20, 0x80	; 128
    7184:	57 e3       	ldi	r21, 0x37	; 55
    7186:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    718a:	a3 01       	movw	r20, r6
    718c:	92 01       	movw	r18, r4
    718e:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
	//Serial.print(", cos=");
	//Serial.print(xf);
	//Serial.print("sin=");
	//Serial.println(yf);

	return degrees(atan2(yf, xf));
    7192:	a7 01       	movw	r20, r14
    7194:	96 01       	movw	r18, r12
    7196:	0e 94 34 40 	call	0x8068	; 0x8068 <atan2>
    719a:	21 ee       	ldi	r18, 0xE1	; 225
    719c:	3e e2       	ldi	r19, 0x2E	; 46
    719e:	45 e6       	ldi	r20, 0x65	; 101
    71a0:	52 e4       	ldi	r21, 0x42	; 66
    71a2:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    71a6:	0e 94 f6 40 	call	0x81ec	; 0x81ec <__fixsfsi>
    71aa:	02 c0       	rjmp	.+4      	; 0x71b0 <_ZN4Wind20getRotationalAverageEv+0xee>
		//Serial.print("DEBUG:angle=");
		//Serial.println(dirList.getValue(i));
	}
	//TODO:watch out for zeros
	if (x == 0l && y == 0l) {
		return 0l;
    71ac:	60 e0       	ldi	r22, 0x00	; 0
    71ae:	70 e0       	ldi	r23, 0x00	; 0
	//Serial.print("sin=");
	//Serial.println(yf);

	return degrees(atan2(yf, xf));

}
    71b0:	cb 01       	movw	r24, r22
    71b2:	df 91       	pop	r29
    71b4:	cf 91       	pop	r28
    71b6:	ff 90       	pop	r15
    71b8:	ef 90       	pop	r14
    71ba:	df 90       	pop	r13
    71bc:	cf 90       	pop	r12
    71be:	bf 90       	pop	r11
    71c0:	af 90       	pop	r10
    71c2:	9f 90       	pop	r9
    71c4:	8f 90       	pop	r8
    71c6:	7f 90       	pop	r7
    71c8:	6f 90       	pop	r6
    71ca:	5f 90       	pop	r5
    71cc:	4f 90       	pop	r4
    71ce:	08 95       	ret

000071d0 <_ZN4Wind17readWindDataSpeedEv>:

/* NMEA Wind routines and alarm
 */
void Wind::readWindDataSpeed() {
    71d0:	0f 93       	push	r16
    71d2:	1f 93       	push	r17
	//fastest rps = 15ms - avoid bounce
	if ((millis() - lastSpeedPulse) > 15) {
    71d4:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    71d8:	00 91 90 11 	lds	r16, 0x1190
    71dc:	10 91 91 11 	lds	r17, 0x1191
    71e0:	20 91 92 11 	lds	r18, 0x1192
    71e4:	30 91 93 11 	lds	r19, 0x1193
    71e8:	60 1b       	sub	r22, r16
    71ea:	71 0b       	sbc	r23, r17
    71ec:	82 0b       	sbc	r24, r18
    71ee:	93 0b       	sbc	r25, r19
    71f0:	60 31       	cpi	r22, 0x10	; 16
    71f2:	71 05       	cpc	r23, r1
    71f4:	81 05       	cpc	r24, r1
    71f6:	91 05       	cpc	r25, r1
    71f8:	70 f1       	brcs	.+92     	; 0x7256 <_ZN4Wind17readWindDataSpeedEv+0x86>
		if (windSpeedFlag) {
    71fa:	80 91 57 11 	lds	r24, 0x1157
    71fe:	88 23       	and	r24, r24
    7200:	e9 f0       	breq	.+58     	; 0x723c <_ZN4Wind17readWindDataSpeedEv+0x6c>
			//called by speed pin interrupt
			windSpeedMicrosLast = windSpeedMicros;
    7202:	80 91 84 11 	lds	r24, 0x1184
    7206:	90 91 85 11 	lds	r25, 0x1185
    720a:	a0 91 86 11 	lds	r26, 0x1186
    720e:	b0 91 87 11 	lds	r27, 0x1187
    7212:	80 93 80 11 	sts	0x1180, r24
    7216:	90 93 81 11 	sts	0x1181, r25
    721a:	a0 93 82 11 	sts	0x1182, r26
    721e:	b0 93 83 11 	sts	0x1183, r27
			windSpeedMicros = micros();
    7222:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    7226:	60 93 84 11 	sts	0x1184, r22
    722a:	70 93 85 11 	sts	0x1185, r23
    722e:	80 93 86 11 	sts	0x1186, r24
    7232:	90 93 87 11 	sts	0x1187, r25
			windSpeedFlag = false;
    7236:	10 92 57 11 	sts	0x1157, r1
    723a:	03 c0       	rjmp	.+6      	; 0x7242 <_ZN4Wind17readWindDataSpeedEv+0x72>
		} else {
			windSpeedFlag = true;
    723c:	81 e0       	ldi	r24, 0x01	; 1
    723e:	80 93 57 11 	sts	0x1157, r24
		}
		lastSpeedPulse = millis();
    7242:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    7246:	60 93 90 11 	sts	0x1190, r22
    724a:	70 93 91 11 	sts	0x1191, r23
    724e:	80 93 92 11 	sts	0x1192, r24
    7252:	90 93 93 11 	sts	0x1193, r25
	}
}
    7256:	1f 91       	pop	r17
    7258:	0f 91       	pop	r16
    725a:	08 95       	ret

0000725c <_ZN4Wind15readWindDataDirEv>:

void Wind::readWindDataDir() {
    725c:	0f 93       	push	r16
    725e:	1f 93       	push	r17
	if((millis() - lastDirPulse) > 15) {
    7260:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    7264:	00 91 8c 11 	lds	r16, 0x118C
    7268:	10 91 8d 11 	lds	r17, 0x118D
    726c:	20 91 8e 11 	lds	r18, 0x118E
    7270:	30 91 8f 11 	lds	r19, 0x118F
    7274:	60 1b       	sub	r22, r16
    7276:	71 0b       	sbc	r23, r17
    7278:	82 0b       	sbc	r24, r18
    727a:	93 0b       	sbc	r25, r19
    727c:	60 31       	cpi	r22, 0x10	; 16
    727e:	71 05       	cpc	r23, r1
    7280:	81 05       	cpc	r24, r1
    7282:	91 05       	cpc	r25, r1
    7284:	70 f1       	brcs	.+92     	; 0x72e2 <_ZN4Wind15readWindDataDirEv+0x86>
		if (windDirFlag) {
    7286:	80 91 56 11 	lds	r24, 0x1156
    728a:	88 23       	and	r24, r24
    728c:	e9 f0       	breq	.+58     	; 0x72c8 <_ZN4Wind15readWindDataDirEv+0x6c>
			windDirMicrosLast = windDirMicros;
    728e:	80 91 7c 11 	lds	r24, 0x117C
    7292:	90 91 7d 11 	lds	r25, 0x117D
    7296:	a0 91 7e 11 	lds	r26, 0x117E
    729a:	b0 91 7f 11 	lds	r27, 0x117F
    729e:	80 93 78 11 	sts	0x1178, r24
    72a2:	90 93 79 11 	sts	0x1179, r25
    72a6:	a0 93 7a 11 	sts	0x117A, r26
    72aa:	b0 93 7b 11 	sts	0x117B, r27
			windDirMicros = micros();
    72ae:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <micros>
    72b2:	60 93 7c 11 	sts	0x117C, r22
    72b6:	70 93 7d 11 	sts	0x117D, r23
    72ba:	80 93 7e 11 	sts	0x117E, r24
    72be:	90 93 7f 11 	sts	0x117F, r25
			windDirFlag = false;
    72c2:	10 92 56 11 	sts	0x1156, r1
    72c6:	03 c0       	rjmp	.+6      	; 0x72ce <_ZN4Wind15readWindDataDirEv+0x72>
		} else {
			windDirFlag = true;
    72c8:	81 e0       	ldi	r24, 0x01	; 1
    72ca:	80 93 56 11 	sts	0x1156, r24
		}
		lastDirPulse=millis();
    72ce:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    72d2:	60 93 8c 11 	sts	0x118C, r22
    72d6:	70 93 8d 11 	sts	0x118D, r23
    72da:	80 93 8e 11 	sts	0x118E, r24
    72de:	90 93 8f 11 	sts	0x118F, r25
	}
}
    72e2:	1f 91       	pop	r17
    72e4:	0f 91       	pop	r16
    72e6:	08 95       	ret

000072e8 <_ZN4Wind19calcWindSpeedAndDirEv>:

/*
 * The anemometer turns up to 60rps at 140knots - so min 16ms/16000us per turn
 * Mostly much lower :-)
 */
void Wind::calcWindSpeedAndDir() {
    72e8:	4f 92       	push	r4
    72ea:	5f 92       	push	r5
    72ec:	6f 92       	push	r6
    72ee:	7f 92       	push	r7
    72f0:	8f 92       	push	r8
    72f2:	9f 92       	push	r9
    72f4:	af 92       	push	r10
    72f6:	bf 92       	push	r11
    72f8:	cf 92       	push	r12
    72fa:	df 92       	push	r13
    72fc:	ef 92       	push	r14
    72fe:	ff 92       	push	r15
//grab data
// an interrupt could fire in here
	noInterrupts();
    7300:	f8 94       	cli
	wsTempLast = windSpeedMicrosLast;
    7302:	80 91 80 11 	lds	r24, 0x1180
    7306:	90 91 81 11 	lds	r25, 0x1181
    730a:	a0 91 82 11 	lds	r26, 0x1182
    730e:	b0 91 83 11 	lds	r27, 0x1183
    7312:	80 93 6c 11 	sts	0x116C, r24
    7316:	90 93 6d 11 	sts	0x116D, r25
    731a:	a0 93 6e 11 	sts	0x116E, r26
    731e:	b0 93 6f 11 	sts	0x116F, r27
	wsTemp = windSpeedMicros;
    7322:	80 91 84 11 	lds	r24, 0x1184
    7326:	90 91 85 11 	lds	r25, 0x1185
    732a:	a0 91 86 11 	lds	r26, 0x1186
    732e:	b0 91 87 11 	lds	r27, 0x1187
    7332:	80 93 68 11 	sts	0x1168, r24
    7336:	90 93 69 11 	sts	0x1169, r25
    733a:	a0 93 6a 11 	sts	0x116A, r26
    733e:	b0 93 6b 11 	sts	0x116B, r27
	wdTemp = windDirMicros;
    7342:	80 91 7c 11 	lds	r24, 0x117C
    7346:	90 91 7d 11 	lds	r25, 0x117D
    734a:	a0 91 7e 11 	lds	r26, 0x117E
    734e:	b0 91 7f 11 	lds	r27, 0x117F
    7352:	80 93 5c 11 	sts	0x115C, r24
    7356:	90 93 5d 11 	sts	0x115D, r25
    735a:	a0 93 5e 11 	sts	0x115E, r26
    735e:	b0 93 5f 11 	sts	0x115F, r27
	interrupts();
    7362:	78 94       	sei
	Serial.println(wsTemp);
	*/
//interrupts();
//micros resets every 50 min,
// avoid 0, bad data, rollover and too fast (bounce? <15ms)
	if (wsTempLast >= wsTemp || wsTemp - wsTempLast < 15000ul) return;
    7364:	80 91 6c 11 	lds	r24, 0x116C
    7368:	90 91 6d 11 	lds	r25, 0x116D
    736c:	a0 91 6e 11 	lds	r26, 0x116E
    7370:	b0 91 6f 11 	lds	r27, 0x116F
    7374:	40 91 68 11 	lds	r20, 0x1168
    7378:	50 91 69 11 	lds	r21, 0x1169
    737c:	60 91 6a 11 	lds	r22, 0x116A
    7380:	70 91 6b 11 	lds	r23, 0x116B
    7384:	84 17       	cp	r24, r20
    7386:	95 07       	cpc	r25, r21
    7388:	a6 07       	cpc	r26, r22
    738a:	b7 07       	cpc	r27, r23
    738c:	08 f0       	brcs	.+2      	; 0x7390 <_ZN4Wind19calcWindSpeedAndDirEv+0xa8>
    738e:	3e c2       	rjmp	.+1148   	; 0x780c <_ZN4Wind19calcWindSpeedAndDirEv+0x524>
    7390:	9a 01       	movw	r18, r20
    7392:	ab 01       	movw	r20, r22
    7394:	28 1b       	sub	r18, r24
    7396:	39 0b       	sbc	r19, r25
    7398:	4a 0b       	sbc	r20, r26
    739a:	5b 0b       	sbc	r21, r27
    739c:	28 39       	cpi	r18, 0x98	; 152
    739e:	8a e3       	ldi	r24, 0x3A	; 58
    73a0:	38 07       	cpc	r19, r24
    73a2:	41 05       	cpc	r20, r1
    73a4:	51 05       	cpc	r21, r1
    73a6:	08 f4       	brcc	.+2      	; 0x73aa <_ZN4Wind19calcWindSpeedAndDirEv+0xc2>
    73a8:	31 c2       	rjmp	.+1122   	; 0x780c <_ZN4Wind19calcWindSpeedAndDirEv+0x524>

//speed in micros
	wsNow = wsTemp - wsTempLast;
    73aa:	20 93 64 11 	sts	0x1164, r18
    73ae:	30 93 65 11 	sts	0x1165, r19
    73b2:	40 93 66 11 	sts	0x1166, r20
    73b6:	50 93 67 11 	sts	0x1167, r21
	if (windSpeedDur == 0) windSpeedDur = wsNow;
    73ba:	80 91 74 11 	lds	r24, 0x1174
    73be:	90 91 75 11 	lds	r25, 0x1175
    73c2:	a0 91 76 11 	lds	r26, 0x1176
    73c6:	b0 91 77 11 	lds	r27, 0x1177
    73ca:	89 2b       	or	r24, r25
    73cc:	8a 2b       	or	r24, r26
    73ce:	8b 2b       	or	r24, r27
    73d0:	41 f4       	brne	.+16     	; 0x73e2 <_ZN4Wind19calcWindSpeedAndDirEv+0xfa>
    73d2:	20 93 74 11 	sts	0x1174, r18
    73d6:	30 93 75 11 	sts	0x1175, r19
    73da:	40 93 76 11 	sts	0x1176, r20
    73de:	50 93 77 11 	sts	0x1177, r21
	wsDiff = (wsNow * 100ul) / windSpeedDur;
    73e2:	c0 90 74 11 	lds	r12, 0x1174
    73e6:	d0 90 75 11 	lds	r13, 0x1175
    73ea:	e0 90 76 11 	lds	r14, 0x1176
    73ee:	f0 90 77 11 	lds	r15, 0x1177
    73f2:	a4 e6       	ldi	r26, 0x64	; 100
    73f4:	b0 e0       	ldi	r27, 0x00	; 0
    73f6:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    73fa:	a7 01       	movw	r20, r14
    73fc:	96 01       	movw	r18, r12
    73fe:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    7402:	20 93 60 11 	sts	0x1160, r18
    7406:	30 93 61 11 	sts	0x1161, r19
    740a:	40 93 62 11 	sts	0x1162, r20
    740e:	50 93 63 11 	sts	0x1163, r21
	Serial.print("wsNow,");
    7412:	65 e8       	ldi	r22, 0x85	; 133
    7414:	75 e0       	ldi	r23, 0x05	; 5
    7416:	8a ed       	ldi	r24, 0xDA	; 218
    7418:	96 e0       	ldi	r25, 0x06	; 6
    741a:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	Serial.print(wsNow);
    741e:	40 91 64 11 	lds	r20, 0x1164
    7422:	50 91 65 11 	lds	r21, 0x1165
    7426:	60 91 66 11 	lds	r22, 0x1166
    742a:	70 91 67 11 	lds	r23, 0x1167
    742e:	2a e0       	ldi	r18, 0x0A	; 10
    7430:	30 e0       	ldi	r19, 0x00	; 0
    7432:	8a ed       	ldi	r24, 0xDA	; 218
    7434:	96 e0       	ldi	r25, 0x06	; 6
    7436:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN5Print5printEmi>
	Serial.print(",wsDiff,");
    743a:	6c e8       	ldi	r22, 0x8C	; 140
    743c:	75 e0       	ldi	r23, 0x05	; 5
    743e:	8a ed       	ldi	r24, 0xDA	; 218
    7440:	96 e0       	ldi	r25, 0x06	; 6
    7442:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
	Serial.print(wsDiff);
    7446:	40 91 60 11 	lds	r20, 0x1160
    744a:	50 91 61 11 	lds	r21, 0x1161
    744e:	60 91 62 11 	lds	r22, 0x1162
    7452:	70 91 63 11 	lds	r23, 0x1163
    7456:	2a e0       	ldi	r18, 0x0A	; 10
    7458:	30 e0       	ldi	r19, 0x00	; 0
    745a:	8a ed       	ldi	r24, 0xDA	; 218
    745c:	96 e0       	ldi	r25, 0x06	; 6
    745e:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN5Print5printEmi>
//can only change 10% per rev
	if (wsDiff < 90ul) {
    7462:	80 91 60 11 	lds	r24, 0x1160
    7466:	90 91 61 11 	lds	r25, 0x1161
    746a:	a0 91 62 11 	lds	r26, 0x1162
    746e:	b0 91 63 11 	lds	r27, 0x1163
    7472:	8a 35       	cpi	r24, 0x5A	; 90
    7474:	91 05       	cpc	r25, r1
    7476:	a1 05       	cpc	r26, r1
    7478:	b1 05       	cpc	r27, r1
    747a:	58 f4       	brcc	.+22     	; 0x7492 <_ZN4Wind19calcWindSpeedAndDirEv+0x1aa>
		windSpeedDur = (windSpeedDur * 9ul) / 10ul;
    747c:	20 91 74 11 	lds	r18, 0x1174
    7480:	30 91 75 11 	lds	r19, 0x1175
    7484:	40 91 76 11 	lds	r20, 0x1176
    7488:	50 91 77 11 	lds	r21, 0x1177
    748c:	a9 e0       	ldi	r26, 0x09	; 9
    748e:	b0 e0       	ldi	r27, 0x00	; 0
    7490:	0f c0       	rjmp	.+30     	; 0x74b0 <_ZN4Wind19calcWindSpeedAndDirEv+0x1c8>
	} else if (wsDiff > 110ul) {
    7492:	8f 36       	cpi	r24, 0x6F	; 111
    7494:	91 05       	cpc	r25, r1
    7496:	a1 05       	cpc	r26, r1
    7498:	b1 05       	cpc	r27, r1
    749a:	d8 f0       	brcs	.+54     	; 0x74d2 <_ZN4Wind19calcWindSpeedAndDirEv+0x1ea>
		windSpeedDur = (windSpeedDur * 11ul) / 10ul;
    749c:	20 91 74 11 	lds	r18, 0x1174
    74a0:	30 91 75 11 	lds	r19, 0x1175
    74a4:	40 91 76 11 	lds	r20, 0x1176
    74a8:	50 91 77 11 	lds	r21, 0x1177
    74ac:	ab e0       	ldi	r26, 0x0B	; 11
    74ae:	b0 e0       	ldi	r27, 0x00	; 0
    74b0:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    74b4:	2a e0       	ldi	r18, 0x0A	; 10
    74b6:	30 e0       	ldi	r19, 0x00	; 0
    74b8:	40 e0       	ldi	r20, 0x00	; 0
    74ba:	50 e0       	ldi	r21, 0x00	; 0
    74bc:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    74c0:	20 93 74 11 	sts	0x1174, r18
    74c4:	30 93 75 11 	sts	0x1175, r19
    74c8:	40 93 76 11 	sts	0x1176, r20
    74cc:	50 93 77 11 	sts	0x1177, r21
    74d0:	51 c0       	rjmp	.+162    	; 0x7574 <_ZN4Wind19calcWindSpeedAndDirEv+0x28c>
	} else {
		//running average, to avoid random errors, adjust by speed
		if (wsNow < 250000) {
    74d2:	c0 90 64 11 	lds	r12, 0x1164
    74d6:	d0 90 65 11 	lds	r13, 0x1165
    74da:	e0 90 66 11 	lds	r14, 0x1166
    74de:	f0 90 67 11 	lds	r15, 0x1167
			windSpeedDur = ((10ul * windSpeedDur) + wsNow) / 11ul;
    74e2:	20 91 74 11 	lds	r18, 0x1174
    74e6:	30 91 75 11 	lds	r19, 0x1175
    74ea:	40 91 76 11 	lds	r20, 0x1176
    74ee:	50 91 77 11 	lds	r21, 0x1177
		windSpeedDur = (windSpeedDur * 9ul) / 10ul;
	} else if (wsDiff > 110ul) {
		windSpeedDur = (windSpeedDur * 11ul) / 10ul;
	} else {
		//running average, to avoid random errors, adjust by speed
		if (wsNow < 250000) {
    74f2:	80 e9       	ldi	r24, 0x90	; 144
    74f4:	c8 16       	cp	r12, r24
    74f6:	80 ed       	ldi	r24, 0xD0	; 208
    74f8:	d8 06       	cpc	r13, r24
    74fa:	83 e0       	ldi	r24, 0x03	; 3
    74fc:	e8 06       	cpc	r14, r24
    74fe:	f1 04       	cpc	r15, r1
    7500:	68 f4       	brcc	.+26     	; 0x751c <_ZN4Wind19calcWindSpeedAndDirEv+0x234>
			windSpeedDur = ((10ul * windSpeedDur) + wsNow) / 11ul;
    7502:	aa e0       	ldi	r26, 0x0A	; 10
    7504:	b0 e0       	ldi	r27, 0x00	; 0
    7506:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    750a:	6c 0d       	add	r22, r12
    750c:	7d 1d       	adc	r23, r13
    750e:	8e 1d       	adc	r24, r14
    7510:	9f 1d       	adc	r25, r15
    7512:	2b e0       	ldi	r18, 0x0B	; 11
    7514:	30 e0       	ldi	r19, 0x00	; 0
    7516:	40 e0       	ldi	r20, 0x00	; 0
    7518:	50 e0       	ldi	r21, 0x00	; 0
    751a:	d0 cf       	rjmp	.-96     	; 0x74bc <_ZN4Wind19calcWindSpeedAndDirEv+0x1d4>
		} else if (wsNow < 500000) {
    751c:	80 e2       	ldi	r24, 0x20	; 32
    751e:	c8 16       	cp	r12, r24
    7520:	81 ea       	ldi	r24, 0xA1	; 161
    7522:	d8 06       	cpc	r13, r24
    7524:	87 e0       	ldi	r24, 0x07	; 7
    7526:	e8 06       	cpc	r14, r24
    7528:	f1 04       	cpc	r15, r1
    752a:	68 f4       	brcc	.+26     	; 0x7546 <_ZN4Wind19calcWindSpeedAndDirEv+0x25e>
			windSpeedDur = ((6ul * windSpeedDur) + wsNow) / 7ul;
    752c:	a6 e0       	ldi	r26, 0x06	; 6
    752e:	b0 e0       	ldi	r27, 0x00	; 0
    7530:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    7534:	6c 0d       	add	r22, r12
    7536:	7d 1d       	adc	r23, r13
    7538:	8e 1d       	adc	r24, r14
    753a:	9f 1d       	adc	r25, r15
    753c:	27 e0       	ldi	r18, 0x07	; 7
    753e:	30 e0       	ldi	r19, 0x00	; 0
    7540:	40 e0       	ldi	r20, 0x00	; 0
    7542:	50 e0       	ldi	r21, 0x00	; 0
    7544:	bb cf       	rjmp	.-138    	; 0x74bc <_ZN4Wind19calcWindSpeedAndDirEv+0x1d4>
		} else {
			windSpeedDur = ((3ul * windSpeedDur) + wsNow) / 4ul;
    7546:	a3 e0       	ldi	r26, 0x03	; 3
    7548:	b0 e0       	ldi	r27, 0x00	; 0
    754a:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    754e:	6c 0d       	add	r22, r12
    7550:	7d 1d       	adc	r23, r13
    7552:	8e 1d       	adc	r24, r14
    7554:	9f 1d       	adc	r25, r15
    7556:	32 e0       	ldi	r19, 0x02	; 2
    7558:	96 95       	lsr	r25
    755a:	87 95       	ror	r24
    755c:	77 95       	ror	r23
    755e:	67 95       	ror	r22
    7560:	3a 95       	dec	r19
    7562:	d1 f7       	brne	.-12     	; 0x7558 <_ZN4Wind19calcWindSpeedAndDirEv+0x270>
    7564:	60 93 74 11 	sts	0x1174, r22
    7568:	70 93 75 11 	sts	0x1175, r23
    756c:	80 93 76 11 	sts	0x1176, r24
    7570:	90 93 77 11 	sts	0x1177, r25
	//	Serial.println(windSpeedDur);
//direction
//FROM ULTIMETER:
//AT 130 KNTS ABOUT 46US PER DEGREE OF ROTATION
//WE CAN USE  360*182041/1000 = 65535 INT ROLLOVER TO GIVE US DIR AVERAGING
	if (wdTemp > wsTemp) {
    7574:	80 91 5c 11 	lds	r24, 0x115C
    7578:	90 91 5d 11 	lds	r25, 0x115D
    757c:	a0 91 5e 11 	lds	r26, 0x115E
    7580:	b0 91 5f 11 	lds	r27, 0x115F
    7584:	40 91 68 11 	lds	r20, 0x1168
    7588:	50 91 69 11 	lds	r21, 0x1169
    758c:	60 91 6a 11 	lds	r22, 0x116A
    7590:	70 91 6b 11 	lds	r23, 0x116B
    7594:	48 17       	cp	r20, r24
    7596:	59 07       	cpc	r21, r25
    7598:	6a 07       	cpc	r22, r26
    759a:	7b 07       	cpc	r23, r27
    759c:	08 f4       	brcc	.+2      	; 0x75a0 <_ZN4Wind19calcWindSpeedAndDirEv+0x2b8>
    759e:	08 c0       	rjmp	.+16     	; 0x75b0 <_ZN4Wind19calcWindSpeedAndDirEv+0x2c8>
		wdTemp = wdTemp - wsTemp;
	} else {
		wdTemp = wdTemp - wsTempLast;
    75a0:	40 91 6c 11 	lds	r20, 0x116C
    75a4:	50 91 6d 11 	lds	r21, 0x116D
    75a8:	60 91 6e 11 	lds	r22, 0x116E
    75ac:	70 91 6f 11 	lds	r23, 0x116F
    75b0:	84 1b       	sub	r24, r20
    75b2:	95 0b       	sbc	r25, r21
    75b4:	a6 0b       	sbc	r26, r22
    75b6:	b7 0b       	sbc	r27, r23
    75b8:	80 93 5c 11 	sts	0x115C, r24
    75bc:	90 93 5d 11 	sts	0x115D, r25
    75c0:	a0 93 5e 11 	sts	0x115E, r26
    75c4:	b0 93 5f 11 	sts	0x115F, r27
	}
	//Serial.print("wdTemp=");
	//		Serial.print(wdTemp);
	if (wdTemp > 50 && wdTemp<wsNow) {
    75c8:	c0 90 5c 11 	lds	r12, 0x115C
    75cc:	d0 90 5d 11 	lds	r13, 0x115D
    75d0:	e0 90 5e 11 	lds	r14, 0x115E
    75d4:	f0 90 5f 11 	lds	r15, 0x115F
    75d8:	83 e3       	ldi	r24, 0x33	; 51
    75da:	c8 16       	cp	r12, r24
    75dc:	d1 04       	cpc	r13, r1
    75de:	e1 04       	cpc	r14, r1
    75e0:	f1 04       	cpc	r15, r1
    75e2:	08 f4       	brcc	.+2      	; 0x75e6 <_ZN4Wind19calcWindSpeedAndDirEv+0x2fe>
    75e4:	0f c1       	rjmp	.+542    	; 0x7804 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>
    75e6:	40 90 64 11 	lds	r4, 0x1164
    75ea:	50 90 65 11 	lds	r5, 0x1165
    75ee:	60 90 66 11 	lds	r6, 0x1166
    75f2:	70 90 67 11 	lds	r7, 0x1167
    75f6:	c4 14       	cp	r12, r4
    75f8:	d5 04       	cpc	r13, r5
    75fa:	e6 04       	cpc	r14, r6
    75fc:	f7 04       	cpc	r15, r7
    75fe:	08 f0       	brcs	.+2      	; 0x7602 <_ZN4Wind19calcWindSpeedAndDirEv+0x31a>
    7600:	01 c1       	rjmp	.+514    	; 0x7804 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>
		if (wdAvg == 0) wdAvg = wdTemp;
    7602:	80 91 58 11 	lds	r24, 0x1158
    7606:	90 91 59 11 	lds	r25, 0x1159
    760a:	a0 91 5a 11 	lds	r26, 0x115A
    760e:	b0 91 5b 11 	lds	r27, 0x115B
    7612:	89 2b       	or	r24, r25
    7614:	8a 2b       	or	r24, r26
    7616:	8b 2b       	or	r24, r27
    7618:	41 f4       	brne	.+16     	; 0x762a <_ZN4Wind19calcWindSpeedAndDirEv+0x342>
    761a:	c0 92 58 11 	sts	0x1158, r12
    761e:	d0 92 59 11 	sts	0x1159, r13
    7622:	e0 92 5a 11 	sts	0x115A, r14
    7626:	f0 92 5b 11 	sts	0x115B, r15
		wsDiff = (wdTemp * 100ul) / wdAvg;
    762a:	80 90 58 11 	lds	r8, 0x1158
    762e:	90 90 59 11 	lds	r9, 0x1159
    7632:	a0 90 5a 11 	lds	r10, 0x115A
    7636:	b0 90 5b 11 	lds	r11, 0x115B
    763a:	a4 e6       	ldi	r26, 0x64	; 100
    763c:	b0 e0       	ldi	r27, 0x00	; 0
    763e:	a7 01       	movw	r20, r14
    7640:	96 01       	movw	r18, r12
    7642:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    7646:	a5 01       	movw	r20, r10
    7648:	94 01       	movw	r18, r8
    764a:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    764e:	20 93 60 11 	sts	0x1160, r18
    7652:	30 93 61 11 	sts	0x1161, r19
    7656:	40 93 62 11 	sts	0x1162, r20
    765a:	50 93 63 11 	sts	0x1163, r21
		if (wsDiff < 90ul) {
    765e:	2a 35       	cpi	r18, 0x5A	; 90
    7660:	31 05       	cpc	r19, r1
    7662:	41 05       	cpc	r20, r1
    7664:	51 05       	cpc	r21, r1
    7666:	18 f4       	brcc	.+6      	; 0x766e <_ZN4Wind19calcWindSpeedAndDirEv+0x386>
			wdAvg = (wdAvg * 9ul) / 10ul;
    7668:	a9 e0       	ldi	r26, 0x09	; 9
    766a:	b0 e0       	ldi	r27, 0x00	; 0
    766c:	07 c0       	rjmp	.+14     	; 0x767c <_ZN4Wind19calcWindSpeedAndDirEv+0x394>
		} else if (wsDiff > 110ul) {
    766e:	2f 36       	cpi	r18, 0x6F	; 111
    7670:	31 05       	cpc	r19, r1
    7672:	41 05       	cpc	r20, r1
    7674:	51 05       	cpc	r21, r1
    7676:	a8 f0       	brcs	.+42     	; 0x76a2 <_ZN4Wind19calcWindSpeedAndDirEv+0x3ba>
			wdAvg = (wdAvg * 11ul) / 10ul;
    7678:	ab e0       	ldi	r26, 0x0B	; 11
    767a:	b0 e0       	ldi	r27, 0x00	; 0
    767c:	a5 01       	movw	r20, r10
    767e:	94 01       	movw	r18, r8
    7680:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    7684:	2a e0       	ldi	r18, 0x0A	; 10
    7686:	30 e0       	ldi	r19, 0x00	; 0
    7688:	40 e0       	ldi	r20, 0x00	; 0
    768a:	50 e0       	ldi	r21, 0x00	; 0
    768c:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    7690:	20 93 58 11 	sts	0x1158, r18
    7694:	30 93 59 11 	sts	0x1159, r19
    7698:	40 93 5a 11 	sts	0x115A, r20
    769c:	50 93 5b 11 	sts	0x115B, r21
    76a0:	47 c0       	rjmp	.+142    	; 0x7730 <_ZN4Wind19calcWindSpeedAndDirEv+0x448>
		} else {
			//average
			if (wsNow < 250000) {
    76a2:	80 e9       	ldi	r24, 0x90	; 144
    76a4:	48 16       	cp	r4, r24
    76a6:	80 ed       	ldi	r24, 0xD0	; 208
    76a8:	58 06       	cpc	r5, r24
    76aa:	83 e0       	ldi	r24, 0x03	; 3
    76ac:	68 06       	cpc	r6, r24
    76ae:	71 04       	cpc	r7, r1
    76b0:	78 f4       	brcc	.+30     	; 0x76d0 <_ZN4Wind19calcWindSpeedAndDirEv+0x3e8>
				wdAvg = ((10ul * wdAvg) + wdTemp) / 11ul;
    76b2:	aa e0       	ldi	r26, 0x0A	; 10
    76b4:	b0 e0       	ldi	r27, 0x00	; 0
    76b6:	a5 01       	movw	r20, r10
    76b8:	94 01       	movw	r18, r8
    76ba:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    76be:	6c 0d       	add	r22, r12
    76c0:	7d 1d       	adc	r23, r13
    76c2:	8e 1d       	adc	r24, r14
    76c4:	9f 1d       	adc	r25, r15
    76c6:	2b e0       	ldi	r18, 0x0B	; 11
    76c8:	30 e0       	ldi	r19, 0x00	; 0
    76ca:	40 e0       	ldi	r20, 0x00	; 0
    76cc:	50 e0       	ldi	r21, 0x00	; 0
    76ce:	de cf       	rjmp	.-68     	; 0x768c <_ZN4Wind19calcWindSpeedAndDirEv+0x3a4>
			} else if (wsNow < 500000) {
    76d0:	80 e2       	ldi	r24, 0x20	; 32
    76d2:	48 16       	cp	r4, r24
    76d4:	81 ea       	ldi	r24, 0xA1	; 161
    76d6:	58 06       	cpc	r5, r24
    76d8:	87 e0       	ldi	r24, 0x07	; 7
    76da:	68 06       	cpc	r6, r24
    76dc:	71 04       	cpc	r7, r1
    76de:	78 f4       	brcc	.+30     	; 0x76fe <_ZN4Wind19calcWindSpeedAndDirEv+0x416>
				wdAvg = ((6ul * wdAvg) + wdTemp) / 7ul;
    76e0:	a6 e0       	ldi	r26, 0x06	; 6
    76e2:	b0 e0       	ldi	r27, 0x00	; 0
    76e4:	a5 01       	movw	r20, r10
    76e6:	94 01       	movw	r18, r8
    76e8:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    76ec:	6c 0d       	add	r22, r12
    76ee:	7d 1d       	adc	r23, r13
    76f0:	8e 1d       	adc	r24, r14
    76f2:	9f 1d       	adc	r25, r15
    76f4:	27 e0       	ldi	r18, 0x07	; 7
    76f6:	30 e0       	ldi	r19, 0x00	; 0
    76f8:	40 e0       	ldi	r20, 0x00	; 0
    76fa:	50 e0       	ldi	r21, 0x00	; 0
    76fc:	c7 cf       	rjmp	.-114    	; 0x768c <_ZN4Wind19calcWindSpeedAndDirEv+0x3a4>
			} else {
				wdAvg = ((3ul * wdAvg) + wdTemp) / 4ul;
    76fe:	a3 e0       	ldi	r26, 0x03	; 3
    7700:	b0 e0       	ldi	r27, 0x00	; 0
    7702:	a5 01       	movw	r20, r10
    7704:	94 01       	movw	r18, r8
    7706:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    770a:	6c 0d       	add	r22, r12
    770c:	7d 1d       	adc	r23, r13
    770e:	8e 1d       	adc	r24, r14
    7710:	9f 1d       	adc	r25, r15
    7712:	22 e0       	ldi	r18, 0x02	; 2
    7714:	96 95       	lsr	r25
    7716:	87 95       	ror	r24
    7718:	77 95       	ror	r23
    771a:	67 95       	ror	r22
    771c:	2a 95       	dec	r18
    771e:	d1 f7       	brne	.-12     	; 0x7714 <_ZN4Wind19calcWindSpeedAndDirEv+0x42c>
    7720:	60 93 58 11 	sts	0x1158, r22
    7724:	70 93 59 11 	sts	0x1159, r23
    7728:	80 93 5a 11 	sts	0x115A, r24
    772c:	90 93 5b 11 	sts	0x115B, r25
			}
		}
		//convert to degrees

		windDirDur = (wdAvg * 360ul) / windSpeedDur;
    7730:	c0 90 74 11 	lds	r12, 0x1174
    7734:	d0 90 75 11 	lds	r13, 0x1175
    7738:	e0 90 76 11 	lds	r14, 0x1176
    773c:	f0 90 77 11 	lds	r15, 0x1177
    7740:	20 91 58 11 	lds	r18, 0x1158
    7744:	30 91 59 11 	lds	r19, 0x1159
    7748:	40 91 5a 11 	lds	r20, 0x115A
    774c:	50 91 5b 11 	lds	r21, 0x115B
    7750:	a8 e6       	ldi	r26, 0x68	; 104
    7752:	b1 e0       	ldi	r27, 0x01	; 1
    7754:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    7758:	a7 01       	movw	r20, r14
    775a:	96 01       	movw	r18, r12
    775c:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    7760:	20 93 70 11 	sts	0x1170, r18
    7764:	30 93 71 11 	sts	0x1171, r19
    7768:	40 93 72 11 	sts	0x1172, r20
    776c:	50 93 73 11 	sts	0x1173, r21
	/*	Serial.print(", wdAvg=");
		Serial.println(wdAvg);*/
		Serial.print(",wdDirDir,");
    7770:	65 e9       	ldi	r22, 0x95	; 149
    7772:	75 e0       	ldi	r23, 0x05	; 5
    7774:	8a ed       	ldi	r24, 0xDA	; 218
    7776:	96 e0       	ldi	r25, 0x06	; 6
    7778:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN5Print5printEPKc>
		Serial.print(windDirDur);
    777c:	40 91 70 11 	lds	r20, 0x1170
    7780:	50 91 71 11 	lds	r21, 0x1171
    7784:	60 91 72 11 	lds	r22, 0x1172
    7788:	70 91 73 11 	lds	r23, 0x1173
    778c:	2a e0       	ldi	r18, 0x0A	; 10
    778e:	30 e0       	ldi	r19, 0x00	; 0
    7790:	8a ed       	ldi	r24, 0xDA	; 218
    7792:	96 e0       	ldi	r25, 0x06	; 6
    7794:	0e 94 82 07 	call	0xf04	; 0xf04 <_ZN5Print5printEmi>
		dirList.addValue(windDirDur);
    7798:	c0 90 70 11 	lds	r12, 0x1170
    779c:	d0 90 71 11 	lds	r13, 0x1171
    77a0:	e0 90 72 11 	lds	r14, 0x1172
    77a4:	f0 90 73 11 	lds	r15, 0x1173

		}
		
		//add a value to the AverageList at the next index, if out of bounds, return false, else return true
		void addValue(datatype value){ 
			currentIndex=currentIndex+1;
    77a8:	80 91 4b 11 	lds	r24, 0x114B
    77ac:	8f 5f       	subi	r24, 0xFF	; 255
    77ae:	80 93 4b 11 	sts	0x114B, r24
			if (currentSize<size){
    77b2:	40 91 4a 11 	lds	r20, 0x114A
    77b6:	60 91 49 11 	lds	r22, 0x1149
    77ba:	20 91 47 11 	lds	r18, 0x1147
    77be:	30 91 48 11 	lds	r19, 0x1148
    77c2:	46 17       	cp	r20, r22
    77c4:	98 f4       	brcc	.+38     	; 0x77ec <_ZN4Wind19calcWindSpeedAndDirEv+0x504>
				values[currentSize++] = value;
    77c6:	f9 01       	movw	r30, r18
    77c8:	82 e0       	ldi	r24, 0x02	; 2
    77ca:	48 9f       	mul	r20, r24
    77cc:	e0 0d       	add	r30, r0
    77ce:	f1 1d       	adc	r31, r1
    77d0:	11 24       	eor	r1, r1
    77d2:	d1 82       	std	Z+1, r13	; 0x01
    77d4:	c0 82       	st	Z, r12
    77d6:	64 2f       	mov	r22, r20
    77d8:	6f 5f       	subi	r22, 0xFF	; 255
    77da:	60 93 4a 11 	sts	0x114A, r22
				currentIndex = currentIndex % currentSize;
    77de:	80 91 4b 11 	lds	r24, 0x114B
    77e2:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <__udivmodqi4>
    77e6:	90 93 4b 11 	sts	0x114B, r25
    77ea:	0c c0       	rjmp	.+24     	; 0x7804 <_ZN4Wind19calcWindSpeedAndDirEv+0x51c>
			}else{
				currentIndex = currentIndex % size;
    77ec:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <__udivmodqi4>
    77f0:	90 93 4b 11 	sts	0x114B, r25
				values[currentIndex] = value; 
    77f4:	f9 01       	movw	r30, r18
    77f6:	82 e0       	ldi	r24, 0x02	; 2
    77f8:	98 9f       	mul	r25, r24
    77fa:	e0 0d       	add	r30, r0
    77fc:	f1 1d       	adc	r31, r1
    77fe:	11 24       	eor	r1, r1
    7800:	d1 82       	std	Z+1, r13	; 0x01
    7802:	c0 82       	st	Z, r12

	}
	Serial.println();
    7804:	8a ed       	ldi	r24, 0xDA	; 218
    7806:	96 e0       	ldi	r25, 0x06	; 6
    7808:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5Print7printlnEv>

}
    780c:	ff 90       	pop	r15
    780e:	ef 90       	pop	r14
    7810:	df 90       	pop	r13
    7812:	cf 90       	pop	r12
    7814:	bf 90       	pop	r11
    7816:	af 90       	pop	r10
    7818:	9f 90       	pop	r9
    781a:	8f 90       	pop	r8
    781c:	7f 90       	pop	r7
    781e:	6f 90       	pop	r6
    7820:	5f 90       	pop	r5
    7822:	4f 90       	pop	r4
    7824:	08 95       	ret

00007826 <_ZN4Wind12calcWindDataEv>:

/*
 * Calculates wind data. Direction is apparent, 0-360 deg off the bow, clockwise, in degrees.
 */
void Wind::calcWindData() {
    7826:	4f 92       	push	r4
    7828:	5f 92       	push	r5
    782a:	6f 92       	push	r6
    782c:	7f 92       	push	r7
    782e:	8f 92       	push	r8
    7830:	9f 92       	push	r9
    7832:	af 92       	push	r10
    7834:	bf 92       	push	r11
    7836:	cf 92       	push	r12
    7838:	df 92       	push	r13
    783a:	ef 92       	push	r14
    783c:	ff 92       	push	r15
    783e:	0f 93       	push	r16
    7840:	1f 93       	push	r17
    7842:	cf 93       	push	r28
    7844:	df 93       	push	r29
    7846:	00 d0       	rcall	.+0      	; 0x7848 <_ZN4Wind12calcWindDataEv+0x22>
    7848:	1f 92       	push	r1
    784a:	cd b7       	in	r28, 0x3d	; 61
    784c:	de b7       	in	r29, 0x3e	; 62
    784e:	8c 01       	movw	r16, r24

//fix rollover
	if (millis() < lastSpeedPulse) lastSpeedPulse = millis();
    7850:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    7854:	c0 90 90 11 	lds	r12, 0x1190
    7858:	d0 90 91 11 	lds	r13, 0x1191
    785c:	e0 90 92 11 	lds	r14, 0x1192
    7860:	f0 90 93 11 	lds	r15, 0x1193
    7864:	6c 15       	cp	r22, r12
    7866:	7d 05       	cpc	r23, r13
    7868:	8e 05       	cpc	r24, r14
    786a:	9f 05       	cpc	r25, r15
    786c:	50 f4       	brcc	.+20     	; 0x7882 <_ZN4Wind12calcWindDataEv+0x5c>
    786e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    7872:	60 93 90 11 	sts	0x1190, r22
    7876:	70 93 91 11 	sts	0x1191, r23
    787a:	80 93 92 11 	sts	0x1192, r24
    787e:	90 93 93 11 	sts	0x1193, r25
	if (millis() < lastDirPulse) lastDirPulse = millis();
    7882:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    7886:	c0 90 8c 11 	lds	r12, 0x118C
    788a:	d0 90 8d 11 	lds	r13, 0x118D
    788e:	e0 90 8e 11 	lds	r14, 0x118E
    7892:	f0 90 8f 11 	lds	r15, 0x118F
    7896:	6c 15       	cp	r22, r12
    7898:	7d 05       	cpc	r23, r13
    789a:	8e 05       	cpc	r24, r14
    789c:	9f 05       	cpc	r25, r15
    789e:	50 f4       	brcc	.+20     	; 0x78b4 <_ZN4Wind12calcWindDataEv+0x8e>
    78a0:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    78a4:	60 93 8c 11 	sts	0x118C, r22
    78a8:	70 93 8d 11 	sts	0x118D, r23
    78ac:	80 93 8e 11 	sts	0x118E, r24
    78b0:	90 93 8f 11 	sts	0x118F, r25

	model->setWindLastUpdate(millis());
    78b4:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    78b8:	ab 01       	movw	r20, r22
    78ba:	bc 01       	movw	r22, r24
    78bc:	d8 01       	movw	r26, r16
    78be:	8d 91       	ld	r24, X+
    78c0:	9c 91       	ld	r25, X
    78c2:	0e 94 8d 2d 	call	0x5b1a	; 0x5b1a <_ZN14FreeBoardModel17setWindLastUpdateEm>

//convert to windAverage
	if (millis() - lastSpeedPulse > 3000) {
    78c6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <millis>
    78ca:	c0 90 90 11 	lds	r12, 0x1190
    78ce:	d0 90 91 11 	lds	r13, 0x1191
    78d2:	e0 90 92 11 	lds	r14, 0x1192
    78d6:	f0 90 93 11 	lds	r15, 0x1193
    78da:	6c 19       	sub	r22, r12
    78dc:	7d 09       	sbc	r23, r13
    78de:	8e 09       	sbc	r24, r14
    78e0:	9f 09       	sbc	r25, r15
    78e2:	69 3b       	cpi	r22, 0xB9	; 185
    78e4:	7b 40       	sbci	r23, 0x0B	; 11
    78e6:	81 05       	cpc	r24, r1
    78e8:	91 05       	cpc	r25, r1
    78ea:	e0 f0       	brcs	.+56     	; 0x7924 <_ZN4Wind12calcWindDataEv+0xfe>
		//no rotation, no wind
		model->setWindAverage(0);
    78ec:	40 e0       	ldi	r20, 0x00	; 0
    78ee:	50 e0       	ldi	r21, 0x00	; 0
    78f0:	ba 01       	movw	r22, r20
    78f2:	f8 01       	movw	r30, r16
    78f4:	80 81       	ld	r24, Z
    78f6:	91 81       	ldd	r25, Z+1	; 0x01
		if (dir < 0) {
			dir = 360 + dir;
		}
		model->setWindApparentDir(dir);
	}
}
    78f8:	0f 90       	pop	r0
    78fa:	0f 90       	pop	r0
    78fc:	0f 90       	pop	r0
    78fe:	0f 90       	pop	r0
    7900:	df 91       	pop	r29
    7902:	cf 91       	pop	r28
    7904:	1f 91       	pop	r17
    7906:	0f 91       	pop	r16
    7908:	ff 90       	pop	r15
    790a:	ef 90       	pop	r14
    790c:	df 90       	pop	r13
    790e:	cf 90       	pop	r12
    7910:	bf 90       	pop	r11
    7912:	af 90       	pop	r10
    7914:	9f 90       	pop	r9
    7916:	8f 90       	pop	r8
    7918:	7f 90       	pop	r7
    791a:	6f 90       	pop	r6
    791c:	5f 90       	pop	r5
    791e:	4f 90       	pop	r4
	model->setWindLastUpdate(millis());

//convert to windAverage
	if (millis() - lastSpeedPulse > 3000) {
		//no rotation, no wind
		model->setWindAverage(0);
    7920:	0c 94 85 2d 	jmp	0x5b0a	; 0x5b0a <_ZN14FreeBoardModel14setWindAverageEf>
		//Serial.println("Wind speed reset");
	} else {
		//windSpeedDur is type long -  max sensor value = 3000000 micros
		if (windSpeedDur > 0) {
    7924:	80 91 74 11 	lds	r24, 0x1174
    7928:	90 91 75 11 	lds	r25, 0x1175
    792c:	a0 91 76 11 	lds	r26, 0x1176
    7930:	b0 91 77 11 	lds	r27, 0x1177
    7934:	89 2b       	or	r24, r25
    7936:	8a 2b       	or	r24, r26
    7938:	8b 2b       	or	r24, r27
    793a:	09 f4       	brne	.+2      	; 0x793e <_ZN4Wind12calcWindDataEv+0x118>
    793c:	4b c1       	rjmp	.+662    	; 0x7bd4 <_ZN4Wind12calcWindDataEv+0x3ae>
			// arduino long = -2,147,483,648 to 2,147,483,647
			//1000 millis = 1 rps - this is 1000 x rps (for int arithmetic) range 333 - 33333
			windSpeedRps = 100000000 / windSpeedDur;
    793e:	20 91 74 11 	lds	r18, 0x1174
    7942:	30 91 75 11 	lds	r19, 0x1175
    7946:	40 91 76 11 	lds	r20, 0x1176
    794a:	50 91 77 11 	lds	r21, 0x1177
    794e:	60 e0       	ldi	r22, 0x00	; 0
    7950:	71 ee       	ldi	r23, 0xE1	; 225
    7952:	85 ef       	ldi	r24, 0xF5	; 245
    7954:	95 e0       	ldi	r25, 0x05	; 5
    7956:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    795a:	20 93 88 11 	sts	0x1188, r18
    795e:	30 93 89 11 	sts	0x1189, r19
    7962:	40 93 8a 11 	sts	0x118A, r20
    7966:	50 93 8b 11 	sts	0x118B, r21
			//NOTE:converted multipliers to KNTS
			//need to avoid div/0 errors
			if (windSpeedRps < 323) {
    796a:	40 91 88 11 	lds	r20, 0x1188
    796e:	50 91 89 11 	lds	r21, 0x1189
    7972:	60 91 8a 11 	lds	r22, 0x118A
    7976:	70 91 8b 11 	lds	r23, 0x118B
    797a:	d8 01       	movw	r26, r16
    797c:	ed 91       	ld	r30, X+
    797e:	fc 91       	ld	r31, X
    7980:	43 34       	cpi	r20, 0x43	; 67
    7982:	51 40       	sbci	r21, 0x01	; 1
    7984:	61 05       	cpc	r22, r1
    7986:	71 05       	cpc	r23, r1
    7988:	0c f0       	brlt	.+2      	; 0x798c <_ZN4Wind12calcWindDataEv+0x166>
    798a:	6a c0       	rjmp	.+212    	; 0x7a60 <_ZN4Wind12calcWindDataEv+0x23a>
				//need extra accuracy here, zero is very unlikely
				windSpeedRps = windSpeedRps * 10;
    798c:	20 91 88 11 	lds	r18, 0x1188
    7990:	30 91 89 11 	lds	r19, 0x1189
    7994:	40 91 8a 11 	lds	r20, 0x118A
    7998:	50 91 8b 11 	lds	r21, 0x118B
    799c:	aa e0       	ldi	r26, 0x0A	; 10
    799e:	b0 e0       	ldi	r27, 0x00	; 0
    79a0:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    79a4:	60 93 88 11 	sts	0x1188, r22
    79a8:	70 93 89 11 	sts	0x1189, r23
    79ac:	80 93 8a 11 	sts	0x118A, r24
    79b0:	90 93 8b 11 	sts	0x118B, r25
				model->setWindAverage(((((windSpeedRps * windSpeedRps) / -105) + ((25476 * windSpeedRps) / 100) - 12260)) / model->getWindFactor() * 10);
    79b4:	20 91 88 11 	lds	r18, 0x1188
    79b8:	30 91 89 11 	lds	r19, 0x1189
    79bc:	40 91 8a 11 	lds	r20, 0x118A
    79c0:	50 91 8b 11 	lds	r21, 0x118B
    79c4:	c0 90 88 11 	lds	r12, 0x1188
    79c8:	d0 90 89 11 	lds	r13, 0x1189
    79cc:	e0 90 8a 11 	lds	r14, 0x118A
    79d0:	f0 90 8b 11 	lds	r15, 0x118B
    79d4:	40 90 88 11 	lds	r4, 0x1188
    79d8:	50 90 89 11 	lds	r5, 0x1189
    79dc:	60 90 8a 11 	lds	r6, 0x118A
    79e0:	70 90 8b 11 	lds	r7, 0x118B
    79e4:	cf 01       	movw	r24, r30
    79e6:	29 83       	std	Y+1, r18	; 0x01
    79e8:	3a 83       	std	Y+2, r19	; 0x02
    79ea:	4b 83       	std	Y+3, r20	; 0x03
    79ec:	5c 83       	std	Y+4, r21	; 0x04
    79ee:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_ZN14FreeBoardModel13getWindFactorEv>
    79f2:	4b 01       	movw	r8, r22
    79f4:	5c 01       	movw	r10, r24
    79f6:	29 81       	ldd	r18, Y+1	; 0x01
    79f8:	3a 81       	ldd	r19, Y+2	; 0x02
    79fa:	4b 81       	ldd	r20, Y+3	; 0x03
    79fc:	5c 81       	ldd	r21, Y+4	; 0x04
    79fe:	c7 01       	movw	r24, r14
    7a00:	b6 01       	movw	r22, r12
    7a02:	0e 94 6a 43 	call	0x86d4	; 0x86d4 <__mulsi3>
    7a06:	27 e9       	ldi	r18, 0x97	; 151
    7a08:	3f ef       	ldi	r19, 0xFF	; 255
    7a0a:	4f ef       	ldi	r20, 0xFF	; 255
    7a0c:	5f ef       	ldi	r21, 0xFF	; 255
    7a0e:	0e 94 bc 43 	call	0x8778	; 0x8778 <__divmodsi4>
    7a12:	69 01       	movw	r12, r18
    7a14:	7a 01       	movw	r14, r20
    7a16:	a4 e8       	ldi	r26, 0x84	; 132
    7a18:	b3 e6       	ldi	r27, 0x63	; 99
    7a1a:	a3 01       	movw	r20, r6
    7a1c:	92 01       	movw	r18, r4
    7a1e:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    7a22:	24 e6       	ldi	r18, 0x64	; 100
    7a24:	30 e0       	ldi	r19, 0x00	; 0
    7a26:	40 e0       	ldi	r20, 0x00	; 0
    7a28:	50 e0       	ldi	r21, 0x00	; 0
    7a2a:	0e 94 bc 43 	call	0x8778	; 0x8778 <__divmodsi4>
    7a2e:	c2 0e       	add	r12, r18
    7a30:	d3 1e       	adc	r13, r19
    7a32:	e4 1e       	adc	r14, r20
    7a34:	f5 1e       	adc	r15, r21
    7a36:	e4 ee       	ldi	r30, 0xE4	; 228
    7a38:	ce 1a       	sub	r12, r30
    7a3a:	ef e2       	ldi	r30, 0x2F	; 47
    7a3c:	de 0a       	sbc	r13, r30
    7a3e:	e1 08       	sbc	r14, r1
    7a40:	f1 08       	sbc	r15, r1
    7a42:	c7 01       	movw	r24, r14
    7a44:	b6 01       	movw	r22, r12
    7a46:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    7a4a:	a5 01       	movw	r20, r10
    7a4c:	94 01       	movw	r18, r8
    7a4e:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    7a52:	20 e0       	ldi	r18, 0x00	; 0
    7a54:	30 e0       	ldi	r19, 0x00	; 0
    7a56:	40 e2       	ldi	r20, 0x20	; 32
    7a58:	51 e4       	ldi	r21, 0x41	; 65
    7a5a:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    7a5e:	5d c0       	rjmp	.+186    	; 0x7b1a <_ZN4Wind12calcWindDataEv+0x2f4>
			} else if (windSpeedRps < 5436) {
    7a60:	80 91 88 11 	lds	r24, 0x1188
    7a64:	90 91 89 11 	lds	r25, 0x1189
    7a68:	a0 91 8a 11 	lds	r26, 0x118A
    7a6c:	b0 91 8b 11 	lds	r27, 0x118B
    7a70:	8c 33       	cpi	r24, 0x3C	; 60
    7a72:	95 41       	sbci	r25, 0x15	; 21
    7a74:	a1 05       	cpc	r26, r1
    7a76:	b1 05       	cpc	r27, r1
    7a78:	0c f0       	brlt	.+2      	; 0x7a7c <_ZN4Wind12calcWindDataEv+0x256>
    7a7a:	55 c0       	rjmp	.+170    	; 0x7b26 <_ZN4Wind12calcWindDataEv+0x300>
				//rps2 = min 10426441, max 30,864,197, cant get div/0 here?
				model->setWindAverage((((windSpeedRps * windSpeedRps) / 2222) + ((19099 * windSpeedRps) / 100) + 9638) / model->getWindFactor());
    7a7c:	20 91 88 11 	lds	r18, 0x1188
    7a80:	30 91 89 11 	lds	r19, 0x1189
    7a84:	40 91 8a 11 	lds	r20, 0x118A
    7a88:	50 91 8b 11 	lds	r21, 0x118B
    7a8c:	c0 90 88 11 	lds	r12, 0x1188
    7a90:	d0 90 89 11 	lds	r13, 0x1189
    7a94:	e0 90 8a 11 	lds	r14, 0x118A
    7a98:	f0 90 8b 11 	lds	r15, 0x118B
    7a9c:	40 90 88 11 	lds	r4, 0x1188
    7aa0:	50 90 89 11 	lds	r5, 0x1189
    7aa4:	60 90 8a 11 	lds	r6, 0x118A
    7aa8:	70 90 8b 11 	lds	r7, 0x118B
    7aac:	cf 01       	movw	r24, r30
    7aae:	29 83       	std	Y+1, r18	; 0x01
    7ab0:	3a 83       	std	Y+2, r19	; 0x02
    7ab2:	4b 83       	std	Y+3, r20	; 0x03
    7ab4:	5c 83       	std	Y+4, r21	; 0x04
    7ab6:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_ZN14FreeBoardModel13getWindFactorEv>
    7aba:	4b 01       	movw	r8, r22
    7abc:	5c 01       	movw	r10, r24
    7abe:	29 81       	ldd	r18, Y+1	; 0x01
    7ac0:	3a 81       	ldd	r19, Y+2	; 0x02
    7ac2:	4b 81       	ldd	r20, Y+3	; 0x03
    7ac4:	5c 81       	ldd	r21, Y+4	; 0x04
    7ac6:	c7 01       	movw	r24, r14
    7ac8:	b6 01       	movw	r22, r12
    7aca:	0e 94 6a 43 	call	0x86d4	; 0x86d4 <__mulsi3>
    7ace:	2e ea       	ldi	r18, 0xAE	; 174
    7ad0:	38 e0       	ldi	r19, 0x08	; 8
    7ad2:	40 e0       	ldi	r20, 0x00	; 0
    7ad4:	50 e0       	ldi	r21, 0x00	; 0
    7ad6:	0e 94 bc 43 	call	0x8778	; 0x8778 <__divmodsi4>
    7ada:	69 01       	movw	r12, r18
    7adc:	7a 01       	movw	r14, r20
    7ade:	ab e9       	ldi	r26, 0x9B	; 155
    7ae0:	ba e4       	ldi	r27, 0x4A	; 74
    7ae2:	a3 01       	movw	r20, r6
    7ae4:	92 01       	movw	r18, r4
    7ae6:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    7aea:	24 e6       	ldi	r18, 0x64	; 100
    7aec:	30 e0       	ldi	r19, 0x00	; 0
    7aee:	40 e0       	ldi	r20, 0x00	; 0
    7af0:	50 e0       	ldi	r21, 0x00	; 0
    7af2:	0e 94 bc 43 	call	0x8778	; 0x8778 <__divmodsi4>
    7af6:	c2 0e       	add	r12, r18
    7af8:	d3 1e       	adc	r13, r19
    7afa:	e4 1e       	adc	r14, r20
    7afc:	f5 1e       	adc	r15, r21
    7afe:	86 ea       	ldi	r24, 0xA6	; 166
    7b00:	c8 0e       	add	r12, r24
    7b02:	85 e2       	ldi	r24, 0x25	; 37
    7b04:	d8 1e       	adc	r13, r24
    7b06:	e1 1c       	adc	r14, r1
    7b08:	f1 1c       	adc	r15, r1
    7b0a:	c7 01       	movw	r24, r14
    7b0c:	b6 01       	movw	r22, r12
    7b0e:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    7b12:	a5 01       	movw	r20, r10
    7b14:	94 01       	movw	r18, r8
    7b16:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    7b1a:	ab 01       	movw	r20, r22
    7b1c:	bc 01       	movw	r22, r24
    7b1e:	d8 01       	movw	r26, r16
    7b20:	8d 91       	ld	r24, X+
    7b22:	9c 91       	ld	r25, X
    7b24:	55 c0       	rjmp	.+170    	; 0x7bd0 <_ZN4Wind12calcWindDataEv+0x3aa>
			} else {
				model->setWindAverage(((((windSpeedRps * windSpeedRps) / 1042) * 100) - (8314700 * windSpeedRps) + 2866500) / model->getWindFactor());
    7b26:	20 91 88 11 	lds	r18, 0x1188
    7b2a:	30 91 89 11 	lds	r19, 0x1189
    7b2e:	40 91 8a 11 	lds	r20, 0x118A
    7b32:	50 91 8b 11 	lds	r21, 0x118B
    7b36:	c0 90 88 11 	lds	r12, 0x1188
    7b3a:	d0 90 89 11 	lds	r13, 0x1189
    7b3e:	e0 90 8a 11 	lds	r14, 0x118A
    7b42:	f0 90 8b 11 	lds	r15, 0x118B
    7b46:	40 90 88 11 	lds	r4, 0x1188
    7b4a:	50 90 89 11 	lds	r5, 0x1189
    7b4e:	60 90 8a 11 	lds	r6, 0x118A
    7b52:	70 90 8b 11 	lds	r7, 0x118B
    7b56:	cf 01       	movw	r24, r30
    7b58:	29 83       	std	Y+1, r18	; 0x01
    7b5a:	3a 83       	std	Y+2, r19	; 0x02
    7b5c:	4b 83       	std	Y+3, r20	; 0x03
    7b5e:	5c 83       	std	Y+4, r21	; 0x04
    7b60:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <_ZN14FreeBoardModel13getWindFactorEv>
    7b64:	4b 01       	movw	r8, r22
    7b66:	5c 01       	movw	r10, r24
    7b68:	29 81       	ldd	r18, Y+1	; 0x01
    7b6a:	3a 81       	ldd	r19, Y+2	; 0x02
    7b6c:	4b 81       	ldd	r20, Y+3	; 0x03
    7b6e:	5c 81       	ldd	r21, Y+4	; 0x04
    7b70:	c7 01       	movw	r24, r14
    7b72:	b6 01       	movw	r22, r12
    7b74:	0e 94 6a 43 	call	0x86d4	; 0x86d4 <__mulsi3>
    7b78:	22 e1       	ldi	r18, 0x12	; 18
    7b7a:	34 e0       	ldi	r19, 0x04	; 4
    7b7c:	40 e0       	ldi	r20, 0x00	; 0
    7b7e:	50 e0       	ldi	r21, 0x00	; 0
    7b80:	0e 94 bc 43 	call	0x8778	; 0x8778 <__divmodsi4>
    7b84:	a4 e6       	ldi	r26, 0x64	; 100
    7b86:	b0 e0       	ldi	r27, 0x00	; 0
    7b88:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    7b8c:	6b 01       	movw	r12, r22
    7b8e:	7c 01       	movw	r14, r24
    7b90:	a3 01       	movw	r20, r6
    7b92:	92 01       	movw	r18, r4
    7b94:	64 eb       	ldi	r22, 0xB4	; 180
    7b96:	70 e2       	ldi	r23, 0x20	; 32
    7b98:	81 e8       	ldi	r24, 0x81	; 129
    7b9a:	9f ef       	ldi	r25, 0xFF	; 255
    7b9c:	0e 94 6a 43 	call	0x86d4	; 0x86d4 <__mulsi3>
    7ba0:	c6 0e       	add	r12, r22
    7ba2:	d7 1e       	adc	r13, r23
    7ba4:	e8 1e       	adc	r14, r24
    7ba6:	f9 1e       	adc	r15, r25
    7ba8:	b4 e4       	ldi	r27, 0x44	; 68
    7baa:	cb 0e       	add	r12, r27
    7bac:	bd eb       	ldi	r27, 0xBD	; 189
    7bae:	db 1e       	adc	r13, r27
    7bb0:	bb e2       	ldi	r27, 0x2B	; 43
    7bb2:	eb 1e       	adc	r14, r27
    7bb4:	f1 1c       	adc	r15, r1
    7bb6:	c7 01       	movw	r24, r14
    7bb8:	b6 01       	movw	r22, r12
    7bba:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    7bbe:	a5 01       	movw	r20, r10
    7bc0:	94 01       	movw	r18, r8
    7bc2:	0e 94 8e 40 	call	0x811c	; 0x811c <__divsf3>
    7bc6:	ab 01       	movw	r20, r22
    7bc8:	bc 01       	movw	r22, r24
    7bca:	f8 01       	movw	r30, r16
    7bcc:	80 81       	ld	r24, Z
    7bce:	91 81       	ldd	r25, Z+1	; 0x01
    7bd0:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <_ZN14FreeBoardModel14setWindAverageEf>
			}
		}
		//update gusts
		if (model->getWindAverage() > model->getWindMax()) model->setWindMax(model->getWindAverage());
    7bd4:	d8 01       	movw	r26, r16
    7bd6:	8d 91       	ld	r24, X+
    7bd8:	9c 91       	ld	r25, X
    7bda:	0e 94 4e 2c 	call	0x589c	; 0x589c <_ZN14FreeBoardModel14getWindAverageEv>
    7bde:	6b 01       	movw	r12, r22
    7be0:	7c 01       	movw	r14, r24
    7be2:	f8 01       	movw	r30, r16
    7be4:	80 81       	ld	r24, Z
    7be6:	91 81       	ldd	r25, Z+1	; 0x01
    7be8:	0e 94 66 2c 	call	0x58cc	; 0x58cc <_ZN14FreeBoardModel10getWindMaxEv>
    7bec:	bc 01       	movw	r22, r24
    7bee:	88 27       	eor	r24, r24
    7bf0:	77 fd       	sbrc	r23, 7
    7bf2:	80 95       	com	r24
    7bf4:	98 2f       	mov	r25, r24
    7bf6:	0e 94 29 41 	call	0x8252	; 0x8252 <__floatsisf>
    7bfa:	9b 01       	movw	r18, r22
    7bfc:	ac 01       	movw	r20, r24
    7bfe:	c7 01       	movw	r24, r14
    7c00:	b6 01       	movw	r22, r12
    7c02:	0e 94 8a 42 	call	0x8514	; 0x8514 <__gesf2>
    7c06:	18 16       	cp	r1, r24
    7c08:	64 f4       	brge	.+24     	; 0x7c22 <_ZN4Wind12calcWindDataEv+0x3fc>
    7c0a:	d8 01       	movw	r26, r16
    7c0c:	8d 91       	ld	r24, X+
    7c0e:	9c 91       	ld	r25, X
    7c10:	0e 94 4e 2c 	call	0x589c	; 0x589c <_ZN14FreeBoardModel14getWindAverageEv>
    7c14:	0e 94 f6 40 	call	0x81ec	; 0x81ec <__fixsfsi>
    7c18:	f8 01       	movw	r30, r16
    7c1a:	80 81       	ld	r24, Z
    7c1c:	91 81       	ldd	r25, Z+1	; 0x01
    7c1e:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <_ZN14FreeBoardModel10setWindMaxEi>

		// calc direction, degrees clockwise
		//should round to int, min 1
		int dir = (int) getRotationalAverage();
    7c22:	c8 01       	movw	r24, r16
    7c24:	0e 94 61 38 	call	0x70c2	; 0x70c2 <_ZN4Wind20getRotationalAverageEv>
    7c28:	7c 01       	movw	r14, r24
		//limit to +-360, after adjust zero
		//C = A – B * (A / B)
		dir = (dir + model->getWindZeroOffset()); // %360;
    7c2a:	d8 01       	movw	r26, r16
    7c2c:	8d 91       	ld	r24, X+
    7c2e:	9c 91       	ld	r25, X
    7c30:	0e 94 3c 2c 	call	0x5878	; 0x5878 <_ZN14FreeBoardModel17getWindZeroOffsetEv>
    7c34:	8e 0d       	add	r24, r14
    7c36:	9f 1d       	adc	r25, r15
		if (dir != 0) {
    7c38:	00 97       	sbiw	r24, 0x00	; 0
    7c3a:	41 f0       	breq	.+16     	; 0x7c4c <_ZN4Wind12calcWindDataEv+0x426>
			dir = dir - 360 * (dir / 360);
    7c3c:	68 e6       	ldi	r22, 0x68	; 104
    7c3e:	71 e0       	ldi	r23, 0x01	; 1
    7c40:	0e 94 86 43 	call	0x870c	; 0x870c <__divmodhi4>
		}
		//if minus, then reverse to +ve
		if (dir < 0) {
    7c44:	97 ff       	sbrs	r25, 7
    7c46:	02 c0       	rjmp	.+4      	; 0x7c4c <_ZN4Wind12calcWindDataEv+0x426>
			dir = 360 + dir;
    7c48:	88 59       	subi	r24, 0x98	; 152
    7c4a:	9e 4f       	sbci	r25, 0xFE	; 254
		}
		model->setWindApparentDir(dir);
    7c4c:	bc 01       	movw	r22, r24
    7c4e:	f8 01       	movw	r30, r16
    7c50:	80 81       	ld	r24, Z
    7c52:	91 81       	ldd	r25, Z+1	; 0x01
	}
}
    7c54:	0f 90       	pop	r0
    7c56:	0f 90       	pop	r0
    7c58:	0f 90       	pop	r0
    7c5a:	0f 90       	pop	r0
    7c5c:	df 91       	pop	r29
    7c5e:	cf 91       	pop	r28
    7c60:	1f 91       	pop	r17
    7c62:	0f 91       	pop	r16
    7c64:	ff 90       	pop	r15
    7c66:	ef 90       	pop	r14
    7c68:	df 90       	pop	r13
    7c6a:	cf 90       	pop	r12
    7c6c:	bf 90       	pop	r11
    7c6e:	af 90       	pop	r10
    7c70:	9f 90       	pop	r9
    7c72:	8f 90       	pop	r8
    7c74:	7f 90       	pop	r7
    7c76:	6f 90       	pop	r6
    7c78:	5f 90       	pop	r5
    7c7a:	4f 90       	pop	r4
		}
		//if minus, then reverse to +ve
		if (dir < 0) {
			dir = 360 + dir;
		}
		model->setWindApparentDir(dir);
    7c7c:	0c 94 79 2d 	jmp	0x5af2	; 0x5af2 <_ZN14FreeBoardModel18setWindApparentDirEi>

00007c80 <_GLOBAL__sub_I_lastSpeedPulse>:

template<typename datatype>
class AverageList {
	public:
		//<<constructor>>
		AverageList(datatype* storage, byte storageSize) : values(storage) , size(storageSize) { 
    7c80:	8c e4       	ldi	r24, 0x4C	; 76
    7c82:	91 e1       	ldi	r25, 0x11	; 17
    7c84:	90 93 48 11 	sts	0x1148, r25
    7c88:	80 93 47 11 	sts	0x1147, r24
    7c8c:	85 e0       	ldi	r24, 0x05	; 5
    7c8e:	80 93 49 11 	sts	0x1149, r24
			currentSize = 0; 
    7c92:	10 92 4a 11 	sts	0x114A, r1
			currentIndex = 0; 
    7c96:	10 92 4b 11 	sts	0x114B, r1
    7c9a:	08 95       	ret

00007c9c <_Z10store_charhP11ring_buffer>:
    7c9c:	fb 01       	movw	r30, r22
    7c9e:	e0 5c       	subi	r30, 0xC0	; 192
    7ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    7ca2:	20 81       	ld	r18, Z
    7ca4:	31 81       	ldd	r19, Z+1	; 0x01
    7ca6:	2f 5f       	subi	r18, 0xFF	; 255
    7ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    7caa:	2f 73       	andi	r18, 0x3F	; 63
    7cac:	33 27       	eor	r19, r19
    7cae:	db 01       	movw	r26, r22
    7cb0:	ae 5b       	subi	r26, 0xBE	; 190
    7cb2:	bf 4f       	sbci	r27, 0xFF	; 255
    7cb4:	4d 91       	ld	r20, X+
    7cb6:	5c 91       	ld	r21, X
    7cb8:	24 17       	cp	r18, r20
    7cba:	35 07       	cpc	r19, r21
    7cbc:	39 f0       	breq	.+14     	; 0x7ccc <_Z10store_charhP11ring_buffer+0x30>
    7cbe:	a0 81       	ld	r26, Z
    7cc0:	b1 81       	ldd	r27, Z+1	; 0x01
    7cc2:	a6 0f       	add	r26, r22
    7cc4:	b7 1f       	adc	r27, r23
    7cc6:	8c 93       	st	X, r24
    7cc8:	31 83       	std	Z+1, r19	; 0x01
    7cca:	20 83       	st	Z, r18
    7ccc:	08 95       	ret

00007cce <_GLOBAL__sub_I_rx_buffer>:
    7cce:	cf 93       	push	r28
    7cd0:	10 92 dd 06 	sts	0x06DD, r1
    7cd4:	10 92 dc 06 	sts	0x06DC, r1
    7cd8:	88 ee       	ldi	r24, 0xE8	; 232
    7cda:	93 e0       	ldi	r25, 0x03	; 3
    7cdc:	a0 e0       	ldi	r26, 0x00	; 0
    7cde:	b0 e0       	ldi	r27, 0x00	; 0
    7ce0:	80 93 de 06 	sts	0x06DE, r24
    7ce4:	90 93 df 06 	sts	0x06DF, r25
    7ce8:	a0 93 e0 06 	sts	0x06E0, r26
    7cec:	b0 93 e1 06 	sts	0x06E1, r27
    7cf0:	2a e5       	ldi	r18, 0x5A	; 90
    7cf2:	36 e0       	ldi	r19, 0x06	; 6
    7cf4:	30 93 db 06 	sts	0x06DB, r19
    7cf8:	20 93 da 06 	sts	0x06DA, r18
    7cfc:	48 ed       	ldi	r20, 0xD8	; 216
    7cfe:	58 e0       	ldi	r21, 0x08	; 8
    7d00:	50 93 e7 06 	sts	0x06E7, r21
    7d04:	40 93 e6 06 	sts	0x06E6, r20
    7d08:	44 e9       	ldi	r20, 0x94	; 148
    7d0a:	58 e0       	ldi	r21, 0x08	; 8
    7d0c:	50 93 e9 06 	sts	0x06E9, r21
    7d10:	40 93 e8 06 	sts	0x06E8, r20
    7d14:	45 ec       	ldi	r20, 0xC5	; 197
    7d16:	50 e0       	ldi	r21, 0x00	; 0
    7d18:	50 93 eb 06 	sts	0x06EB, r21
    7d1c:	40 93 ea 06 	sts	0x06EA, r20
    7d20:	44 ec       	ldi	r20, 0xC4	; 196
    7d22:	50 e0       	ldi	r21, 0x00	; 0
    7d24:	50 93 ed 06 	sts	0x06ED, r21
    7d28:	40 93 ec 06 	sts	0x06EC, r20
    7d2c:	40 ec       	ldi	r20, 0xC0	; 192
    7d2e:	50 e0       	ldi	r21, 0x00	; 0
    7d30:	50 93 ef 06 	sts	0x06EF, r21
    7d34:	40 93 ee 06 	sts	0x06EE, r20
    7d38:	41 ec       	ldi	r20, 0xC1	; 193
    7d3a:	50 e0       	ldi	r21, 0x00	; 0
    7d3c:	50 93 f1 06 	sts	0x06F1, r21
    7d40:	40 93 f0 06 	sts	0x06F0, r20
    7d44:	42 ec       	ldi	r20, 0xC2	; 194
    7d46:	50 e0       	ldi	r21, 0x00	; 0
    7d48:	50 93 f3 06 	sts	0x06F3, r21
    7d4c:	40 93 f2 06 	sts	0x06F2, r20
    7d50:	46 ec       	ldi	r20, 0xC6	; 198
    7d52:	50 e0       	ldi	r21, 0x00	; 0
    7d54:	50 93 f5 06 	sts	0x06F5, r21
    7d58:	40 93 f4 06 	sts	0x06F4, r20
    7d5c:	c4 e0       	ldi	r28, 0x04	; 4
    7d5e:	c0 93 f6 06 	sts	0x06F6, r28
    7d62:	f3 e0       	ldi	r31, 0x03	; 3
    7d64:	f0 93 f7 06 	sts	0x06F7, r31
    7d68:	e7 e0       	ldi	r30, 0x07	; 7
    7d6a:	e0 93 f8 06 	sts	0x06F8, r30
    7d6e:	75 e0       	ldi	r23, 0x05	; 5
    7d70:	70 93 f9 06 	sts	0x06F9, r23
    7d74:	61 e0       	ldi	r22, 0x01	; 1
    7d76:	60 93 fa 06 	sts	0x06FA, r22
    7d7a:	10 92 bb 06 	sts	0x06BB, r1
    7d7e:	10 92 ba 06 	sts	0x06BA, r1
    7d82:	80 93 bc 06 	sts	0x06BC, r24
    7d86:	90 93 bd 06 	sts	0x06BD, r25
    7d8a:	a0 93 be 06 	sts	0x06BE, r26
    7d8e:	b0 93 bf 06 	sts	0x06BF, r27
    7d92:	30 93 b9 06 	sts	0x06B9, r19
    7d96:	20 93 b8 06 	sts	0x06B8, r18
    7d9a:	40 e5       	ldi	r20, 0x50	; 80
    7d9c:	58 e0       	ldi	r21, 0x08	; 8
    7d9e:	50 93 c5 06 	sts	0x06C5, r21
    7da2:	40 93 c4 06 	sts	0x06C4, r20
    7da6:	4c e0       	ldi	r20, 0x0C	; 12
    7da8:	58 e0       	ldi	r21, 0x08	; 8
    7daa:	50 93 c7 06 	sts	0x06C7, r21
    7dae:	40 93 c6 06 	sts	0x06C6, r20
    7db2:	4d ec       	ldi	r20, 0xCD	; 205
    7db4:	50 e0       	ldi	r21, 0x00	; 0
    7db6:	50 93 c9 06 	sts	0x06C9, r21
    7dba:	40 93 c8 06 	sts	0x06C8, r20
    7dbe:	4c ec       	ldi	r20, 0xCC	; 204
    7dc0:	50 e0       	ldi	r21, 0x00	; 0
    7dc2:	50 93 cb 06 	sts	0x06CB, r21
    7dc6:	40 93 ca 06 	sts	0x06CA, r20
    7dca:	48 ec       	ldi	r20, 0xC8	; 200
    7dcc:	50 e0       	ldi	r21, 0x00	; 0
    7dce:	50 93 cd 06 	sts	0x06CD, r21
    7dd2:	40 93 cc 06 	sts	0x06CC, r20
    7dd6:	49 ec       	ldi	r20, 0xC9	; 201
    7dd8:	50 e0       	ldi	r21, 0x00	; 0
    7dda:	50 93 cf 06 	sts	0x06CF, r21
    7dde:	40 93 ce 06 	sts	0x06CE, r20
    7de2:	4a ec       	ldi	r20, 0xCA	; 202
    7de4:	50 e0       	ldi	r21, 0x00	; 0
    7de6:	50 93 d1 06 	sts	0x06D1, r21
    7dea:	40 93 d0 06 	sts	0x06D0, r20
    7dee:	4e ec       	ldi	r20, 0xCE	; 206
    7df0:	50 e0       	ldi	r21, 0x00	; 0
    7df2:	50 93 d3 06 	sts	0x06D3, r21
    7df6:	40 93 d2 06 	sts	0x06D2, r20
    7dfa:	c0 93 d4 06 	sts	0x06D4, r28
    7dfe:	f0 93 d5 06 	sts	0x06D5, r31
    7e02:	e0 93 d6 06 	sts	0x06D6, r30
    7e06:	70 93 d7 06 	sts	0x06D7, r23
    7e0a:	60 93 d8 06 	sts	0x06D8, r22
    7e0e:	10 92 99 06 	sts	0x0699, r1
    7e12:	10 92 98 06 	sts	0x0698, r1
    7e16:	80 93 9a 06 	sts	0x069A, r24
    7e1a:	90 93 9b 06 	sts	0x069B, r25
    7e1e:	a0 93 9c 06 	sts	0x069C, r26
    7e22:	b0 93 9d 06 	sts	0x069D, r27
    7e26:	30 93 97 06 	sts	0x0697, r19
    7e2a:	20 93 96 06 	sts	0x0696, r18
    7e2e:	48 ec       	ldi	r20, 0xC8	; 200
    7e30:	57 e0       	ldi	r21, 0x07	; 7
    7e32:	50 93 a3 06 	sts	0x06A3, r21
    7e36:	40 93 a2 06 	sts	0x06A2, r20
    7e3a:	44 e8       	ldi	r20, 0x84	; 132
    7e3c:	57 e0       	ldi	r21, 0x07	; 7
    7e3e:	50 93 a5 06 	sts	0x06A5, r21
    7e42:	40 93 a4 06 	sts	0x06A4, r20
    7e46:	45 ed       	ldi	r20, 0xD5	; 213
    7e48:	50 e0       	ldi	r21, 0x00	; 0
    7e4a:	50 93 a7 06 	sts	0x06A7, r21
    7e4e:	40 93 a6 06 	sts	0x06A6, r20
    7e52:	44 ed       	ldi	r20, 0xD4	; 212
    7e54:	50 e0       	ldi	r21, 0x00	; 0
    7e56:	50 93 a9 06 	sts	0x06A9, r21
    7e5a:	40 93 a8 06 	sts	0x06A8, r20
    7e5e:	40 ed       	ldi	r20, 0xD0	; 208
    7e60:	50 e0       	ldi	r21, 0x00	; 0
    7e62:	50 93 ab 06 	sts	0x06AB, r21
    7e66:	40 93 aa 06 	sts	0x06AA, r20
    7e6a:	41 ed       	ldi	r20, 0xD1	; 209
    7e6c:	50 e0       	ldi	r21, 0x00	; 0
    7e6e:	50 93 ad 06 	sts	0x06AD, r21
    7e72:	40 93 ac 06 	sts	0x06AC, r20
    7e76:	42 ed       	ldi	r20, 0xD2	; 210
    7e78:	50 e0       	ldi	r21, 0x00	; 0
    7e7a:	50 93 af 06 	sts	0x06AF, r21
    7e7e:	40 93 ae 06 	sts	0x06AE, r20
    7e82:	46 ed       	ldi	r20, 0xD6	; 214
    7e84:	50 e0       	ldi	r21, 0x00	; 0
    7e86:	50 93 b1 06 	sts	0x06B1, r21
    7e8a:	40 93 b0 06 	sts	0x06B0, r20
    7e8e:	c0 93 b2 06 	sts	0x06B2, r28
    7e92:	f0 93 b3 06 	sts	0x06B3, r31
    7e96:	e0 93 b4 06 	sts	0x06B4, r30
    7e9a:	70 93 b5 06 	sts	0x06B5, r23
    7e9e:	60 93 b6 06 	sts	0x06B6, r22
    7ea2:	10 92 77 06 	sts	0x0677, r1
    7ea6:	10 92 76 06 	sts	0x0676, r1
    7eaa:	80 93 78 06 	sts	0x0678, r24
    7eae:	90 93 79 06 	sts	0x0679, r25
    7eb2:	a0 93 7a 06 	sts	0x067A, r26
    7eb6:	b0 93 7b 06 	sts	0x067B, r27
    7eba:	30 93 75 06 	sts	0x0675, r19
    7ebe:	20 93 74 06 	sts	0x0674, r18
    7ec2:	80 e4       	ldi	r24, 0x40	; 64
    7ec4:	97 e0       	ldi	r25, 0x07	; 7
    7ec6:	90 93 81 06 	sts	0x0681, r25
    7eca:	80 93 80 06 	sts	0x0680, r24
    7ece:	8c ef       	ldi	r24, 0xFC	; 252
    7ed0:	96 e0       	ldi	r25, 0x06	; 6
    7ed2:	90 93 83 06 	sts	0x0683, r25
    7ed6:	80 93 82 06 	sts	0x0682, r24
    7eda:	85 e3       	ldi	r24, 0x35	; 53
    7edc:	91 e0       	ldi	r25, 0x01	; 1
    7ede:	90 93 85 06 	sts	0x0685, r25
    7ee2:	80 93 84 06 	sts	0x0684, r24
    7ee6:	84 e3       	ldi	r24, 0x34	; 52
    7ee8:	91 e0       	ldi	r25, 0x01	; 1
    7eea:	90 93 87 06 	sts	0x0687, r25
    7eee:	80 93 86 06 	sts	0x0686, r24
    7ef2:	80 e3       	ldi	r24, 0x30	; 48
    7ef4:	91 e0       	ldi	r25, 0x01	; 1
    7ef6:	90 93 89 06 	sts	0x0689, r25
    7efa:	80 93 88 06 	sts	0x0688, r24
    7efe:	81 e3       	ldi	r24, 0x31	; 49
    7f00:	91 e0       	ldi	r25, 0x01	; 1
    7f02:	90 93 8b 06 	sts	0x068B, r25
    7f06:	80 93 8a 06 	sts	0x068A, r24
    7f0a:	82 e3       	ldi	r24, 0x32	; 50
    7f0c:	91 e0       	ldi	r25, 0x01	; 1
    7f0e:	90 93 8d 06 	sts	0x068D, r25
    7f12:	80 93 8c 06 	sts	0x068C, r24
    7f16:	86 e3       	ldi	r24, 0x36	; 54
    7f18:	91 e0       	ldi	r25, 0x01	; 1
    7f1a:	90 93 8f 06 	sts	0x068F, r25
    7f1e:	80 93 8e 06 	sts	0x068E, r24
    7f22:	c0 93 90 06 	sts	0x0690, r28
    7f26:	f0 93 91 06 	sts	0x0691, r31
    7f2a:	e0 93 92 06 	sts	0x0692, r30
    7f2e:	70 93 93 06 	sts	0x0693, r23
    7f32:	60 93 94 06 	sts	0x0694, r22
    7f36:	cf 91       	pop	r28
    7f38:	08 95       	ret

00007f3a <_ZN5Print5writeEPKc>:
    7f3a:	61 15       	cp	r22, r1
    7f3c:	71 05       	cpc	r23, r1
    7f3e:	81 f0       	breq	.+32     	; 0x7f60 <_ZN5Print5writeEPKc+0x26>
    7f40:	db 01       	movw	r26, r22
    7f42:	0d 90       	ld	r0, X+
    7f44:	00 20       	and	r0, r0
    7f46:	e9 f7       	brne	.-6      	; 0x7f42 <_ZN5Print5writeEPKc+0x8>
    7f48:	ad 01       	movw	r20, r26
    7f4a:	41 50       	subi	r20, 0x01	; 1
    7f4c:	51 09       	sbc	r21, r1
    7f4e:	46 1b       	sub	r20, r22
    7f50:	57 0b       	sbc	r21, r23
    7f52:	dc 01       	movw	r26, r24
    7f54:	ed 91       	ld	r30, X+
    7f56:	fc 91       	ld	r31, X
    7f58:	02 80       	ldd	r0, Z+2	; 0x02
    7f5a:	f3 81       	ldd	r31, Z+3	; 0x03
    7f5c:	e0 2d       	mov	r30, r0
    7f5e:	19 94       	eijmp
    7f60:	80 e0       	ldi	r24, 0x00	; 0
    7f62:	90 e0       	ldi	r25, 0x00	; 0
    7f64:	08 95       	ret

00007f66 <main>:
    7f66:	0e 94 55 16 	call	0x2caa	; 0x2caa <init>
    7f6a:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <setup>
    7f6e:	c9 e3       	ldi	r28, 0x39	; 57
    7f70:	d3 e0       	ldi	r29, 0x03	; 3
    7f72:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <loop>
    7f76:	20 97       	sbiw	r28, 0x00	; 0
    7f78:	e1 f3       	breq	.-8      	; 0x7f72 <main+0xc>
    7f7a:	0e 94 39 03 	call	0x672	; 0x672 <_Z14serialEventRunv>
    7f7e:	f9 cf       	rjmp	.-14     	; 0x7f72 <main+0xc>

00007f80 <__subsf3>:
    7f80:	50 58       	subi	r21, 0x80	; 128

00007f82 <__addsf3>:
    7f82:	bb 27       	eor	r27, r27
    7f84:	aa 27       	eor	r26, r26
    7f86:	0e d0       	rcall	.+28     	; 0x7fa4 <__addsf3x>
    7f88:	63 c2       	rjmp	.+1222   	; 0x8450 <__fp_round>
    7f8a:	2c d2       	rcall	.+1112   	; 0x83e4 <__fp_pscA>
    7f8c:	30 f0       	brcs	.+12     	; 0x7f9a <__addsf3+0x18>
    7f8e:	31 d2       	rcall	.+1122   	; 0x83f2 <__fp_pscB>
    7f90:	20 f0       	brcs	.+8      	; 0x7f9a <__addsf3+0x18>
    7f92:	31 f4       	brne	.+12     	; 0x7fa0 <__addsf3+0x1e>
    7f94:	9f 3f       	cpi	r25, 0xFF	; 255
    7f96:	11 f4       	brne	.+4      	; 0x7f9c <__addsf3+0x1a>
    7f98:	1e f4       	brtc	.+6      	; 0x7fa0 <__addsf3+0x1e>
    7f9a:	fc c1       	rjmp	.+1016   	; 0x8394 <__fp_nan>
    7f9c:	0e f4       	brtc	.+2      	; 0x7fa0 <__addsf3+0x1e>
    7f9e:	e0 95       	com	r30
    7fa0:	e7 fb       	bst	r30, 7
    7fa2:	c9 c1       	rjmp	.+914    	; 0x8336 <__fp_inf>

00007fa4 <__addsf3x>:
    7fa4:	e9 2f       	mov	r30, r25
    7fa6:	76 d2       	rcall	.+1260   	; 0x8494 <__fp_split3>
    7fa8:	80 f3       	brcs	.-32     	; 0x7f8a <__addsf3+0x8>
    7faa:	ba 17       	cp	r27, r26
    7fac:	62 07       	cpc	r22, r18
    7fae:	73 07       	cpc	r23, r19
    7fb0:	84 07       	cpc	r24, r20
    7fb2:	95 07       	cpc	r25, r21
    7fb4:	18 f0       	brcs	.+6      	; 0x7fbc <__addsf3x+0x18>
    7fb6:	71 f4       	brne	.+28     	; 0x7fd4 <__addsf3x+0x30>
    7fb8:	9e f5       	brtc	.+102    	; 0x8020 <__addsf3x+0x7c>
    7fba:	a5 c2       	rjmp	.+1354   	; 0x8506 <__fp_zero>
    7fbc:	0e f4       	brtc	.+2      	; 0x7fc0 <__addsf3x+0x1c>
    7fbe:	e0 95       	com	r30
    7fc0:	0b 2e       	mov	r0, r27
    7fc2:	ba 2f       	mov	r27, r26
    7fc4:	a0 2d       	mov	r26, r0
    7fc6:	0b 01       	movw	r0, r22
    7fc8:	b9 01       	movw	r22, r18
    7fca:	90 01       	movw	r18, r0
    7fcc:	0c 01       	movw	r0, r24
    7fce:	ca 01       	movw	r24, r20
    7fd0:	a0 01       	movw	r20, r0
    7fd2:	11 24       	eor	r1, r1
    7fd4:	ff 27       	eor	r31, r31
    7fd6:	59 1b       	sub	r21, r25
    7fd8:	99 f0       	breq	.+38     	; 0x8000 <__addsf3x+0x5c>
    7fda:	59 3f       	cpi	r21, 0xF9	; 249
    7fdc:	50 f4       	brcc	.+20     	; 0x7ff2 <__addsf3x+0x4e>
    7fde:	50 3e       	cpi	r21, 0xE0	; 224
    7fe0:	68 f1       	brcs	.+90     	; 0x803c <__addsf3x+0x98>
    7fe2:	1a 16       	cp	r1, r26
    7fe4:	f0 40       	sbci	r31, 0x00	; 0
    7fe6:	a2 2f       	mov	r26, r18
    7fe8:	23 2f       	mov	r18, r19
    7fea:	34 2f       	mov	r19, r20
    7fec:	44 27       	eor	r20, r20
    7fee:	58 5f       	subi	r21, 0xF8	; 248
    7ff0:	f3 cf       	rjmp	.-26     	; 0x7fd8 <__addsf3x+0x34>
    7ff2:	46 95       	lsr	r20
    7ff4:	37 95       	ror	r19
    7ff6:	27 95       	ror	r18
    7ff8:	a7 95       	ror	r26
    7ffa:	f0 40       	sbci	r31, 0x00	; 0
    7ffc:	53 95       	inc	r21
    7ffe:	c9 f7       	brne	.-14     	; 0x7ff2 <__addsf3x+0x4e>
    8000:	7e f4       	brtc	.+30     	; 0x8020 <__addsf3x+0x7c>
    8002:	1f 16       	cp	r1, r31
    8004:	ba 0b       	sbc	r27, r26
    8006:	62 0b       	sbc	r22, r18
    8008:	73 0b       	sbc	r23, r19
    800a:	84 0b       	sbc	r24, r20
    800c:	ba f0       	brmi	.+46     	; 0x803c <__addsf3x+0x98>
    800e:	91 50       	subi	r25, 0x01	; 1
    8010:	a1 f0       	breq	.+40     	; 0x803a <__addsf3x+0x96>
    8012:	ff 0f       	add	r31, r31
    8014:	bb 1f       	adc	r27, r27
    8016:	66 1f       	adc	r22, r22
    8018:	77 1f       	adc	r23, r23
    801a:	88 1f       	adc	r24, r24
    801c:	c2 f7       	brpl	.-16     	; 0x800e <__addsf3x+0x6a>
    801e:	0e c0       	rjmp	.+28     	; 0x803c <__addsf3x+0x98>
    8020:	ba 0f       	add	r27, r26
    8022:	62 1f       	adc	r22, r18
    8024:	73 1f       	adc	r23, r19
    8026:	84 1f       	adc	r24, r20
    8028:	48 f4       	brcc	.+18     	; 0x803c <__addsf3x+0x98>
    802a:	87 95       	ror	r24
    802c:	77 95       	ror	r23
    802e:	67 95       	ror	r22
    8030:	b7 95       	ror	r27
    8032:	f7 95       	ror	r31
    8034:	9e 3f       	cpi	r25, 0xFE	; 254
    8036:	08 f0       	brcs	.+2      	; 0x803a <__addsf3x+0x96>
    8038:	b3 cf       	rjmp	.-154    	; 0x7fa0 <__addsf3+0x1e>
    803a:	93 95       	inc	r25
    803c:	88 0f       	add	r24, r24
    803e:	08 f0       	brcs	.+2      	; 0x8042 <__addsf3x+0x9e>
    8040:	99 27       	eor	r25, r25
    8042:	ee 0f       	add	r30, r30
    8044:	97 95       	ror	r25
    8046:	87 95       	ror	r24
    8048:	08 95       	ret
    804a:	cc d1       	rcall	.+920    	; 0x83e4 <__fp_pscA>
    804c:	58 f0       	brcs	.+22     	; 0x8064 <__addsf3x+0xc0>
    804e:	80 e8       	ldi	r24, 0x80	; 128
    8050:	91 e0       	ldi	r25, 0x01	; 1
    8052:	09 f4       	brne	.+2      	; 0x8056 <__addsf3x+0xb2>
    8054:	9e ef       	ldi	r25, 0xFE	; 254
    8056:	cd d1       	rcall	.+922    	; 0x83f2 <__fp_pscB>
    8058:	28 f0       	brcs	.+10     	; 0x8064 <__addsf3x+0xc0>
    805a:	40 e8       	ldi	r20, 0x80	; 128
    805c:	51 e0       	ldi	r21, 0x01	; 1
    805e:	59 f4       	brne	.+22     	; 0x8076 <atan2+0xe>
    8060:	5e ef       	ldi	r21, 0xFE	; 254
    8062:	09 c0       	rjmp	.+18     	; 0x8076 <atan2+0xe>
    8064:	97 c1       	rjmp	.+814    	; 0x8394 <__fp_nan>
    8066:	4f c2       	rjmp	.+1182   	; 0x8506 <__fp_zero>

00008068 <atan2>:
    8068:	e9 2f       	mov	r30, r25
    806a:	e0 78       	andi	r30, 0x80	; 128
    806c:	13 d2       	rcall	.+1062   	; 0x8494 <__fp_split3>
    806e:	68 f3       	brcs	.-38     	; 0x804a <__addsf3x+0xa6>
    8070:	09 2e       	mov	r0, r25
    8072:	05 2a       	or	r0, r21
    8074:	c1 f3       	breq	.-16     	; 0x8066 <__addsf3x+0xc2>
    8076:	26 17       	cp	r18, r22
    8078:	37 07       	cpc	r19, r23
    807a:	48 07       	cpc	r20, r24
    807c:	59 07       	cpc	r21, r25
    807e:	38 f0       	brcs	.+14     	; 0x808e <atan2+0x26>
    8080:	0e 2e       	mov	r0, r30
    8082:	07 f8       	bld	r0, 7
    8084:	e0 25       	eor	r30, r0
    8086:	69 f0       	breq	.+26     	; 0x80a2 <atan2+0x3a>
    8088:	e0 25       	eor	r30, r0
    808a:	e0 64       	ori	r30, 0x40	; 64
    808c:	0a c0       	rjmp	.+20     	; 0x80a2 <atan2+0x3a>
    808e:	ef 63       	ori	r30, 0x3F	; 63
    8090:	07 f8       	bld	r0, 7
    8092:	00 94       	com	r0
    8094:	07 fa       	bst	r0, 7
    8096:	db 01       	movw	r26, r22
    8098:	b9 01       	movw	r22, r18
    809a:	9d 01       	movw	r18, r26
    809c:	dc 01       	movw	r26, r24
    809e:	ca 01       	movw	r24, r20
    80a0:	ad 01       	movw	r20, r26
    80a2:	ef 93       	push	r30
    80a4:	4a d0       	rcall	.+148    	; 0x813a <__divsf3_pse>
    80a6:	d4 d1       	rcall	.+936    	; 0x8450 <__fp_round>
    80a8:	0a d0       	rcall	.+20     	; 0x80be <atan>
    80aa:	5f 91       	pop	r21
    80ac:	55 23       	and	r21, r21
    80ae:	31 f0       	breq	.+12     	; 0x80bc <atan2+0x54>
    80b0:	2b ed       	ldi	r18, 0xDB	; 219
    80b2:	3f e0       	ldi	r19, 0x0F	; 15
    80b4:	49 e4       	ldi	r20, 0x49	; 73
    80b6:	50 fd       	sbrc	r21, 0
    80b8:	49 ec       	ldi	r20, 0xC9	; 201
    80ba:	63 cf       	rjmp	.-314    	; 0x7f82 <__addsf3>
    80bc:	08 95       	ret

000080be <atan>:
    80be:	df 93       	push	r29
    80c0:	dd 27       	eor	r29, r29
    80c2:	b9 2f       	mov	r27, r25
    80c4:	bf 77       	andi	r27, 0x7F	; 127
    80c6:	40 e8       	ldi	r20, 0x80	; 128
    80c8:	5f e3       	ldi	r21, 0x3F	; 63
    80ca:	16 16       	cp	r1, r22
    80cc:	17 06       	cpc	r1, r23
    80ce:	48 07       	cpc	r20, r24
    80d0:	5b 07       	cpc	r21, r27
    80d2:	10 f4       	brcc	.+4      	; 0x80d8 <atan+0x1a>
    80d4:	d9 2f       	mov	r29, r25
    80d6:	22 d2       	rcall	.+1092   	; 0x851c <inverse>
    80d8:	9f 93       	push	r25
    80da:	8f 93       	push	r24
    80dc:	7f 93       	push	r23
    80de:	6f 93       	push	r22
    80e0:	cf d2       	rcall	.+1438   	; 0x8680 <square>
    80e2:	e4 ee       	ldi	r30, 0xE4	; 228
    80e4:	f0 e0       	ldi	r31, 0x00	; 0
    80e6:	59 d1       	rcall	.+690    	; 0x839a <__fp_powser>
    80e8:	b3 d1       	rcall	.+870    	; 0x8450 <__fp_round>
    80ea:	2f 91       	pop	r18
    80ec:	3f 91       	pop	r19
    80ee:	4f 91       	pop	r20
    80f0:	5f 91       	pop	r21
    80f2:	27 d2       	rcall	.+1102   	; 0x8542 <__mulsf3x>
    80f4:	dd 23       	and	r29, r29
    80f6:	49 f0       	breq	.+18     	; 0x810a <atan+0x4c>
    80f8:	90 58       	subi	r25, 0x80	; 128
    80fa:	a2 ea       	ldi	r26, 0xA2	; 162
    80fc:	2a ed       	ldi	r18, 0xDA	; 218
    80fe:	3f e0       	ldi	r19, 0x0F	; 15
    8100:	49 ec       	ldi	r20, 0xC9	; 201
    8102:	5f e3       	ldi	r21, 0x3F	; 63
    8104:	d0 78       	andi	r29, 0x80	; 128
    8106:	5d 27       	eor	r21, r29
    8108:	4d df       	rcall	.-358    	; 0x7fa4 <__addsf3x>
    810a:	df 91       	pop	r29
    810c:	a1 c1       	rjmp	.+834    	; 0x8450 <__fp_round>

0000810e <__cmpsf2>:
    810e:	ef d0       	rcall	.+478    	; 0x82ee <__fp_cmp>
    8110:	08 f4       	brcc	.+2      	; 0x8114 <__cmpsf2+0x6>
    8112:	81 e0       	ldi	r24, 0x01	; 1
    8114:	08 95       	ret

00008116 <cos>:
    8116:	75 d1       	rcall	.+746    	; 0x8402 <__fp_rempio2>
    8118:	e3 95       	inc	r30
    811a:	ab c1       	rjmp	.+854    	; 0x8472 <__fp_sinus>

0000811c <__divsf3>:
    811c:	0c d0       	rcall	.+24     	; 0x8136 <__divsf3x>
    811e:	98 c1       	rjmp	.+816    	; 0x8450 <__fp_round>
    8120:	68 d1       	rcall	.+720    	; 0x83f2 <__fp_pscB>
    8122:	40 f0       	brcs	.+16     	; 0x8134 <__divsf3+0x18>
    8124:	5f d1       	rcall	.+702    	; 0x83e4 <__fp_pscA>
    8126:	30 f0       	brcs	.+12     	; 0x8134 <__divsf3+0x18>
    8128:	21 f4       	brne	.+8      	; 0x8132 <__divsf3+0x16>
    812a:	5f 3f       	cpi	r21, 0xFF	; 255
    812c:	19 f0       	breq	.+6      	; 0x8134 <__divsf3+0x18>
    812e:	03 c1       	rjmp	.+518    	; 0x8336 <__fp_inf>
    8130:	51 11       	cpse	r21, r1
    8132:	ea c1       	rjmp	.+980    	; 0x8508 <__fp_szero>
    8134:	2f c1       	rjmp	.+606    	; 0x8394 <__fp_nan>

00008136 <__divsf3x>:
    8136:	ae d1       	rcall	.+860    	; 0x8494 <__fp_split3>
    8138:	98 f3       	brcs	.-26     	; 0x8120 <__divsf3+0x4>

0000813a <__divsf3_pse>:
    813a:	99 23       	and	r25, r25
    813c:	c9 f3       	breq	.-14     	; 0x8130 <__divsf3+0x14>
    813e:	55 23       	and	r21, r21
    8140:	b1 f3       	breq	.-20     	; 0x812e <__divsf3+0x12>
    8142:	95 1b       	sub	r25, r21
    8144:	55 0b       	sbc	r21, r21
    8146:	bb 27       	eor	r27, r27
    8148:	aa 27       	eor	r26, r26
    814a:	62 17       	cp	r22, r18
    814c:	73 07       	cpc	r23, r19
    814e:	84 07       	cpc	r24, r20
    8150:	38 f0       	brcs	.+14     	; 0x8160 <__divsf3_pse+0x26>
    8152:	9f 5f       	subi	r25, 0xFF	; 255
    8154:	5f 4f       	sbci	r21, 0xFF	; 255
    8156:	22 0f       	add	r18, r18
    8158:	33 1f       	adc	r19, r19
    815a:	44 1f       	adc	r20, r20
    815c:	aa 1f       	adc	r26, r26
    815e:	a9 f3       	breq	.-22     	; 0x814a <__divsf3_pse+0x10>
    8160:	33 d0       	rcall	.+102    	; 0x81c8 <__divsf3_pse+0x8e>
    8162:	0e 2e       	mov	r0, r30
    8164:	3a f0       	brmi	.+14     	; 0x8174 <__divsf3_pse+0x3a>
    8166:	e0 e8       	ldi	r30, 0x80	; 128
    8168:	30 d0       	rcall	.+96     	; 0x81ca <__divsf3_pse+0x90>
    816a:	91 50       	subi	r25, 0x01	; 1
    816c:	50 40       	sbci	r21, 0x00	; 0
    816e:	e6 95       	lsr	r30
    8170:	00 1c       	adc	r0, r0
    8172:	ca f7       	brpl	.-14     	; 0x8166 <__divsf3_pse+0x2c>
    8174:	29 d0       	rcall	.+82     	; 0x81c8 <__divsf3_pse+0x8e>
    8176:	fe 2f       	mov	r31, r30
    8178:	27 d0       	rcall	.+78     	; 0x81c8 <__divsf3_pse+0x8e>
    817a:	66 0f       	add	r22, r22
    817c:	77 1f       	adc	r23, r23
    817e:	88 1f       	adc	r24, r24
    8180:	bb 1f       	adc	r27, r27
    8182:	26 17       	cp	r18, r22
    8184:	37 07       	cpc	r19, r23
    8186:	48 07       	cpc	r20, r24
    8188:	ab 07       	cpc	r26, r27
    818a:	b0 e8       	ldi	r27, 0x80	; 128
    818c:	09 f0       	breq	.+2      	; 0x8190 <__divsf3_pse+0x56>
    818e:	bb 0b       	sbc	r27, r27
    8190:	80 2d       	mov	r24, r0
    8192:	bf 01       	movw	r22, r30
    8194:	ff 27       	eor	r31, r31
    8196:	93 58       	subi	r25, 0x83	; 131
    8198:	5f 4f       	sbci	r21, 0xFF	; 255
    819a:	2a f0       	brmi	.+10     	; 0x81a6 <__divsf3_pse+0x6c>
    819c:	9e 3f       	cpi	r25, 0xFE	; 254
    819e:	51 05       	cpc	r21, r1
    81a0:	68 f0       	brcs	.+26     	; 0x81bc <__divsf3_pse+0x82>
    81a2:	c9 c0       	rjmp	.+402    	; 0x8336 <__fp_inf>
    81a4:	b1 c1       	rjmp	.+866    	; 0x8508 <__fp_szero>
    81a6:	5f 3f       	cpi	r21, 0xFF	; 255
    81a8:	ec f3       	brlt	.-6      	; 0x81a4 <__divsf3_pse+0x6a>
    81aa:	98 3e       	cpi	r25, 0xE8	; 232
    81ac:	dc f3       	brlt	.-10     	; 0x81a4 <__divsf3_pse+0x6a>
    81ae:	86 95       	lsr	r24
    81b0:	77 95       	ror	r23
    81b2:	67 95       	ror	r22
    81b4:	b7 95       	ror	r27
    81b6:	f7 95       	ror	r31
    81b8:	9f 5f       	subi	r25, 0xFF	; 255
    81ba:	c9 f7       	brne	.-14     	; 0x81ae <__divsf3_pse+0x74>
    81bc:	88 0f       	add	r24, r24
    81be:	91 1d       	adc	r25, r1
    81c0:	96 95       	lsr	r25
    81c2:	87 95       	ror	r24
    81c4:	97 f9       	bld	r25, 7
    81c6:	08 95       	ret
    81c8:	e1 e0       	ldi	r30, 0x01	; 1
    81ca:	66 0f       	add	r22, r22
    81cc:	77 1f       	adc	r23, r23
    81ce:	88 1f       	adc	r24, r24
    81d0:	bb 1f       	adc	r27, r27
    81d2:	62 17       	cp	r22, r18
    81d4:	73 07       	cpc	r23, r19
    81d6:	84 07       	cpc	r24, r20
    81d8:	ba 07       	cpc	r27, r26
    81da:	20 f0       	brcs	.+8      	; 0x81e4 <__divsf3_pse+0xaa>
    81dc:	62 1b       	sub	r22, r18
    81de:	73 0b       	sbc	r23, r19
    81e0:	84 0b       	sbc	r24, r20
    81e2:	ba 0b       	sbc	r27, r26
    81e4:	ee 1f       	adc	r30, r30
    81e6:	88 f7       	brcc	.-30     	; 0x81ca <__divsf3_pse+0x90>
    81e8:	e0 95       	com	r30
    81ea:	08 95       	ret

000081ec <__fixsfsi>:
    81ec:	04 d0       	rcall	.+8      	; 0x81f6 <__fixunssfsi>
    81ee:	68 94       	set
    81f0:	b1 11       	cpse	r27, r1
    81f2:	8a c1       	rjmp	.+788    	; 0x8508 <__fp_szero>
    81f4:	08 95       	ret

000081f6 <__fixunssfsi>:
    81f6:	56 d1       	rcall	.+684    	; 0x84a4 <__fp_splitA>
    81f8:	88 f0       	brcs	.+34     	; 0x821c <__fixunssfsi+0x26>
    81fa:	9f 57       	subi	r25, 0x7F	; 127
    81fc:	90 f0       	brcs	.+36     	; 0x8222 <__fixunssfsi+0x2c>
    81fe:	b9 2f       	mov	r27, r25
    8200:	99 27       	eor	r25, r25
    8202:	b7 51       	subi	r27, 0x17	; 23
    8204:	a0 f0       	brcs	.+40     	; 0x822e <__fixunssfsi+0x38>
    8206:	d1 f0       	breq	.+52     	; 0x823c <__fixunssfsi+0x46>
    8208:	66 0f       	add	r22, r22
    820a:	77 1f       	adc	r23, r23
    820c:	88 1f       	adc	r24, r24
    820e:	99 1f       	adc	r25, r25
    8210:	1a f0       	brmi	.+6      	; 0x8218 <__fixunssfsi+0x22>
    8212:	ba 95       	dec	r27
    8214:	c9 f7       	brne	.-14     	; 0x8208 <__fixunssfsi+0x12>
    8216:	12 c0       	rjmp	.+36     	; 0x823c <__fixunssfsi+0x46>
    8218:	b1 30       	cpi	r27, 0x01	; 1
    821a:	81 f0       	breq	.+32     	; 0x823c <__fixunssfsi+0x46>
    821c:	74 d1       	rcall	.+744    	; 0x8506 <__fp_zero>
    821e:	b1 e0       	ldi	r27, 0x01	; 1
    8220:	08 95       	ret
    8222:	71 c1       	rjmp	.+738    	; 0x8506 <__fp_zero>
    8224:	67 2f       	mov	r22, r23
    8226:	78 2f       	mov	r23, r24
    8228:	88 27       	eor	r24, r24
    822a:	b8 5f       	subi	r27, 0xF8	; 248
    822c:	39 f0       	breq	.+14     	; 0x823c <__fixunssfsi+0x46>
    822e:	b9 3f       	cpi	r27, 0xF9	; 249
    8230:	cc f3       	brlt	.-14     	; 0x8224 <__fixunssfsi+0x2e>
    8232:	86 95       	lsr	r24
    8234:	77 95       	ror	r23
    8236:	67 95       	ror	r22
    8238:	b3 95       	inc	r27
    823a:	d9 f7       	brne	.-10     	; 0x8232 <__fixunssfsi+0x3c>
    823c:	3e f4       	brtc	.+14     	; 0x824c <__fixunssfsi+0x56>
    823e:	90 95       	com	r25
    8240:	80 95       	com	r24
    8242:	70 95       	com	r23
    8244:	61 95       	neg	r22
    8246:	7f 4f       	sbci	r23, 0xFF	; 255
    8248:	8f 4f       	sbci	r24, 0xFF	; 255
    824a:	9f 4f       	sbci	r25, 0xFF	; 255
    824c:	08 95       	ret

0000824e <__floatunsisf>:
    824e:	e8 94       	clt
    8250:	09 c0       	rjmp	.+18     	; 0x8264 <__floatsisf+0x12>

00008252 <__floatsisf>:
    8252:	97 fb       	bst	r25, 7
    8254:	3e f4       	brtc	.+14     	; 0x8264 <__floatsisf+0x12>
    8256:	90 95       	com	r25
    8258:	80 95       	com	r24
    825a:	70 95       	com	r23
    825c:	61 95       	neg	r22
    825e:	7f 4f       	sbci	r23, 0xFF	; 255
    8260:	8f 4f       	sbci	r24, 0xFF	; 255
    8262:	9f 4f       	sbci	r25, 0xFF	; 255
    8264:	99 23       	and	r25, r25
    8266:	a9 f0       	breq	.+42     	; 0x8292 <__floatsisf+0x40>
    8268:	f9 2f       	mov	r31, r25
    826a:	96 e9       	ldi	r25, 0x96	; 150
    826c:	bb 27       	eor	r27, r27
    826e:	93 95       	inc	r25
    8270:	f6 95       	lsr	r31
    8272:	87 95       	ror	r24
    8274:	77 95       	ror	r23
    8276:	67 95       	ror	r22
    8278:	b7 95       	ror	r27
    827a:	f1 11       	cpse	r31, r1
    827c:	f8 cf       	rjmp	.-16     	; 0x826e <__floatsisf+0x1c>
    827e:	fa f4       	brpl	.+62     	; 0x82be <__floatsisf+0x6c>
    8280:	bb 0f       	add	r27, r27
    8282:	11 f4       	brne	.+4      	; 0x8288 <__floatsisf+0x36>
    8284:	60 ff       	sbrs	r22, 0
    8286:	1b c0       	rjmp	.+54     	; 0x82be <__floatsisf+0x6c>
    8288:	6f 5f       	subi	r22, 0xFF	; 255
    828a:	7f 4f       	sbci	r23, 0xFF	; 255
    828c:	8f 4f       	sbci	r24, 0xFF	; 255
    828e:	9f 4f       	sbci	r25, 0xFF	; 255
    8290:	16 c0       	rjmp	.+44     	; 0x82be <__floatsisf+0x6c>
    8292:	88 23       	and	r24, r24
    8294:	11 f0       	breq	.+4      	; 0x829a <__floatsisf+0x48>
    8296:	96 e9       	ldi	r25, 0x96	; 150
    8298:	11 c0       	rjmp	.+34     	; 0x82bc <__floatsisf+0x6a>
    829a:	77 23       	and	r23, r23
    829c:	21 f0       	breq	.+8      	; 0x82a6 <__floatsisf+0x54>
    829e:	9e e8       	ldi	r25, 0x8E	; 142
    82a0:	87 2f       	mov	r24, r23
    82a2:	76 2f       	mov	r23, r22
    82a4:	05 c0       	rjmp	.+10     	; 0x82b0 <__floatsisf+0x5e>
    82a6:	66 23       	and	r22, r22
    82a8:	71 f0       	breq	.+28     	; 0x82c6 <__floatsisf+0x74>
    82aa:	96 e8       	ldi	r25, 0x86	; 134
    82ac:	86 2f       	mov	r24, r22
    82ae:	70 e0       	ldi	r23, 0x00	; 0
    82b0:	60 e0       	ldi	r22, 0x00	; 0
    82b2:	2a f0       	brmi	.+10     	; 0x82be <__floatsisf+0x6c>
    82b4:	9a 95       	dec	r25
    82b6:	66 0f       	add	r22, r22
    82b8:	77 1f       	adc	r23, r23
    82ba:	88 1f       	adc	r24, r24
    82bc:	da f7       	brpl	.-10     	; 0x82b4 <__floatsisf+0x62>
    82be:	88 0f       	add	r24, r24
    82c0:	96 95       	lsr	r25
    82c2:	87 95       	ror	r24
    82c4:	97 f9       	bld	r25, 7
    82c6:	08 95       	ret

000082c8 <floor>:
    82c8:	07 d1       	rcall	.+526    	; 0x84d8 <__fp_trunc>
    82ca:	80 f0       	brcs	.+32     	; 0x82ec <floor+0x24>
    82cc:	9f 37       	cpi	r25, 0x7F	; 127
    82ce:	40 f4       	brcc	.+16     	; 0x82e0 <floor+0x18>
    82d0:	91 11       	cpse	r25, r1
    82d2:	0e f0       	brts	.+2      	; 0x82d6 <floor+0xe>
    82d4:	19 c1       	rjmp	.+562    	; 0x8508 <__fp_szero>
    82d6:	60 e0       	ldi	r22, 0x00	; 0
    82d8:	70 e0       	ldi	r23, 0x00	; 0
    82da:	80 e8       	ldi	r24, 0x80	; 128
    82dc:	9f eb       	ldi	r25, 0xBF	; 191
    82de:	08 95       	ret
    82e0:	26 f4       	brtc	.+8      	; 0x82ea <floor+0x22>
    82e2:	1b 16       	cp	r1, r27
    82e4:	61 1d       	adc	r22, r1
    82e6:	71 1d       	adc	r23, r1
    82e8:	81 1d       	adc	r24, r1
    82ea:	2b c0       	rjmp	.+86     	; 0x8342 <__fp_mintl>
    82ec:	45 c0       	rjmp	.+138    	; 0x8378 <__fp_mpack>

000082ee <__fp_cmp>:
    82ee:	99 0f       	add	r25, r25
    82f0:	00 08       	sbc	r0, r0
    82f2:	55 0f       	add	r21, r21
    82f4:	aa 0b       	sbc	r26, r26
    82f6:	e0 e8       	ldi	r30, 0x80	; 128
    82f8:	fe ef       	ldi	r31, 0xFE	; 254
    82fa:	16 16       	cp	r1, r22
    82fc:	17 06       	cpc	r1, r23
    82fe:	e8 07       	cpc	r30, r24
    8300:	f9 07       	cpc	r31, r25
    8302:	c0 f0       	brcs	.+48     	; 0x8334 <__fp_cmp+0x46>
    8304:	12 16       	cp	r1, r18
    8306:	13 06       	cpc	r1, r19
    8308:	e4 07       	cpc	r30, r20
    830a:	f5 07       	cpc	r31, r21
    830c:	98 f0       	brcs	.+38     	; 0x8334 <__fp_cmp+0x46>
    830e:	62 1b       	sub	r22, r18
    8310:	73 0b       	sbc	r23, r19
    8312:	84 0b       	sbc	r24, r20
    8314:	95 0b       	sbc	r25, r21
    8316:	39 f4       	brne	.+14     	; 0x8326 <__fp_cmp+0x38>
    8318:	0a 26       	eor	r0, r26
    831a:	61 f0       	breq	.+24     	; 0x8334 <__fp_cmp+0x46>
    831c:	23 2b       	or	r18, r19
    831e:	24 2b       	or	r18, r20
    8320:	25 2b       	or	r18, r21
    8322:	21 f4       	brne	.+8      	; 0x832c <__fp_cmp+0x3e>
    8324:	08 95       	ret
    8326:	0a 26       	eor	r0, r26
    8328:	09 f4       	brne	.+2      	; 0x832c <__fp_cmp+0x3e>
    832a:	a1 40       	sbci	r26, 0x01	; 1
    832c:	a6 95       	lsr	r26
    832e:	8f ef       	ldi	r24, 0xFF	; 255
    8330:	81 1d       	adc	r24, r1
    8332:	81 1d       	adc	r24, r1
    8334:	08 95       	ret

00008336 <__fp_inf>:
    8336:	97 f9       	bld	r25, 7
    8338:	9f 67       	ori	r25, 0x7F	; 127
    833a:	80 e8       	ldi	r24, 0x80	; 128
    833c:	70 e0       	ldi	r23, 0x00	; 0
    833e:	60 e0       	ldi	r22, 0x00	; 0
    8340:	08 95       	ret

00008342 <__fp_mintl>:
    8342:	88 23       	and	r24, r24
    8344:	71 f4       	brne	.+28     	; 0x8362 <__fp_mintl+0x20>
    8346:	77 23       	and	r23, r23
    8348:	21 f0       	breq	.+8      	; 0x8352 <__fp_mintl+0x10>
    834a:	98 50       	subi	r25, 0x08	; 8
    834c:	87 2b       	or	r24, r23
    834e:	76 2f       	mov	r23, r22
    8350:	07 c0       	rjmp	.+14     	; 0x8360 <__fp_mintl+0x1e>
    8352:	66 23       	and	r22, r22
    8354:	11 f4       	brne	.+4      	; 0x835a <__fp_mintl+0x18>
    8356:	99 27       	eor	r25, r25
    8358:	0d c0       	rjmp	.+26     	; 0x8374 <__fp_mintl+0x32>
    835a:	90 51       	subi	r25, 0x10	; 16
    835c:	86 2b       	or	r24, r22
    835e:	70 e0       	ldi	r23, 0x00	; 0
    8360:	60 e0       	ldi	r22, 0x00	; 0
    8362:	2a f0       	brmi	.+10     	; 0x836e <__fp_mintl+0x2c>
    8364:	9a 95       	dec	r25
    8366:	66 0f       	add	r22, r22
    8368:	77 1f       	adc	r23, r23
    836a:	88 1f       	adc	r24, r24
    836c:	da f7       	brpl	.-10     	; 0x8364 <__fp_mintl+0x22>
    836e:	88 0f       	add	r24, r24
    8370:	96 95       	lsr	r25
    8372:	87 95       	ror	r24
    8374:	97 f9       	bld	r25, 7
    8376:	08 95       	ret

00008378 <__fp_mpack>:
    8378:	9f 3f       	cpi	r25, 0xFF	; 255
    837a:	31 f0       	breq	.+12     	; 0x8388 <__fp_mpack_finite+0xc>

0000837c <__fp_mpack_finite>:
    837c:	91 50       	subi	r25, 0x01	; 1
    837e:	20 f4       	brcc	.+8      	; 0x8388 <__fp_mpack_finite+0xc>
    8380:	87 95       	ror	r24
    8382:	77 95       	ror	r23
    8384:	67 95       	ror	r22
    8386:	b7 95       	ror	r27
    8388:	88 0f       	add	r24, r24
    838a:	91 1d       	adc	r25, r1
    838c:	96 95       	lsr	r25
    838e:	87 95       	ror	r24
    8390:	97 f9       	bld	r25, 7
    8392:	08 95       	ret

00008394 <__fp_nan>:
    8394:	9f ef       	ldi	r25, 0xFF	; 255
    8396:	80 ec       	ldi	r24, 0xC0	; 192
    8398:	08 95       	ret

0000839a <__fp_powser>:
    839a:	df 93       	push	r29
    839c:	cf 93       	push	r28
    839e:	1f 93       	push	r17
    83a0:	0f 93       	push	r16
    83a2:	ff 92       	push	r15
    83a4:	ef 92       	push	r14
    83a6:	df 92       	push	r13
    83a8:	7b 01       	movw	r14, r22
    83aa:	8c 01       	movw	r16, r24
    83ac:	68 94       	set
    83ae:	05 c0       	rjmp	.+10     	; 0x83ba <__fp_powser+0x20>
    83b0:	da 2e       	mov	r13, r26
    83b2:	ef 01       	movw	r28, r30
    83b4:	c6 d0       	rcall	.+396    	; 0x8542 <__mulsf3x>
    83b6:	fe 01       	movw	r30, r28
    83b8:	e8 94       	clt
    83ba:	a5 91       	lpm	r26, Z+
    83bc:	25 91       	lpm	r18, Z+
    83be:	35 91       	lpm	r19, Z+
    83c0:	45 91       	lpm	r20, Z+
    83c2:	55 91       	lpm	r21, Z+
    83c4:	ae f3       	brts	.-22     	; 0x83b0 <__fp_powser+0x16>
    83c6:	ef 01       	movw	r28, r30
    83c8:	ed dd       	rcall	.-1062   	; 0x7fa4 <__addsf3x>
    83ca:	fe 01       	movw	r30, r28
    83cc:	97 01       	movw	r18, r14
    83ce:	a8 01       	movw	r20, r16
    83d0:	da 94       	dec	r13
    83d2:	79 f7       	brne	.-34     	; 0x83b2 <__fp_powser+0x18>
    83d4:	df 90       	pop	r13
    83d6:	ef 90       	pop	r14
    83d8:	ff 90       	pop	r15
    83da:	0f 91       	pop	r16
    83dc:	1f 91       	pop	r17
    83de:	cf 91       	pop	r28
    83e0:	df 91       	pop	r29
    83e2:	08 95       	ret

000083e4 <__fp_pscA>:
    83e4:	00 24       	eor	r0, r0
    83e6:	0a 94       	dec	r0
    83e8:	16 16       	cp	r1, r22
    83ea:	17 06       	cpc	r1, r23
    83ec:	18 06       	cpc	r1, r24
    83ee:	09 06       	cpc	r0, r25
    83f0:	08 95       	ret

000083f2 <__fp_pscB>:
    83f2:	00 24       	eor	r0, r0
    83f4:	0a 94       	dec	r0
    83f6:	12 16       	cp	r1, r18
    83f8:	13 06       	cpc	r1, r19
    83fa:	14 06       	cpc	r1, r20
    83fc:	05 06       	cpc	r0, r21
    83fe:	08 95       	ret
    8400:	c9 cf       	rjmp	.-110    	; 0x8394 <__fp_nan>

00008402 <__fp_rempio2>:
    8402:	50 d0       	rcall	.+160    	; 0x84a4 <__fp_splitA>
    8404:	e8 f3       	brcs	.-6      	; 0x8400 <__fp_pscB+0xe>
    8406:	e8 94       	clt
    8408:	e0 e0       	ldi	r30, 0x00	; 0
    840a:	bb 27       	eor	r27, r27
    840c:	9f 57       	subi	r25, 0x7F	; 127
    840e:	f0 f0       	brcs	.+60     	; 0x844c <__fp_rempio2+0x4a>
    8410:	2a ed       	ldi	r18, 0xDA	; 218
    8412:	3f e0       	ldi	r19, 0x0F	; 15
    8414:	49 ec       	ldi	r20, 0xC9	; 201
    8416:	06 c0       	rjmp	.+12     	; 0x8424 <__fp_rempio2+0x22>
    8418:	ee 0f       	add	r30, r30
    841a:	bb 0f       	add	r27, r27
    841c:	66 1f       	adc	r22, r22
    841e:	77 1f       	adc	r23, r23
    8420:	88 1f       	adc	r24, r24
    8422:	28 f0       	brcs	.+10     	; 0x842e <__fp_rempio2+0x2c>
    8424:	b2 3a       	cpi	r27, 0xA2	; 162
    8426:	62 07       	cpc	r22, r18
    8428:	73 07       	cpc	r23, r19
    842a:	84 07       	cpc	r24, r20
    842c:	28 f0       	brcs	.+10     	; 0x8438 <__fp_rempio2+0x36>
    842e:	b2 5a       	subi	r27, 0xA2	; 162
    8430:	62 0b       	sbc	r22, r18
    8432:	73 0b       	sbc	r23, r19
    8434:	84 0b       	sbc	r24, r20
    8436:	e3 95       	inc	r30
    8438:	9a 95       	dec	r25
    843a:	72 f7       	brpl	.-36     	; 0x8418 <__fp_rempio2+0x16>
    843c:	80 38       	cpi	r24, 0x80	; 128
    843e:	30 f4       	brcc	.+12     	; 0x844c <__fp_rempio2+0x4a>
    8440:	9a 95       	dec	r25
    8442:	bb 0f       	add	r27, r27
    8444:	66 1f       	adc	r22, r22
    8446:	77 1f       	adc	r23, r23
    8448:	88 1f       	adc	r24, r24
    844a:	d2 f7       	brpl	.-12     	; 0x8440 <__fp_rempio2+0x3e>
    844c:	90 48       	sbci	r25, 0x80	; 128
    844e:	96 cf       	rjmp	.-212    	; 0x837c <__fp_mpack_finite>

00008450 <__fp_round>:
    8450:	09 2e       	mov	r0, r25
    8452:	03 94       	inc	r0
    8454:	00 0c       	add	r0, r0
    8456:	11 f4       	brne	.+4      	; 0x845c <__fp_round+0xc>
    8458:	88 23       	and	r24, r24
    845a:	52 f0       	brmi	.+20     	; 0x8470 <__fp_round+0x20>
    845c:	bb 0f       	add	r27, r27
    845e:	40 f4       	brcc	.+16     	; 0x8470 <__fp_round+0x20>
    8460:	bf 2b       	or	r27, r31
    8462:	11 f4       	brne	.+4      	; 0x8468 <__fp_round+0x18>
    8464:	60 ff       	sbrs	r22, 0
    8466:	04 c0       	rjmp	.+8      	; 0x8470 <__fp_round+0x20>
    8468:	6f 5f       	subi	r22, 0xFF	; 255
    846a:	7f 4f       	sbci	r23, 0xFF	; 255
    846c:	8f 4f       	sbci	r24, 0xFF	; 255
    846e:	9f 4f       	sbci	r25, 0xFF	; 255
    8470:	08 95       	ret

00008472 <__fp_sinus>:
    8472:	ef 93       	push	r30
    8474:	e0 ff       	sbrs	r30, 0
    8476:	06 c0       	rjmp	.+12     	; 0x8484 <__fp_sinus+0x12>
    8478:	a2 ea       	ldi	r26, 0xA2	; 162
    847a:	2a ed       	ldi	r18, 0xDA	; 218
    847c:	3f e0       	ldi	r19, 0x0F	; 15
    847e:	49 ec       	ldi	r20, 0xC9	; 201
    8480:	5f eb       	ldi	r21, 0xBF	; 191
    8482:	90 dd       	rcall	.-1248   	; 0x7fa4 <__addsf3x>
    8484:	e5 df       	rcall	.-54     	; 0x8450 <__fp_round>
    8486:	0f 90       	pop	r0
    8488:	03 94       	inc	r0
    848a:	01 fc       	sbrc	r0, 1
    848c:	90 58       	subi	r25, 0x80	; 128
    848e:	e1 e1       	ldi	r30, 0x11	; 17
    8490:	f1 e0       	ldi	r31, 0x01	; 1
    8492:	04 c1       	rjmp	.+520    	; 0x869c <__fp_powsodd>

00008494 <__fp_split3>:
    8494:	57 fd       	sbrc	r21, 7
    8496:	90 58       	subi	r25, 0x80	; 128
    8498:	44 0f       	add	r20, r20
    849a:	55 1f       	adc	r21, r21
    849c:	59 f0       	breq	.+22     	; 0x84b4 <__fp_splitA+0x10>
    849e:	5f 3f       	cpi	r21, 0xFF	; 255
    84a0:	71 f0       	breq	.+28     	; 0x84be <__fp_splitA+0x1a>
    84a2:	47 95       	ror	r20

000084a4 <__fp_splitA>:
    84a4:	88 0f       	add	r24, r24
    84a6:	97 fb       	bst	r25, 7
    84a8:	99 1f       	adc	r25, r25
    84aa:	61 f0       	breq	.+24     	; 0x84c4 <__fp_splitA+0x20>
    84ac:	9f 3f       	cpi	r25, 0xFF	; 255
    84ae:	79 f0       	breq	.+30     	; 0x84ce <__fp_splitA+0x2a>
    84b0:	87 95       	ror	r24
    84b2:	08 95       	ret
    84b4:	12 16       	cp	r1, r18
    84b6:	13 06       	cpc	r1, r19
    84b8:	14 06       	cpc	r1, r20
    84ba:	55 1f       	adc	r21, r21
    84bc:	f2 cf       	rjmp	.-28     	; 0x84a2 <__fp_split3+0xe>
    84be:	46 95       	lsr	r20
    84c0:	f1 df       	rcall	.-30     	; 0x84a4 <__fp_splitA>
    84c2:	08 c0       	rjmp	.+16     	; 0x84d4 <__fp_splitA+0x30>
    84c4:	16 16       	cp	r1, r22
    84c6:	17 06       	cpc	r1, r23
    84c8:	18 06       	cpc	r1, r24
    84ca:	99 1f       	adc	r25, r25
    84cc:	f1 cf       	rjmp	.-30     	; 0x84b0 <__fp_splitA+0xc>
    84ce:	86 95       	lsr	r24
    84d0:	71 05       	cpc	r23, r1
    84d2:	61 05       	cpc	r22, r1
    84d4:	08 94       	sec
    84d6:	08 95       	ret

000084d8 <__fp_trunc>:
    84d8:	e5 df       	rcall	.-54     	; 0x84a4 <__fp_splitA>
    84da:	a0 f0       	brcs	.+40     	; 0x8504 <__fp_trunc+0x2c>
    84dc:	be e7       	ldi	r27, 0x7E	; 126
    84de:	b9 17       	cp	r27, r25
    84e0:	88 f4       	brcc	.+34     	; 0x8504 <__fp_trunc+0x2c>
    84e2:	bb 27       	eor	r27, r27
    84e4:	9f 38       	cpi	r25, 0x8F	; 143
    84e6:	60 f4       	brcc	.+24     	; 0x8500 <__fp_trunc+0x28>
    84e8:	16 16       	cp	r1, r22
    84ea:	b1 1d       	adc	r27, r1
    84ec:	67 2f       	mov	r22, r23
    84ee:	78 2f       	mov	r23, r24
    84f0:	88 27       	eor	r24, r24
    84f2:	98 5f       	subi	r25, 0xF8	; 248
    84f4:	f7 cf       	rjmp	.-18     	; 0x84e4 <__fp_trunc+0xc>
    84f6:	86 95       	lsr	r24
    84f8:	77 95       	ror	r23
    84fa:	67 95       	ror	r22
    84fc:	b1 1d       	adc	r27, r1
    84fe:	93 95       	inc	r25
    8500:	96 39       	cpi	r25, 0x96	; 150
    8502:	c8 f3       	brcs	.-14     	; 0x84f6 <__fp_trunc+0x1e>
    8504:	08 95       	ret

00008506 <__fp_zero>:
    8506:	e8 94       	clt

00008508 <__fp_szero>:
    8508:	bb 27       	eor	r27, r27
    850a:	66 27       	eor	r22, r22
    850c:	77 27       	eor	r23, r23
    850e:	cb 01       	movw	r24, r22
    8510:	97 f9       	bld	r25, 7
    8512:	08 95       	ret

00008514 <__gesf2>:
    8514:	ec de       	rcall	.-552    	; 0x82ee <__fp_cmp>
    8516:	08 f4       	brcc	.+2      	; 0x851a <__gesf2+0x6>
    8518:	8f ef       	ldi	r24, 0xFF	; 255
    851a:	08 95       	ret

0000851c <inverse>:
    851c:	9b 01       	movw	r18, r22
    851e:	ac 01       	movw	r20, r24
    8520:	60 e0       	ldi	r22, 0x00	; 0
    8522:	70 e0       	ldi	r23, 0x00	; 0
    8524:	80 e8       	ldi	r24, 0x80	; 128
    8526:	9f e3       	ldi	r25, 0x3F	; 63
    8528:	f9 cd       	rjmp	.-1038   	; 0x811c <__divsf3>

0000852a <__mulsf3>:
    852a:	0b d0       	rcall	.+22     	; 0x8542 <__mulsf3x>
    852c:	91 cf       	rjmp	.-222    	; 0x8450 <__fp_round>
    852e:	5a df       	rcall	.-332    	; 0x83e4 <__fp_pscA>
    8530:	28 f0       	brcs	.+10     	; 0x853c <__mulsf3+0x12>
    8532:	5f df       	rcall	.-322    	; 0x83f2 <__fp_pscB>
    8534:	18 f0       	brcs	.+6      	; 0x853c <__mulsf3+0x12>
    8536:	95 23       	and	r25, r21
    8538:	09 f0       	breq	.+2      	; 0x853c <__mulsf3+0x12>
    853a:	fd ce       	rjmp	.-518    	; 0x8336 <__fp_inf>
    853c:	2b cf       	rjmp	.-426    	; 0x8394 <__fp_nan>
    853e:	11 24       	eor	r1, r1
    8540:	e3 cf       	rjmp	.-58     	; 0x8508 <__fp_szero>

00008542 <__mulsf3x>:
    8542:	a8 df       	rcall	.-176    	; 0x8494 <__fp_split3>
    8544:	a0 f3       	brcs	.-24     	; 0x852e <__mulsf3+0x4>

00008546 <__mulsf3_pse>:
    8546:	95 9f       	mul	r25, r21
    8548:	d1 f3       	breq	.-12     	; 0x853e <__mulsf3+0x14>
    854a:	95 0f       	add	r25, r21
    854c:	50 e0       	ldi	r21, 0x00	; 0
    854e:	55 1f       	adc	r21, r21
    8550:	62 9f       	mul	r22, r18
    8552:	f0 01       	movw	r30, r0
    8554:	72 9f       	mul	r23, r18
    8556:	bb 27       	eor	r27, r27
    8558:	f0 0d       	add	r31, r0
    855a:	b1 1d       	adc	r27, r1
    855c:	63 9f       	mul	r22, r19
    855e:	aa 27       	eor	r26, r26
    8560:	f0 0d       	add	r31, r0
    8562:	b1 1d       	adc	r27, r1
    8564:	aa 1f       	adc	r26, r26
    8566:	64 9f       	mul	r22, r20
    8568:	66 27       	eor	r22, r22
    856a:	b0 0d       	add	r27, r0
    856c:	a1 1d       	adc	r26, r1
    856e:	66 1f       	adc	r22, r22
    8570:	82 9f       	mul	r24, r18
    8572:	22 27       	eor	r18, r18
    8574:	b0 0d       	add	r27, r0
    8576:	a1 1d       	adc	r26, r1
    8578:	62 1f       	adc	r22, r18
    857a:	73 9f       	mul	r23, r19
    857c:	b0 0d       	add	r27, r0
    857e:	a1 1d       	adc	r26, r1
    8580:	62 1f       	adc	r22, r18
    8582:	83 9f       	mul	r24, r19
    8584:	a0 0d       	add	r26, r0
    8586:	61 1d       	adc	r22, r1
    8588:	22 1f       	adc	r18, r18
    858a:	74 9f       	mul	r23, r20
    858c:	33 27       	eor	r19, r19
    858e:	a0 0d       	add	r26, r0
    8590:	61 1d       	adc	r22, r1
    8592:	23 1f       	adc	r18, r19
    8594:	84 9f       	mul	r24, r20
    8596:	60 0d       	add	r22, r0
    8598:	21 1d       	adc	r18, r1
    859a:	82 2f       	mov	r24, r18
    859c:	76 2f       	mov	r23, r22
    859e:	6a 2f       	mov	r22, r26
    85a0:	11 24       	eor	r1, r1
    85a2:	9f 57       	subi	r25, 0x7F	; 127
    85a4:	50 40       	sbci	r21, 0x00	; 0
    85a6:	8a f0       	brmi	.+34     	; 0x85ca <__mulsf3_pse+0x84>
    85a8:	e1 f0       	breq	.+56     	; 0x85e2 <__mulsf3_pse+0x9c>
    85aa:	88 23       	and	r24, r24
    85ac:	4a f0       	brmi	.+18     	; 0x85c0 <__mulsf3_pse+0x7a>
    85ae:	ee 0f       	add	r30, r30
    85b0:	ff 1f       	adc	r31, r31
    85b2:	bb 1f       	adc	r27, r27
    85b4:	66 1f       	adc	r22, r22
    85b6:	77 1f       	adc	r23, r23
    85b8:	88 1f       	adc	r24, r24
    85ba:	91 50       	subi	r25, 0x01	; 1
    85bc:	50 40       	sbci	r21, 0x00	; 0
    85be:	a9 f7       	brne	.-22     	; 0x85aa <__mulsf3_pse+0x64>
    85c0:	9e 3f       	cpi	r25, 0xFE	; 254
    85c2:	51 05       	cpc	r21, r1
    85c4:	70 f0       	brcs	.+28     	; 0x85e2 <__mulsf3_pse+0x9c>
    85c6:	b7 ce       	rjmp	.-658    	; 0x8336 <__fp_inf>
    85c8:	9f cf       	rjmp	.-194    	; 0x8508 <__fp_szero>
    85ca:	5f 3f       	cpi	r21, 0xFF	; 255
    85cc:	ec f3       	brlt	.-6      	; 0x85c8 <__mulsf3_pse+0x82>
    85ce:	98 3e       	cpi	r25, 0xE8	; 232
    85d0:	dc f3       	brlt	.-10     	; 0x85c8 <__mulsf3_pse+0x82>
    85d2:	86 95       	lsr	r24
    85d4:	77 95       	ror	r23
    85d6:	67 95       	ror	r22
    85d8:	b7 95       	ror	r27
    85da:	f7 95       	ror	r31
    85dc:	e7 95       	ror	r30
    85de:	9f 5f       	subi	r25, 0xFF	; 255
    85e0:	c1 f7       	brne	.-16     	; 0x85d2 <__mulsf3_pse+0x8c>
    85e2:	fe 2b       	or	r31, r30
    85e4:	88 0f       	add	r24, r24
    85e6:	91 1d       	adc	r25, r1
    85e8:	96 95       	lsr	r25
    85ea:	87 95       	ror	r24
    85ec:	97 f9       	bld	r25, 7
    85ee:	08 95       	ret

000085f0 <sin>:
    85f0:	9f 93       	push	r25
    85f2:	07 df       	rcall	.-498    	; 0x8402 <__fp_rempio2>
    85f4:	0f 90       	pop	r0
    85f6:	07 fc       	sbrc	r0, 7
    85f8:	ee 5f       	subi	r30, 0xFE	; 254
    85fa:	3b cf       	rjmp	.-394    	; 0x8472 <__fp_sinus>
    85fc:	11 f4       	brne	.+4      	; 0x8602 <sin+0x12>
    85fe:	0e f4       	brtc	.+2      	; 0x8602 <sin+0x12>
    8600:	c9 ce       	rjmp	.-622    	; 0x8394 <__fp_nan>
    8602:	ba ce       	rjmp	.-652    	; 0x8378 <__fp_mpack>

00008604 <sqrt>:
    8604:	4f df       	rcall	.-354    	; 0x84a4 <__fp_splitA>
    8606:	d0 f3       	brcs	.-12     	; 0x85fc <sin+0xc>
    8608:	99 23       	and	r25, r25
    860a:	d9 f3       	breq	.-10     	; 0x8602 <sin+0x12>
    860c:	ce f3       	brts	.-14     	; 0x8600 <sin+0x10>
    860e:	9f 57       	subi	r25, 0x7F	; 127
    8610:	55 0b       	sbc	r21, r21
    8612:	87 ff       	sbrs	r24, 7
    8614:	3c d0       	rcall	.+120    	; 0x868e <__fp_norm2>
    8616:	00 24       	eor	r0, r0
    8618:	a0 e6       	ldi	r26, 0x60	; 96
    861a:	40 ea       	ldi	r20, 0xA0	; 160
    861c:	90 01       	movw	r18, r0
    861e:	80 58       	subi	r24, 0x80	; 128
    8620:	56 95       	lsr	r21
    8622:	97 95       	ror	r25
    8624:	28 f4       	brcc	.+10     	; 0x8630 <sqrt+0x2c>
    8626:	80 5c       	subi	r24, 0xC0	; 192
    8628:	66 0f       	add	r22, r22
    862a:	77 1f       	adc	r23, r23
    862c:	88 1f       	adc	r24, r24
    862e:	20 f0       	brcs	.+8      	; 0x8638 <sqrt+0x34>
    8630:	26 17       	cp	r18, r22
    8632:	37 07       	cpc	r19, r23
    8634:	48 07       	cpc	r20, r24
    8636:	30 f4       	brcc	.+12     	; 0x8644 <sqrt+0x40>
    8638:	62 1b       	sub	r22, r18
    863a:	73 0b       	sbc	r23, r19
    863c:	84 0b       	sbc	r24, r20
    863e:	20 29       	or	r18, r0
    8640:	31 29       	or	r19, r1
    8642:	4a 2b       	or	r20, r26
    8644:	a6 95       	lsr	r26
    8646:	17 94       	ror	r1
    8648:	07 94       	ror	r0
    864a:	20 25       	eor	r18, r0
    864c:	31 25       	eor	r19, r1
    864e:	4a 27       	eor	r20, r26
    8650:	58 f7       	brcc	.-42     	; 0x8628 <sqrt+0x24>
    8652:	66 0f       	add	r22, r22
    8654:	77 1f       	adc	r23, r23
    8656:	88 1f       	adc	r24, r24
    8658:	20 f0       	brcs	.+8      	; 0x8662 <sqrt+0x5e>
    865a:	26 17       	cp	r18, r22
    865c:	37 07       	cpc	r19, r23
    865e:	48 07       	cpc	r20, r24
    8660:	30 f4       	brcc	.+12     	; 0x866e <sqrt+0x6a>
    8662:	62 0b       	sbc	r22, r18
    8664:	73 0b       	sbc	r23, r19
    8666:	84 0b       	sbc	r24, r20
    8668:	20 0d       	add	r18, r0
    866a:	31 1d       	adc	r19, r1
    866c:	41 1d       	adc	r20, r1
    866e:	a0 95       	com	r26
    8670:	81 f7       	brne	.-32     	; 0x8652 <sqrt+0x4e>
    8672:	b9 01       	movw	r22, r18
    8674:	84 2f       	mov	r24, r20
    8676:	91 58       	subi	r25, 0x81	; 129
    8678:	88 0f       	add	r24, r24
    867a:	96 95       	lsr	r25
    867c:	87 95       	ror	r24
    867e:	08 95       	ret

00008680 <square>:
    8680:	9b 01       	movw	r18, r22
    8682:	ac 01       	movw	r20, r24
    8684:	52 cf       	rjmp	.-348    	; 0x852a <__mulsf3>

00008686 <__unordsf2>:
    8686:	33 de       	rcall	.-922    	; 0x82ee <__fp_cmp>
    8688:	88 0b       	sbc	r24, r24
    868a:	99 0b       	sbc	r25, r25
    868c:	08 95       	ret

0000868e <__fp_norm2>:
    868e:	91 50       	subi	r25, 0x01	; 1
    8690:	50 40       	sbci	r21, 0x00	; 0
    8692:	66 0f       	add	r22, r22
    8694:	77 1f       	adc	r23, r23
    8696:	88 1f       	adc	r24, r24
    8698:	d2 f7       	brpl	.-12     	; 0x868e <__fp_norm2>
    869a:	08 95       	ret

0000869c <__fp_powsodd>:
    869c:	9f 93       	push	r25
    869e:	8f 93       	push	r24
    86a0:	7f 93       	push	r23
    86a2:	6f 93       	push	r22
    86a4:	ff 93       	push	r31
    86a6:	ef 93       	push	r30
    86a8:	9b 01       	movw	r18, r22
    86aa:	ac 01       	movw	r20, r24
    86ac:	3e df       	rcall	.-388    	; 0x852a <__mulsf3>
    86ae:	ef 91       	pop	r30
    86b0:	ff 91       	pop	r31
    86b2:	73 de       	rcall	.-794    	; 0x839a <__fp_powser>
    86b4:	2f 91       	pop	r18
    86b6:	3f 91       	pop	r19
    86b8:	4f 91       	pop	r20
    86ba:	5f 91       	pop	r21
    86bc:	36 cf       	rjmp	.-404    	; 0x852a <__mulsf3>

000086be <__muluhisi3>:
    86be:	0e 94 d8 43 	call	0x87b0	; 0x87b0 <__umulhisi3>
    86c2:	a5 9f       	mul	r26, r21
    86c4:	90 0d       	add	r25, r0
    86c6:	b4 9f       	mul	r27, r20
    86c8:	90 0d       	add	r25, r0
    86ca:	a4 9f       	mul	r26, r20
    86cc:	80 0d       	add	r24, r0
    86ce:	91 1d       	adc	r25, r1
    86d0:	11 24       	eor	r1, r1
    86d2:	08 95       	ret

000086d4 <__mulsi3>:
    86d4:	db 01       	movw	r26, r22
    86d6:	8f 93       	push	r24
    86d8:	9f 93       	push	r25
    86da:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    86de:	bf 91       	pop	r27
    86e0:	af 91       	pop	r26
    86e2:	a2 9f       	mul	r26, r18
    86e4:	80 0d       	add	r24, r0
    86e6:	91 1d       	adc	r25, r1
    86e8:	a3 9f       	mul	r26, r19
    86ea:	90 0d       	add	r25, r0
    86ec:	b2 9f       	mul	r27, r18
    86ee:	90 0d       	add	r25, r0
    86f0:	11 24       	eor	r1, r1
    86f2:	08 95       	ret

000086f4 <__udivmodqi4>:
    86f4:	99 1b       	sub	r25, r25
    86f6:	79 e0       	ldi	r23, 0x09	; 9
    86f8:	04 c0       	rjmp	.+8      	; 0x8702 <__udivmodqi4_ep>

000086fa <__udivmodqi4_loop>:
    86fa:	99 1f       	adc	r25, r25
    86fc:	96 17       	cp	r25, r22
    86fe:	08 f0       	brcs	.+2      	; 0x8702 <__udivmodqi4_ep>
    8700:	96 1b       	sub	r25, r22

00008702 <__udivmodqi4_ep>:
    8702:	88 1f       	adc	r24, r24
    8704:	7a 95       	dec	r23
    8706:	c9 f7       	brne	.-14     	; 0x86fa <__udivmodqi4_loop>
    8708:	80 95       	com	r24
    870a:	08 95       	ret

0000870c <__divmodhi4>:
    870c:	97 fb       	bst	r25, 7
    870e:	07 2e       	mov	r0, r23
    8710:	16 f4       	brtc	.+4      	; 0x8716 <__divmodhi4+0xa>
    8712:	00 94       	com	r0
    8714:	07 d0       	rcall	.+14     	; 0x8724 <__divmodhi4_neg1>
    8716:	77 fd       	sbrc	r23, 7
    8718:	09 d0       	rcall	.+18     	; 0x872c <__divmodhi4_neg2>
    871a:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <__udivmodhi4>
    871e:	07 fc       	sbrc	r0, 7
    8720:	05 d0       	rcall	.+10     	; 0x872c <__divmodhi4_neg2>
    8722:	3e f4       	brtc	.+14     	; 0x8732 <__divmodhi4_exit>

00008724 <__divmodhi4_neg1>:
    8724:	90 95       	com	r25
    8726:	81 95       	neg	r24
    8728:	9f 4f       	sbci	r25, 0xFF	; 255
    872a:	08 95       	ret

0000872c <__divmodhi4_neg2>:
    872c:	70 95       	com	r23
    872e:	61 95       	neg	r22
    8730:	7f 4f       	sbci	r23, 0xFF	; 255

00008732 <__divmodhi4_exit>:
    8732:	08 95       	ret

00008734 <__udivmodsi4>:
    8734:	a1 e2       	ldi	r26, 0x21	; 33
    8736:	1a 2e       	mov	r1, r26
    8738:	aa 1b       	sub	r26, r26
    873a:	bb 1b       	sub	r27, r27
    873c:	fd 01       	movw	r30, r26
    873e:	0d c0       	rjmp	.+26     	; 0x875a <__udivmodsi4_ep>

00008740 <__udivmodsi4_loop>:
    8740:	aa 1f       	adc	r26, r26
    8742:	bb 1f       	adc	r27, r27
    8744:	ee 1f       	adc	r30, r30
    8746:	ff 1f       	adc	r31, r31
    8748:	a2 17       	cp	r26, r18
    874a:	b3 07       	cpc	r27, r19
    874c:	e4 07       	cpc	r30, r20
    874e:	f5 07       	cpc	r31, r21
    8750:	20 f0       	brcs	.+8      	; 0x875a <__udivmodsi4_ep>
    8752:	a2 1b       	sub	r26, r18
    8754:	b3 0b       	sbc	r27, r19
    8756:	e4 0b       	sbc	r30, r20
    8758:	f5 0b       	sbc	r31, r21

0000875a <__udivmodsi4_ep>:
    875a:	66 1f       	adc	r22, r22
    875c:	77 1f       	adc	r23, r23
    875e:	88 1f       	adc	r24, r24
    8760:	99 1f       	adc	r25, r25
    8762:	1a 94       	dec	r1
    8764:	69 f7       	brne	.-38     	; 0x8740 <__udivmodsi4_loop>
    8766:	60 95       	com	r22
    8768:	70 95       	com	r23
    876a:	80 95       	com	r24
    876c:	90 95       	com	r25
    876e:	9b 01       	movw	r18, r22
    8770:	ac 01       	movw	r20, r24
    8772:	bd 01       	movw	r22, r26
    8774:	cf 01       	movw	r24, r30
    8776:	08 95       	ret

00008778 <__divmodsi4>:
    8778:	05 2e       	mov	r0, r21
    877a:	97 fb       	bst	r25, 7
    877c:	16 f4       	brtc	.+4      	; 0x8782 <__divmodsi4+0xa>
    877e:	00 94       	com	r0
    8780:	07 d0       	rcall	.+14     	; 0x8790 <__divmodsi4_neg1>
    8782:	57 fd       	sbrc	r21, 7
    8784:	0d d0       	rcall	.+26     	; 0x87a0 <__divmodsi4_neg2>
    8786:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    878a:	07 fc       	sbrc	r0, 7
    878c:	09 d0       	rcall	.+18     	; 0x87a0 <__divmodsi4_neg2>
    878e:	7e f4       	brtc	.+30     	; 0x87ae <__divmodsi4_exit>

00008790 <__divmodsi4_neg1>:
    8790:	90 95       	com	r25
    8792:	80 95       	com	r24
    8794:	70 95       	com	r23
    8796:	61 95       	neg	r22
    8798:	7f 4f       	sbci	r23, 0xFF	; 255
    879a:	8f 4f       	sbci	r24, 0xFF	; 255
    879c:	9f 4f       	sbci	r25, 0xFF	; 255
    879e:	08 95       	ret

000087a0 <__divmodsi4_neg2>:
    87a0:	50 95       	com	r21
    87a2:	40 95       	com	r20
    87a4:	30 95       	com	r19
    87a6:	21 95       	neg	r18
    87a8:	3f 4f       	sbci	r19, 0xFF	; 255
    87aa:	4f 4f       	sbci	r20, 0xFF	; 255
    87ac:	5f 4f       	sbci	r21, 0xFF	; 255

000087ae <__divmodsi4_exit>:
    87ae:	08 95       	ret

000087b0 <__umulhisi3>:
    87b0:	a2 9f       	mul	r26, r18
    87b2:	b0 01       	movw	r22, r0
    87b4:	b3 9f       	mul	r27, r19
    87b6:	c0 01       	movw	r24, r0
    87b8:	a3 9f       	mul	r26, r19
    87ba:	01 d0       	rcall	.+2      	; 0x87be <__umulhisi3+0xe>
    87bc:	b2 9f       	mul	r27, r18
    87be:	70 0d       	add	r23, r0
    87c0:	81 1d       	adc	r24, r1
    87c2:	11 24       	eor	r1, r1
    87c4:	91 1d       	adc	r25, r1
    87c6:	08 95       	ret

000087c8 <__udivmodhi4>:
    87c8:	aa 1b       	sub	r26, r26
    87ca:	bb 1b       	sub	r27, r27
    87cc:	51 e1       	ldi	r21, 0x11	; 17
    87ce:	07 c0       	rjmp	.+14     	; 0x87de <__udivmodhi4_ep>

000087d0 <__udivmodhi4_loop>:
    87d0:	aa 1f       	adc	r26, r26
    87d2:	bb 1f       	adc	r27, r27
    87d4:	a6 17       	cp	r26, r22
    87d6:	b7 07       	cpc	r27, r23
    87d8:	10 f0       	brcs	.+4      	; 0x87de <__udivmodhi4_ep>
    87da:	a6 1b       	sub	r26, r22
    87dc:	b7 0b       	sbc	r27, r23

000087de <__udivmodhi4_ep>:
    87de:	88 1f       	adc	r24, r24
    87e0:	99 1f       	adc	r25, r25
    87e2:	5a 95       	dec	r21
    87e4:	a9 f7       	brne	.-22     	; 0x87d0 <__udivmodhi4_loop>
    87e6:	80 95       	com	r24
    87e8:	90 95       	com	r25
    87ea:	bc 01       	movw	r22, r24
    87ec:	cd 01       	movw	r24, r26
    87ee:	08 95       	ret

000087f0 <__tablejump_elpm__>:
    87f0:	07 90       	elpm	r0, Z+
    87f2:	f6 91       	elpm	r31, Z+
    87f4:	e0 2d       	mov	r30, r0
    87f6:	19 94       	eijmp

000087f8 <atof>:
    87f8:	66 27       	eor	r22, r22
    87fa:	77 27       	eor	r23, r23
    87fc:	0c 94 c3 45 	jmp	0x8b86	; 0x8b86 <strtod>

00008800 <atoi>:
    8800:	fc 01       	movw	r30, r24
    8802:	88 27       	eor	r24, r24
    8804:	99 27       	eor	r25, r25
    8806:	e8 94       	clt
    8808:	21 91       	ld	r18, Z+
    880a:	20 32       	cpi	r18, 0x20	; 32
    880c:	e9 f3       	breq	.-6      	; 0x8808 <atoi+0x8>
    880e:	29 30       	cpi	r18, 0x09	; 9
    8810:	10 f0       	brcs	.+4      	; 0x8816 <atoi+0x16>
    8812:	2e 30       	cpi	r18, 0x0E	; 14
    8814:	c8 f3       	brcs	.-14     	; 0x8808 <atoi+0x8>
    8816:	2b 32       	cpi	r18, 0x2B	; 43
    8818:	41 f0       	breq	.+16     	; 0x882a <atoi+0x2a>
    881a:	2d 32       	cpi	r18, 0x2D	; 45
    881c:	39 f4       	brne	.+14     	; 0x882c <atoi+0x2c>
    881e:	68 94       	set
    8820:	04 c0       	rjmp	.+8      	; 0x882a <atoi+0x2a>
    8822:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <__mulhi_const_10>
    8826:	82 0f       	add	r24, r18
    8828:	91 1d       	adc	r25, r1
    882a:	21 91       	ld	r18, Z+
    882c:	20 53       	subi	r18, 0x30	; 48
    882e:	2a 30       	cpi	r18, 0x0A	; 10
    8830:	c0 f3       	brcs	.-16     	; 0x8822 <atoi+0x22>
    8832:	1e f4       	brtc	.+6      	; 0x883a <atoi+0x3a>
    8834:	90 95       	com	r25
    8836:	81 95       	neg	r24
    8838:	9f 4f       	sbci	r25, 0xFF	; 255
    883a:	08 95       	ret

0000883c <atol>:
    883c:	1f 93       	push	r17
    883e:	fc 01       	movw	r30, r24
    8840:	99 27       	eor	r25, r25
    8842:	88 27       	eor	r24, r24
    8844:	bc 01       	movw	r22, r24
    8846:	e8 94       	clt
    8848:	11 91       	ld	r17, Z+
    884a:	10 32       	cpi	r17, 0x20	; 32
    884c:	e9 f3       	breq	.-6      	; 0x8848 <atol+0xc>
    884e:	19 30       	cpi	r17, 0x09	; 9
    8850:	10 f0       	brcs	.+4      	; 0x8856 <atol+0x1a>
    8852:	1e 30       	cpi	r17, 0x0E	; 14
    8854:	c8 f3       	brcs	.-14     	; 0x8848 <atol+0xc>
    8856:	1b 32       	cpi	r17, 0x2B	; 43
    8858:	51 f0       	breq	.+20     	; 0x886e <atol+0x32>
    885a:	1d 32       	cpi	r17, 0x2D	; 45
    885c:	49 f4       	brne	.+18     	; 0x8870 <atol+0x34>
    885e:	68 94       	set
    8860:	06 c0       	rjmp	.+12     	; 0x886e <atol+0x32>
    8862:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <__mulsi_const_10>
    8866:	61 0f       	add	r22, r17
    8868:	71 1d       	adc	r23, r1
    886a:	81 1d       	adc	r24, r1
    886c:	91 1d       	adc	r25, r1
    886e:	11 91       	ld	r17, Z+
    8870:	10 53       	subi	r17, 0x30	; 48
    8872:	1a 30       	cpi	r17, 0x0A	; 10
    8874:	b0 f3       	brcs	.-20     	; 0x8862 <atol+0x26>
    8876:	3e f4       	brtc	.+14     	; 0x8886 <atol+0x4a>
    8878:	90 95       	com	r25
    887a:	80 95       	com	r24
    887c:	70 95       	com	r23
    887e:	61 95       	neg	r22
    8880:	7f 4f       	sbci	r23, 0xFF	; 255
    8882:	8f 4f       	sbci	r24, 0xFF	; 255
    8884:	9f 4f       	sbci	r25, 0xFF	; 255
    8886:	1f 91       	pop	r17
    8888:	08 95       	ret

0000888a <isspace>:
    888a:	91 11       	cpse	r25, r1
    888c:	e1 c2       	rjmp	.+1474   	; 0x8e50 <__ctype_isfalse>
    888e:	80 32       	cpi	r24, 0x20	; 32
    8890:	19 f0       	breq	.+6      	; 0x8898 <isspace+0xe>
    8892:	89 50       	subi	r24, 0x09	; 9
    8894:	85 50       	subi	r24, 0x05	; 5
    8896:	d0 f7       	brcc	.-12     	; 0x888c <isspace+0x2>
    8898:	08 95       	ret

0000889a <tolower>:
    889a:	91 11       	cpse	r25, r1
    889c:	08 95       	ret
    889e:	81 54       	subi	r24, 0x41	; 65
    88a0:	8a 51       	subi	r24, 0x1A	; 26
    88a2:	08 f4       	brcc	.+2      	; 0x88a6 <tolower+0xc>
    88a4:	80 5e       	subi	r24, 0xE0	; 224
    88a6:	85 5a       	subi	r24, 0xA5	; 165
    88a8:	08 95       	ret

000088aa <toupper>:
    88aa:	91 11       	cpse	r25, r1
    88ac:	08 95       	ret
    88ae:	81 56       	subi	r24, 0x61	; 97
    88b0:	8a 51       	subi	r24, 0x1A	; 26
    88b2:	08 f4       	brcc	.+2      	; 0x88b6 <toupper+0xc>
    88b4:	80 52       	subi	r24, 0x20	; 32
    88b6:	85 58       	subi	r24, 0x85	; 133
    88b8:	08 95       	ret

000088ba <strtok>:
    88ba:	46 e3       	ldi	r20, 0x36	; 54
    88bc:	59 e0       	ldi	r21, 0x09	; 9
    88be:	0c 94 d9 44 	jmp	0x89b2	; 0x89b2 <strtok_r>

000088c2 <memcpy>:
    88c2:	fb 01       	movw	r30, r22
    88c4:	dc 01       	movw	r26, r24
    88c6:	02 c0       	rjmp	.+4      	; 0x88cc <memcpy+0xa>
    88c8:	01 90       	ld	r0, Z+
    88ca:	0d 92       	st	X+, r0
    88cc:	41 50       	subi	r20, 0x01	; 1
    88ce:	50 40       	sbci	r21, 0x00	; 0
    88d0:	d8 f7       	brcc	.-10     	; 0x88c8 <memcpy+0x6>
    88d2:	08 95       	ret

000088d4 <memmove>:
    88d4:	68 17       	cp	r22, r24
    88d6:	79 07       	cpc	r23, r25
    88d8:	68 f4       	brcc	.+26     	; 0x88f4 <memmove+0x20>
    88da:	fb 01       	movw	r30, r22
    88dc:	dc 01       	movw	r26, r24
    88de:	e4 0f       	add	r30, r20
    88e0:	f5 1f       	adc	r31, r21
    88e2:	a4 0f       	add	r26, r20
    88e4:	b5 1f       	adc	r27, r21
    88e6:	02 c0       	rjmp	.+4      	; 0x88ec <memmove+0x18>
    88e8:	02 90       	ld	r0, -Z
    88ea:	0e 92       	st	-X, r0
    88ec:	41 50       	subi	r20, 0x01	; 1
    88ee:	50 40       	sbci	r21, 0x00	; 0
    88f0:	d8 f7       	brcc	.-10     	; 0x88e8 <memmove+0x14>
    88f2:	08 95       	ret
    88f4:	0c 94 61 44 	jmp	0x88c2	; 0x88c2 <memcpy>

000088f8 <strchr>:
    88f8:	fc 01       	movw	r30, r24
    88fa:	81 91       	ld	r24, Z+
    88fc:	86 17       	cp	r24, r22
    88fe:	21 f0       	breq	.+8      	; 0x8908 <strchr+0x10>
    8900:	88 23       	and	r24, r24
    8902:	d9 f7       	brne	.-10     	; 0x88fa <strchr+0x2>
    8904:	99 27       	eor	r25, r25
    8906:	08 95       	ret
    8908:	31 97       	sbiw	r30, 0x01	; 1
    890a:	cf 01       	movw	r24, r30
    890c:	08 95       	ret

0000890e <strcmp>:
    890e:	fb 01       	movw	r30, r22
    8910:	dc 01       	movw	r26, r24
    8912:	8d 91       	ld	r24, X+
    8914:	01 90       	ld	r0, Z+
    8916:	80 19       	sub	r24, r0
    8918:	01 10       	cpse	r0, r1
    891a:	d9 f3       	breq	.-10     	; 0x8912 <strcmp+0x4>
    891c:	99 0b       	sbc	r25, r25
    891e:	08 95       	ret

00008920 <strcpy>:
    8920:	fb 01       	movw	r30, r22
    8922:	dc 01       	movw	r26, r24
    8924:	01 90       	ld	r0, Z+
    8926:	0d 92       	st	X+, r0
    8928:	00 20       	and	r0, r0
    892a:	e1 f7       	brne	.-8      	; 0x8924 <strcpy+0x4>
    892c:	08 95       	ret

0000892e <strncmp>:
    892e:	fb 01       	movw	r30, r22
    8930:	dc 01       	movw	r26, r24
    8932:	41 50       	subi	r20, 0x01	; 1
    8934:	50 40       	sbci	r21, 0x00	; 0
    8936:	30 f0       	brcs	.+12     	; 0x8944 <strncmp+0x16>
    8938:	8d 91       	ld	r24, X+
    893a:	01 90       	ld	r0, Z+
    893c:	80 19       	sub	r24, r0
    893e:	19 f4       	brne	.+6      	; 0x8946 <strncmp+0x18>
    8940:	00 20       	and	r0, r0
    8942:	b9 f7       	brne	.-18     	; 0x8932 <strncmp+0x4>
    8944:	88 1b       	sub	r24, r24
    8946:	99 0b       	sbc	r25, r25
    8948:	08 95       	ret

0000894a <strncpy>:
    894a:	fb 01       	movw	r30, r22
    894c:	dc 01       	movw	r26, r24
    894e:	41 50       	subi	r20, 0x01	; 1
    8950:	50 40       	sbci	r21, 0x00	; 0
    8952:	48 f0       	brcs	.+18     	; 0x8966 <strncpy+0x1c>
    8954:	01 90       	ld	r0, Z+
    8956:	0d 92       	st	X+, r0
    8958:	00 20       	and	r0, r0
    895a:	c9 f7       	brne	.-14     	; 0x894e <strncpy+0x4>
    895c:	01 c0       	rjmp	.+2      	; 0x8960 <strncpy+0x16>
    895e:	1d 92       	st	X+, r1
    8960:	41 50       	subi	r20, 0x01	; 1
    8962:	50 40       	sbci	r21, 0x00	; 0
    8964:	e0 f7       	brcc	.-8      	; 0x895e <strncpy+0x14>
    8966:	08 95       	ret

00008968 <strrchr>:
    8968:	fc 01       	movw	r30, r24
    896a:	81 e0       	ldi	r24, 0x01	; 1
    896c:	90 e0       	ldi	r25, 0x00	; 0
    896e:	01 90       	ld	r0, Z+
    8970:	06 16       	cp	r0, r22
    8972:	09 f4       	brne	.+2      	; 0x8976 <strrchr+0xe>
    8974:	cf 01       	movw	r24, r30
    8976:	00 20       	and	r0, r0
    8978:	d1 f7       	brne	.-12     	; 0x896e <strrchr+0x6>
    897a:	01 97       	sbiw	r24, 0x01	; 1
    897c:	08 95       	ret

0000897e <strstr>:
    897e:	fb 01       	movw	r30, r22
    8980:	51 91       	ld	r21, Z+
    8982:	55 23       	and	r21, r21
    8984:	a9 f0       	breq	.+42     	; 0x89b0 <strstr+0x32>
    8986:	bf 01       	movw	r22, r30
    8988:	dc 01       	movw	r26, r24
    898a:	4d 91       	ld	r20, X+
    898c:	45 17       	cp	r20, r21
    898e:	41 11       	cpse	r20, r1
    8990:	e1 f7       	brne	.-8      	; 0x898a <strstr+0xc>
    8992:	59 f4       	brne	.+22     	; 0x89aa <strstr+0x2c>
    8994:	cd 01       	movw	r24, r26
    8996:	01 90       	ld	r0, Z+
    8998:	00 20       	and	r0, r0
    899a:	49 f0       	breq	.+18     	; 0x89ae <strstr+0x30>
    899c:	4d 91       	ld	r20, X+
    899e:	40 15       	cp	r20, r0
    89a0:	41 11       	cpse	r20, r1
    89a2:	c9 f3       	breq	.-14     	; 0x8996 <strstr+0x18>
    89a4:	fb 01       	movw	r30, r22
    89a6:	41 11       	cpse	r20, r1
    89a8:	ef cf       	rjmp	.-34     	; 0x8988 <strstr+0xa>
    89aa:	81 e0       	ldi	r24, 0x01	; 1
    89ac:	90 e0       	ldi	r25, 0x00	; 0
    89ae:	01 97       	sbiw	r24, 0x01	; 1
    89b0:	08 95       	ret

000089b2 <strtok_r>:
    89b2:	fa 01       	movw	r30, r20
    89b4:	a1 91       	ld	r26, Z+
    89b6:	b0 81       	ld	r27, Z
    89b8:	00 97       	sbiw	r24, 0x00	; 0
    89ba:	19 f4       	brne	.+6      	; 0x89c2 <strtok_r+0x10>
    89bc:	10 97       	sbiw	r26, 0x00	; 0
    89be:	e1 f0       	breq	.+56     	; 0x89f8 <strtok_r+0x46>
    89c0:	cd 01       	movw	r24, r26
    89c2:	dc 01       	movw	r26, r24
    89c4:	cd 01       	movw	r24, r26
    89c6:	0d 90       	ld	r0, X+
    89c8:	00 20       	and	r0, r0
    89ca:	11 f4       	brne	.+4      	; 0x89d0 <strtok_r+0x1e>
    89cc:	c0 01       	movw	r24, r0
    89ce:	13 c0       	rjmp	.+38     	; 0x89f6 <strtok_r+0x44>
    89d0:	fb 01       	movw	r30, r22
    89d2:	21 91       	ld	r18, Z+
    89d4:	22 23       	and	r18, r18
    89d6:	19 f0       	breq	.+6      	; 0x89de <strtok_r+0x2c>
    89d8:	20 15       	cp	r18, r0
    89da:	d9 f7       	brne	.-10     	; 0x89d2 <strtok_r+0x20>
    89dc:	f3 cf       	rjmp	.-26     	; 0x89c4 <strtok_r+0x12>
    89de:	fb 01       	movw	r30, r22
    89e0:	21 91       	ld	r18, Z+
    89e2:	20 15       	cp	r18, r0
    89e4:	19 f4       	brne	.+6      	; 0x89ec <strtok_r+0x3a>
    89e6:	1e 92       	st	-X, r1
    89e8:	11 96       	adiw	r26, 0x01	; 1
    89ea:	06 c0       	rjmp	.+12     	; 0x89f8 <strtok_r+0x46>
    89ec:	22 23       	and	r18, r18
    89ee:	c1 f7       	brne	.-16     	; 0x89e0 <strtok_r+0x2e>
    89f0:	0d 90       	ld	r0, X+
    89f2:	00 20       	and	r0, r0
    89f4:	a1 f7       	brne	.-24     	; 0x89de <strtok_r+0x2c>
    89f6:	d0 01       	movw	r26, r0
    89f8:	fa 01       	movw	r30, r20
    89fa:	a1 93       	st	Z+, r26
    89fc:	b0 83       	st	Z, r27
    89fe:	08 95       	ret

00008a00 <itoa>:
    8a00:	fb 01       	movw	r30, r22
    8a02:	9f 01       	movw	r18, r30
    8a04:	e8 94       	clt
    8a06:	42 30       	cpi	r20, 0x02	; 2
    8a08:	c4 f0       	brlt	.+48     	; 0x8a3a <itoa+0x3a>
    8a0a:	45 32       	cpi	r20, 0x25	; 37
    8a0c:	b4 f4       	brge	.+44     	; 0x8a3a <itoa+0x3a>
    8a0e:	4a 30       	cpi	r20, 0x0A	; 10
    8a10:	29 f4       	brne	.+10     	; 0x8a1c <itoa+0x1c>
    8a12:	97 fb       	bst	r25, 7
    8a14:	1e f4       	brtc	.+6      	; 0x8a1c <itoa+0x1c>
    8a16:	90 95       	com	r25
    8a18:	81 95       	neg	r24
    8a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    8a1c:	64 2f       	mov	r22, r20
    8a1e:	77 27       	eor	r23, r23
    8a20:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <__udivmodhi4>
    8a24:	80 5d       	subi	r24, 0xD0	; 208
    8a26:	8a 33       	cpi	r24, 0x3A	; 58
    8a28:	0c f0       	brlt	.+2      	; 0x8a2c <itoa+0x2c>
    8a2a:	89 5d       	subi	r24, 0xD9	; 217
    8a2c:	81 93       	st	Z+, r24
    8a2e:	cb 01       	movw	r24, r22
    8a30:	00 97       	sbiw	r24, 0x00	; 0
    8a32:	a1 f7       	brne	.-24     	; 0x8a1c <itoa+0x1c>
    8a34:	16 f4       	brtc	.+4      	; 0x8a3a <itoa+0x3a>
    8a36:	5d e2       	ldi	r21, 0x2D	; 45
    8a38:	51 93       	st	Z+, r21
    8a3a:	10 82       	st	Z, r1
    8a3c:	c9 01       	movw	r24, r18
    8a3e:	0c 94 43 47 	jmp	0x8e86	; 0x8e86 <strrev>

00008a42 <ltoa>:
    8a42:	fa 01       	movw	r30, r20
    8a44:	cf 93       	push	r28
    8a46:	ff 93       	push	r31
    8a48:	ef 93       	push	r30
    8a4a:	22 30       	cpi	r18, 0x02	; 2
    8a4c:	44 f1       	brlt	.+80     	; 0x8a9e <ltoa+0x5c>
    8a4e:	25 32       	cpi	r18, 0x25	; 37
    8a50:	34 f5       	brge	.+76     	; 0x8a9e <ltoa+0x5c>
    8a52:	c2 2f       	mov	r28, r18
    8a54:	e8 94       	clt
    8a56:	ca 30       	cpi	r28, 0x0A	; 10
    8a58:	49 f4       	brne	.+18     	; 0x8a6c <ltoa+0x2a>
    8a5a:	97 fb       	bst	r25, 7
    8a5c:	3e f4       	brtc	.+14     	; 0x8a6c <ltoa+0x2a>
    8a5e:	90 95       	com	r25
    8a60:	80 95       	com	r24
    8a62:	70 95       	com	r23
    8a64:	61 95       	neg	r22
    8a66:	7f 4f       	sbci	r23, 0xFF	; 255
    8a68:	8f 4f       	sbci	r24, 0xFF	; 255
    8a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8a6c:	2c 2f       	mov	r18, r28
    8a6e:	33 27       	eor	r19, r19
    8a70:	44 27       	eor	r20, r20
    8a72:	55 27       	eor	r21, r21
    8a74:	ff 93       	push	r31
    8a76:	ef 93       	push	r30
    8a78:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    8a7c:	ef 91       	pop	r30
    8a7e:	ff 91       	pop	r31
    8a80:	60 5d       	subi	r22, 0xD0	; 208
    8a82:	6a 33       	cpi	r22, 0x3A	; 58
    8a84:	0c f0       	brlt	.+2      	; 0x8a88 <ltoa+0x46>
    8a86:	69 5d       	subi	r22, 0xD9	; 217
    8a88:	61 93       	st	Z+, r22
    8a8a:	b9 01       	movw	r22, r18
    8a8c:	ca 01       	movw	r24, r20
    8a8e:	60 50       	subi	r22, 0x00	; 0
    8a90:	70 40       	sbci	r23, 0x00	; 0
    8a92:	80 40       	sbci	r24, 0x00	; 0
    8a94:	90 40       	sbci	r25, 0x00	; 0
    8a96:	51 f7       	brne	.-44     	; 0x8a6c <ltoa+0x2a>
    8a98:	16 f4       	brtc	.+4      	; 0x8a9e <ltoa+0x5c>
    8a9a:	cd e2       	ldi	r28, 0x2D	; 45
    8a9c:	c1 93       	st	Z+, r28
    8a9e:	10 82       	st	Z, r1
    8aa0:	8f 91       	pop	r24
    8aa2:	9f 91       	pop	r25
    8aa4:	cf 91       	pop	r28
    8aa6:	0c 94 43 47 	jmp	0x8e86	; 0x8e86 <strrev>

00008aaa <__mulsi_const_10>:
    8aaa:	59 2f       	mov	r21, r25
    8aac:	48 2f       	mov	r20, r24
    8aae:	37 2f       	mov	r19, r23
    8ab0:	26 2f       	mov	r18, r22
    8ab2:	66 0f       	add	r22, r22
    8ab4:	77 1f       	adc	r23, r23
    8ab6:	88 1f       	adc	r24, r24
    8ab8:	99 1f       	adc	r25, r25
    8aba:	66 0f       	add	r22, r22
    8abc:	77 1f       	adc	r23, r23
    8abe:	88 1f       	adc	r24, r24
    8ac0:	99 1f       	adc	r25, r25
    8ac2:	62 0f       	add	r22, r18
    8ac4:	73 1f       	adc	r23, r19
    8ac6:	84 1f       	adc	r24, r20
    8ac8:	95 1f       	adc	r25, r21
    8aca:	66 0f       	add	r22, r22
    8acc:	77 1f       	adc	r23, r23
    8ace:	88 1f       	adc	r24, r24
    8ad0:	99 1f       	adc	r25, r25
    8ad2:	08 95       	ret

00008ad4 <__mulhi_const_10>:
    8ad4:	7a e0       	ldi	r23, 0x0A	; 10
    8ad6:	97 9f       	mul	r25, r23
    8ad8:	90 2d       	mov	r25, r0
    8ada:	87 9f       	mul	r24, r23
    8adc:	80 2d       	mov	r24, r0
    8ade:	91 0d       	add	r25, r1
    8ae0:	11 24       	eor	r1, r1
    8ae2:	08 95       	ret

00008ae4 <ultoa>:
    8ae4:	fa 01       	movw	r30, r20
    8ae6:	cf 93       	push	r28
    8ae8:	ff 93       	push	r31
    8aea:	ef 93       	push	r30
    8aec:	22 30       	cpi	r18, 0x02	; 2
    8aee:	cc f0       	brlt	.+50     	; 0x8b22 <ultoa+0x3e>
    8af0:	25 32       	cpi	r18, 0x25	; 37
    8af2:	bc f4       	brge	.+46     	; 0x8b22 <ultoa+0x3e>
    8af4:	c2 2f       	mov	r28, r18
    8af6:	2c 2f       	mov	r18, r28
    8af8:	33 27       	eor	r19, r19
    8afa:	44 27       	eor	r20, r20
    8afc:	55 27       	eor	r21, r21
    8afe:	ff 93       	push	r31
    8b00:	ef 93       	push	r30
    8b02:	0e 94 9a 43 	call	0x8734	; 0x8734 <__udivmodsi4>
    8b06:	ef 91       	pop	r30
    8b08:	ff 91       	pop	r31
    8b0a:	60 5d       	subi	r22, 0xD0	; 208
    8b0c:	6a 33       	cpi	r22, 0x3A	; 58
    8b0e:	0c f0       	brlt	.+2      	; 0x8b12 <ultoa+0x2e>
    8b10:	69 5d       	subi	r22, 0xD9	; 217
    8b12:	61 93       	st	Z+, r22
    8b14:	b9 01       	movw	r22, r18
    8b16:	ca 01       	movw	r24, r20
    8b18:	60 50       	subi	r22, 0x00	; 0
    8b1a:	70 40       	sbci	r23, 0x00	; 0
    8b1c:	80 40       	sbci	r24, 0x00	; 0
    8b1e:	90 40       	sbci	r25, 0x00	; 0
    8b20:	51 f7       	brne	.-44     	; 0x8af6 <ultoa+0x12>
    8b22:	10 82       	st	Z, r1
    8b24:	8f 91       	pop	r24
    8b26:	9f 91       	pop	r25
    8b28:	cf 91       	pop	r28
    8b2a:	0c 94 43 47 	jmp	0x8e86	; 0x8e86 <strrev>

00008b2e <utoa>:
    8b2e:	fb 01       	movw	r30, r22
    8b30:	9f 01       	movw	r18, r30
    8b32:	42 30       	cpi	r20, 0x02	; 2
    8b34:	74 f0       	brlt	.+28     	; 0x8b52 <utoa+0x24>
    8b36:	45 32       	cpi	r20, 0x25	; 37
    8b38:	64 f4       	brge	.+24     	; 0x8b52 <utoa+0x24>
    8b3a:	64 2f       	mov	r22, r20
    8b3c:	77 27       	eor	r23, r23
    8b3e:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <__udivmodhi4>
    8b42:	80 5d       	subi	r24, 0xD0	; 208
    8b44:	8a 33       	cpi	r24, 0x3A	; 58
    8b46:	0c f0       	brlt	.+2      	; 0x8b4a <utoa+0x1c>
    8b48:	89 5d       	subi	r24, 0xD9	; 217
    8b4a:	81 93       	st	Z+, r24
    8b4c:	cb 01       	movw	r24, r22
    8b4e:	00 97       	sbiw	r24, 0x00	; 0
    8b50:	a1 f7       	brne	.-24     	; 0x8b3a <utoa+0xc>
    8b52:	10 82       	st	Z, r1
    8b54:	c9 01       	movw	r24, r18
    8b56:	0c 94 43 47 	jmp	0x8e86	; 0x8e86 <strrev>

00008b5a <__eerd_byte_m2560>:
    8b5a:	f9 99       	sbic	0x1f, 1	; 31
    8b5c:	fe cf       	rjmp	.-4      	; 0x8b5a <__eerd_byte_m2560>
    8b5e:	92 bd       	out	0x22, r25	; 34
    8b60:	81 bd       	out	0x21, r24	; 33
    8b62:	f8 9a       	sbi	0x1f, 0	; 31
    8b64:	99 27       	eor	r25, r25
    8b66:	80 b5       	in	r24, 0x20	; 32
    8b68:	08 95       	ret

00008b6a <__eewr_byte_m2560>:
    8b6a:	26 2f       	mov	r18, r22

00008b6c <__eewr_r18_m2560>:
    8b6c:	f9 99       	sbic	0x1f, 1	; 31
    8b6e:	fe cf       	rjmp	.-4      	; 0x8b6c <__eewr_r18_m2560>
    8b70:	1f ba       	out	0x1f, r1	; 31
    8b72:	92 bd       	out	0x22, r25	; 34
    8b74:	81 bd       	out	0x21, r24	; 33
    8b76:	20 bd       	out	0x20, r18	; 32
    8b78:	0f b6       	in	r0, 0x3f	; 63
    8b7a:	f8 94       	cli
    8b7c:	fa 9a       	sbi	0x1f, 2	; 31
    8b7e:	f9 9a       	sbi	0x1f, 1	; 31
    8b80:	0f be       	out	0x3f, r0	; 63
    8b82:	01 96       	adiw	r24, 0x01	; 1
    8b84:	08 95       	ret

00008b86 <strtod>:
    8b86:	8f 92       	push	r8
    8b88:	9f 92       	push	r9
    8b8a:	af 92       	push	r10
    8b8c:	bf 92       	push	r11
    8b8e:	cf 92       	push	r12
    8b90:	df 92       	push	r13
    8b92:	ef 92       	push	r14
    8b94:	ff 92       	push	r15
    8b96:	0f 93       	push	r16
    8b98:	1f 93       	push	r17
    8b9a:	cf 93       	push	r28
    8b9c:	df 93       	push	r29
    8b9e:	8b 01       	movw	r16, r22
    8ba0:	61 15       	cp	r22, r1
    8ba2:	71 05       	cpc	r23, r1
    8ba4:	19 f0       	breq	.+6      	; 0x8bac <strtod+0x26>
    8ba6:	fb 01       	movw	r30, r22
    8ba8:	80 83       	st	Z, r24
    8baa:	91 83       	std	Z+1, r25	; 0x01
    8bac:	7c 01       	movw	r14, r24
    8bae:	f7 01       	movw	r30, r14
    8bb0:	c1 90       	ld	r12, Z+
    8bb2:	7f 01       	movw	r14, r30
    8bb4:	ef 01       	movw	r28, r30
    8bb6:	8c 2d       	mov	r24, r12
    8bb8:	90 e0       	ldi	r25, 0x00	; 0
    8bba:	0e 94 45 44 	call	0x888a	; 0x888a <isspace>
    8bbe:	89 2b       	or	r24, r25
    8bc0:	b1 f7       	brne	.-20     	; 0x8bae <strtod+0x28>
    8bc2:	fd e2       	ldi	r31, 0x2D	; 45
    8bc4:	cf 12       	cpse	r12, r31
    8bc6:	04 c0       	rjmp	.+8      	; 0x8bd0 <strtod+0x4a>
    8bc8:	c9 90       	ld	r12, Y+
    8bca:	dd 24       	eor	r13, r13
    8bcc:	d3 94       	inc	r13
    8bce:	05 c0       	rjmp	.+10     	; 0x8bda <strtod+0x54>
    8bd0:	2b e2       	ldi	r18, 0x2B	; 43
    8bd2:	c2 12       	cpse	r12, r18
    8bd4:	01 c0       	rjmp	.+2      	; 0x8bd8 <strtod+0x52>
    8bd6:	c9 90       	ld	r12, Y+
    8bd8:	d1 2c       	mov	r13, r1
    8bda:	7e 01       	movw	r14, r28
    8bdc:	41 e0       	ldi	r20, 0x01	; 1
    8bde:	e4 1a       	sub	r14, r20
    8be0:	f1 08       	sbc	r15, r1
    8be2:	43 e0       	ldi	r20, 0x03	; 3
    8be4:	50 e0       	ldi	r21, 0x00	; 0
    8be6:	6f e4       	ldi	r22, 0x4F	; 79
    8be8:	72 e0       	ldi	r23, 0x02	; 2
    8bea:	c7 01       	movw	r24, r14
    8bec:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <strncasecmp_P>
    8bf0:	89 2b       	or	r24, r25
    8bf2:	e9 f4       	brne	.+58     	; 0x8c2e <strtod+0xa8>
    8bf4:	7e 01       	movw	r14, r28
    8bf6:	82 e0       	ldi	r24, 0x02	; 2
    8bf8:	e8 0e       	add	r14, r24
    8bfa:	f1 1c       	adc	r15, r1
    8bfc:	45 e0       	ldi	r20, 0x05	; 5
    8bfe:	50 e0       	ldi	r21, 0x00	; 0
    8c00:	62 e5       	ldi	r22, 0x52	; 82
    8c02:	72 e0       	ldi	r23, 0x02	; 2
    8c04:	c7 01       	movw	r24, r14
    8c06:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <strncasecmp_P>
    8c0a:	89 2b       	or	r24, r25
    8c0c:	21 f4       	brne	.+8      	; 0x8c16 <strtod+0x90>
    8c0e:	7e 01       	movw	r14, r28
    8c10:	e7 e0       	ldi	r30, 0x07	; 7
    8c12:	ee 0e       	add	r14, r30
    8c14:	f1 1c       	adc	r15, r1
    8c16:	01 15       	cp	r16, r1
    8c18:	11 05       	cpc	r17, r1
    8c1a:	19 f0       	breq	.+6      	; 0x8c22 <strtod+0x9c>
    8c1c:	f8 01       	movw	r30, r16
    8c1e:	f1 82       	std	Z+1, r15	; 0x01
    8c20:	e0 82       	st	Z, r14
    8c22:	10 e0       	ldi	r17, 0x00	; 0
    8c24:	d0 e0       	ldi	r29, 0x00	; 0
    8c26:	c0 e8       	ldi	r28, 0x80	; 128
    8c28:	d1 10       	cpse	r13, r1
    8c2a:	fb c0       	rjmp	.+502    	; 0x8e22 <strtod+0x29c>
    8c2c:	ff c0       	rjmp	.+510    	; 0x8e2c <strtod+0x2a6>
    8c2e:	43 e0       	ldi	r20, 0x03	; 3
    8c30:	50 e0       	ldi	r21, 0x00	; 0
    8c32:	67 e5       	ldi	r22, 0x57	; 87
    8c34:	72 e0       	ldi	r23, 0x02	; 2
    8c36:	c7 01       	movw	r24, r14
    8c38:	0e 94 2b 47 	call	0x8e56	; 0x8e56 <strncasecmp_P>
    8c3c:	89 2b       	or	r24, r25
    8c3e:	49 f4       	brne	.+18     	; 0x8c52 <strtod+0xcc>
    8c40:	01 15       	cp	r16, r1
    8c42:	11 05       	cpc	r17, r1
    8c44:	09 f4       	brne	.+2      	; 0x8c48 <strtod+0xc2>
    8c46:	ef c0       	rjmp	.+478    	; 0x8e26 <strtod+0x2a0>
    8c48:	22 96       	adiw	r28, 0x02	; 2
    8c4a:	f8 01       	movw	r30, r16
    8c4c:	d1 83       	std	Z+1, r29	; 0x01
    8c4e:	c0 83       	st	Z, r28
    8c50:	ea c0       	rjmp	.+468    	; 0x8e26 <strtod+0x2a0>
    8c52:	60 e0       	ldi	r22, 0x00	; 0
    8c54:	70 e0       	ldi	r23, 0x00	; 0
    8c56:	cb 01       	movw	r24, r22
    8c58:	e1 2c       	mov	r14, r1
    8c5a:	f1 2c       	mov	r15, r1
    8c5c:	ec 2d       	mov	r30, r12
    8c5e:	e0 53       	subi	r30, 0x30	; 48
    8c60:	ea 30       	cpi	r30, 0x0A	; 10
    8c62:	48 f5       	brcc	.+82     	; 0x8cb6 <strtod+0x130>
    8c64:	fd 2d       	mov	r31, r13
    8c66:	f2 60       	ori	r31, 0x02	; 2
    8c68:	2d 2d       	mov	r18, r13
    8c6a:	28 70       	andi	r18, 0x08	; 8
    8c6c:	d2 fe       	sbrs	r13, 2
    8c6e:	06 c0       	rjmp	.+12     	; 0x8c7c <strtod+0xf6>
    8c70:	21 11       	cpse	r18, r1
    8c72:	27 c0       	rjmp	.+78     	; 0x8cc2 <strtod+0x13c>
    8c74:	2f ef       	ldi	r18, 0xFF	; 255
    8c76:	e2 1a       	sub	r14, r18
    8c78:	f2 0a       	sbc	r15, r18
    8c7a:	23 c0       	rjmp	.+70     	; 0x8cc2 <strtod+0x13c>
    8c7c:	22 23       	and	r18, r18
    8c7e:	19 f0       	breq	.+6      	; 0x8c86 <strtod+0x100>
    8c80:	41 e0       	ldi	r20, 0x01	; 1
    8c82:	e4 1a       	sub	r14, r20
    8c84:	f1 08       	sbc	r15, r1
    8c86:	a5 e0       	ldi	r26, 0x05	; 5
    8c88:	b0 e0       	ldi	r27, 0x00	; 0
    8c8a:	9b 01       	movw	r18, r22
    8c8c:	ac 01       	movw	r20, r24
    8c8e:	0e 94 5f 43 	call	0x86be	; 0x86be <__muluhisi3>
    8c92:	66 0f       	add	r22, r22
    8c94:	77 1f       	adc	r23, r23
    8c96:	88 1f       	adc	r24, r24
    8c98:	99 1f       	adc	r25, r25
    8c9a:	6e 0f       	add	r22, r30
    8c9c:	71 1d       	adc	r23, r1
    8c9e:	81 1d       	adc	r24, r1
    8ca0:	91 1d       	adc	r25, r1
    8ca2:	68 39       	cpi	r22, 0x98	; 152
    8ca4:	e9 e9       	ldi	r30, 0x99	; 153
    8ca6:	7e 07       	cpc	r23, r30
    8ca8:	8e 07       	cpc	r24, r30
    8caa:	e9 e1       	ldi	r30, 0x19	; 25
    8cac:	9e 07       	cpc	r25, r30
    8cae:	48 f0       	brcs	.+18     	; 0x8cc2 <strtod+0x13c>
    8cb0:	fd 2d       	mov	r31, r13
    8cb2:	f6 60       	ori	r31, 0x06	; 6
    8cb4:	06 c0       	rjmp	.+12     	; 0x8cc2 <strtod+0x13c>
    8cb6:	ee 3f       	cpi	r30, 0xFE	; 254
    8cb8:	39 f4       	brne	.+14     	; 0x8cc8 <strtod+0x142>
    8cba:	d3 fc       	sbrc	r13, 3
    8cbc:	3d c0       	rjmp	.+122    	; 0x8d38 <strtod+0x1b2>
    8cbe:	fd 2d       	mov	r31, r13
    8cc0:	f8 60       	ori	r31, 0x08	; 8
    8cc2:	c9 90       	ld	r12, Y+
    8cc4:	df 2e       	mov	r13, r31
    8cc6:	ca cf       	rjmp	.-108    	; 0x8c5c <strtod+0xd6>
    8cc8:	e5 33       	cpi	r30, 0x35	; 53
    8cca:	11 f0       	breq	.+4      	; 0x8cd0 <strtod+0x14a>
    8ccc:	e5 31       	cpi	r30, 0x15	; 21
    8cce:	a1 f5       	brne	.+104    	; 0x8d38 <strtod+0x1b2>
    8cd0:	a8 81       	ld	r26, Y
    8cd2:	ad 32       	cpi	r26, 0x2D	; 45
    8cd4:	19 f4       	brne	.+6      	; 0x8cdc <strtod+0x156>
    8cd6:	f0 e1       	ldi	r31, 0x10	; 16
    8cd8:	df 2a       	or	r13, r31
    8cda:	06 c0       	rjmp	.+12     	; 0x8ce8 <strtod+0x162>
    8cdc:	ab 32       	cpi	r26, 0x2B	; 43
    8cde:	21 f0       	breq	.+8      	; 0x8ce8 <strtod+0x162>
    8ce0:	21 96       	adiw	r28, 0x01	; 1
    8ce2:	21 e0       	ldi	r18, 0x01	; 1
    8ce4:	30 e0       	ldi	r19, 0x00	; 0
    8ce6:	04 c0       	rjmp	.+8      	; 0x8cf0 <strtod+0x16a>
    8ce8:	a9 81       	ldd	r26, Y+1	; 0x01
    8cea:	22 96       	adiw	r28, 0x02	; 2
    8cec:	22 e0       	ldi	r18, 0x02	; 2
    8cee:	30 e0       	ldi	r19, 0x00	; 0
    8cf0:	a0 53       	subi	r26, 0x30	; 48
    8cf2:	aa 30       	cpi	r26, 0x0A	; 10
    8cf4:	18 f0       	brcs	.+6      	; 0x8cfc <strtod+0x176>
    8cf6:	c2 1b       	sub	r28, r18
    8cf8:	d3 0b       	sbc	r29, r19
    8cfa:	1e c0       	rjmp	.+60     	; 0x8d38 <strtod+0x1b2>
    8cfc:	fe 01       	movw	r30, r28
    8cfe:	20 e0       	ldi	r18, 0x00	; 0
    8d00:	30 e0       	ldi	r19, 0x00	; 0
    8d02:	20 38       	cpi	r18, 0x80	; 128
    8d04:	4c e0       	ldi	r20, 0x0C	; 12
    8d06:	34 07       	cpc	r19, r20
    8d08:	5c f4       	brge	.+22     	; 0x8d20 <strtod+0x19a>
    8d0a:	a9 01       	movw	r20, r18
    8d0c:	44 0f       	add	r20, r20
    8d0e:	55 1f       	adc	r21, r21
    8d10:	44 0f       	add	r20, r20
    8d12:	55 1f       	adc	r21, r21
    8d14:	24 0f       	add	r18, r20
    8d16:	35 1f       	adc	r19, r21
    8d18:	22 0f       	add	r18, r18
    8d1a:	33 1f       	adc	r19, r19
    8d1c:	2a 0f       	add	r18, r26
    8d1e:	31 1d       	adc	r19, r1
    8d20:	a1 91       	ld	r26, Z+
    8d22:	a0 53       	subi	r26, 0x30	; 48
    8d24:	ef 01       	movw	r28, r30
    8d26:	aa 30       	cpi	r26, 0x0A	; 10
    8d28:	60 f3       	brcs	.-40     	; 0x8d02 <strtod+0x17c>
    8d2a:	d4 fe       	sbrs	r13, 4
    8d2c:	03 c0       	rjmp	.+6      	; 0x8d34 <strtod+0x1ae>
    8d2e:	31 95       	neg	r19
    8d30:	21 95       	neg	r18
    8d32:	31 09       	sbc	r19, r1
    8d34:	e2 0e       	add	r14, r18
    8d36:	f3 1e       	adc	r15, r19
    8d38:	d1 fe       	sbrs	r13, 1
    8d3a:	07 c0       	rjmp	.+14     	; 0x8d4a <strtod+0x1c4>
    8d3c:	01 15       	cp	r16, r1
    8d3e:	11 05       	cpc	r17, r1
    8d40:	21 f0       	breq	.+8      	; 0x8d4a <strtod+0x1c4>
    8d42:	21 97       	sbiw	r28, 0x01	; 1
    8d44:	f8 01       	movw	r30, r16
    8d46:	d1 83       	std	Z+1, r29	; 0x01
    8d48:	c0 83       	st	Z, r28
    8d4a:	0e 94 27 41 	call	0x824e	; 0x824e <__floatunsisf>
    8d4e:	2d 2d       	mov	r18, r13
    8d50:	23 70       	andi	r18, 0x03	; 3
    8d52:	23 30       	cpi	r18, 0x03	; 3
    8d54:	29 f0       	breq	.+10     	; 0x8d60 <strtod+0x1da>
    8d56:	16 2f       	mov	r17, r22
    8d58:	d7 2f       	mov	r29, r23
    8d5a:	c8 2f       	mov	r28, r24
    8d5c:	09 2f       	mov	r16, r25
    8d5e:	07 c0       	rjmp	.+14     	; 0x8d6e <strtod+0x1e8>
    8d60:	dc 01       	movw	r26, r24
    8d62:	cb 01       	movw	r24, r22
    8d64:	b0 58       	subi	r27, 0x80	; 128
    8d66:	18 2f       	mov	r17, r24
    8d68:	d9 2f       	mov	r29, r25
    8d6a:	ca 2f       	mov	r28, r26
    8d6c:	0b 2f       	mov	r16, r27
    8d6e:	20 e0       	ldi	r18, 0x00	; 0
    8d70:	30 e0       	ldi	r19, 0x00	; 0
    8d72:	a9 01       	movw	r20, r18
    8d74:	61 2f       	mov	r22, r17
    8d76:	7d 2f       	mov	r23, r29
    8d78:	8c 2f       	mov	r24, r28
    8d7a:	90 2f       	mov	r25, r16
    8d7c:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    8d80:	88 23       	and	r24, r24
    8d82:	09 f4       	brne	.+2      	; 0x8d86 <strtod+0x200>
    8d84:	54 c0       	rjmp	.+168    	; 0x8e2e <strtod+0x2a8>
    8d86:	f7 fe       	sbrs	r15, 7
    8d88:	08 c0       	rjmp	.+16     	; 0x8d9a <strtod+0x214>
    8d8a:	f1 94       	neg	r15
    8d8c:	e1 94       	neg	r14
    8d8e:	f1 08       	sbc	r15, r1
    8d90:	36 e8       	ldi	r19, 0x86	; 134
    8d92:	c3 2e       	mov	r12, r19
    8d94:	32 e0       	ldi	r19, 0x02	; 2
    8d96:	d3 2e       	mov	r13, r19
    8d98:	04 c0       	rjmp	.+8      	; 0x8da2 <strtod+0x21c>
    8d9a:	2e e6       	ldi	r18, 0x6E	; 110
    8d9c:	c2 2e       	mov	r12, r18
    8d9e:	22 e0       	ldi	r18, 0x02	; 2
    8da0:	d2 2e       	mov	r13, r18
    8da2:	46 01       	movw	r8, r12
    8da4:	f8 e1       	ldi	r31, 0x18	; 24
    8da6:	8f 1a       	sub	r8, r31
    8da8:	91 08       	sbc	r9, r1
    8daa:	90 e2       	ldi	r25, 0x20	; 32
    8dac:	a9 2e       	mov	r10, r25
    8dae:	b1 2c       	mov	r11, r1
    8db0:	15 c0       	rjmp	.+42     	; 0x8ddc <strtod+0x256>
    8db2:	f6 01       	movw	r30, r12
    8db4:	45 91       	lpm	r20, Z+
    8db6:	55 91       	lpm	r21, Z+
    8db8:	65 91       	lpm	r22, Z+
    8dba:	74 91       	lpm	r23, Z+
    8dbc:	24 2f       	mov	r18, r20
    8dbe:	35 2f       	mov	r19, r21
    8dc0:	46 2f       	mov	r20, r22
    8dc2:	57 2f       	mov	r21, r23
    8dc4:	61 2f       	mov	r22, r17
    8dc6:	7d 2f       	mov	r23, r29
    8dc8:	8c 2f       	mov	r24, r28
    8dca:	90 2f       	mov	r25, r16
    8dcc:	0e 94 95 42 	call	0x852a	; 0x852a <__mulsf3>
    8dd0:	16 2f       	mov	r17, r22
    8dd2:	d7 2f       	mov	r29, r23
    8dd4:	c8 2f       	mov	r28, r24
    8dd6:	09 2f       	mov	r16, r25
    8dd8:	ea 18       	sub	r14, r10
    8dda:	fb 08       	sbc	r15, r11
    8ddc:	ea 14       	cp	r14, r10
    8dde:	fb 04       	cpc	r15, r11
    8de0:	44 f7       	brge	.-48     	; 0x8db2 <strtod+0x22c>
    8de2:	24 e0       	ldi	r18, 0x04	; 4
    8de4:	c2 1a       	sub	r12, r18
    8de6:	d1 08       	sbc	r13, r1
    8de8:	b5 94       	asr	r11
    8dea:	a7 94       	ror	r10
    8dec:	c8 14       	cp	r12, r8
    8dee:	d9 04       	cpc	r13, r9
    8df0:	a9 f7       	brne	.-22     	; 0x8ddc <strtod+0x256>
    8df2:	61 2f       	mov	r22, r17
    8df4:	7d 2f       	mov	r23, r29
    8df6:	8c 2f       	mov	r24, r28
    8df8:	90 2f       	mov	r25, r16
    8dfa:	28 2f       	mov	r18, r24
    8dfc:	22 0f       	add	r18, r18
    8dfe:	29 2f       	mov	r18, r25
    8e00:	22 1f       	adc	r18, r18
    8e02:	2f 3f       	cpi	r18, 0xFF	; 255
    8e04:	39 f0       	breq	.+14     	; 0x8e14 <strtod+0x28e>
    8e06:	20 e0       	ldi	r18, 0x00	; 0
    8e08:	30 e0       	ldi	r19, 0x00	; 0
    8e0a:	a9 01       	movw	r20, r18
    8e0c:	0e 94 87 40 	call	0x810e	; 0x810e <__cmpsf2>
    8e10:	81 11       	cpse	r24, r1
    8e12:	0d c0       	rjmp	.+26     	; 0x8e2e <strtod+0x2a8>
    8e14:	82 e2       	ldi	r24, 0x22	; 34
    8e16:	90 e0       	ldi	r25, 0x00	; 0
    8e18:	90 93 97 11 	sts	0x1197, r25
    8e1c:	80 93 96 11 	sts	0x1196, r24
    8e20:	06 c0       	rjmp	.+12     	; 0x8e2e <strtod+0x2a8>
    8e22:	0f ef       	ldi	r16, 0xFF	; 255
    8e24:	04 c0       	rjmp	.+8      	; 0x8e2e <strtod+0x2a8>
    8e26:	10 e0       	ldi	r17, 0x00	; 0
    8e28:	d0 e0       	ldi	r29, 0x00	; 0
    8e2a:	c0 ec       	ldi	r28, 0xC0	; 192
    8e2c:	0f e7       	ldi	r16, 0x7F	; 127
    8e2e:	61 2f       	mov	r22, r17
    8e30:	7d 2f       	mov	r23, r29
    8e32:	8c 2f       	mov	r24, r28
    8e34:	90 2f       	mov	r25, r16
    8e36:	df 91       	pop	r29
    8e38:	cf 91       	pop	r28
    8e3a:	1f 91       	pop	r17
    8e3c:	0f 91       	pop	r16
    8e3e:	ff 90       	pop	r15
    8e40:	ef 90       	pop	r14
    8e42:	df 90       	pop	r13
    8e44:	cf 90       	pop	r12
    8e46:	bf 90       	pop	r11
    8e48:	af 90       	pop	r10
    8e4a:	9f 90       	pop	r9
    8e4c:	8f 90       	pop	r8
    8e4e:	08 95       	ret

00008e50 <__ctype_isfalse>:
    8e50:	99 27       	eor	r25, r25
    8e52:	88 27       	eor	r24, r24

00008e54 <__ctype_istrue>:
    8e54:	08 95       	ret

00008e56 <strncasecmp_P>:
    8e56:	fb 01       	movw	r30, r22
    8e58:	dc 01       	movw	r26, r24
    8e5a:	41 50       	subi	r20, 0x01	; 1
    8e5c:	50 40       	sbci	r21, 0x00	; 0
    8e5e:	88 f0       	brcs	.+34     	; 0x8e82 <strncasecmp_P+0x2c>
    8e60:	8d 91       	ld	r24, X+
    8e62:	81 34       	cpi	r24, 0x41	; 65
    8e64:	1c f0       	brlt	.+6      	; 0x8e6c <strncasecmp_P+0x16>
    8e66:	8b 35       	cpi	r24, 0x5B	; 91
    8e68:	0c f4       	brge	.+2      	; 0x8e6c <strncasecmp_P+0x16>
    8e6a:	80 5e       	subi	r24, 0xE0	; 224
    8e6c:	65 91       	lpm	r22, Z+
    8e6e:	61 34       	cpi	r22, 0x41	; 65
    8e70:	1c f0       	brlt	.+6      	; 0x8e78 <strncasecmp_P+0x22>
    8e72:	6b 35       	cpi	r22, 0x5B	; 91
    8e74:	0c f4       	brge	.+2      	; 0x8e78 <strncasecmp_P+0x22>
    8e76:	60 5e       	subi	r22, 0xE0	; 224
    8e78:	86 1b       	sub	r24, r22
    8e7a:	61 11       	cpse	r22, r1
    8e7c:	71 f3       	breq	.-36     	; 0x8e5a <strncasecmp_P+0x4>
    8e7e:	99 0b       	sbc	r25, r25
    8e80:	08 95       	ret
    8e82:	88 1b       	sub	r24, r24
    8e84:	fc cf       	rjmp	.-8      	; 0x8e7e <strncasecmp_P+0x28>

00008e86 <strrev>:
    8e86:	dc 01       	movw	r26, r24
    8e88:	fc 01       	movw	r30, r24
    8e8a:	67 2f       	mov	r22, r23
    8e8c:	71 91       	ld	r23, Z+
    8e8e:	77 23       	and	r23, r23
    8e90:	e1 f7       	brne	.-8      	; 0x8e8a <strrev+0x4>
    8e92:	32 97       	sbiw	r30, 0x02	; 2
    8e94:	04 c0       	rjmp	.+8      	; 0x8e9e <strrev+0x18>
    8e96:	7c 91       	ld	r23, X
    8e98:	6d 93       	st	X+, r22
    8e9a:	70 83       	st	Z, r23
    8e9c:	62 91       	ld	r22, -Z
    8e9e:	ae 17       	cp	r26, r30
    8ea0:	bf 07       	cpc	r27, r31
    8ea2:	c8 f3       	brcs	.-14     	; 0x8e96 <strrev+0x10>
    8ea4:	08 95       	ret

00008ea6 <__do_global_dtors>:
    8ea6:	12 e0       	ldi	r17, 0x02	; 2
    8ea8:	c2 e9       	ldi	r28, 0x92	; 146
    8eaa:	d2 e0       	ldi	r29, 0x02	; 2
    8eac:	00 e0       	ldi	r16, 0x00	; 0
    8eae:	06 c0       	rjmp	.+12     	; 0x8ebc <__do_global_dtors+0x16>
    8eb0:	22 97       	sbiw	r28, 0x02	; 2
    8eb2:	01 09       	sbc	r16, r1
    8eb4:	fe 01       	movw	r30, r28
    8eb6:	0b bf       	out	0x3b, r16	; 59
    8eb8:	0e 94 f8 43 	call	0x87f0	; 0x87f0 <__tablejump_elpm__>
    8ebc:	c4 39       	cpi	r28, 0x94	; 148
    8ebe:	d1 07       	cpc	r29, r17
    8ec0:	80 e0       	ldi	r24, 0x00	; 0
    8ec2:	08 07       	cpc	r16, r24
    8ec4:	a9 f7       	brne	.-22     	; 0x8eb0 <__do_global_dtors+0xa>
    8ec6:	f8 94       	cli

00008ec8 <__stop_program>:
    8ec8:	ff cf       	rjmp	.-2      	; 0x8ec8 <__stop_program>
